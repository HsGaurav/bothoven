
master_bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000021e  00800200  00002e20  00002eb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00002670  0080041e  0080041e  000030d2  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000030d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006bb  00000000  00000000  000030f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002608  00000000  00000000  000037ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000040d  00000000  00000000  00005db5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000021e5  00000000  00000000  000061c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004c0  00000000  00000000  000083a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006a3  00000000  00000000  00008868  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000106b  00000000  00000000  00008f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  00009f76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 4c 04 	jmp	0x898	; 0x898 <__vector_5>
      18:	0c 94 27 04 	jmp	0x84e	; 0x84e <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__vector_51>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 e2       	ldi	r30, 0x20	; 32
      fc:	fe e2       	ldi	r31, 0x2E	; 46
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 31       	cpi	r26, 0x1E	; 30
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	1a e2       	ldi	r17, 0x2A	; 42
     110:	ae e1       	ldi	r26, 0x1E	; 30
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ae 38       	cpi	r26, 0x8E	; 142
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <main>
     122:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <IsEmpty>:
void EmptyQueue(struct Queue *Q) {
	while(Q->head!=NULL)
		DeQueue(Q);
}

int IsEmpty(struct Queue *Q){
     12a:	fc 01       	movw	r30, r24
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	91 81       	ldd	r25, Z+1	; 0x01
     134:	89 2b       	or	r24, r25
     136:	11 f4       	brne	.+4      	; 0x13c <IsEmpty+0x12>
     138:	21 e0       	ldi	r18, 0x01	; 1
     13a:	30 e0       	ldi	r19, 0x00	; 0
	return (Q->head==NULL) ? 1 : 0 ;
}
     13c:	c9 01       	movw	r24, r18
     13e:	08 95       	ret

00000140 <initMap>:
	*Output: integer-> 0 if everything was successful
	*Logic: Initializes the map with the know map.
	*		Required only at the begining.
	*Example Call: initMap();
*/
int initMap () {
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
	//Initializes each nodes as unconnected
	for (int i = 0; i < size; i++)
     148:	62 e6       	ldi	r22, 0x62	; 98
     14a:	70 e0       	ldi	r23, 0x00	; 0
		for (int j = 0; j < size; j++)
			map [i][j] = INF;
     14c:	40 ec       	ldi	r20, 0xC0	; 192
     14e:	57 e2       	ldi	r21, 0x27	; 39
     150:	10 c0       	rjmp	.+32     	; 0x172 <initMap+0x32>
     152:	41 93       	st	Z+, r20
     154:	51 93       	st	Z+, r21
	*Example Call: initMap();
*/
int initMap () {
	//Initializes each nodes as unconnected
	for (int i = 0; i < size; i++)
		for (int j = 0; j < size; j++)
     156:	01 96       	adiw	r24, 0x01	; 1
     158:	81 33       	cpi	r24, 0x31	; 49
     15a:	91 05       	cpc	r25, r1
     15c:	d1 f7       	brne	.-12     	; 0x152 <initMap+0x12>
	*		Required only at the begining.
	*Example Call: initMap();
*/
int initMap () {
	//Initializes each nodes as unconnected
	for (int i = 0; i < size; i++)
     15e:	2f 5f       	subi	r18, 0xFF	; 255
     160:	3f 4f       	sbci	r19, 0xFF	; 255
     162:	21 33       	cpi	r18, 0x31	; 49
     164:	31 05       	cpc	r19, r1
     166:	29 f4       	brne	.+10     	; 0x172 <initMap+0x32>
     168:	41 e0       	ldi	r20, 0x01	; 1
     16a:	50 e0       	ldi	r21, 0x00	; 0
		for (int j = 0; j < size; j++)
			map [i][j] = INF;
	//Connects nodes 1 through 24 in sequential order
	for (int i = 1; i < 25; i++)
     16c:	62 e6       	ldi	r22, 0x62	; 98
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	29 c0       	rjmp	.+82     	; 0x1c4 <initMap+0x84>
	*		Required only at the begining.
	*Example Call: initMap();
*/
int initMap () {
	//Initializes each nodes as unconnected
	for (int i = 0; i < size; i++)
     172:	26 9f       	mul	r18, r22
     174:	f0 01       	movw	r30, r0
     176:	27 9f       	mul	r18, r23
     178:	f0 0d       	add	r31, r0
     17a:	36 9f       	mul	r19, r22
     17c:	f0 0d       	add	r31, r0
     17e:	11 24       	eor	r1, r1
     180:	e8 5c       	subi	r30, 0xC8	; 200
     182:	fb 4f       	sbci	r31, 0xFB	; 251
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	e4 cf       	rjmp	.-56     	; 0x152 <initMap+0x12>
		for (int j = 0; j < size; j++)
			map [i][j] = INF;
	//Connects nodes 1 through 24 in sequential order
	for (int i = 1; i < 25; i++)
		for (int j = 1; j < 25; j++)
			if (abs(i-j) == 1)
     18a:	ca 01       	movw	r24, r20
     18c:	82 1b       	sub	r24, r18
     18e:	93 0b       	sbc	r25, r19
     190:	97 ff       	sbrs	r25, 7
     192:	03 c0       	rjmp	.+6      	; 0x19a <initMap+0x5a>
     194:	90 95       	com	r25
     196:	81 95       	neg	r24
     198:	9f 4f       	sbci	r25, 0xFF	; 255
     19a:	81 30       	cpi	r24, 0x01	; 1
     19c:	91 05       	cpc	r25, r1
     19e:	11 f4       	brne	.+4      	; 0x1a4 <initMap+0x64>
				map[i][j] = 1;
     1a0:	91 83       	std	Z+1, r25	; 0x01
     1a2:	80 83       	st	Z, r24
	for (int i = 0; i < size; i++)
		for (int j = 0; j < size; j++)
			map [i][j] = INF;
	//Connects nodes 1 through 24 in sequential order
	for (int i = 1; i < 25; i++)
		for (int j = 1; j < 25; j++)
     1a4:	2f 5f       	subi	r18, 0xFF	; 255
     1a6:	3f 4f       	sbci	r19, 0xFF	; 255
     1a8:	32 96       	adiw	r30, 0x02	; 2
     1aa:	29 31       	cpi	r18, 0x19	; 25
     1ac:	31 05       	cpc	r19, r1
     1ae:	69 f7       	brne	.-38     	; 0x18a <initMap+0x4a>
	//Initializes each nodes as unconnected
	for (int i = 0; i < size; i++)
		for (int j = 0; j < size; j++)
			map [i][j] = INF;
	//Connects nodes 1 through 24 in sequential order
	for (int i = 1; i < 25; i++)
     1b0:	4f 5f       	subi	r20, 0xFF	; 255
     1b2:	5f 4f       	sbci	r21, 0xFF	; 255
     1b4:	49 31       	cpi	r20, 0x19	; 25
     1b6:	51 05       	cpc	r21, r1
     1b8:	29 f4       	brne	.+10     	; 0x1c4 <initMap+0x84>
     1ba:	49 e1       	ldi	r20, 0x19	; 25
     1bc:	50 e0       	ldi	r21, 0x00	; 0
		for (int j = 1; j < 25; j++)
			if (abs(i-j) == 1)
				map[i][j] = 1;
	//Connects nodes 25 through 38 in sequential order
	for (int i = 25; i < 39; i++)
     1be:	62 e6       	ldi	r22, 0x62	; 98
     1c0:	70 e0       	ldi	r23, 0x00	; 0
     1c2:	24 c0       	rjmp	.+72     	; 0x20c <initMap+0xcc>
	//Initializes each nodes as unconnected
	for (int i = 0; i < size; i++)
		for (int j = 0; j < size; j++)
			map [i][j] = INF;
	//Connects nodes 1 through 24 in sequential order
	for (int i = 1; i < 25; i++)
     1c4:	46 9f       	mul	r20, r22
     1c6:	f0 01       	movw	r30, r0
     1c8:	47 9f       	mul	r20, r23
     1ca:	f0 0d       	add	r31, r0
     1cc:	56 9f       	mul	r21, r22
     1ce:	f0 0d       	add	r31, r0
     1d0:	11 24       	eor	r1, r1
     1d2:	e6 5c       	subi	r30, 0xC6	; 198
     1d4:	fb 4f       	sbci	r31, 0xFB	; 251
     1d6:	21 e0       	ldi	r18, 0x01	; 1
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	d7 cf       	rjmp	.-82     	; 0x18a <initMap+0x4a>
			if (abs(i-j) == 1)
				map[i][j] = 1;
	//Connects nodes 25 through 38 in sequential order
	for (int i = 25; i < 39; i++)
		for (int j = 25; j < 39; j++)
			if (abs(i-j) == 1)
     1dc:	ca 01       	movw	r24, r20
     1de:	82 1b       	sub	r24, r18
     1e0:	93 0b       	sbc	r25, r19
     1e2:	97 ff       	sbrs	r25, 7
     1e4:	03 c0       	rjmp	.+6      	; 0x1ec <initMap+0xac>
     1e6:	90 95       	com	r25
     1e8:	81 95       	neg	r24
     1ea:	9f 4f       	sbci	r25, 0xFF	; 255
     1ec:	81 30       	cpi	r24, 0x01	; 1
     1ee:	91 05       	cpc	r25, r1
     1f0:	11 f4       	brne	.+4      	; 0x1f6 <initMap+0xb6>
				map[i][j] = 1;
     1f2:	91 83       	std	Z+1, r25	; 0x01
     1f4:	80 83       	st	Z, r24
		for (int j = 1; j < 25; j++)
			if (abs(i-j) == 1)
				map[i][j] = 1;
	//Connects nodes 25 through 38 in sequential order
	for (int i = 25; i < 39; i++)
		for (int j = 25; j < 39; j++)
     1f6:	2f 5f       	subi	r18, 0xFF	; 255
     1f8:	3f 4f       	sbci	r19, 0xFF	; 255
     1fa:	32 96       	adiw	r30, 0x02	; 2
     1fc:	27 32       	cpi	r18, 0x27	; 39
     1fe:	31 05       	cpc	r19, r1
     200:	69 f7       	brne	.-38     	; 0x1dc <initMap+0x9c>
	for (int i = 1; i < 25; i++)
		for (int j = 1; j < 25; j++)
			if (abs(i-j) == 1)
				map[i][j] = 1;
	//Connects nodes 25 through 38 in sequential order
	for (int i = 25; i < 39; i++)
     202:	4f 5f       	subi	r20, 0xFF	; 255
     204:	5f 4f       	sbci	r21, 0xFF	; 255
     206:	47 32       	cpi	r20, 0x27	; 39
     208:	51 05       	cpc	r21, r1
     20a:	61 f0       	breq	.+24     	; 0x224 <initMap+0xe4>
     20c:	46 9f       	mul	r20, r22
     20e:	f0 01       	movw	r30, r0
     210:	47 9f       	mul	r20, r23
     212:	f0 0d       	add	r31, r0
     214:	56 9f       	mul	r21, r22
     216:	f0 0d       	add	r31, r0
     218:	11 24       	eor	r1, r1
     21a:	e6 59       	subi	r30, 0x96	; 150
     21c:	fb 4f       	sbci	r31, 0xFB	; 251
     21e:	29 e1       	ldi	r18, 0x19	; 25
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	dc cf       	rjmp	.-72     	; 0x1dc <initMap+0x9c>
		for (int j = 25; j < 39; j++)
			if (abs(i-j) == 1)
				map[i][j] = 1;
	//Manually connecting nodes that are connected in the map
	//Replace it with soft code if you ever find a method
	map[35][42] = map[42][35] = 1;
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	90 93 93 14 	sts	0x1493, r25
     22c:	80 93 92 14 	sts	0x1492, r24
     230:	90 93 f3 11 	sts	0x11F3, r25
     234:	80 93 f2 11 	sts	0x11F2, r24
	map[42][41] = map[41][42] = 1;
     238:	90 93 3f 14 	sts	0x143F, r25
     23c:	80 93 3e 14 	sts	0x143E, r24
     240:	90 93 9f 14 	sts	0x149F, r25
     244:	80 93 9e 14 	sts	0x149E, r24
	map[41][32] = map[32][41] = 1;
     248:	90 93 cb 10 	sts	0x10CB, r25
     24c:	80 93 ca 10 	sts	0x10CA, r24
     250:	90 93 2b 14 	sts	0x142B, r25
     254:	80 93 2a 14 	sts	0x142A, r24
	map[32][48] = map[48][32] = 1;
     258:	90 93 d9 16 	sts	0x16D9, r25
     25c:	80 93 d8 16 	sts	0x16D8, r24
     260:	90 93 d9 10 	sts	0x10D9, r25
     264:	80 93 d8 10 	sts	0x10D8, r24
	map[47][31] = map[31][47] = 1;
     268:	90 93 75 10 	sts	0x1075, r25
     26c:	80 93 74 10 	sts	0x1074, r24
     270:	90 93 75 16 	sts	0x1675, r25
     274:	80 93 74 16 	sts	0x1674, r24
	map[31][40] = map[40][31] = 1;
     278:	90 93 c7 13 	sts	0x13C7, r25
     27c:	80 93 c6 13 	sts	0x13C6, r24
     280:	90 93 67 10 	sts	0x1067, r25
     284:	80 93 66 10 	sts	0x1066, r24
	map[40][39] = map[39][40] = 1;
     288:	90 93 77 13 	sts	0x1377, r25
     28c:	80 93 76 13 	sts	0x1376, r24
     290:	90 93 d7 13 	sts	0x13D7, r25
     294:	80 93 d6 13 	sts	0x13D6, r24
	map[39][28] = map[28][39] = 1;
     298:	90 93 3f 0f 	sts	0x0F3F, r25
     29c:	80 93 3e 0f 	sts	0x0F3E, r24
     2a0:	90 93 5f 13 	sts	0x135F, r25
     2a4:	80 93 5e 13 	sts	0x135E, r24
	map[28][46] = map[46][28] = 1;
     2a8:	90 93 0d 16 	sts	0x160D, r25
     2ac:	80 93 0c 16 	sts	0x160C, r24
     2b0:	90 93 4d 0f 	sts	0x0F4D, r25
     2b4:	80 93 4c 0f 	sts	0x0F4C, r24
	map[45][27] = map[27][45] = 1;
     2b8:	90 93 e9 0e 	sts	0x0EE9, r25
     2bc:	80 93 e8 0e 	sts	0x0EE8, r24
     2c0:	90 93 a9 15 	sts	0x15A9, r25
     2c4:	80 93 a8 15 	sts	0x15A8, r24
	map[27][38] = map[38][27] = 1;
     2c8:	90 93 fb 12 	sts	0x12FB, r25
     2cc:	80 93 fa 12 	sts	0x12FA, r24
     2d0:	90 93 db 0e 	sts	0x0EDB, r25
     2d4:	80 93 da 0e 	sts	0x0EDA, r24
	map[36][25] = map[25][36] = 1;
     2d8:	90 93 13 0e 	sts	0x0E13, r25
     2dc:	80 93 12 0e 	sts	0x0E12, r24
     2e0:	90 93 33 12 	sts	0x1233, r25
     2e4:	80 93 32 12 	sts	0x1232, r24
	map[36][44] = map[44][36] = 1;
     2e8:	90 93 59 15 	sts	0x1559, r25
     2ec:	80 93 58 15 	sts	0x1558, r24
     2f0:	90 93 59 12 	sts	0x1259, r25
     2f4:	80 93 58 12 	sts	0x1258, r24
	map[43][35] = map[35][43] = 1;
     2f8:	90 93 f5 11 	sts	0x11F5, r25
     2fc:	80 93 f4 11 	sts	0x11F4, r24
     300:	90 93 f5 14 	sts	0x14F5, r25
     304:	80 93 f4 14 	sts	0x14F4, r24
	map[24][1]  = map[1][24]  = 1;
     308:	90 93 cb 04 	sts	0x04CB, r25
     30c:	80 93 ca 04 	sts	0x04CA, r24
     310:	90 93 6b 0d 	sts	0x0D6B, r25
     314:	80 93 6a 0d 	sts	0x0D6A, r24
	map[23][44] = map[44][23] = 1;
     318:	90 93 3f 15 	sts	0x153F, r25
     31c:	80 93 3e 15 	sts	0x153E, r24
     320:	90 93 5f 0d 	sts	0x0D5F, r25
     324:	80 93 5e 0d 	sts	0x0D5E, r24
	map[23][43] = map[43][23] = 1;
     328:	90 93 dd 14 	sts	0x14DD, r25
     32c:	80 93 dc 14 	sts	0x14DC, r24
     330:	90 93 5d 0d 	sts	0x0D5D, r25
     334:	80 93 5c 0d 	sts	0x0D5C, r24
	map[19][34] = map[34][19] = 1;
     338:	90 93 63 11 	sts	0x1163, r25
     33c:	80 93 62 11 	sts	0x1162, r24
     340:	90 93 c3 0b 	sts	0x0BC3, r25
     344:	80 93 c2 0b 	sts	0x0BC2, r24
	map[19][33] = map[33][19] = 1;
     348:	90 93 01 11 	sts	0x1101, r25
     34c:	80 93 00 11 	sts	0x1100, r24
     350:	90 93 c1 0b 	sts	0x0BC1, r25
     354:	80 93 c0 0b 	sts	0x0BC0, r24
	map[15][48] = map[48][15] = 1;
     358:	90 93 b7 16 	sts	0x16B7, r25
     35c:	80 93 b6 16 	sts	0x16B6, r24
     360:	90 93 57 0a 	sts	0x0A57, r25
     364:	80 93 56 0a 	sts	0x0A56, r24
	map[15][47] = map[47][15] = 1;
     368:	90 93 55 16 	sts	0x1655, r25
     36c:	80 93 54 16 	sts	0x1654, r24
     370:	90 93 55 0a 	sts	0x0A55, r25
     374:	80 93 54 0a 	sts	0x0A54, r24
	map[11][30] = map[30][11] = 1;
     378:	90 93 cb 0f 	sts	0x0FCB, r25
     37c:	80 93 ca 0f 	sts	0x0FCA, r24
     380:	90 93 ab 08 	sts	0x08AB, r25
     384:	80 93 aa 08 	sts	0x08AA, r24
	map[11][29] = map[29][11] = 1;
     388:	90 93 69 0f 	sts	0x0F69, r25
     38c:	80 93 68 0f 	sts	0x0F68, r24
     390:	90 93 a9 08 	sts	0x08A9, r25
     394:	80 93 a8 08 	sts	0x08A8, r24
	map[7][46]  = map[46][7]  = 1;
     398:	90 93 e3 15 	sts	0x15E3, r25
     39c:	80 93 e2 15 	sts	0x15E2, r24
     3a0:	90 93 43 07 	sts	0x0743, r25
     3a4:	80 93 42 07 	sts	0x0742, r24
	map[7][45]  = map[45][7]  = 1;
     3a8:	90 93 81 15 	sts	0x1581, r25
     3ac:	80 93 80 15 	sts	0x1580, r24
     3b0:	90 93 41 07 	sts	0x0741, r25
     3b4:	80 93 40 07 	sts	0x0740, r24
	map[3][26]  = map[26][3]  = 1;
     3b8:	90 93 33 0e 	sts	0x0E33, r25
     3bc:	80 93 32 0e 	sts	0x0E32, r24
     3c0:	90 93 93 05 	sts	0x0593, r25
     3c4:	80 93 92 05 	sts	0x0592, r24
	map[3][25]  = map[25][3]  = 1;
     3c8:	90 93 d1 0d 	sts	0x0DD1, r25
     3cc:	80 93 d0 0d 	sts	0x0DD0, r24
     3d0:	90 93 91 05 	sts	0x0591, r25
     3d4:	80 93 90 05 	sts	0x0590, r24
	map[35][36] = map[36][35] = 1;
     3d8:	90 93 47 12 	sts	0x1247, r25
     3dc:	80 93 46 12 	sts	0x1246, r24
     3e0:	90 93 e7 11 	sts	0x11E7, r25
     3e4:	80 93 e6 11 	sts	0x11E6, r24
	map[11][12] = map[12][11] = 1;
     3e8:	90 93 e7 08 	sts	0x08E7, r25
     3ec:	80 93 e6 08 	sts	0x08E6, r24
     3f0:	90 93 87 08 	sts	0x0887, r25
     3f4:	80 93 86 08 	sts	0x0886, r24
     3f8:	e2 e0       	ldi	r30, 0x02	; 2
     3fa:	f7 e1       	ldi	r31, 0x17	; 23
	for (int i = 1; i < 25; i++)
		for (int j = 0; j < 2; j++)
			map_link[i][j] = (j == 0 ? i : -1);
     3fc:	2f ef       	ldi	r18, 0xFF	; 255
     3fe:	3f ef       	ldi	r19, 0xFF	; 255
     400:	91 83       	std	Z+1, r25	; 0x01
     402:	80 83       	st	Z, r24
     404:	33 83       	std	Z+3, r19	; 0x03
     406:	22 83       	std	Z+2, r18	; 0x02
	map[7][45]  = map[45][7]  = 1;
	map[3][26]  = map[26][3]  = 1;
	map[3][25]  = map[25][3]  = 1;
	map[35][36] = map[36][35] = 1;
	map[11][12] = map[12][11] = 1;
	for (int i = 1; i < 25; i++)
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	34 96       	adiw	r30, 0x04	; 4
     40c:	89 31       	cpi	r24, 0x19	; 25
     40e:	91 05       	cpc	r25, r1
     410:	b9 f7       	brne	.-18     	; 0x400 <initMap+0x2c0>
		for (int j = 0; j < 2; j++)
			map_link[i][j] = (j == 0 ? i : -1);
	//Manually linking nodes to notes
	//Replace hard code with a better method if and when available
	map_link[25][0] = 1;
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	90 93 63 17 	sts	0x1763, r25
     41a:	80 93 62 17 	sts	0x1762, r24
	map_link[27][0] = 5;
     41e:	85 e0       	ldi	r24, 0x05	; 5
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	90 93 6b 17 	sts	0x176B, r25
     426:	80 93 6a 17 	sts	0x176A, r24
	map_link[28][0] = 9;
     42a:	89 e0       	ldi	r24, 0x09	; 9
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	90 93 6f 17 	sts	0x176F, r25
     432:	80 93 6e 17 	sts	0x176E, r24
	map_link[30][0] = 13;
     436:	8d e0       	ldi	r24, 0x0D	; 13
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	90 93 77 17 	sts	0x1777, r25
     43e:	80 93 76 17 	sts	0x1776, r24
	map_link[31][0] = 17;
     442:	81 e1       	ldi	r24, 0x11	; 17
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	90 93 7b 17 	sts	0x177B, r25
     44a:	80 93 7a 17 	sts	0x177A, r24
	map_link[33][0] = 21;
     44e:	85 e1       	ldi	r24, 0x15	; 21
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	90 93 83 17 	sts	0x1783, r25
     456:	80 93 82 17 	sts	0x1782, r24
	map_link[26][0] = 37;
     45a:	85 e2       	ldi	r24, 0x25	; 37
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	90 93 67 17 	sts	0x1767, r25
     462:	80 93 66 17 	sts	0x1766, r24
	map_link[26][1] = 38;
     466:	86 e2       	ldi	r24, 0x26	; 38
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	90 93 69 17 	sts	0x1769, r25
     46e:	80 93 68 17 	sts	0x1768, r24
	map_link[29][0] = 39;
     472:	87 e2       	ldi	r24, 0x27	; 39
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	90 93 73 17 	sts	0x1773, r25
     47a:	80 93 72 17 	sts	0x1772, r24
	map_link[29][1] = 40;
     47e:	88 e2       	ldi	r24, 0x28	; 40
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	90 93 75 17 	sts	0x1775, r25
     486:	80 93 74 17 	sts	0x1774, r24
	map_link[32][0] = 41;
     48a:	89 e2       	ldi	r24, 0x29	; 41
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	90 93 7f 17 	sts	0x177F, r25
     492:	80 93 7e 17 	sts	0x177E, r24
	map_link[32][1] = 42;
     496:	8a e2       	ldi	r24, 0x2A	; 42
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	90 93 81 17 	sts	0x1781, r25
     49e:	80 93 80 17 	sts	0x1780, r24
     4a2:	c2 ef       	ldi	r28, 0xF2	; 242
     4a4:	d8 e1       	ldi	r29, 0x18	; 24
     4a6:	e6 e5       	ldi	r30, 0x56	; 86
     4a8:	f9 e1       	ldi	r31, 0x19	; 25
     4aa:	22 ee       	ldi	r18, 0xE2	; 226
     4ac:	3f ef       	ldi	r19, 0xFF	; 255
	
	//Storing absolute angle of every point.
	int sangle = -30;
	for (int i = 2; i < 23; i=i+2)
	{
		map_angle[i][i+1] = sangle;
     4ae:	c0 56       	subi	r28, 0x60	; 96
     4b0:	d0 40       	sbci	r29, 0x00	; 0
     4b2:	39 83       	std	Y+1, r19	; 0x01
     4b4:	28 83       	st	Y, r18
     4b6:	c0 5a       	subi	r28, 0xA0	; 160
     4b8:	df 4f       	sbci	r29, 0xFF	; 255
		map_angle[i+1][i+2] = sangle;
     4ba:	3d 83       	std	Y+5, r19	; 0x05
     4bc:	2c 83       	std	Y+4, r18	; 0x04
		if (sangle < 0)
     4be:	37 ff       	sbrs	r19, 7
     4c0:	04 c0       	rjmp	.+8      	; 0x4ca <initMap+0x38a>
		{
			map_angle[i+1][i] = sangle + 180;
     4c2:	c9 01       	movw	r24, r18
     4c4:	8c 54       	subi	r24, 0x4C	; 76
     4c6:	9f 4f       	sbci	r25, 0xFF	; 255
     4c8:	06 c0       	rjmp	.+12     	; 0x4d6 <initMap+0x396>
			map_angle[i+2][i+1] = sangle + 180;
		}
		if (sangle > 0)
     4ca:	12 16       	cp	r1, r18
     4cc:	13 06       	cpc	r1, r19
     4ce:	3c f4       	brge	.+14     	; 0x4de <initMap+0x39e>
		{
			map_angle[i+1][i] = sangle - 180;
     4d0:	c9 01       	movw	r24, r18
     4d2:	84 5b       	subi	r24, 0xB4	; 180
     4d4:	90 40       	sbci	r25, 0x00	; 0
     4d6:	99 83       	std	Y+1, r25	; 0x01
     4d8:	88 83       	st	Y, r24
			map_angle[i+2][i+1] = sangle - 180;
     4da:	91 83       	std	Z+1, r25	; 0x01
     4dc:	80 83       	st	Z, r24
		}
		sangle -= 30;
     4de:	2e 51       	subi	r18, 0x1E	; 30
     4e0:	30 40       	sbci	r19, 0x00	; 0
		if (sangle < -180)
     4e2:	8f ef       	ldi	r24, 0xFF	; 255
     4e4:	2c 34       	cpi	r18, 0x4C	; 76
     4e6:	38 07       	cpc	r19, r24
     4e8:	14 f4       	brge	.+4      	; 0x4ee <initMap+0x3ae>
     4ea:	26 e9       	ldi	r18, 0x96	; 150
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	c8 53       	subi	r28, 0x38	; 56
     4f0:	df 4f       	sbci	r29, 0xFF	; 255
     4f2:	e8 53       	subi	r30, 0x38	; 56
     4f4:	ff 4f       	sbci	r31, 0xFF	; 255
	map_link[32][0] = 41;
	map_link[32][1] = 42;
	
	//Storing absolute angle of every point.
	int sangle = -30;
	for (int i = 2; i < 23; i=i+2)
     4f6:	81 e2       	ldi	r24, 0x21	; 33
     4f8:	ca 38       	cpi	r28, 0x8A	; 138
     4fa:	d8 07       	cpc	r29, r24
     4fc:	c1 f6       	brne	.-80     	; 0x4ae <initMap+0x36e>
		if (sangle < -180)
		{
			sangle = 150;
		}
	}
	map_angle[1][2] = 0;
     4fe:	10 92 2f 18 	sts	0x182F, r1
     502:	10 92 2e 18 	sts	0x182E, r1
	map_angle[2][1] = 180;
     506:	84 eb       	ldi	r24, 0xB4	; 180
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	90 93 8f 18 	sts	0x188F, r25
     50e:	80 93 8e 18 	sts	0x188E, r24
	map_angle[1][24] = 180;
     512:	90 93 5b 18 	sts	0x185B, r25
     516:	80 93 5a 18 	sts	0x185A, r24
	map_angle[24][1] = 0;
     51a:	10 92 fb 20 	sts	0x20FB, r1
     51e:	10 92 fa 20 	sts	0x20FA, r1

	map_angle[3][25]  = -150;
     522:	6a e6       	ldi	r22, 0x6A	; 106
     524:	7f ef       	ldi	r23, 0xFF	; 255
     526:	70 93 21 19 	sts	0x1921, r23
     52a:	60 93 20 19 	sts	0x1920, r22
    map_angle[25][3]  = 30;
     52e:	4e e1       	ldi	r20, 0x1E	; 30
     530:	50 e0       	ldi	r21, 0x00	; 0
     532:	50 93 61 21 	sts	0x2161, r21
     536:	40 93 60 21 	sts	0x2160, r20
	map_angle[3][26]  = -90;
     53a:	a6 ea       	ldi	r26, 0xA6	; 166
     53c:	bf ef       	ldi	r27, 0xFF	; 255
     53e:	b0 93 23 19 	sts	0x1923, r27
     542:	a0 93 22 19 	sts	0x1922, r26
	map_angle[26][3]  = 90;
     546:	ea e5       	ldi	r30, 0x5A	; 90
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	f9 af       	std	Y+57, r31	; 0x39
     54c:	e8 af       	std	Y+56, r30	; 0x38
	map_angle[7][45]  = 150;
     54e:	26 e9       	ldi	r18, 0x96	; 150
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	30 93 d1 1a 	sts	0x1AD1, r19
     556:	20 93 d0 1a 	sts	0x1AD0, r18
	map_angle[45][7]  = -30;
     55a:	82 ee       	ldi	r24, 0xE2	; 226
     55c:	9f ef       	ldi	r25, 0xFF	; 255
     55e:	90 93 11 29 	sts	0x2911, r25
     562:	80 93 10 29 	sts	0x2910, r24
	map_angle[7][46]  = -150;
     566:	70 93 d3 1a 	sts	0x1AD3, r23
     56a:	60 93 d2 1a 	sts	0x1AD2, r22
	map_angle[46][7]  = 30;
     56e:	50 93 73 29 	sts	0x2973, r21
     572:	40 93 72 29 	sts	0x2972, r20
	map_angle[11][29] = 90;
     576:	f0 93 39 1c 	sts	0x1C39, r31
     57a:	e0 93 38 1c 	sts	0x1C38, r30
	map_angle[29][11] = -90;
     57e:	b0 93 f9 22 	sts	0x22F9, r27
     582:	a0 93 f8 22 	sts	0x22F8, r26
	map_angle[11][30] = 150;
     586:	30 93 3b 1c 	sts	0x1C3B, r19
     58a:	20 93 3a 1c 	sts	0x1C3A, r18
	map_angle[30][11] = -30;
     58e:	90 93 5b 23 	sts	0x235B, r25
     592:	80 93 5a 23 	sts	0x235A, r24
	map_angle[15][47] = 30;
     596:	50 93 e5 1d 	sts	0x1DE5, r21
     59a:	40 93 e4 1d 	sts	0x1DE4, r20
	map_angle[47][15] = -150;
     59e:	70 93 e5 29 	sts	0x29E5, r23
     5a2:	60 93 e4 29 	sts	0x29E4, r22
	map_angle[15][48] = 90;
     5a6:	f0 93 e7 1d 	sts	0x1DE7, r31
     5aa:	e0 93 e6 1d 	sts	0x1DE6, r30
	map_angle[48][15] = -90;
     5ae:	b0 93 47 2a 	sts	0x2A47, r27
     5b2:	a0 93 46 2a 	sts	0x2A46, r26
	map_angle[19][33] = -30;
     5b6:	90 93 51 1f 	sts	0x1F51, r25
     5ba:	80 93 50 1f 	sts	0x1F50, r24
	map_angle[33][19] = 150;
     5be:	30 93 91 24 	sts	0x2491, r19
     5c2:	20 93 90 24 	sts	0x2490, r18
	map_angle[19][34] = 30;
     5c6:	50 93 53 1f 	sts	0x1F53, r21
     5ca:	40 93 52 1f 	sts	0x1F52, r20
	map_angle[34][19] = -150;
     5ce:	70 93 f3 24 	sts	0x24F3, r23
     5d2:	60 93 f2 24 	sts	0x24F2, r22
	map_angle[23][43] = -90;
     5d6:	b0 93 ed 20 	sts	0x20ED, r27
     5da:	a0 93 ec 20 	sts	0x20EC, r26
	map_angle[43][23] = 90;
     5de:	f0 93 6d 28 	sts	0x286D, r31
     5e2:	e0 93 6c 28 	sts	0x286C, r30
	map_angle[23][44] = -30;
     5e6:	90 93 ef 20 	sts	0x20EF, r25
     5ea:	80 93 ee 20 	sts	0x20EE, r24
	map_angle[44][23] = 150;
     5ee:	30 93 cf 28 	sts	0x28CF, r19
     5f2:	20 93 ce 28 	sts	0x28CE, r18
	map_angle[25][26] = -30;
     5f6:	9d 83       	std	Y+5, r25	; 0x05
     5f8:	8c 83       	std	Y+4, r24	; 0x04
	map_angle[26][25] = 150;
     5fa:	30 93 ef 21 	sts	0x21EF, r19
     5fe:	20 93 ee 21 	sts	0x21EE, r18
	map_angle[29][30] = -150;
     602:	70 93 1f 23 	sts	0x231F, r23
     606:	60 93 1e 23 	sts	0x231E, r22
	map_angle[30][29] = 30;
     60a:	50 93 7f 23 	sts	0x237F, r21
     60e:	40 93 7e 23 	sts	0x237E, r20
	map_angle[35][43] = 90;
     612:	f0 93 85 25 	sts	0x2585, r31
     616:	e0 93 84 25 	sts	0x2584, r30
	map_angle[43][35] = -90;
     61a:	b0 93 85 28 	sts	0x2885, r27
     61e:	a0 93 84 28 	sts	0x2884, r26
	map_angle[36][44] = 150;
     622:	30 93 e9 25 	sts	0x25E9, r19
     626:	20 93 e8 25 	sts	0x25E8, r18
	map_angle[44][36] = -30;
     62a:	90 93 e9 28 	sts	0x28E9, r25
     62e:	80 93 e8 28 	sts	0x28E8, r24
	map_angle[27][45] = -30;
     632:	90 93 79 22 	sts	0x2279, r25
     636:	80 93 78 22 	sts	0x2278, r24
	map_angle[45][27] = 150;
     63a:	30 93 39 29 	sts	0x2939, r19
     63e:	20 93 38 29 	sts	0x2938, r18
	map_angle[28][46] = 30;
     642:	50 93 dd 22 	sts	0x22DD, r21
     646:	40 93 dc 22 	sts	0x22DC, r20
	map_angle[46][28] = -150;
     64a:	70 93 9d 29 	sts	0x299D, r23
     64e:	60 93 9c 29 	sts	0x299C, r22
	map_angle[31][47] = -150;
     652:	70 93 05 24 	sts	0x2405, r23
     656:	60 93 04 24 	sts	0x2404, r22
	map_angle[47][31] = 30;
     65a:	50 93 05 2a 	sts	0x2A05, r21
     65e:	40 93 04 2a 	sts	0x2A04, r20
	map_angle[32][48] = -90;
     662:	b0 93 69 24 	sts	0x2469, r27
     666:	a0 93 68 24 	sts	0x2468, r26
	map_angle[48][32] = 90;
     66a:	f0 93 69 2a 	sts	0x2A69, r31
     66e:	e0 93 68 2a 	sts	0x2A68, r30
	map_angle[27][38] = -150;
     672:	70 93 6b 22 	sts	0x226B, r23
     676:	60 93 6a 22 	sts	0x226A, r22
	map_angle[38][27] = 30;
     67a:	50 93 8b 26 	sts	0x268B, r21
     67e:	40 93 8a 26 	sts	0x268A, r20
	map_angle[28][39] = 150;
     682:	30 93 cf 22 	sts	0x22CF, r19
     686:	20 93 ce 22 	sts	0x22CE, r18
	map_angle[39][28] = -30;
     68a:	90 93 ef 26 	sts	0x26EF, r25
     68e:	80 93 ee 26 	sts	0x26EE, r24
	map_angle[31][40] = 90;
     692:	f0 93 f7 23 	sts	0x23F7, r31
     696:	e0 93 f6 23 	sts	0x23F6, r30
	map_angle[40][31] = -90;
     69a:	b0 93 57 27 	sts	0x2757, r27
     69e:	a0 93 56 27 	sts	0x2756, r26
	map_angle[32][41] = 30;
     6a2:	50 93 5b 24 	sts	0x245B, r21
     6a6:	40 93 5a 24 	sts	0x245A, r20
	map_angle[41][32] = -150;
     6aa:	70 93 bb 27 	sts	0x27BB, r23
     6ae:	60 93 ba 27 	sts	0x27BA, r22
	map_angle[35][42] = -30;
     6b2:	90 93 83 25 	sts	0x2583, r25
     6b6:	80 93 82 25 	sts	0x2582, r24
	map_angle[42][35] = 150;
     6ba:	30 93 23 28 	sts	0x2823, r19
     6be:	20 93 22 28 	sts	0x2822, r18
	map_angle[36][37] = -90;
     6c2:	b0 93 db 25 	sts	0x25DB, r27
     6c6:	a0 93 da 25 	sts	0x25DA, r26
	map_angle[37][36] = 90;
     6ca:	f0 93 3b 26 	sts	0x263B, r31
     6ce:	e0 93 3a 26 	sts	0x263A, r30
	map_angle[39][40] = -150;
     6d2:	70 93 07 27 	sts	0x2707, r23
     6d6:	60 93 06 27 	sts	0x2706, r22
	map_angle[40][39] = 30;
     6da:	50 93 67 27 	sts	0x2767, r21
     6de:	40 93 66 27 	sts	0x2766, r20
	map_angle[37][38] = 150;
     6e2:	30 93 3f 26 	sts	0x263F, r19
     6e6:	20 93 3e 26 	sts	0x263E, r18
	map_angle[38][37] = -30;
     6ea:	90 93 9f 26 	sts	0x269F, r25
     6ee:	80 93 9e 26 	sts	0x269E, r24
	map_angle[41][42] = 90;
     6f2:	f0 93 cf 27 	sts	0x27CF, r31
     6f6:	e0 93 ce 27 	sts	0x27CE, r30
	map_angle[42][41] = -90;
     6fa:	b0 93 2f 28 	sts	0x282F, r27
     6fe:	a0 93 2e 28 	sts	0x282E, r26
	return 0;
}
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <fCostCalc>:
	*Input: gCost and hCost (heuristic)
	*Output: Single integer which is the fCost
	*Logic: Adds gCost and hCost to return the fCost.
	*Example Call: int fCost = fCostCalc (gCost, hCost);
*/
int fCostCalc (int gCost, int heuristic) {
     70c:	68 0f       	add	r22, r24
     70e:	79 1f       	adc	r23, r25
	return gCost + heuristic;
}
     710:	cb 01       	movw	r24, r22
     712:	08 95       	ret

00000714 <extractMin>:
	*Logic: Starts index of min at -1. It then checks for all the elements in
			the open list in one scan while also checking their cost and
			updating min in the process.
	*Example Call: int min = extractMin (openList, fCost, size);
*/
int extractMin (int list[], int cost[], int Size) {
     714:	ef 92       	push	r14
     716:	ff 92       	push	r15
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	8b 01       	movw	r16, r22
     722:	7a 01       	movw	r14, r20
     724:	bc 01       	movw	r22, r24
     726:	e8 01       	movw	r28, r16
     728:	af ef       	ldi	r26, 0xFF	; 255
     72a:	bf ef       	ldi	r27, 0xFF	; 255
     72c:	40 e0       	ldi	r20, 0x00	; 0
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	1b c0       	rjmp	.+54     	; 0x768 <extractMin+0x54>
	//Think of initializing min
	int min = -1;	
	for (int i = 0; i < Size; i++) {
		if (list[i] != 0) {
     732:	fb 01       	movw	r30, r22
     734:	80 81       	ld	r24, Z
     736:	91 81       	ldd	r25, Z+1	; 0x01
     738:	89 2b       	or	r24, r25
     73a:	89 f0       	breq	.+34     	; 0x75e <extractMin+0x4a>
			if (min == -1) {
     73c:	ff ef       	ldi	r31, 0xFF	; 255
     73e:	af 3f       	cpi	r26, 0xFF	; 255
     740:	bf 07       	cpc	r27, r31
     742:	61 f0       	breq	.+24     	; 0x75c <extractMin+0x48>
				min = i;
				continue;
			}
			min = ((cost[min] < cost[i]) ? min : i);
     744:	fd 01       	movw	r30, r26
     746:	ee 0f       	add	r30, r30
     748:	ff 1f       	adc	r31, r31
     74a:	e0 0f       	add	r30, r16
     74c:	f1 1f       	adc	r31, r17
     74e:	20 81       	ld	r18, Z
     750:	31 81       	ldd	r19, Z+1	; 0x01
     752:	88 81       	ld	r24, Y
     754:	99 81       	ldd	r25, Y+1	; 0x01
     756:	28 17       	cp	r18, r24
     758:	39 07       	cpc	r19, r25
     75a:	0c f0       	brlt	.+2      	; 0x75e <extractMin+0x4a>
     75c:	da 01       	movw	r26, r20
	*Example Call: int min = extractMin (openList, fCost, size);
*/
int extractMin (int list[], int cost[], int Size) {
	//Think of initializing min
	int min = -1;	
	for (int i = 0; i < Size; i++) {
     75e:	4f 5f       	subi	r20, 0xFF	; 255
     760:	5f 4f       	sbci	r21, 0xFF	; 255
     762:	6e 5f       	subi	r22, 0xFE	; 254
     764:	7f 4f       	sbci	r23, 0xFF	; 255
     766:	22 96       	adiw	r28, 0x02	; 2
     768:	4e 15       	cp	r20, r14
     76a:	5f 05       	cpc	r21, r15
     76c:	14 f3       	brlt	.-60     	; 0x732 <extractMin+0x1e>
			}
			min = ((cost[min] < cost[i]) ? min : i);
		}
	}
	return min;
}
     76e:	cd 01       	movw	r24, r26
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	ff 90       	pop	r15
     77a:	ef 90       	pop	r14
     77c:	08 95       	ret

0000077e <reverse>:
			index is strictly less than the right one, it swaps those. It then
			increases the left pointer while decreasing the right one.
	*Example Call: reverse (arr, size);
*/
void reverse (int *Rev, int Size) {
	int j = Size-1, i = 0, temp;
     77e:	61 50       	subi	r22, 0x01	; 1
     780:	70 40       	sbci	r23, 0x00	; 0
     782:	dc 01       	movw	r26, r24
     784:	fb 01       	movw	r30, r22
     786:	ee 0f       	add	r30, r30
     788:	ff 1f       	adc	r31, r31
     78a:	ea 0f       	add	r30, r26
     78c:	fb 1f       	adc	r31, r27
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	0e c0       	rjmp	.+28     	; 0x7b0 <reverse+0x32>
	while(i < j) {
		temp = Rev[i];
     794:	2d 91       	ld	r18, X+
     796:	3c 91       	ld	r19, X
     798:	11 97       	sbiw	r26, 0x01	; 1
		Rev[i] = Rev[j];
     79a:	80 81       	ld	r24, Z
     79c:	91 81       	ldd	r25, Z+1	; 0x01
     79e:	8d 93       	st	X+, r24
     7a0:	9d 93       	st	X+, r25
		Rev[j] = temp;
     7a2:	31 83       	std	Z+1, r19	; 0x01
     7a4:	20 83       	st	Z, r18
		i++;
     7a6:	4f 5f       	subi	r20, 0xFF	; 255
     7a8:	5f 4f       	sbci	r21, 0xFF	; 255
		j--;
     7aa:	61 50       	subi	r22, 0x01	; 1
     7ac:	70 40       	sbci	r23, 0x00	; 0
     7ae:	32 97       	sbiw	r30, 0x02	; 2
			increases the left pointer while decreasing the right one.
	*Example Call: reverse (arr, size);
*/
void reverse (int *Rev, int Size) {
	int j = Size-1, i = 0, temp;
	while(i < j) {
     7b0:	46 17       	cp	r20, r22
     7b2:	57 07       	cpc	r21, r23
     7b4:	7c f3       	brlt	.-34     	; 0x794 <reverse+0x16>
		Rev[i] = Rev[j];
		Rev[j] = temp;
		i++;
		j--;
	}
}
     7b6:	08 95       	ret

000007b8 <adc_pin_config>:
}*/

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     7b8:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     7ba:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     7bc:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     7c0:	10 92 08 01 	sts	0x0108, r1
}
     7c4:	08 95       	ret

000007c6 <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     7c6:	81 b1       	in	r24, 0x01	; 1
     7c8:	8f 60       	ori	r24, 0x0F	; 15
     7ca:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     7cc:	82 b1       	in	r24, 0x02	; 2
     7ce:	80 7f       	andi	r24, 0xF0	; 240
     7d0:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     7d2:	ea e0       	ldi	r30, 0x0A	; 10
     7d4:	f1 e0       	ldi	r31, 0x01	; 1
     7d6:	80 81       	ld	r24, Z
     7d8:	88 61       	ori	r24, 0x18	; 24
     7da:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     7dc:	eb e0       	ldi	r30, 0x0B	; 11
     7de:	f1 e0       	ldi	r31, 0x01	; 1
     7e0:	80 81       	ld	r24, Z
     7e2:	88 61       	ori	r24, 0x18	; 24
     7e4:	80 83       	st	Z, r24
}
     7e6:	08 95       	ret

000007e8 <left_encoder_pin_config>:

void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     7e8:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     7ea:	74 9a       	sbi	0x0e, 4	; 14
}
     7ec:	08 95       	ret

000007ee <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     7ee:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     7f0:	75 9a       	sbi	0x0e, 5	; 14
}
     7f2:	08 95       	ret

000007f4 <port_init>:
}*/

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     7f4:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     7f6:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     7f8:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     7fc:	10 92 08 01 	sts	0x0108, r1
}

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     800:	81 b1       	in	r24, 0x01	; 1
     802:	8f 60       	ori	r24, 0x0F	; 15
     804:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     806:	82 b1       	in	r24, 0x02	; 2
     808:	80 7f       	andi	r24, 0xF0	; 240
     80a:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     80c:	ea e0       	ldi	r30, 0x0A	; 10
     80e:	f1 e0       	ldi	r31, 0x01	; 1
     810:	80 81       	ld	r24, Z
     812:	88 61       	ori	r24, 0x18	; 24
     814:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     816:	eb e0       	ldi	r30, 0x0B	; 11
     818:	f1 e0       	ldi	r31, 0x01	; 1
     81a:	80 81       	ld	r24, Z
     81c:	88 61       	ori	r24, 0x18	; 24
     81e:	80 83       	st	Z, r24
}

void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     820:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     822:	74 9a       	sbi	0x0e, 4	; 14
}

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     824:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     826:	75 9a       	sbi	0x0e, 5	; 14
	adc_pin_config();
	motion_pin_config();	
	//buzzer_pin_config();
	left_encoder_pin_config(); //left encoder pin config
	right_encoder_pin_config(); //right encoder pin config
}
     828:	08 95       	ret

0000082a <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
     82a:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     82c:	ea e6       	ldi	r30, 0x6A	; 106
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	80 81       	ld	r24, Z
     832:	82 60       	ori	r24, 0x02	; 2
     834:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     836:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
     838:	78 94       	sei
}
     83a:	08 95       	ret

0000083c <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
     83c:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     83e:	ea e6       	ldi	r30, 0x6A	; 106
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	80 81       	ld	r24, Z
     844:	88 60       	ori	r24, 0x08	; 8
     846:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     848:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
     84a:	78 94       	sei
}
     84c:	08 95       	ret

0000084e <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
     84e:	1f 92       	push	r1
     850:	0f 92       	push	r0
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	0f 92       	push	r0
     856:	11 24       	eor	r1, r1
     858:	8f 93       	push	r24
     85a:	9f 93       	push	r25
     85c:	af 93       	push	r26
     85e:	bf 93       	push	r27
	ShaftCountRight++;  //increment right shaft position count
     860:	80 91 22 04 	lds	r24, 0x0422
     864:	90 91 23 04 	lds	r25, 0x0423
     868:	a0 91 24 04 	lds	r26, 0x0424
     86c:	b0 91 25 04 	lds	r27, 0x0425
     870:	01 96       	adiw	r24, 0x01	; 1
     872:	a1 1d       	adc	r26, r1
     874:	b1 1d       	adc	r27, r1
     876:	80 93 22 04 	sts	0x0422, r24
     87a:	90 93 23 04 	sts	0x0423, r25
     87e:	a0 93 24 04 	sts	0x0424, r26
     882:	b0 93 25 04 	sts	0x0425, r27
}
     886:	bf 91       	pop	r27
     888:	af 91       	pop	r26
     88a:	9f 91       	pop	r25
     88c:	8f 91       	pop	r24
     88e:	0f 90       	pop	r0
     890:	0f be       	out	0x3f, r0	; 63
     892:	0f 90       	pop	r0
     894:	1f 90       	pop	r1
     896:	18 95       	reti

00000898 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     898:	1f 92       	push	r1
     89a:	0f 92       	push	r0
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	0f 92       	push	r0
     8a0:	11 24       	eor	r1, r1
     8a2:	8f 93       	push	r24
     8a4:	9f 93       	push	r25
     8a6:	af 93       	push	r26
     8a8:	bf 93       	push	r27
	ShaftCountLeft++;  //increment left shaft position count
     8aa:	80 91 1e 04 	lds	r24, 0x041E
     8ae:	90 91 1f 04 	lds	r25, 0x041F
     8b2:	a0 91 20 04 	lds	r26, 0x0420
     8b6:	b0 91 21 04 	lds	r27, 0x0421
     8ba:	01 96       	adiw	r24, 0x01	; 1
     8bc:	a1 1d       	adc	r26, r1
     8be:	b1 1d       	adc	r27, r1
     8c0:	80 93 1e 04 	sts	0x041E, r24
     8c4:	90 93 1f 04 	sts	0x041F, r25
     8c8:	a0 93 20 04 	sts	0x0420, r26
     8cc:	b0 93 21 04 	sts	0x0421, r27
}
     8d0:	bf 91       	pop	r27
     8d2:	af 91       	pop	r26
     8d4:	9f 91       	pop	r25
     8d6:	8f 91       	pop	r24
     8d8:	0f 90       	pop	r0
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	0f 90       	pop	r0
     8de:	1f 90       	pop	r1
     8e0:	18 95       	reti

000008e2 <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     8e2:	e1 e2       	ldi	r30, 0x21	; 33
     8e4:	f1 e0       	ldi	r31, 0x01	; 1
     8e6:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     8e8:	9f ef       	ldi	r25, 0xFF	; 255
     8ea:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     8f4:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     8f8:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     8fc:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     900:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     904:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     908:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     90c:	89 ea       	ldi	r24, 0xA9	; 169
     90e:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     912:	8b e0       	ldi	r24, 0x0B	; 11
     914:	80 83       	st	Z, r24
}
     916:	08 95       	ret

00000918 <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
     918:	ea e7       	ldi	r30, 0x7A	; 122
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     91e:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     922:	80 e2       	ldi	r24, 0x20	; 32
     924:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     928:	80 e8       	ldi	r24, 0x80	; 128
     92a:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     92c:	86 e8       	ldi	r24, 0x86	; 134
     92e:	80 83       	st	Z, r24
}
     930:	08 95       	ret

00000932 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
     932:	98 2f       	mov	r25, r24
	unsigned char a;
	if(Ch>7)
     934:	88 30       	cpi	r24, 0x08	; 8
     936:	18 f0       	brcs	.+6      	; 0x93e <ADC_Conversion+0xc>
	{
		ADCSRB = 0x08;
     938:	88 e0       	ldi	r24, 0x08	; 8
     93a:	80 93 7b 00 	sts	0x007B, r24
	}
	Ch = Ch & 0x07;  			
	ADMUX= 0x20| Ch;	   		
     93e:	97 70       	andi	r25, 0x07	; 7
     940:	90 62       	ori	r25, 0x20	; 32
     942:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     946:	80 91 7a 00 	lds	r24, 0x007A
     94a:	80 64       	ori	r24, 0x40	; 64
     94c:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     950:	80 91 7a 00 	lds	r24, 0x007A
     954:	84 ff       	sbrs	r24, 4
     956:	fc cf       	rjmp	.-8      	; 0x950 <ADC_Conversion+0x1e>
	a=ADCH;
     958:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     95c:	90 91 7a 00 	lds	r25, 0x007A
     960:	90 61       	ori	r25, 0x10	; 16
     962:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB = 0x00;
     966:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     96a:	08 95       	ret

0000096c <velocity>:
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     96c:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     970:	60 93 2a 01 	sts	0x012A, r22
}
     974:	08 95       	ret

00000976 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     976:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     978:	90 7f       	andi	r25, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     97a:	8f 70       	andi	r24, 0x0F	; 15
     97c:	89 2b       	or	r24, r25
 PORTA = PortARestore; 		// executing the command
     97e:	82 b9       	out	0x02, r24	; 2
}
     980:	08 95       	ret

00000982 <forward>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     982:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     984:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     986:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     988:	82 b9       	out	0x02, r24	; 2
}

void forward (void) 
{
  motion_set (0x06);
}
     98a:	08 95       	ret

0000098c <back>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     98c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     98e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     990:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     992:	82 b9       	out	0x02, r24	; 2
}

void back (void) //both wheels backward
{
  motion_set(0x09);
}
     994:	08 95       	ret

00000996 <left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     996:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     998:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     99a:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     99c:	82 b9       	out	0x02, r24	; 2
}

void left (void) //Left wheel backward, Right wheel forward
{
  motion_set(0x05);
}
     99e:	08 95       	ret

000009a0 <right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9a0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9a2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9a4:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     9a6:	82 b9       	out	0x02, r24	; 2
}

void right (void) //Left wheel forward, Right wheel backward
{
  motion_set(0x0A);
}
     9a8:	08 95       	ret

000009aa <soft_left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9aa:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9ac:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9ae:	84 60       	ori	r24, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     9b0:	82 b9       	out	0x02, r24	; 2
}

void soft_left (void) //Left wheel stationary, Right wheel forward
{
 motion_set(0x04);
}
     9b2:	08 95       	ret

000009b4 <soft_right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9b4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9b6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9b8:	82 60       	ori	r24, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     9ba:	82 b9       	out	0x02, r24	; 2
}

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
 motion_set(0x02);
}
     9bc:	08 95       	ret

000009be <soft_left_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9be:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9c0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9c2:	81 60       	ori	r24, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     9c4:	82 b9       	out	0x02, r24	; 2
}

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
 motion_set(0x01);
}
     9c6:	08 95       	ret

000009c8 <soft_right_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9c8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9ca:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9cc:	88 60       	ori	r24, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     9ce:	82 b9       	out	0x02, r24	; 2
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
 motion_set(0x08);
}
     9d0:	08 95       	ret

000009d2 <stop>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9d2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9d4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     9d6:	82 b9       	out	0x02, r24	; 2
}

void stop (void)
{
  motion_set (0x00);
}
     9d8:	08 95       	ret

000009da <angle_rotate>:

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     9da:	ef 92       	push	r14
     9dc:	ff 92       	push	r15
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	bc 01       	movw	r22, r24
     9e8:	cd 01       	movw	r24, r26
     9ea:	0e 94 50 13 	call	0x26a0	; 0x26a0 <__floatunsisf>
     9ee:	28 e4       	ldi	r18, 0x48	; 72
     9f0:	31 ee       	ldi	r19, 0xE1	; 225
     9f2:	42 e8       	ldi	r20, 0x82	; 130
     9f4:	50 e4       	ldi	r21, 0x40	; 64
     9f6:	0e 94 20 12 	call	0x2440	; 0x2440 <__divsf3>
     9fa:	0e 94 4a 10 	call	0x2094	; 0x2094 <__fixunssfsi>
     9fe:	7b 01       	movw	r14, r22
     a00:	00 e0       	ldi	r16, 0x00	; 0
     a02:	10 e0       	ldi	r17, 0x00	; 0
	ShaftCountRight = 0;
     a04:	10 92 22 04 	sts	0x0422, r1
     a08:	10 92 23 04 	sts	0x0423, r1
     a0c:	10 92 24 04 	sts	0x0424, r1
     a10:	10 92 25 04 	sts	0x0425, r1
	ShaftCountLeft = 0;
     a14:	10 92 1e 04 	sts	0x041E, r1
     a18:	10 92 1f 04 	sts	0x041F, r1
     a1c:	10 92 20 04 	sts	0x0420, r1
     a20:	10 92 21 04 	sts	0x0421, r1

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     a24:	80 91 22 04 	lds	r24, 0x0422
     a28:	90 91 23 04 	lds	r25, 0x0423
     a2c:	a0 91 24 04 	lds	r26, 0x0424
     a30:	b0 91 25 04 	lds	r27, 0x0425
     a34:	20 91 1e 04 	lds	r18, 0x041E
     a38:	30 91 1f 04 	lds	r19, 0x041F
     a3c:	40 91 20 04 	lds	r20, 0x0420
     a40:	50 91 21 04 	lds	r21, 0x0421
     a44:	8e 15       	cp	r24, r14
     a46:	9f 05       	cpc	r25, r15
     a48:	a0 07       	cpc	r26, r16
     a4a:	b1 07       	cpc	r27, r17
     a4c:	28 f4       	brcc	.+10     	; 0xa58 <angle_rotate+0x7e>
     a4e:	2e 15       	cp	r18, r14
     a50:	3f 05       	cpc	r19, r15
     a52:	40 07       	cpc	r20, r16
     a54:	51 07       	cpc	r21, r17
     a56:	30 f3       	brcs	.-52     	; 0xa24 <angle_rotate+0x4a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a58:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a5a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     a5c:	82 b9       	out	0x02, r24	; 2
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
		break;
	}
	stop(); //Stop robot
}
     a5e:	1f 91       	pop	r17
     a60:	0f 91       	pop	r16
     a62:	ff 90       	pop	r15
     a64:	ef 90       	pop	r14
     a66:	08 95       	ret

00000a68 <left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a68:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a6a:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a6c:	25 60       	ori	r18, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     a6e:	22 b9       	out	0x02, r18	; 2

void left_degrees(unsigned int Degrees)
{
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
	angle_rotate(Degrees);
     a70:	0e 94 ed 04 	call	0x9da	; 0x9da <angle_rotate>
}
     a74:	08 95       	ret

00000a76 <right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a76:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a78:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a7a:	2a 60       	ori	r18, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     a7c:	22 b9       	out	0x02, r18	; 2

void right_degrees(unsigned int Degrees)
{
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
	angle_rotate(Degrees);
     a7e:	0e 94 ed 04 	call	0x9da	; 0x9da <angle_rotate>
}
     a82:	08 95       	ret

00000a84 <soft_left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a84:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a86:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a88:	24 60       	ori	r18, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     a8a:	22 b9       	out	0x02, r18	; 2
void soft_left_degrees(unsigned int Degrees)
{
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left(); //Turn soft left
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     a8c:	88 0f       	add	r24, r24
     a8e:	99 1f       	adc	r25, r25
     a90:	0e 94 ed 04 	call	0x9da	; 0x9da <angle_rotate>
}
     a94:	08 95       	ret

00000a96 <soft_right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a96:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a98:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a9a:	22 60       	ori	r18, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     a9c:	22 b9       	out	0x02, r18	; 2
void soft_right_degrees(unsigned int Degrees)
{
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right();  //Turn soft right
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     a9e:	88 0f       	add	r24, r24
     aa0:	99 1f       	adc	r25, r25
     aa2:	0e 94 ed 04 	call	0x9da	; 0x9da <angle_rotate>
}
     aa6:	08 95       	ret

00000aa8 <soft_left_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     aa8:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     aaa:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     aac:	21 60       	ori	r18, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     aae:	22 b9       	out	0x02, r18	; 2
void soft_left_2_degrees(unsigned int Degrees)
{
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left_2(); //Turn reverse soft left
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	0e 94 ed 04 	call	0x9da	; 0x9da <angle_rotate>
}
     ab8:	08 95       	ret

00000aba <soft_right_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     aba:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     abc:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     abe:	28 60       	ori	r18, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     ac0:	22 b9       	out	0x02, r18	; 2
void soft_right_2_degrees(unsigned int Degrees)
{
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right_2();  //Turn reverse soft right
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     ac2:	88 0f       	add	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	0e 94 ed 04 	call	0x9da	; 0x9da <angle_rotate>
}
     aca:	08 95       	ret

00000acc <init_devices>:

void init_devices (void)
{
 	cli(); //Clears the global interrupts
     acc:	f8 94       	cli
	port_init();
     ace:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <port_init>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void adc_init()
{
	ADCSRA = 0x00;
     ad2:	ea e7       	ldi	r30, 0x7A	; 122
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     ad8:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     adc:	80 e2       	ldi	r24, 0x20	; 32
     ade:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     ae2:	80 e8       	ldi	r24, 0x80	; 128
     ae4:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     ae6:	86 e8       	ldi	r24, 0x86	; 134
     ae8:	80 83       	st	Z, r24
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     aea:	e1 e2       	ldi	r30, 0x21	; 33
     aec:	f1 e0       	ldi	r31, 0x01	; 1
     aee:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     af0:	9f ef       	ldi	r25, 0xFF	; 255
     af2:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     afc:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     b00:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     b04:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     b08:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     b0c:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     b10:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     b14:	89 ea       	ldi	r24, 0xA9	; 169
     b16:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     b1a:	8b e0       	ldi	r24, 0x0B	; 11
     b1c:	80 83       	st	Z, r24
	right_encoder_pin_config(); //right encoder pin config
}

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
     b1e:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     b20:	ea e6       	ldi	r30, 0x6A	; 106
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z
     b26:	82 60       	ori	r24, 0x02	; 2
     b28:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     b2a:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
     b2c:	78 94       	sei
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
     b2e:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     b30:	ea e6       	ldi	r30, 0x6A	; 106
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 81       	ld	r24, Z
     b36:	88 60       	ori	r24, 0x08	; 8
     b38:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     b3a:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
     b3c:	78 94       	sei
	port_init();
	adc_init();
	timer5_init();
	left_position_encoder_interrupt_init();
	right_position_encoder_interrupt_init();
	sei();   //Enables the global interrupts
     b3e:	78 94       	sei
}
     b40:	08 95       	ret

00000b42 <move>:

void move()
{
	senser_value_L = ADC_Conversion(3);	//Getting data of Left WL Sensor
     b42:	83 e0       	ldi	r24, 0x03	; 3
     b44:	0e 94 99 04 	call	0x932	; 0x932 <ADC_Conversion>
     b48:	80 93 b7 17 	sts	0x17B7, r24
     b4c:	10 92 b8 17 	sts	0x17B8, r1
	senser_value_C = ADC_Conversion(2);	//Getting data of Center WL Sensor
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	0e 94 99 04 	call	0x932	; 0x932 <ADC_Conversion>
     b56:	80 93 fc 16 	sts	0x16FC, r24
     b5a:	10 92 fd 16 	sts	0x16FD, r1
	senser_value_R = ADC_Conversion(1);	//Getting data of Right WL Sensor
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	0e 94 99 04 	call	0x932	; 0x932 <ADC_Conversion>
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	30 93 c3 17 	sts	0x17C3, r19
     b6c:	20 93 c2 17 	sts	0x17C2, r18

	// If black line is at left sensor and center sensor is not decting a black line
	// Speed up right motor a bit to get a left turn
	// Further set the flag to be equal to '1' suggesting that bot has taken left turn this time
	if ((senser_value_L > Threshold) && (senser_value_C < Threshold))
     b70:	40 91 b7 17 	lds	r20, 0x17B7
     b74:	50 91 b8 17 	lds	r21, 0x17B8
     b78:	49 32       	cpi	r20, 0x29	; 41
     b7a:	51 05       	cpc	r21, r1
     b7c:	f4 f0       	brlt	.+60     	; 0xbba <move+0x78>
     b7e:	80 91 fc 16 	lds	r24, 0x16FC
     b82:	90 91 fd 16 	lds	r25, 0x16FD
     b86:	88 97       	sbiw	r24, 0x28	; 40
     b88:	c4 f4       	brge	.+48     	; 0xbba <move+0x78>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     b8a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b8c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     b8e:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     b90:	82 b9       	out	0x02, r24	; 2
	// Speed up right motor a bit to get a left turn
	// Further set the flag to be equal to '1' suggesting that bot has taken left turn this time
	if ((senser_value_L > Threshold) && (senser_value_C < Threshold))
	{
		forward();
		left_motor = 200;
     b92:	88 ec       	ldi	r24, 0xC8	; 200
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	90 93 2d 04 	sts	0x042D, r25
     b9a:	80 93 2c 04 	sts	0x042C, r24
		right_motor = 255;
     b9e:	8f ef       	ldi	r24, 0xFF	; 255
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	90 93 2f 04 	sts	0x042F, r25
     ba6:	80 93 2e 04 	sts	0x042E, r24
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     baa:	88 ec       	ldi	r24, 0xC8	; 200
     bac:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     bb0:	8f ef       	ldi	r24, 0xFF	; 255
     bb2:	80 93 2a 01 	sts	0x012A, r24
	{
		forward();
		left_motor = 200;
		right_motor = 255;
		velocity(left_motor,right_motor);
		flag = 1;
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	20 c0       	rjmp	.+64     	; 0xbfa <move+0xb8>
	}
	// If black line is at right sensor and center sensor is not decting a black line
	// Speed up left motor a bit to get a right turn
	// Further set the flag to be equal to '2' suggesting that bot has taken right turn this time
	else if ((senser_value_R > Threshold) && (senser_value_C < Threshold))
     bba:	29 32       	cpi	r18, 0x29	; 41
     bbc:	31 05       	cpc	r19, r1
     bbe:	04 f1       	brlt	.+64     	; 0xc00 <move+0xbe>
     bc0:	80 91 fc 16 	lds	r24, 0x16FC
     bc4:	90 91 fd 16 	lds	r25, 0x16FD
     bc8:	88 97       	sbiw	r24, 0x28	; 40
     bca:	d4 f4       	brge	.+52     	; 0xc00 <move+0xbe>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     bcc:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     bce:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     bd0:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     bd2:	82 b9       	out	0x02, r24	; 2
	// Speed up left motor a bit to get a right turn
	// Further set the flag to be equal to '2' suggesting that bot has taken right turn this time
	else if ((senser_value_R > Threshold) && (senser_value_C < Threshold))
	{
		forward();
		left_motor = 255;
     bd4:	8f ef       	ldi	r24, 0xFF	; 255
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	90 93 2d 04 	sts	0x042D, r25
     bdc:	80 93 2c 04 	sts	0x042C, r24
		right_motor = 200;
     be0:	88 ec       	ldi	r24, 0xC8	; 200
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	90 93 2f 04 	sts	0x042F, r25
     be8:	80 93 2e 04 	sts	0x042E, r24
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     bec:	8f ef       	ldi	r24, 0xFF	; 255
     bee:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     bf2:	88 ec       	ldi	r24, 0xC8	; 200
     bf4:	80 93 2a 01 	sts	0x012A, r24
	{
		forward();
		left_motor = 255;
		right_motor = 200;
		velocity(left_motor,right_motor);
		flag = 2;
     bf8:	82 e0       	ldi	r24, 0x02	; 2
     bfa:	80 93 26 04 	sts	0x0426, r24
     bfe:	08 95       	ret
	}
	// If black line is at center sensor and left & right sensors are not decting a black line
	// Speed up both motors equally to get a straight movement
	else if ((senser_value_C > Threshold) && (senser_value_L < Threshold) && (senser_value_R < Threshold))
     c00:	80 91 fc 16 	lds	r24, 0x16FC
     c04:	90 91 fd 16 	lds	r25, 0x16FD
     c08:	89 32       	cpi	r24, 0x29	; 41
     c0a:	91 05       	cpc	r25, r1
     c0c:	c4 f0       	brlt	.+48     	; 0xc3e <move+0xfc>
     c0e:	48 32       	cpi	r20, 0x28	; 40
     c10:	51 05       	cpc	r21, r1
     c12:	ac f4       	brge	.+42     	; 0xc3e <move+0xfc>
     c14:	28 32       	cpi	r18, 0x28	; 40
     c16:	31 05       	cpc	r19, r1
     c18:	dc f5       	brge	.+118    	; 0xc90 <move+0x14e>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     c1a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     c1c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     c1e:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     c20:	82 b9       	out	0x02, r24	; 2
	// If black line is at center sensor and left & right sensors are not decting a black line
	// Speed up both motors equally to get a straight movement
	else if ((senser_value_C > Threshold) && (senser_value_L < Threshold) && (senser_value_R < Threshold))
	{
		forward();
		left_motor = 255;
     c22:	8f ef       	ldi	r24, 0xFF	; 255
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	90 93 2d 04 	sts	0x042D, r25
     c2a:	80 93 2c 04 	sts	0x042C, r24
		right_motor = 255;
     c2e:	90 93 2f 04 	sts	0x042F, r25
     c32:	80 93 2e 04 	sts	0x042E, r24
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c36:	8f ef       	ldi	r24, 0xFF	; 255
     c38:	80 93 28 01 	sts	0x0128, r24
     c3c:	20 c0       	rjmp	.+64     	; 0xc7e <move+0x13c>
		right_motor = 255;
		velocity(left_motor, right_motor);
	}
	// If black line is nowhere to be found
	// Speed up right or left motor according to the flag set
	else if ((senser_value_R < Threshold) && (senser_value_C < Threshold) && (senser_value_L < Threshold))
     c3e:	28 32       	cpi	r18, 0x28	; 40
     c40:	31 05       	cpc	r19, r1
     c42:	34 f5       	brge	.+76     	; 0xc90 <move+0x14e>
     c44:	88 97       	sbiw	r24, 0x28	; 40
     c46:	24 f5       	brge	.+72     	; 0xc90 <move+0x14e>
     c48:	48 32       	cpi	r20, 0x28	; 40
     c4a:	51 05       	cpc	r21, r1
     c4c:	0c f5       	brge	.+66     	; 0xc90 <move+0x14e>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     c4e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     c50:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     c52:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     c54:	82 b9       	out	0x02, r24	; 2
	// If black line is nowhere to be found
	// Speed up right or left motor according to the flag set
	else if ((senser_value_R < Threshold) && (senser_value_C < Threshold) && (senser_value_L < Threshold))
	{
		forward();
		left_motor = 170;
     c56:	8a ea       	ldi	r24, 0xAA	; 170
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	90 93 2d 04 	sts	0x042D, r25
     c5e:	80 93 2c 04 	sts	0x042C, r24
		right_motor = 255;
     c62:	8f ef       	ldi	r24, 0xFF	; 255
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	90 93 2f 04 	sts	0x042F, r25
     c6a:	80 93 2e 04 	sts	0x042E, r24
		if (flag == 1) {
     c6e:	80 91 26 04 	lds	r24, 0x0426
     c72:	81 30       	cpi	r24, 0x01	; 1
     c74:	39 f4       	brne	.+14     	; 0xc84 <move+0x142>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c76:	8a ea       	ldi	r24, 0xAA	; 170
     c78:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
     c7e:	80 93 2a 01 	sts	0x012A, r24
     c82:	08 95       	ret
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c84:	8f ef       	ldi	r24, 0xFF	; 255
     c86:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     c8a:	8a ea       	ldi	r24, 0xAA	; 170
     c8c:	80 93 2a 01 	sts	0x012A, r24
     c90:	08 95       	ret

00000c92 <linear_distance_mm>:
}

//Function used for moving robot forward by specified distance

void linear_distance_mm(unsigned int DistanceInMM)
{
     c92:	ef 92       	push	r14
     c94:	ff 92       	push	r15
     c96:	0f 93       	push	r16
     c98:	1f 93       	push	r17
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	bc 01       	movw	r22, r24
     ca0:	cd 01       	movw	r24, r26
     ca2:	0e 94 50 13 	call	0x26a0	; 0x26a0 <__floatunsisf>
     ca6:	25 ee       	ldi	r18, 0xE5	; 229
     ca8:	30 ed       	ldi	r19, 0xD0	; 208
     caa:	4a ea       	ldi	r20, 0xAA	; 170
     cac:	50 e4       	ldi	r21, 0x40	; 64
     cae:	0e 94 20 12 	call	0x2440	; 0x2440 <__divsf3>
     cb2:	0e 94 4a 10 	call	0x2094	; 0x2094 <__fixunssfsi>
     cb6:	7b 01       	movw	r14, r22
     cb8:	8c 01       	movw	r16, r24
	
	ShaftCountRight = 0;
     cba:	10 92 22 04 	sts	0x0422, r1
     cbe:	10 92 23 04 	sts	0x0423, r1
     cc2:	10 92 24 04 	sts	0x0424, r1
     cc6:	10 92 25 04 	sts	0x0425, r1
	while(1)
	{
		move();
     cca:	0e 94 a1 05 	call	0xb42	; 0xb42 <move>
		if(ShaftCountRight > ReqdShaftCountInt)
     cce:	80 91 22 04 	lds	r24, 0x0422
     cd2:	90 91 23 04 	lds	r25, 0x0423
     cd6:	a0 91 24 04 	lds	r26, 0x0424
     cda:	b0 91 25 04 	lds	r27, 0x0425
     cde:	e8 16       	cp	r14, r24
     ce0:	f9 06       	cpc	r15, r25
     ce2:	0a 07       	cpc	r16, r26
     ce4:	1b 07       	cpc	r17, r27
     ce6:	88 f7       	brcc	.-30     	; 0xcca <linear_distance_mm+0x38>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     ce8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     cea:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     cec:	82 b9       	out	0x02, r24	; 2
		{
			break;
		}
	}
	stop(); //Stop robot
}
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	08 95       	ret

00000cf8 <back_mm>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     cf8:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     cfa:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     cfc:	29 60       	ori	r18, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     cfe:	22 b9       	out	0x02, r18	; 2
}

void back_mm(unsigned int DistanceInMM)
{
	back();
	linear_distance_mm(DistanceInMM);
     d00:	0e 94 49 06 	call	0xc92	; 0xc92 <linear_distance_mm>
}
     d04:	08 95       	ret

00000d06 <forward_mm>:
	stop(); //Stop robot
}

void forward_mm(unsigned int DistanceInMM)
{
	linear_distance_mm(DistanceInMM);
     d06:	0e 94 49 06 	call	0xc92	; 0xc92 <linear_distance_mm>
}
     d0a:	08 95       	ret

00000d0c <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d0c:	86 e6       	ldi	r24, 0x66	; 102
     d0e:	9e e0       	ldi	r25, 0x0E	; 14
     d10:	fc 01       	movw	r30, r24
     d12:	31 97       	sbiw	r30, 0x01	; 1
     d14:	f1 f7       	brne	.-4      	; 0xd12 <lcd_set_4bit+0x6>
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     d16:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     d18:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     d1a:	40 e3       	ldi	r20, 0x30	; 48
     d1c:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     d1e:	42 9a       	sbi	0x08, 2	; 8
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	38 e4       	ldi	r19, 0x48	; 72
     d24:	f9 01       	movw	r30, r18
     d26:	31 97       	sbiw	r30, 0x01	; 1
     d28:	f1 f7       	brne	.-4      	; 0xd26 <lcd_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     d2a:	42 98       	cbi	0x08, 2	; 8
     d2c:	fc 01       	movw	r30, r24
     d2e:	31 97       	sbiw	r30, 0x01	; 1
     d30:	f1 f7       	brne	.-4      	; 0xd2e <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     d32:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     d34:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     d36:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     d38:	42 9a       	sbi	0x08, 2	; 8
     d3a:	f9 01       	movw	r30, r18
     d3c:	31 97       	sbiw	r30, 0x01	; 1
     d3e:	f1 f7       	brne	.-4      	; 0xd3c <lcd_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     d40:	42 98       	cbi	0x08, 2	; 8
     d42:	fc 01       	movw	r30, r24
     d44:	31 97       	sbiw	r30, 0x01	; 1
     d46:	f1 f7       	brne	.-4      	; 0xd44 <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     d48:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     d4a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     d4c:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     d4e:	42 9a       	sbi	0x08, 2	; 8
     d50:	f9 01       	movw	r30, r18
     d52:	31 97       	sbiw	r30, 0x01	; 1
     d54:	f1 f7       	brne	.-4      	; 0xd52 <lcd_set_4bit+0x46>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     d56:	42 98       	cbi	0x08, 2	; 8
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     d5c:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     d5e:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     d60:	80 e2       	ldi	r24, 0x20	; 32
     d62:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     d64:	42 9a       	sbi	0x08, 2	; 8
     d66:	c9 01       	movw	r24, r18
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <lcd_set_4bit+0x5c>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     d6c:	42 98       	cbi	0x08, 2	; 8

	
}
     d6e:	08 95       	ret

00000d70 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     d70:	98 b1       	in	r25, 0x08	; 8
     d72:	9f 70       	andi	r25, 0x0F	; 15
     d74:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     d76:	28 b1       	in	r18, 0x08	; 8
     d78:	98 2f       	mov	r25, r24
     d7a:	90 7f       	andi	r25, 0xF0	; 240
     d7c:	92 2b       	or	r25, r18
     d7e:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     d80:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     d82:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     d84:	42 9a       	sbi	0x08, 2	; 8
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	38 e4       	ldi	r19, 0x48	; 72
     d8a:	f9 01       	movw	r30, r18
     d8c:	31 97       	sbiw	r30, 0x01	; 1
     d8e:	f1 f7       	brne	.-4      	; 0xd8c <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     d90:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     d92:	98 b1       	in	r25, 0x08	; 8
     d94:	9f 70       	andi	r25, 0x0F	; 15
     d96:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     d98:	98 b1       	in	r25, 0x08	; 8
     d9a:	82 95       	swap	r24
     d9c:	80 7f       	andi	r24, 0xF0	; 240
     d9e:	98 2b       	or	r25, r24
     da0:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     da2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     da4:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     da6:	42 9a       	sbi	0x08, 2	; 8
     da8:	c9 01       	movw	r24, r18
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	f1 f7       	brne	.-4      	; 0xdaa <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     dae:	42 98       	cbi	0x08, 2	; 8
}
     db0:	08 95       	ret

00000db2 <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     db2:	0e 94 86 06 	call	0xd0c	; 0xd0c <lcd_set_4bit>
     db6:	86 e6       	ldi	r24, 0x66	; 102
     db8:	9e e0       	ldi	r25, 0x0E	; 14
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <lcd_init+0x8>
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     dbe:	88 e2       	ldi	r24, 0x28	; 40
     dc0:	0e 94 b8 06 	call	0xd70	; 0xd70 <lcd_wr_command>
	lcd_wr_command(0x01);
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	0e 94 b8 06 	call	0xd70	; 0xd70 <lcd_wr_command>
	lcd_wr_command(0x06);
     dca:	86 e0       	ldi	r24, 0x06	; 6
     dcc:	0e 94 b8 06 	call	0xd70	; 0xd70 <lcd_wr_command>
	lcd_wr_command(0x0E);
     dd0:	8e e0       	ldi	r24, 0x0E	; 14
     dd2:	0e 94 b8 06 	call	0xd70	; 0xd70 <lcd_wr_command>
	lcd_wr_command(0x80);
     dd6:	80 e8       	ldi	r24, 0x80	; 128
     dd8:	0e 94 b8 06 	call	0xd70	; 0xd70 <lcd_wr_command>
		
}
     ddc:	08 95       	ret

00000dde <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     dde:	98 b1       	in	r25, 0x08	; 8
     de0:	9f 70       	andi	r25, 0x0F	; 15
     de2:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     de4:	28 b1       	in	r18, 0x08	; 8
     de6:	98 2f       	mov	r25, r24
     de8:	90 7f       	andi	r25, 0xF0	; 240
     dea:	92 2b       	or	r25, r18
     dec:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     dee:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     df0:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     df2:	42 9a       	sbi	0x08, 2	; 8
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	38 e4       	ldi	r19, 0x48	; 72
     df8:	f9 01       	movw	r30, r18
     dfa:	31 97       	sbiw	r30, 0x01	; 1
     dfc:	f1 f7       	brne	.-4      	; 0xdfa <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     dfe:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     e00:	98 b1       	in	r25, 0x08	; 8
     e02:	9f 70       	andi	r25, 0x0F	; 15
     e04:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     e06:	98 b1       	in	r25, 0x08	; 8
     e08:	82 95       	swap	r24
     e0a:	80 7f       	andi	r24, 0xF0	; 240
     e0c:	98 2b       	or	r25, r24
     e0e:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     e10:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     e12:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     e14:	42 9a       	sbi	0x08, 2	; 8
     e16:	c9 01       	movw	r24, r18
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	f1 f7       	brne	.-4      	; 0xe18 <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     e1c:	42 98       	cbi	0x08, 2	; 8
}
     e1e:	08 95       	ret

00000e20 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     e20:	80 e8       	ldi	r24, 0x80	; 128
     e22:	0e 94 b8 06 	call	0xd70	; 0xd70 <lcd_wr_command>
}
     e26:	08 95       	ret

00000e28 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	ec 01       	movw	r28, r24
     e2e:	03 c0       	rjmp	.+6      	; 0xe36 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     e30:	0e 94 ef 06 	call	0xdde	; 0xdde <lcd_wr_char>
		str++;
     e34:	21 96       	adiw	r28, 0x01	; 1


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     e36:	88 81       	ld	r24, Y
     e38:	88 23       	and	r24, r24
     e3a:	d1 f7       	brne	.-12     	; 0xe30 <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	08 95       	ret

00000e42 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     e42:	82 30       	cpi	r24, 0x02	; 2
     e44:	69 f0       	breq	.+26     	; 0xe60 <lcd_cursor+0x1e>
     e46:	83 30       	cpi	r24, 0x03	; 3
     e48:	18 f4       	brcc	.+6      	; 0xe50 <lcd_cursor+0xe>
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	a9 f4       	brne	.+42     	; 0xe78 <lcd_cursor+0x36>
     e4e:	05 c0       	rjmp	.+10     	; 0xe5a <lcd_cursor+0x18>
     e50:	83 30       	cpi	r24, 0x03	; 3
     e52:	49 f0       	breq	.+18     	; 0xe66 <lcd_cursor+0x24>
     e54:	84 30       	cpi	r24, 0x04	; 4
     e56:	81 f4       	brne	.+32     	; 0xe78 <lcd_cursor+0x36>
     e58:	0b c0       	rjmp	.+22     	; 0xe70 <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     e5a:	86 2f       	mov	r24, r22
     e5c:	81 58       	subi	r24, 0x81	; 129
     e5e:	05 c0       	rjmp	.+10     	; 0xe6a <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     e60:	86 2f       	mov	r24, r22
     e62:	81 54       	subi	r24, 0x41	; 65
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     e66:	86 2f       	mov	r24, r22
     e68:	8d 56       	subi	r24, 0x6D	; 109
     e6a:	0e 94 b8 06 	call	0xd70	; 0xd70 <lcd_wr_command>
     e6e:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     e70:	86 2f       	mov	r24, r22
     e72:	8d 52       	subi	r24, 0x2D	; 45
     e74:	0e 94 b8 06 	call	0xd70	; 0xd70 <lcd_wr_command>
     e78:	08 95       	ret

00000e7a <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     e7a:	0f 93       	push	r16
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	8a 01       	movw	r16, r20
     e84:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     e86:	88 23       	and	r24, r24
     e88:	11 f0       	breq	.+4      	; 0xe8e <lcd_print+0x14>
     e8a:	66 23       	and	r22, r22
     e8c:	19 f4       	brne	.+6      	; 0xe94 <lcd_print+0x1a>
	{
		lcd_home();
     e8e:	0e 94 10 07 	call	0xe20	; 0xe20 <lcd_home>
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     e94:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     e98:	c5 30       	cpi	r28, 0x05	; 5
     e9a:	d1 05       	cpc	r29, r1
     e9c:	71 f4       	brne	.+28     	; 0xeba <lcd_print+0x40>
	{
		million=value/10000+48;
     e9e:	c8 01       	movw	r24, r16
     ea0:	60 e1       	ldi	r22, 0x10	; 16
     ea2:	77 e2       	ldi	r23, 0x27	; 39
     ea4:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__udivmodhi4>
     ea8:	cb 01       	movw	r24, r22
     eaa:	c0 96       	adiw	r24, 0x30	; 48
     eac:	90 93 89 17 	sts	0x1789, r25
     eb0:	80 93 88 17 	sts	0x1788, r24
		lcd_wr_char(million);
     eb4:	0e 94 ef 06 	call	0xdde	; 0xdde <lcd_wr_char>
     eb8:	05 c0       	rjmp	.+10     	; 0xec4 <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     eba:	c4 30       	cpi	r28, 0x04	; 4
     ebc:	d1 05       	cpc	r29, r1
     ebe:	11 f0       	breq	.+4      	; 0xec4 <lcd_print+0x4a>
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	16 c0       	rjmp	.+44     	; 0xef0 <lcd_print+0x76>
	{
		temp = value/1000;
     ec4:	c8 01       	movw	r24, r16
     ec6:	68 ee       	ldi	r22, 0xE8	; 232
     ec8:	73 e0       	ldi	r23, 0x03	; 3
     eca:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__udivmodhi4>
     ece:	cb 01       	movw	r24, r22
     ed0:	60 93 b2 17 	sts	0x17B2, r22
     ed4:	90 93 b3 17 	sts	0x17B3, r25
		thousand = temp%10 + 48;
     ed8:	6a e0       	ldi	r22, 0x0A	; 10
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__udivmodhi4>
     ee0:	c0 96       	adiw	r24, 0x30	; 48
     ee2:	90 93 c7 17 	sts	0x17C7, r25
     ee6:	80 93 c6 17 	sts	0x17C6, r24
		lcd_wr_char(thousand);
     eea:	0e 94 ef 06 	call	0xdde	; 0xdde <lcd_wr_char>
     eee:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     ef0:	c3 30       	cpi	r28, 0x03	; 3
     ef2:	d1 05       	cpc	r29, r1
     ef4:	21 f0       	breq	.+8      	; 0xefe <lcd_print+0x84>
     ef6:	81 30       	cpi	r24, 0x01	; 1
     ef8:	11 f0       	breq	.+4      	; 0xefe <lcd_print+0x84>
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	16 c0       	rjmp	.+44     	; 0xf2a <lcd_print+0xb0>
	{
		temp = value/100;
     efe:	c8 01       	movw	r24, r16
     f00:	64 e6       	ldi	r22, 0x64	; 100
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__udivmodhi4>
     f08:	cb 01       	movw	r24, r22
     f0a:	60 93 b2 17 	sts	0x17B2, r22
     f0e:	90 93 b3 17 	sts	0x17B3, r25
		hundred = temp%10 + 48;
     f12:	6a e0       	ldi	r22, 0x0A	; 10
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__udivmodhi4>
     f1a:	c0 96       	adiw	r24, 0x30	; 48
     f1c:	90 93 c1 17 	sts	0x17C1, r25
     f20:	80 93 c0 17 	sts	0x17C0, r24
		lcd_wr_char(hundred);
     f24:	0e 94 ef 06 	call	0xdde	; 0xdde <lcd_wr_char>
     f28:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     f2a:	c2 30       	cpi	r28, 0x02	; 2
     f2c:	d1 05       	cpc	r29, r1
     f2e:	21 f0       	breq	.+8      	; 0xf38 <lcd_print+0xbe>
     f30:	81 30       	cpi	r24, 0x01	; 1
     f32:	11 f0       	breq	.+4      	; 0xf38 <lcd_print+0xbe>
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	16 c0       	rjmp	.+44     	; 0xf64 <lcd_print+0xea>
	{
		temp = value/10;
     f38:	c8 01       	movw	r24, r16
     f3a:	6a e0       	ldi	r22, 0x0A	; 10
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__udivmodhi4>
     f42:	cb 01       	movw	r24, r22
     f44:	60 93 b2 17 	sts	0x17B2, r22
     f48:	90 93 b3 17 	sts	0x17B3, r25
		tens = temp%10 + 48;
     f4c:	6a e0       	ldi	r22, 0x0A	; 10
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__udivmodhi4>
     f54:	c0 96       	adiw	r24, 0x30	; 48
     f56:	90 93 b6 17 	sts	0x17B6, r25
     f5a:	80 93 b5 17 	sts	0x17B5, r24
		lcd_wr_char(tens);
     f5e:	0e 94 ef 06 	call	0xdde	; 0xdde <lcd_wr_char>
     f62:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     f64:	c1 30       	cpi	r28, 0x01	; 1
     f66:	d1 05       	cpc	r29, r1
     f68:	11 f0       	breq	.+4      	; 0xf6e <lcd_print+0xf4>
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	61 f4       	brne	.+24     	; 0xf86 <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     f6e:	c8 01       	movw	r24, r16
     f70:	6a e0       	ldi	r22, 0x0A	; 10
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__udivmodhi4>
     f78:	c0 96       	adiw	r24, 0x30	; 48
     f7a:	90 93 c5 17 	sts	0x17C5, r25
     f7e:	80 93 c4 17 	sts	0x17C4, r24
		lcd_wr_char(unit);
     f82:	0e 94 ef 06 	call	0xdde	; 0xdde <lcd_wr_char>
	}
	if(digits>5)
     f86:	26 97       	sbiw	r28, 0x06	; 6
     f88:	1c f0       	brlt	.+6      	; 0xf90 <lcd_print+0x116>
	{
		lcd_wr_char('E');
     f8a:	85 e4       	ldi	r24, 0x45	; 69
     f8c:	0e 94 ef 06 	call	0xdde	; 0xdde <lcd_wr_char>
	}
	
}
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	08 95       	ret

00000f9a <print_sensor>:
	return a;
}

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
     f9a:	0f 93       	push	r16
     f9c:	1f 93       	push	r17
     f9e:	18 2f       	mov	r17, r24
     fa0:	06 2f       	mov	r16, r22
     fa2:	84 2f       	mov	r24, r20
	
	ADC_Value = ADC_Conversion(channel);
     fa4:	0e 94 99 04 	call	0x932	; 0x932 <ADC_Conversion>
     fa8:	48 2f       	mov	r20, r24
     faa:	80 93 b4 17 	sts	0x17B4, r24
	lcd_print(row, coloumn, ADC_Value, 3);
     fae:	81 2f       	mov	r24, r17
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	60 2f       	mov	r22, r16
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	23 e0       	ldi	r18, 0x03	; 3
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	0e 94 3d 07 	call	0xe7a	; 0xe7a <lcd_print>

	return ADC_Value;
}
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	08 95       	ret

00000fc6 <buzzer_pin_config>:

void simulation(int, int);

void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     fc6:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     fc8:	43 98       	cbi	0x08, 3	; 8
}
     fca:	08 95       	ret

00000fcc <lcd_port_config>:
//Function to configure LCD port
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     fcc:	87 b1       	in	r24, 0x07	; 7
     fce:	87 6f       	ori	r24, 0xF7	; 247
     fd0:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     fd2:	88 b1       	in	r24, 0x08	; 8
     fd4:	80 78       	andi	r24, 0x80	; 128
     fd6:	88 b9       	out	0x08, r24	; 8
}
     fd8:	08 95       	ret

00000fda <port_initial>:

void simulation(int, int);

void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     fda:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     fdc:	43 98       	cbi	0x08, 3	; 8
}
//Function to configure LCD port
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     fde:	87 b1       	in	r24, 0x07	; 7
     fe0:	87 6f       	ori	r24, 0xF7	; 247
     fe2:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     fe4:	88 b1       	in	r24, 0x08	; 8
     fe6:	80 78       	andi	r24, 0x80	; 128
     fe8:	88 b9       	out	0x08, r24	; 8
//Function to initialize ports
void port_initial()
{
	buzzer_pin_config();
	lcd_port_config();
}
     fea:	08 95       	ret

00000fec <uart0_init>:
// actual baud rate:9600 (error 0.0%)
// char arr_size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
     fec:	e1 ec       	ldi	r30, 0xC1	; 193
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	10 82       	st	Z, r1
 UCSR0A = 0x00;
     ff2:	10 92 c0 00 	sts	0x00C0, r1
 UCSR0C = 0x06;
     ff6:	86 e0       	ldi	r24, 0x06	; 6
     ff8:	80 93 c2 00 	sts	0x00C2, r24
 UBRR0L = 0x5F; //set baud rate lo
     ffc:	8f e5       	ldi	r24, 0x5F	; 95
     ffe:	80 93 c4 00 	sts	0x00C4, r24
 UBRR0H = 0x00; //set baud rate hi
    1002:	10 92 c5 00 	sts	0x00C5, r1
 UCSR0B = 0x98;
    1006:	88 e9       	ldi	r24, 0x98	; 152
    1008:	80 83       	st	Z, r24
}
    100a:	08 95       	ret

0000100c <uart2_init>:
// actual baud rate:9600 (error 0.0%)
// char arr_size: 8 bit
// parity: Disabled
void uart2_init(void)
{
 UCSR2B = 0x00; //disable while setting baud rate
    100c:	e1 ed       	ldi	r30, 0xD1	; 209
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	10 82       	st	Z, r1
 UCSR2A = 0x00;
    1012:	10 92 d0 00 	sts	0x00D0, r1
 UCSR2C = 0x06;
    1016:	86 e0       	ldi	r24, 0x06	; 6
    1018:	80 93 d2 00 	sts	0x00D2, r24
 UBRR2L = 0x5F; //set baud rate lo
    101c:	8f e5       	ldi	r24, 0x5F	; 95
    101e:	80 93 d4 00 	sts	0x00D4, r24
 UBRR2H = 0x00; //set baud rate hi
    1022:	10 92 d5 00 	sts	0x00D5, r1
 UCSR2B = 0x98;
    1026:	88 e9       	ldi	r24, 0x98	; 152
    1028:	80 83       	st	Z, r24
}
    102a:	08 95       	ret

0000102c <buzzer_on>:

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    102c:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    102e:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    1030:	88 b9       	out	0x08, r24	; 8
}
    1032:	08 95       	ret

00001034 <buzzer_off>:

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    1034:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    1036:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    1038:	88 b9       	out	0x08, r24	; 8
}
    103a:	08 95       	ret

0000103c <seperate>:

void seperate() {
    103c:	cf 92       	push	r12
    103e:	df 92       	push	r13
    1040:	ef 92       	push	r14
    1042:	ff 92       	push	r15
    1044:	0f 93       	push	r16
    1046:	1f 93       	push	r17
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
			UDR0 = arr_slave[i];

			sequence_arr[i] = 0;
		}
		else {
			arr_slave[i] = 0;
    104c:	e0 90 be 17 	lds	r14, 0x17BE
    1050:	f0 90 bf 17 	lds	r15, 0x17BF
			_delay_ms(100);
			
			UDR0 = arr_slave[i];

			sequence_arr[i] = arr[i];
    1054:	00 91 bc 17 	lds	r16, 0x17BC
    1058:	10 91 bd 17 	lds	r17, 0x17BD
    105c:	a0 91 fa 16 	lds	r26, 0x16FA
    1060:	b0 91 fb 16 	lds	r27, 0x16FB
    1064:	c0 e0       	ldi	r28, 0x00	; 0
    1066:	d0 e0       	ldi	r29, 0x00	; 0
    1068:	40 e0       	ldi	r20, 0x00	; 0
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	60 e7       	ldi	r22, 0x70	; 112
    106e:	c6 2e       	mov	r12, r22
    1070:	61 e0       	ldi	r22, 0x01	; 1
    1072:	d6 2e       	mov	r13, r22
    1074:	3c c0       	rjmp	.+120    	; 0x10ee <seperate+0xb2>
}

void seperate() {
	for (int i = 0; i < arr_size; ++i)
	{
		if ((arr[i] >= 8 && arr[i] <= 18) || (arr[i] >= 28 && arr[i] <= 32))
    1076:	6c 91       	ld	r22, X
    1078:	11 96       	adiw	r26, 0x01	; 1
    107a:	7c 91       	ld	r23, X
    107c:	11 97       	sbiw	r26, 0x01	; 1
    107e:	9b 01       	movw	r18, r22
    1080:	c9 01       	movw	r24, r18
    1082:	08 97       	sbiw	r24, 0x08	; 8
    1084:	0b 97       	sbiw	r24, 0x0b	; 11
    1086:	28 f0       	brcs	.+10     	; 0x1092 <seperate+0x56>
    1088:	2c 51       	subi	r18, 0x1C	; 28
    108a:	30 40       	sbci	r19, 0x00	; 0
    108c:	25 30       	cpi	r18, 0x05	; 5
    108e:	31 05       	cpc	r19, r1
    1090:	a0 f4       	brcc	.+40     	; 0x10ba <seperate+0x7e>
		{
			arr_slave[i] = arr[i];
    1092:	f7 01       	movw	r30, r14
    1094:	e4 0f       	add	r30, r20
    1096:	f5 1f       	adc	r31, r21
    1098:	60 83       	st	Z, r22
    109a:	71 83       	std	Z+1, r23	; 0x01
    109c:	88 ee       	ldi	r24, 0xE8	; 232
    109e:	93 e0       	ldi	r25, 0x03	; 3
    10a0:	f6 01       	movw	r30, r12
    10a2:	31 97       	sbiw	r30, 0x01	; 1
    10a4:	f1 f7       	brne	.-4      	; 0x10a2 <seperate+0x66>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a8:	d9 f7       	brne	.-10     	; 0x10a0 <seperate+0x64>
			_delay_ms(100);

			UDR0 = arr_slave[i];
    10aa:	60 93 c6 00 	sts	0x00C6, r22

			sequence_arr[i] = 0;
    10ae:	f8 01       	movw	r30, r16
    10b0:	e4 0f       	add	r30, r20
    10b2:	f5 1f       	adc	r31, r21
    10b4:	11 82       	std	Z+1, r1	; 0x01
    10b6:	10 82       	st	Z, r1
    10b8:	16 c0       	rjmp	.+44     	; 0x10e6 <seperate+0xaa>
		}
		else {
			arr_slave[i] = 0;
    10ba:	f7 01       	movw	r30, r14
    10bc:	e4 0f       	add	r30, r20
    10be:	f5 1f       	adc	r31, r21
    10c0:	11 82       	std	Z+1, r1	; 0x01
    10c2:	10 82       	st	Z, r1
    10c4:	88 ee       	ldi	r24, 0xE8	; 232
    10c6:	93 e0       	ldi	r25, 0x03	; 3
    10c8:	f6 01       	movw	r30, r12
    10ca:	31 97       	sbiw	r30, 0x01	; 1
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <seperate+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d0:	d9 f7       	brne	.-10     	; 0x10c8 <seperate+0x8c>
			_delay_ms(100);
			
			UDR0 = arr_slave[i];
    10d2:	10 92 c6 00 	sts	0x00C6, r1

			sequence_arr[i] = arr[i];
    10d6:	f8 01       	movw	r30, r16
    10d8:	e4 0f       	add	r30, r20
    10da:	f5 1f       	adc	r31, r21
    10dc:	8d 91       	ld	r24, X+
    10de:	9c 91       	ld	r25, X
    10e0:	11 97       	sbiw	r26, 0x01	; 1
    10e2:	91 83       	std	Z+1, r25	; 0x01
    10e4:	80 83       	st	Z, r24
 port_restore = port_restore & 0xF7;
 PORTC = port_restore;
}

void seperate() {
	for (int i = 0; i < arr_size; ++i)
    10e6:	21 96       	adiw	r28, 0x01	; 1
    10e8:	4e 5f       	subi	r20, 0xFE	; 254
    10ea:	5f 4f       	sbci	r21, 0xFF	; 255
    10ec:	12 96       	adiw	r26, 0x02	; 2
    10ee:	80 91 32 04 	lds	r24, 0x0432
    10f2:	90 91 33 04 	lds	r25, 0x0433
    10f6:	c8 17       	cp	r28, r24
    10f8:	d9 07       	cpc	r29, r25
    10fa:	0c f4       	brge	.+2      	; 0x10fe <seperate+0xc2>
    10fc:	bc cf       	rjmp	.-136    	; 0x1076 <seperate+0x3a>

			sequence_arr[i] = arr[i];
		}
	}
	//UDR0 = 'e';	
}
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	1f 91       	pop	r17
    1104:	0f 91       	pop	r16
    1106:	ff 90       	pop	r15
    1108:	ef 90       	pop	r14
    110a:	df 90       	pop	r13
    110c:	cf 90       	pop	r12
    110e:	08 95       	ret

00001110 <remove_zero>:

void remove_zero() {
	int i = 0, j = 0;
	while (i < arr_size)
    1110:	60 91 32 04 	lds	r22, 0x0432
    1114:	70 91 33 04 	lds	r23, 0x0433
    1118:	a0 91 bc 17 	lds	r26, 0x17BC
    111c:	b0 91 bd 17 	lds	r27, 0x17BD
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	11 c0       	rjmp	.+34     	; 0x114c <remove_zero+0x3c>
	{
		if(sequence_arr[i]!=0)
    112a:	4d 91       	ld	r20, X+
    112c:	5c 91       	ld	r21, X
    112e:	11 97       	sbiw	r26, 0x01	; 1
    1130:	41 15       	cp	r20, r1
    1132:	51 05       	cpc	r21, r1
    1134:	41 f0       	breq	.+16     	; 0x1146 <remove_zero+0x36>
		{
			arr_master[j] = sequence_arr[i];
    1136:	fc 01       	movw	r30, r24
    1138:	ee 0f       	add	r30, r30
    113a:	ff 1f       	adc	r31, r31
    113c:	e6 57       	subi	r30, 0x76	; 118
    113e:	f8 4e       	sbci	r31, 0xE8	; 232
    1140:	51 83       	std	Z+1, r21	; 0x01
    1142:	40 83       	st	Z, r20
			j++;
    1144:	01 96       	adiw	r24, 0x01	; 1
		}
		i++;
    1146:	2f 5f       	subi	r18, 0xFF	; 255
    1148:	3f 4f       	sbci	r19, 0xFF	; 255
    114a:	12 96       	adiw	r26, 0x02	; 2
	//UDR0 = 'e';	
}

void remove_zero() {
	int i = 0, j = 0;
	while (i < arr_size)
    114c:	26 17       	cp	r18, r22
    114e:	37 07       	cpc	r19, r23
    1150:	64 f3       	brlt	.-40     	; 0x112a <remove_zero+0x1a>
			arr_master[j] = sequence_arr[i];
			j++;
		}
		i++;
	}
	master_size = j;
    1152:	90 93 35 04 	sts	0x0435, r25
    1156:	80 93 34 04 	sts	0x0434, r24
}
    115a:	08 95       	ret

0000115c <print>:

void print() {
    115c:	cf 92       	push	r12
    115e:	df 92       	push	r13
    1160:	ef 92       	push	r14
    1162:	ff 92       	push	r15
    1164:	0f 93       	push	r16
    1166:	1f 93       	push	r17
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
    116c:	2a e8       	ldi	r18, 0x8A	; 138
    116e:	c2 2e       	mov	r12, r18
    1170:	27 e1       	ldi	r18, 0x17	; 23
    1172:	d2 2e       	mov	r13, r18
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	e9 2e       	mov	r14, r25
    1178:	f1 2c       	mov	r15, r1
    117a:	c1 e0       	ldi	r28, 0x01	; 1
    117c:	d0 e0       	ldi	r29, 0x00	; 0
    117e:	00 e0       	ldi	r16, 0x00	; 0
    1180:	10 e0       	ldi	r17, 0x00	; 0
    1182:	15 c0       	rjmp	.+42     	; 0x11ae <print+0x52>
	int k = 1;
	int j = 1;
	for (int i = 0; i < master_size; i++)
	{
		if (j == 17)
    1184:	c1 31       	cpi	r28, 0x11	; 17
    1186:	d1 05       	cpc	r29, r1
    1188:	29 f4       	brne	.+10     	; 0x1194 <print+0x38>
    118a:	82 e0       	ldi	r24, 0x02	; 2
    118c:	e8 2e       	mov	r14, r24
    118e:	f1 2c       	mov	r15, r1
    1190:	c1 e0       	ldi	r28, 0x01	; 1
    1192:	d0 e0       	ldi	r29, 0x00	; 0
		{
			j = 1;
			k = 2;
		}

		lcd_print(k,j,arr_master[i],2);
    1194:	f6 01       	movw	r30, r12
    1196:	41 91       	ld	r20, Z+
    1198:	51 91       	ld	r21, Z+
    119a:	6f 01       	movw	r12, r30
    119c:	8e 2d       	mov	r24, r14
    119e:	6c 2f       	mov	r22, r28
    11a0:	22 e0       	ldi	r18, 0x02	; 2
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	0e 94 3d 07 	call	0xe7a	; 0xe7a <lcd_print>
		
		j += 2;
    11a8:	22 96       	adiw	r28, 0x02	; 2
}

void print() {
	int k = 1;
	int j = 1;
	for (int i = 0; i < master_size; i++)
    11aa:	0f 5f       	subi	r16, 0xFF	; 255
    11ac:	1f 4f       	sbci	r17, 0xFF	; 255
    11ae:	80 91 34 04 	lds	r24, 0x0434
    11b2:	90 91 35 04 	lds	r25, 0x0435
    11b6:	08 17       	cp	r16, r24
    11b8:	19 07       	cpc	r17, r25
    11ba:	24 f3       	brlt	.-56     	; 0x1184 <print+0x28>

		lcd_print(k,j,arr_master[i],2);
		
		j += 2;
	}
}
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	ff 90       	pop	r15
    11c6:	ef 90       	pop	r14
    11c8:	df 90       	pop	r13
    11ca:	cf 90       	pop	r12
    11cc:	08 95       	ret

000011ce <__vector_25>:



SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
    11ce:	1f 92       	push	r1
    11d0:	0f 92       	push	r0
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	0f 92       	push	r0
    11d6:	11 24       	eor	r1, r1
    11d8:	8f 93       	push	r24
	data = UDR0; 				//making copy of data from UDR0 in 'data' variable 
    11da:	80 91 c6 00 	lds	r24, 0x00C6
    11de:	80 93 bb 17 	sts	0x17BB, r24

	Counter = (signed int) data;
    11e2:	80 93 36 04 	sts	0x0436, r24
    11e6:	10 92 37 04 	sts	0x0437, r1
	//UDR2 = data; 				//echo data back to PC
	//lcd_print(1,4,Counter,2);

}
    11ea:	8f 91       	pop	r24
    11ec:	0f 90       	pop	r0
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	0f 90       	pop	r0
    11f2:	1f 90       	pop	r1
    11f4:	18 95       	reti

000011f6 <initial_devices>:
}

//Function To Initialize all The Devices
void initial_devices()
{
 cli(); //Clears the global interrupts
    11f6:	f8 94       	cli

void simulation(int, int);

void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
    11f8:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    11fa:	43 98       	cbi	0x08, 3	; 8
}
//Function to configure LCD port
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    11fc:	87 b1       	in	r24, 0x07	; 7
    11fe:	87 6f       	ori	r24, 0xF7	; 247
    1200:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    1202:	88 b1       	in	r24, 0x08	; 8
    1204:	80 78       	andi	r24, 0x80	; 128
    1206:	88 b9       	out	0x08, r24	; 8
// actual baud rate:9600 (error 0.0%)
// char arr_size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
    1208:	e1 ec       	ldi	r30, 0xC1	; 193
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	10 82       	st	Z, r1
 UCSR0A = 0x00;
    120e:	10 92 c0 00 	sts	0x00C0, r1
 UCSR0C = 0x06;
    1212:	26 e0       	ldi	r18, 0x06	; 6
    1214:	20 93 c2 00 	sts	0x00C2, r18
 UBRR0L = 0x5F; //set baud rate lo
    1218:	9f e5       	ldi	r25, 0x5F	; 95
    121a:	90 93 c4 00 	sts	0x00C4, r25
 UBRR0H = 0x00; //set baud rate hi
    121e:	10 92 c5 00 	sts	0x00C5, r1
 UCSR0B = 0x98;
    1222:	88 e9       	ldi	r24, 0x98	; 152
    1224:	80 83       	st	Z, r24
// actual baud rate:9600 (error 0.0%)
// char arr_size: 8 bit
// parity: Disabled
void uart2_init(void)
{
 UCSR2B = 0x00; //disable while setting baud rate
    1226:	e1 ed       	ldi	r30, 0xD1	; 209
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	10 82       	st	Z, r1
 UCSR2A = 0x00;
    122c:	10 92 d0 00 	sts	0x00D0, r1
 UCSR2C = 0x06;
    1230:	20 93 d2 00 	sts	0x00D2, r18
 UBRR2L = 0x5F; //set baud rate lo
    1234:	90 93 d4 00 	sts	0x00D4, r25
 UBRR2H = 0x00; //set baud rate hi
    1238:	10 92 d5 00 	sts	0x00D5, r1
 UCSR2B = 0x98;
    123c:	80 83       	st	Z, r24
{
 cli(); //Clears the global interrupts
 port_initial();  //Initializes all the ports
 uart0_init(); //Initailize UART0 for serial communiaction
 uart2_init(); //Initailize UART1 for serial communiaction
 sei();   //Enables the global interrupts
    123e:	78 94       	sei
}
    1240:	08 95       	ret

00001242 <__vector_51>:
	//UDR2 = data; 				//echo data back to PC
	//lcd_print(1,4,Counter,2);

}
SIGNAL(SIG_USART2_RECV) 		// ISR for receive complete interrupt
{
    1242:	1f 92       	push	r1
    1244:	0f 92       	push	r0
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	0f 92       	push	r0
    124a:	0b b6       	in	r0, 0x3b	; 59
    124c:	0f 92       	push	r0
    124e:	11 24       	eor	r1, r1
    1250:	2f 93       	push	r18
    1252:	3f 93       	push	r19
    1254:	4f 93       	push	r20
    1256:	5f 93       	push	r21
    1258:	6f 93       	push	r22
    125a:	7f 93       	push	r23
    125c:	8f 93       	push	r24
    125e:	9f 93       	push	r25
    1260:	af 93       	push	r26
    1262:	bf 93       	push	r27
    1264:	ef 93       	push	r30
    1266:	ff 93       	push	r31
	data = UDR2; 				//making copy of data from UDR2 in 'data' variable 
    1268:	20 91 d6 00 	lds	r18, 0x00D6
    126c:	20 93 bb 17 	sts	0x17BB, r18

	UDR2 = data; 				//echo data back to PC
    1270:	20 93 d6 00 	sts	0x00D6, r18

	if (count == -1)
    1274:	e0 91 0d 03 	lds	r30, 0x030D
    1278:	f0 91 0e 03 	lds	r31, 0x030E
    127c:	8f ef       	ldi	r24, 0xFF	; 255
    127e:	ef 3f       	cpi	r30, 0xFF	; 255
    1280:	f8 07       	cpc	r31, r24
    1282:	61 f5       	brne	.+88     	; 0x12dc <__vector_51+0x9a>
	{
		arr_size = (signed int) data;
		arr_size -= 48;
    1284:	82 2f       	mov	r24, r18
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	c0 97       	sbiw	r24, 0x30	; 48
    128a:	90 93 33 04 	sts	0x0433, r25
    128e:	80 93 32 04 	sts	0x0432, r24
		count++;
    1292:	10 92 0e 03 	sts	0x030E, r1
    1296:	10 92 0d 03 	sts	0x030D, r1
		arr = (signed int*) malloc(arr_size*sizeof(signed int));
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <malloc>
    12a2:	80 93 fa 16 	sts	0x16FA, r24
    12a6:	90 93 fb 16 	sts	0x16FB, r25
		sequence_arr = (signed int*) malloc(arr_size*sizeof(signed int));
    12aa:	80 91 32 04 	lds	r24, 0x0432
    12ae:	90 91 33 04 	lds	r25, 0x0433
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <malloc>
    12ba:	80 93 bc 17 	sts	0x17BC, r24
    12be:	90 93 bd 17 	sts	0x17BD, r25
		arr_slave = (signed int*) malloc(arr_size*sizeof(signed int));
    12c2:	80 91 32 04 	lds	r24, 0x0432
    12c6:	90 91 33 04 	lds	r25, 0x0433
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <malloc>
    12d2:	80 93 be 17 	sts	0x17BE, r24
    12d6:	90 93 bf 17 	sts	0x17BF, r25
    12da:	27 c0       	rjmp	.+78     	; 0x132a <__vector_51+0xe8>
	} 
	
	else if (count < arr_size) {
    12dc:	80 91 32 04 	lds	r24, 0x0432
    12e0:	90 91 33 04 	lds	r25, 0x0433
    12e4:	e8 17       	cp	r30, r24
    12e6:	f9 07       	cpc	r31, r25
    12e8:	04 f5       	brge	.+64     	; 0x132a <__vector_51+0xe8>
		arr[count] = (signed int) data;
    12ea:	80 91 fa 16 	lds	r24, 0x16FA
    12ee:	90 91 fb 16 	lds	r25, 0x16FB
    12f2:	ee 0f       	add	r30, r30
    12f4:	ff 1f       	adc	r31, r31
    12f6:	e8 0f       	add	r30, r24
    12f8:	f9 1f       	adc	r31, r25
    12fa:	20 83       	st	Z, r18
    12fc:	11 82       	std	Z+1, r1	; 0x01
		arr[count] -= 48;
    12fe:	e0 91 0d 03 	lds	r30, 0x030D
    1302:	f0 91 0e 03 	lds	r31, 0x030E
    1306:	ee 0f       	add	r30, r30
    1308:	ff 1f       	adc	r31, r31
    130a:	e8 0f       	add	r30, r24
    130c:	f9 1f       	adc	r31, r25
    130e:	80 81       	ld	r24, Z
    1310:	91 81       	ldd	r25, Z+1	; 0x01
    1312:	c0 97       	sbiw	r24, 0x30	; 48
    1314:	91 83       	std	Z+1, r25	; 0x01
    1316:	80 83       	st	Z, r24
		count++;
    1318:	80 91 0d 03 	lds	r24, 0x030D
    131c:	90 91 0e 03 	lds	r25, 0x030E
    1320:	01 96       	adiw	r24, 0x01	; 1
    1322:	90 93 0e 03 	sts	0x030E, r25
    1326:	80 93 0d 03 	sts	0x030D, r24
	}
}
    132a:	ff 91       	pop	r31
    132c:	ef 91       	pop	r30
    132e:	bf 91       	pop	r27
    1330:	af 91       	pop	r26
    1332:	9f 91       	pop	r25
    1334:	8f 91       	pop	r24
    1336:	7f 91       	pop	r23
    1338:	6f 91       	pop	r22
    133a:	5f 91       	pop	r21
    133c:	4f 91       	pop	r20
    133e:	3f 91       	pop	r19
    1340:	2f 91       	pop	r18
    1342:	0f 90       	pop	r0
    1344:	0b be       	out	0x3b, r0	; 59
    1346:	0f 90       	pop	r0
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	0f 90       	pop	r0
    134c:	1f 90       	pop	r1
    134e:	18 95       	reti

00001350 <mapRun>:
	*Output: 0 on successful completion
	*Logic: Given a array of nodes, executes dStar to find the best path
			to touch all the nodes and follows it.
*/
int* mapRun(signed int angle[], int Size)
{
    1350:	6f 92       	push	r6
    1352:	7f 92       	push	r7
    1354:	8f 92       	push	r8
    1356:	9f 92       	push	r9
    1358:	af 92       	push	r10
    135a:	bf 92       	push	r11
    135c:	cf 92       	push	r12
    135e:	df 92       	push	r13
    1360:	ef 92       	push	r14
    1362:	ff 92       	push	r15
    1364:	0f 93       	push	r16
    1366:	1f 93       	push	r17
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	4c 01       	movw	r8, r24
    136e:	5b 01       	movw	r10, r22
	init_devices();
    1370:	0e 94 66 05 	call	0xacc	; 0xacc <init_devices>
	lcd_set_4bit();
    1374:	0e 94 86 06 	call	0xd0c	; 0xd0c <lcd_set_4bit>
	lcd_init();
    1378:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <lcd_init>
	
	// after dectecting the note bot will turn angle[i] angle
	signed int count = -1;
	int *res = (int*) malloc (3*sizeof(int));		//Holds result
    137c:	86 e0       	ldi	r24, 0x06	; 6
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <malloc>
    1384:	ec 01       	movw	r28, r24
	for (int i = 0; i < 3; i++)
		res[i] = 0;
    1386:	fc 01       	movw	r30, r24
    1388:	11 92       	st	Z+, r1
    138a:	11 92       	st	Z+, r1
    138c:	6f 01       	movw	r12, r30
    138e:	1b 82       	std	Y+3, r1	; 0x03
    1390:	1a 82       	std	Y+2, r1	; 0x02
    1392:	14 e0       	ldi	r17, 0x04	; 4
    1394:	61 2e       	mov	r6, r17
    1396:	71 2c       	mov	r7, r1
    1398:	68 0e       	add	r6, r24
    139a:	79 1e       	adc	r7, r25
    139c:	1d 82       	std	Y+5, r1	; 0x05
    139e:	1c 82       	std	Y+4, r1	; 0x04
    13a0:	0f ef       	ldi	r16, 0xFF	; 255
    13a2:	1f ef       	ldi	r17, 0xFF	; 255
    13a4:	b0 e7       	ldi	r27, 0x70	; 112
    13a6:	eb 2e       	mov	r14, r27
    13a8:	b1 e0       	ldi	r27, 0x01	; 1
    13aa:	fb 2e       	mov	r15, r27
    13ac:	80 c1       	rjmp	.+768    	; 0x16ae <mapRun+0x35e>

	while(count < Size)
	{
		int flag = 0;

		Front_IR_Sensor = ADC_Conversion(6);    //Getting data of Center IR Proximity Sensor Sensor
    13ae:	86 e0       	ldi	r24, 0x06	; 6
    13b0:	0e 94 99 04 	call	0x932	; 0x932 <ADC_Conversion>
    13b4:	80 93 31 04 	sts	0x0431, r24

		// If their an object with in 9 cm range of IR sensor
		// LCD will print "OBSTRACLE DETECTED !"
		// Bot will take an initial right turn to shift from the black line
		// Then bot will take right turn until the center whiteline sensor is on top of black line
		if (Front_IR_Sensor < 90)
    13b8:	8a 35       	cpi	r24, 0x5A	; 90
    13ba:	08 f0       	brcs	.+2      	; 0x13be <mapRun+0x6e>
    13bc:	49 c0       	rjmp	.+146    	; 0x1450 <mapRun+0x100>
		{
			lcd_cursor(1,1);
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	61 e0       	ldi	r22, 0x01	; 1
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
			lcd_string("    OBSTRACLE   ");
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	92 e0       	ldi	r25, 0x02	; 2
    13ce:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
			lcd_cursor(2,1);
    13d2:	82 e0       	ldi	r24, 0x02	; 2
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	61 e0       	ldi	r22, 0x01	; 1
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
			lcd_string("    DETECTED !  ");
    13de:	81 e1       	ldi	r24, 0x11	; 17
    13e0:	92 e0       	ldi	r25, 0x02	; 2
    13e2:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    13e6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    13e8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    13ea:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    13ec:	82 b9       	out	0x02, r24	; 2
    13ee:	88 ee       	ldi	r24, 0xE8	; 232
    13f0:	93 e0       	ldi	r25, 0x03	; 3
    13f2:	20 e7       	ldi	r18, 0x70	; 112
    13f4:	31 e0       	ldi	r19, 0x01	; 1
    13f6:	f9 01       	movw	r30, r18
    13f8:	31 97       	sbiw	r30, 0x01	; 1
    13fa:	f1 f7       	brne	.-4      	; 0x13f8 <mapRun+0xa8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13fe:	d9 f7       	brne	.-10     	; 0x13f6 <mapRun+0xa6>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1400:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1402:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1404:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    1406:	82 b9       	out	0x02, r24	; 2
			right();
			_delay_ms(100);
			do
			{
				right();
				Center_white_line = ADC_Conversion(2);
    1408:	82 e0       	ldi	r24, 0x02	; 2
    140a:	0e 94 99 04 	call	0x932	; 0x932 <ADC_Conversion>
    140e:	80 93 28 04 	sts	0x0428, r24
			}
			while (Center_white_line < 0x50);
    1412:	80 35       	cpi	r24, 0x50	; 80
    1414:	a8 f3       	brcs	.-22     	; 0x1400 <mapRun+0xb0>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1416:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1418:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    141a:	82 b9       	out	0x02, r24	; 2
    141c:	88 ee       	ldi	r24, 0xE8	; 232
    141e:	93 e0       	ldi	r25, 0x03	; 3
    1420:	20 e7       	ldi	r18, 0x70	; 112
    1422:	31 e0       	ldi	r19, 0x01	; 1
    1424:	f9 01       	movw	r30, r18
    1426:	31 97       	sbiw	r30, 0x01	; 1
    1428:	f1 f7       	brne	.-4      	; 0x1426 <mapRun+0xd6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    142a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    142c:	d9 f7       	brne	.-10     	; 0x1424 <mapRun+0xd4>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    142e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1430:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1432:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1434:	82 b9       	out	0x02, r24	; 2
			}
			while (Center_white_line < 0x50);
			stop();
			_delay_ms(100);
			forward();
			res[0] = 1;
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	99 83       	std	Y+1, r25	; 0x01
    143c:	88 83       	st	Y, r24
			res[1] = count;
    143e:	f6 01       	movw	r30, r12
    1440:	11 83       	std	Z+1, r17	; 0x01
    1442:	00 83       	st	Z, r16
			res[2] = count+1;
    1444:	0f 5f       	subi	r16, 0xFF	; 255
    1446:	1f 4f       	sbci	r17, 0xFF	; 255
    1448:	f3 01       	movw	r30, r6
    144a:	11 83       	std	Z+1, r17	; 0x01
    144c:	00 83       	st	Z, r16
    144e:	33 c1       	rjmp	.+614    	; 0x16b6 <mapRun+0x366>
			return res;
		}

		move();// calling the move function
    1450:	0e 94 a1 05 	call	0xb42	; 0xb42 <move>

		// If center center plus left or right sensor detects the black line
		// The bot is over a node
		if ((senser_value_C > Threshold) && (senser_value_L > Threshold) || (senser_value_C > Threshold) && (senser_value_R > Threshold))
    1454:	80 91 fc 16 	lds	r24, 0x16FC
    1458:	90 91 fd 16 	lds	r25, 0x16FD
    145c:	89 97       	sbiw	r24, 0x29	; 41
    145e:	0c f4       	brge	.+2      	; 0x1462 <mapRun+0x112>
    1460:	a6 cf       	rjmp	.-180    	; 0x13ae <mapRun+0x5e>
    1462:	80 91 b7 17 	lds	r24, 0x17B7
    1466:	90 91 b8 17 	lds	r25, 0x17B8
    146a:	89 97       	sbiw	r24, 0x29	; 41
    146c:	3c f4       	brge	.+14     	; 0x147c <mapRun+0x12c>
    146e:	80 91 c2 17 	lds	r24, 0x17C2
    1472:	90 91 c3 17 	lds	r25, 0x17C3
    1476:	89 97       	sbiw	r24, 0x29	; 41
    1478:	0c f4       	brge	.+2      	; 0x147c <mapRun+0x12c>
    147a:	19 c1       	rjmp	.+562    	; 0x16ae <mapRun+0x35e>
		{
			lcd_cursor(2,1);
    147c:	82 e0       	ldi	r24, 0x02	; 2
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	61 e0       	ldi	r22, 0x01	; 1
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
			lcd_string("NOTE DETECTED!!!");
    1488:	82 e2       	ldi	r24, 0x22	; 34
    148a:	92 e0       	ldi	r25, 0x02	; 2
    148c:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
			// move while encoders certain value reach
			
			count++;
    1490:	0f 5f       	subi	r16, 0xFF	; 255
    1492:	1f 4f       	sbci	r17, 0xFF	; 255
			//if angle[i] is 60 the bot has to take a 60 degree turn
			// bot will move 6 cm ahead and 30 degree left to skip the current black line
			// then it will rotate left until it finds another black line
			// lcd will print "60 degree success"
			if (angle[count] == 60 || angle[count] == -300)
    1494:	f8 01       	movw	r30, r16
    1496:	ee 0f       	add	r30, r30
    1498:	ff 1f       	adc	r31, r31
    149a:	e8 0d       	add	r30, r8
    149c:	f9 1d       	adc	r31, r9
    149e:	01 90       	ld	r0, Z+
    14a0:	f0 81       	ld	r31, Z
    14a2:	e0 2d       	mov	r30, r0
    14a4:	ec 33       	cpi	r30, 0x3C	; 60
    14a6:	f1 05       	cpc	r31, r1
    14a8:	21 f0       	breq	.+8      	; 0x14b2 <mapRun+0x162>
    14aa:	8e ef       	ldi	r24, 0xFE	; 254
    14ac:	e4 3d       	cpi	r30, 0xD4	; 212
    14ae:	f8 07       	cpc	r31, r24
    14b0:	51 f5       	brne	.+84     	; 0x1506 <mapRun+0x1b6>
	stop(); //Stop robot
}

void forward_mm(unsigned int DistanceInMM)
{
	linear_distance_mm(DistanceInMM);
    14b2:	8c e3       	ldi	r24, 0x3C	; 60
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	0e 94 49 06 	call	0xc92	; 0xc92 <linear_distance_mm>
    14ba:	88 ee       	ldi	r24, 0xE8	; 232
    14bc:	93 e0       	ldi	r25, 0x03	; 3
    14be:	f7 01       	movw	r30, r14
    14c0:	31 97       	sbiw	r30, 0x01	; 1
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <mapRun+0x170>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c6:	d9 f7       	brne	.-10     	; 0x14be <mapRun+0x16e>
			// lcd will print "60 degree success"
			if (angle[count] == 60 || angle[count] == -300)
			{
				forward_mm(60);
				_delay_ms(100);
				left_degrees(30);
    14c8:	8e e1       	ldi	r24, 0x1E	; 30
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 34 05 	call	0xa68	; 0xa68 <left_degrees>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    14d0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    14d2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    14d4:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
    14d6:	82 b9       	out	0x02, r24	; 2
				_delay_ms(100);
				left_degrees(30);
				do
				{
					left();
					senser_value_C = ADC_Conversion(2);
    14d8:	82 e0       	ldi	r24, 0x02	; 2
    14da:	0e 94 99 04 	call	0x932	; 0x932 <ADC_Conversion>
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	90 93 fd 16 	sts	0x16FD, r25
    14e4:	80 93 fc 16 	sts	0x16FC, r24
				}
				while (senser_value_C < 110);
    14e8:	8e 36       	cpi	r24, 0x6E	; 110
    14ea:	91 05       	cpc	r25, r1
    14ec:	8c f3       	brlt	.-30     	; 0x14d0 <mapRun+0x180>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    14ee:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    14f0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    14f2:	82 b9       	out	0x02, r24	; 2
					left();
					senser_value_C = ADC_Conversion(2);
				}
				while (senser_value_C < 110);
				stop();
				lcd_cursor(1,1);
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	61 e0       	ldi	r22, 0x01	; 1
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
				lcd_string("60 degree succes");
    1500:	83 e3       	ldi	r24, 0x33	; 51
    1502:	92 e0       	ldi	r25, 0x02	; 2
    1504:	30 c0       	rjmp	.+96     	; 0x1566 <mapRun+0x216>
			}
			//if angle[i] is 120 the bot has to take a 120 degree turn
			// bot will move 1.5 cm ahead and 30 degree back left to skip the current black line
			// then it will rotate soft left until it finds another black line
			// lcd will print "120 degree success"
			else if (angle[count] == 120 || angle[count] == -240)
    1506:	e8 37       	cpi	r30, 0x78	; 120
    1508:	f1 05       	cpc	r31, r1
    150a:	21 f0       	breq	.+8      	; 0x1514 <mapRun+0x1c4>
    150c:	8f ef       	ldi	r24, 0xFF	; 255
    150e:	e0 31       	cpi	r30, 0x10	; 16
    1510:	f8 07       	cpc	r31, r24
    1512:	61 f5       	brne	.+88     	; 0x156c <mapRun+0x21c>
	stop(); //Stop robot
}

void forward_mm(unsigned int DistanceInMM)
{
	linear_distance_mm(DistanceInMM);
    1514:	8f e0       	ldi	r24, 0x0F	; 15
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	0e 94 49 06 	call	0xc92	; 0xc92 <linear_distance_mm>
    151c:	88 ee       	ldi	r24, 0xE8	; 232
    151e:	93 e0       	ldi	r25, 0x03	; 3
    1520:	f7 01       	movw	r30, r14
    1522:	31 97       	sbiw	r30, 0x01	; 1
    1524:	f1 f7       	brne	.-4      	; 0x1522 <mapRun+0x1d2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1526:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1528:	d9 f7       	brne	.-10     	; 0x1520 <mapRun+0x1d0>
			// lcd will print "120 degree success"
			else if (angle[count] == 120 || angle[count] == -240)
			{
				forward_mm(15);
				_delay_ms(100);
				soft_left_2_degrees(30);
    152a:	8e e1       	ldi	r24, 0x1E	; 30
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <soft_left_2_degrees>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1532:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1534:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1536:	84 60       	ori	r24, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
    1538:	82 b9       	out	0x02, r24	; 2
				_delay_ms(100);
				soft_left_2_degrees(30);
				do
				{
					soft_left();
					senser_value_C = ADC_Conversion(2);
    153a:	82 e0       	ldi	r24, 0x02	; 2
    153c:	0e 94 99 04 	call	0x932	; 0x932 <ADC_Conversion>
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	90 93 fd 16 	sts	0x16FD, r25
    1546:	80 93 fc 16 	sts	0x16FC, r24
				}
				while (senser_value_C < 110);
    154a:	8e 36       	cpi	r24, 0x6E	; 110
    154c:	91 05       	cpc	r25, r1
    154e:	8c f3       	brlt	.-30     	; 0x1532 <mapRun+0x1e2>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1550:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1552:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1554:	82 b9       	out	0x02, r24	; 2
					soft_left();
					senser_value_C = ADC_Conversion(2);
				}
				while (senser_value_C < 110);
				stop();
				lcd_cursor(1,1);
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	61 e0       	ldi	r22, 0x01	; 1
    155c:	70 e0       	ldi	r23, 0x00	; 0
    155e:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
				lcd_string("120 degree suces");
    1562:	84 e4       	ldi	r24, 0x44	; 68
    1564:	92 e0       	ldi	r25, 0x02	; 2
    1566:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
    156a:	8d c0       	rjmp	.+282    	; 0x1686 <mapRun+0x336>
			}
			//if angle[i] is -60 the bot has to take a -60 degree turn
			// bot will move 6 cm ahead and 30 degree right to skip the current black line
			// then it will rotate rihgt until it finds another black line
			// lcd will print "-60 degree success"
			else if (angle[count] == -60 || angle[count] == 300)
    156c:	8f ef       	ldi	r24, 0xFF	; 255
    156e:	e4 3c       	cpi	r30, 0xC4	; 196
    1570:	f8 07       	cpc	r31, r24
    1572:	21 f0       	breq	.+8      	; 0x157c <mapRun+0x22c>
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	ec 32       	cpi	r30, 0x2C	; 44
    1578:	f8 07       	cpc	r31, r24
    157a:	51 f5       	brne	.+84     	; 0x15d0 <mapRun+0x280>
	stop(); //Stop robot
}

void forward_mm(unsigned int DistanceInMM)
{
	linear_distance_mm(DistanceInMM);
    157c:	8c e3       	ldi	r24, 0x3C	; 60
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	0e 94 49 06 	call	0xc92	; 0xc92 <linear_distance_mm>
    1584:	88 ee       	ldi	r24, 0xE8	; 232
    1586:	93 e0       	ldi	r25, 0x03	; 3
    1588:	f7 01       	movw	r30, r14
    158a:	31 97       	sbiw	r30, 0x01	; 1
    158c:	f1 f7       	brne	.-4      	; 0x158a <mapRun+0x23a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    158e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1590:	d9 f7       	brne	.-10     	; 0x1588 <mapRun+0x238>
			// lcd will print "-60 degree success"
			else if (angle[count] == -60 || angle[count] == 300)
			{
				forward_mm(60);
				_delay_ms(100);
				right_degrees(30);
    1592:	8e e1       	ldi	r24, 0x1E	; 30
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 3b 05 	call	0xa76	; 0xa76 <right_degrees>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    159a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    159c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    159e:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    15a0:	82 b9       	out	0x02, r24	; 2
				_delay_ms(100);
				right_degrees(30);
				do
				{
					right();
					senser_value_C = ADC_Conversion(2);
    15a2:	82 e0       	ldi	r24, 0x02	; 2
    15a4:	0e 94 99 04 	call	0x932	; 0x932 <ADC_Conversion>
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	90 93 fd 16 	sts	0x16FD, r25
    15ae:	80 93 fc 16 	sts	0x16FC, r24
				}
				while (senser_value_C < 110);
    15b2:	8e 36       	cpi	r24, 0x6E	; 110
    15b4:	91 05       	cpc	r25, r1
    15b6:	8c f3       	brlt	.-30     	; 0x159a <mapRun+0x24a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    15b8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    15ba:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    15bc:	82 b9       	out	0x02, r24	; 2
					right();
					senser_value_C = ADC_Conversion(2);
				}
				while (senser_value_C < 110);
				stop();
				lcd_cursor(1,1);
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	61 e0       	ldi	r22, 0x01	; 1
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
				lcd_string("-60 degree suces");
    15ca:	85 e5       	ldi	r24, 0x55	; 85
    15cc:	92 e0       	ldi	r25, 0x02	; 2
    15ce:	cb cf       	rjmp	.-106    	; 0x1566 <mapRun+0x216>
			}
			//if angle[i] is -120 the bot has to take a -120 degree turn
			// bot will move 1.5 cm ahead and 30 degree back right to skip the current black line
			// then it will rotate soft right until it finds another black line
			// lcd will print "-120 degree success"
			else if (angle[count] == -120 || angle[count] == 240)
    15d0:	8f ef       	ldi	r24, 0xFF	; 255
    15d2:	e8 38       	cpi	r30, 0x88	; 136
    15d4:	f8 07       	cpc	r31, r24
    15d6:	19 f0       	breq	.+6      	; 0x15de <mapRun+0x28e>
    15d8:	e0 3f       	cpi	r30, 0xF0	; 240
    15da:	f1 05       	cpc	r31, r1
    15dc:	51 f5       	brne	.+84     	; 0x1632 <mapRun+0x2e2>
	stop(); //Stop robot
}

void forward_mm(unsigned int DistanceInMM)
{
	linear_distance_mm(DistanceInMM);
    15de:	8f e0       	ldi	r24, 0x0F	; 15
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	0e 94 49 06 	call	0xc92	; 0xc92 <linear_distance_mm>
    15e6:	88 ee       	ldi	r24, 0xE8	; 232
    15e8:	93 e0       	ldi	r25, 0x03	; 3
    15ea:	f7 01       	movw	r30, r14
    15ec:	31 97       	sbiw	r30, 0x01	; 1
    15ee:	f1 f7       	brne	.-4      	; 0x15ec <mapRun+0x29c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f2:	d9 f7       	brne	.-10     	; 0x15ea <mapRun+0x29a>
			// lcd will print "-120 degree success"
			else if (angle[count] == -120 || angle[count] == 240)
			{
				forward_mm(15);
				_delay_ms(100);
				soft_right_2_degrees(30);
    15f4:	8e e1       	ldi	r24, 0x1E	; 30
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0e 94 5d 05 	call	0xaba	; 0xaba <soft_right_2_degrees>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    15fc:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    15fe:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1600:	82 60       	ori	r24, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
    1602:	82 b9       	out	0x02, r24	; 2
				_delay_ms(100);
				soft_right_2_degrees(30);
				do
				{
					soft_right();
					senser_value_C = ADC_Conversion(2);
    1604:	82 e0       	ldi	r24, 0x02	; 2
    1606:	0e 94 99 04 	call	0x932	; 0x932 <ADC_Conversion>
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	90 93 fd 16 	sts	0x16FD, r25
    1610:	80 93 fc 16 	sts	0x16FC, r24
				}
				while (senser_value_C < 110);
    1614:	8e 36       	cpi	r24, 0x6E	; 110
    1616:	91 05       	cpc	r25, r1
    1618:	8c f3       	brlt	.-30     	; 0x15fc <mapRun+0x2ac>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    161a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    161c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    161e:	82 b9       	out	0x02, r24	; 2
					soft_right();
					senser_value_C = ADC_Conversion(2);
				}
				while (senser_value_C < 110);
				stop();
				lcd_cursor(1,1);
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	61 e0       	ldi	r22, 0x01	; 1
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
				lcd_string("-120 degre suces");
    162c:	86 e6       	ldi	r24, 0x66	; 102
    162e:	92 e0       	ldi	r25, 0x02	; 2
    1630:	9a cf       	rjmp	.-204    	; 0x1566 <mapRun+0x216>
			}
			//if angle[i] is 180 the bot has to take a 190 degree turn
			// bot will move left for 500 milliseconds to skip the current black line
			// then it will rotate left until it finds another black line
			else if (angle[count] == 180 || angle[count] == -180)
    1632:	e4 3b       	cpi	r30, 0xB4	; 180
    1634:	f1 05       	cpc	r31, r1
    1636:	19 f0       	breq	.+6      	; 0x163e <mapRun+0x2ee>
    1638:	ec 54       	subi	r30, 0x4C	; 76
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	21 f5       	brne	.+72     	; 0x1686 <mapRun+0x336>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    163e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1640:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1642:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
    1644:	82 b9       	out	0x02, r24	; 2
    1646:	88 e8       	ldi	r24, 0x88	; 136
    1648:	93 e1       	ldi	r25, 0x13	; 19
    164a:	f7 01       	movw	r30, r14
    164c:	31 97       	sbiw	r30, 0x01	; 1
    164e:	f1 f7       	brne	.-4      	; 0x164c <mapRun+0x2fc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1650:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1652:	d9 f7       	brne	.-10     	; 0x164a <mapRun+0x2fa>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1654:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1656:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1658:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
    165a:	82 b9       	out	0x02, r24	; 2
				left();
				_delay_ms(500);
				do
				{
					left();
					Center_white_line = ADC_Conversion(2);
    165c:	82 e0       	ldi	r24, 0x02	; 2
    165e:	0e 94 99 04 	call	0x932	; 0x932 <ADC_Conversion>
    1662:	80 93 28 04 	sts	0x0428, r24
				}
				while (Center_white_line < 110);
    1666:	8e 36       	cpi	r24, 0x6E	; 110
    1668:	a8 f3       	brcs	.-22     	; 0x1654 <mapRun+0x304>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    166a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    166c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    166e:	82 b9       	out	0x02, r24	; 2
    1670:	88 ee       	ldi	r24, 0xE8	; 232
    1672:	93 e0       	ldi	r25, 0x03	; 3
    1674:	f7 01       	movw	r30, r14
    1676:	31 97       	sbiw	r30, 0x01	; 1
    1678:	f1 f7       	brne	.-4      	; 0x1676 <mapRun+0x326>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    167a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167c:	d9 f7       	brne	.-10     	; 0x1674 <mapRun+0x324>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    167e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1680:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1682:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1684:	82 b9       	out	0x02, r24	; 2
				_delay_ms(100);
				forward();
			}

			// by default lcd will be print "MOVING ON FLEX"
			lcd_cursor(1,1);
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	61 e0       	ldi	r22, 0x01	; 1
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
			lcd_string("                ");
    1692:	87 e7       	ldi	r24, 0x77	; 119
    1694:	92 e0       	ldi	r25, 0x02	; 2
    1696:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
			lcd_cursor(2,1);
    169a:	82 e0       	ldi	r24, 0x02	; 2
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	61 e0       	ldi	r22, 0x01	; 1
    16a0:	70 e0       	ldi	r23, 0x00	; 0
    16a2:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
			lcd_string("MOVING ON FLEX!!");
    16a6:	88 e8       	ldi	r24, 0x88	; 136
    16a8:	92 e0       	ldi	r25, 0x02	; 2
    16aa:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
	signed int count = -1;
	int *res = (int*) malloc (3*sizeof(int));		//Holds result
	for (int i = 0; i < 3; i++)
		res[i] = 0;

	while(count < Size)
    16ae:	0a 15       	cp	r16, r10
    16b0:	1b 05       	cpc	r17, r11
    16b2:	0c f4       	brge	.+2      	; 0x16b6 <mapRun+0x366>
    16b4:	7c ce       	rjmp	.-776    	; 0x13ae <mapRun+0x5e>
			lcd_cursor(2,1);
			lcd_string("MOVING ON FLEX!!");
		}
	}
	return res;
}
    16b6:	ce 01       	movw	r24, r28
    16b8:	df 91       	pop	r29
    16ba:	cf 91       	pop	r28
    16bc:	1f 91       	pop	r17
    16be:	0f 91       	pop	r16
    16c0:	ff 90       	pop	r15
    16c2:	ef 90       	pop	r14
    16c4:	df 90       	pop	r13
    16c6:	cf 90       	pop	r12
    16c8:	bf 90       	pop	r11
    16ca:	af 90       	pop	r10
    16cc:	9f 90       	pop	r9
    16ce:	8f 90       	pop	r8
    16d0:	7f 90       	pop	r7
    16d2:	6f 90       	pop	r6
    16d4:	08 95       	ret

000016d6 <pathFind>:
			the source (where the index of the parent is -1.) In the process,
			it also keeps updating the number of nodes in the path from source
			to the destination.	
	*Example Call: int *path = pathFind (parent, destination, &pathSize);
*/
int* pathFind (int *parent, int destination, int *pathSize) {
    16d6:	cf 92       	push	r12
    16d8:	df 92       	push	r13
    16da:	ef 92       	push	r14
    16dc:	ff 92       	push	r15
    16de:	0f 93       	push	r16
    16e0:	1f 93       	push	r17
    16e2:	cf 93       	push	r28
    16e4:	df 93       	push	r29
    16e6:	6c 01       	movw	r12, r24
    16e8:	16 2f       	mov	r17, r22
    16ea:	07 2f       	mov	r16, r23
    16ec:	7a 01       	movw	r14, r20
	int *path = (int*) malloc (size*sizeof(int));
    16ee:	82 e6       	ldi	r24, 0x62	; 98
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <malloc>
    16f6:	ec 01       	movw	r28, r24
	*pathSize = 1;			//There is at least one element (destination)
    16f8:	21 e0       	ldi	r18, 0x01	; 1
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	d7 01       	movw	r26, r14
    16fe:	2d 93       	st	X+, r18
    1700:	3c 93       	st	X, r19
	int i = destination, j = 1;
	path[0] = destination;
    1702:	18 83       	st	Y, r17
    1704:	09 83       	std	Y+1, r16	; 0x01
    1706:	ac 01       	movw	r20, r24
    1708:	21 2f       	mov	r18, r17
    170a:	30 2f       	mov	r19, r16
    170c:	c9 01       	movw	r24, r18
    170e:	e1 e0       	ldi	r30, 0x01	; 1
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	0e c0       	rjmp	.+28     	; 0x1730 <pathFind+0x5a>
	//Creates a path 
	while (parent[i] != -1) {
		(*pathSize)++;
    1714:	d7 01       	movw	r26, r14
    1716:	8d 91       	ld	r24, X+
    1718:	9c 91       	ld	r25, X
    171a:	11 97       	sbiw	r26, 0x01	; 1
    171c:	01 96       	adiw	r24, 0x01	; 1
    171e:	8d 93       	st	X+, r24
    1720:	9c 93       	st	X, r25
		path[j++] = parent[i];
    1722:	db 01       	movw	r26, r22
    1724:	8d 91       	ld	r24, X+
    1726:	9c 91       	ld	r25, X
    1728:	da 01       	movw	r26, r20
    172a:	8d 93       	st	X+, r24
    172c:	9c 93       	st	X, r25
    172e:	31 96       	adiw	r30, 0x01	; 1
	int *path = (int*) malloc (size*sizeof(int));
	*pathSize = 1;			//There is at least one element (destination)
	int i = destination, j = 1;
	path[0] = destination;
	//Creates a path 
	while (parent[i] != -1) {
    1730:	bc 01       	movw	r22, r24
    1732:	66 0f       	add	r22, r22
    1734:	77 1f       	adc	r23, r23
    1736:	6c 0d       	add	r22, r12
    1738:	7d 1d       	adc	r23, r13
    173a:	4e 5f       	subi	r20, 0xFE	; 254
    173c:	5f 4f       	sbci	r21, 0xFF	; 255
    173e:	db 01       	movw	r26, r22
    1740:	8d 91       	ld	r24, X+
    1742:	9c 91       	ld	r25, X
    1744:	bf ef       	ldi	r27, 0xFF	; 255
    1746:	8f 3f       	cpi	r24, 0xFF	; 255
    1748:	9b 07       	cpc	r25, r27
    174a:	21 f7       	brne	.-56     	; 0x1714 <pathFind+0x3e>
		(*pathSize)++;
		path[j++] = parent[i];
		i = parent[i];
	}
	path[j] = -1;
    174c:	ee 0f       	add	r30, r30
    174e:	ff 1f       	adc	r31, r31
    1750:	ec 0f       	add	r30, r28
    1752:	fd 1f       	adc	r31, r29
    1754:	91 83       	std	Z+1, r25	; 0x01
    1756:	80 83       	st	Z, r24
	//Corrects the order of the path
	reverse (path, *pathSize);
    1758:	f7 01       	movw	r30, r14
    175a:	60 81       	ld	r22, Z
    175c:	71 81       	ldd	r23, Z+1	; 0x01
    175e:	ce 01       	movw	r24, r28
    1760:	0e 94 bf 03 	call	0x77e	; 0x77e <reverse>
	/*for (int i = 0; i < *pathSize; i++)
		cout << path[i] << "\t";
	cout << endl;
	*/
	return path;
}
    1764:	ce 01       	movw	r24, r28
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	1f 91       	pop	r17
    176c:	0f 91       	pop	r16
    176e:	ff 90       	pop	r15
    1770:	ef 90       	pop	r14
    1772:	df 90       	pop	r13
    1774:	cf 90       	pop	r12
    1776:	08 95       	ret

00001778 <NewQueue>:
	struct Node *temp = (struct Node*) malloc (sizeof(struct Node));
	temp->next=NULL;
	return temp;
}
struct Queue * NewQueue() {
	struct Queue *Q = (struct Queue*) malloc (sizeof(struct Queue));
    1778:	84 e0       	ldi	r24, 0x04	; 4
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <malloc>
    1780:	fc 01       	movw	r30, r24
	Q->head=NULL;
    1782:	11 82       	std	Z+1, r1	; 0x01
    1784:	10 82       	st	Z, r1
	Q->tail=NULL;
    1786:	13 82       	std	Z+3, r1	; 0x03
    1788:	12 82       	std	Z+2, r1	; 0x02
	return Q;
}
    178a:	08 95       	ret

0000178c <NewNode>:
int DeQueue(struct Queue *Q);
void EmptyQueue(struct Queue *Q);
int IsEmpty(struct Queue *Q);

struct Node * NewNode() {
	struct Node *temp = (struct Node*) malloc (sizeof(struct Node));
    178c:	84 e0       	ldi	r24, 0x04	; 4
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <malloc>
    1794:	fc 01       	movw	r30, r24
	temp->next=NULL;
    1796:	13 82       	std	Z+3, r1	; 0x03
    1798:	12 82       	std	Z+2, r1	; 0x02
	return temp;
}
    179a:	08 95       	ret

0000179c <EnQueue>:
	Q->head=NULL;
	Q->tail=NULL;
	return Q;
}

void EnQueue(struct Queue *Q, int data) {
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	ec 01       	movw	r28, r24
    17a6:	8b 01       	movw	r16, r22
	struct Node * temp= NewNode();
    17a8:	0e 94 c6 0b 	call	0x178c	; 0x178c <NewNode>
    17ac:	dc 01       	movw	r26, r24
	temp->data=data;
    17ae:	11 96       	adiw	r26, 0x01	; 1
    17b0:	1c 93       	st	X, r17
    17b2:	0e 93       	st	-X, r16
	if(Q->head==NULL && Q->tail==NULL) {
    17b4:	88 81       	ld	r24, Y
    17b6:	99 81       	ldd	r25, Y+1	; 0x01
    17b8:	89 2b       	or	r24, r25
    17ba:	39 f4       	brne	.+14     	; 0x17ca <EnQueue+0x2e>
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	9b 81       	ldd	r25, Y+3	; 0x03
    17c0:	89 2b       	or	r24, r25
    17c2:	19 f4       	brne	.+6      	; 0x17ca <EnQueue+0x2e>
		Q->head=temp;
    17c4:	b9 83       	std	Y+1, r27	; 0x01
    17c6:	a8 83       	st	Y, r26
    17c8:	04 c0       	rjmp	.+8      	; 0x17d2 <EnQueue+0x36>
		Q->tail=temp;
		return;
	}
	Q->tail->next=temp;
    17ca:	ea 81       	ldd	r30, Y+2	; 0x02
    17cc:	fb 81       	ldd	r31, Y+3	; 0x03
    17ce:	b3 83       	std	Z+3, r27	; 0x03
    17d0:	a2 83       	std	Z+2, r26	; 0x02
	Q->tail=temp;
    17d2:	bb 83       	std	Y+3, r27	; 0x03
    17d4:	aa 83       	std	Y+2, r26	; 0x02
}
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	1f 91       	pop	r17
    17dc:	0f 91       	pop	r16
    17de:	08 95       	ret

000017e0 <Move>:
				3rd tells the node it was supposed to go to.
	*Logic: Converts nodes to an array of angle and calls the run function
			Returns the result by changing index to actual nodes
	*Example Call: int *res = Move (path, pathSize);
*/
int* Move (int path[], int pathSize) {
    17e0:	8f 92       	push	r8
    17e2:	9f 92       	push	r9
    17e4:	af 92       	push	r10
    17e6:	bf 92       	push	r11
    17e8:	cf 92       	push	r12
    17ea:	df 92       	push	r13
    17ec:	ef 92       	push	r14
    17ee:	ff 92       	push	r15
    17f0:	0f 93       	push	r16
    17f2:	1f 93       	push	r17
    17f4:	cf 93       	push	r28
    17f6:	df 93       	push	r29
    17f8:	8c 01       	movw	r16, r24
    17fa:	5b 01       	movw	r10, r22
	signed int *angle = (signed int*) malloc((pathSize-1)*sizeof(int));
    17fc:	7b 01       	movw	r14, r22
    17fe:	08 94       	sec
    1800:	e1 08       	sbc	r14, r1
    1802:	f1 08       	sbc	r15, r1
    1804:	c7 01       	movw	r24, r14
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <malloc>
    180e:	d8 2e       	mov	r13, r24
    1810:	c9 2e       	mov	r12, r25
    1812:	e8 01       	movw	r28, r16
    1814:	9c 01       	movw	r18, r24
    1816:	b9 01       	movw	r22, r18
    1818:	41 e0       	ldi	r20, 0x01	; 1
    181a:	50 e0       	ldi	r21, 0x00	; 0
	for (int j = 0, i = 1; i < pathSize-1; i++, j++) {
		//This could be buggy
		angle[j] = map_angle[path[i]][path[i+1]] - 
    181c:	f1 e3       	ldi	r31, 0x31	; 49
    181e:	8f 2e       	mov	r8, r31
    1820:	91 2c       	mov	r9, r1
    1822:	2c c0       	rjmp	.+88     	; 0x187c <Move+0x9c>
    1824:	2a 81       	ldd	r18, Y+2	; 0x02
    1826:	3b 81       	ldd	r19, Y+3	; 0x03
    1828:	28 9d       	mul	r18, r8
    182a:	d0 01       	movw	r26, r0
    182c:	29 9d       	mul	r18, r9
    182e:	b0 0d       	add	r27, r0
    1830:	38 9d       	mul	r19, r8
    1832:	b0 0d       	add	r27, r0
    1834:	11 24       	eor	r1, r1
    1836:	8c 81       	ldd	r24, Y+4	; 0x04
    1838:	9d 81       	ldd	r25, Y+5	; 0x05
    183a:	a8 0f       	add	r26, r24
    183c:	b9 1f       	adc	r27, r25
    183e:	aa 0f       	add	r26, r26
    1840:	bb 1f       	adc	r27, r27
    1842:	a8 53       	subi	r26, 0x38	; 56
    1844:	b8 4e       	sbci	r27, 0xE8	; 232
    1846:	89 91       	ld	r24, Y+
    1848:	99 91       	ld	r25, Y+
    184a:	88 9d       	mul	r24, r8
    184c:	f0 01       	movw	r30, r0
    184e:	89 9d       	mul	r24, r9
    1850:	f0 0d       	add	r31, r0
    1852:	98 9d       	mul	r25, r8
    1854:	f0 0d       	add	r31, r0
    1856:	11 24       	eor	r1, r1
    1858:	e2 0f       	add	r30, r18
    185a:	f3 1f       	adc	r31, r19
    185c:	ee 0f       	add	r30, r30
    185e:	ff 1f       	adc	r31, r31
    1860:	e8 53       	subi	r30, 0x38	; 56
    1862:	f8 4e       	sbci	r31, 0xE8	; 232
    1864:	8d 91       	ld	r24, X+
    1866:	9c 91       	ld	r25, X
    1868:	20 81       	ld	r18, Z
    186a:	31 81       	ldd	r19, Z+1	; 0x01
    186c:	82 1b       	sub	r24, r18
    186e:	93 0b       	sbc	r25, r19
    1870:	fb 01       	movw	r30, r22
    1872:	81 93       	st	Z+, r24
    1874:	91 93       	st	Z+, r25
    1876:	bf 01       	movw	r22, r30
			Returns the result by changing index to actual nodes
	*Example Call: int *res = Move (path, pathSize);
*/
int* Move (int path[], int pathSize) {
	signed int *angle = (signed int*) malloc((pathSize-1)*sizeof(int));
	for (int j = 0, i = 1; i < pathSize-1; i++, j++) {
    1878:	4f 5f       	subi	r20, 0xFF	; 255
    187a:	5f 4f       	sbci	r21, 0xFF	; 255
    187c:	4e 15       	cp	r20, r14
    187e:	5f 05       	cpc	r21, r15
    1880:	8c f2       	brlt	.-94     	; 0x1824 <Move+0x44>
		//This could be buggy
		angle[j] = map_angle[path[i]][path[i+1]] - 
					map_angle[path[i-1]][path[i]];
	}
	int *res = mapRun (angle, pathSize);
    1882:	8d 2d       	mov	r24, r13
    1884:	9c 2d       	mov	r25, r12
    1886:	b5 01       	movw	r22, r10
    1888:	0e 94 a8 09 	call	0x1350	; 0x1350 <mapRun>
    188c:	ec 01       	movw	r28, r24
	if (res[0] != 0) {
    188e:	88 81       	ld	r24, Y
    1890:	99 81       	ldd	r25, Y+1	; 0x01
    1892:	89 2b       	or	r24, r25
    1894:	a1 f0       	breq	.+40     	; 0x18be <Move+0xde>
		res[1] = path[res[1]];
    1896:	ea 81       	ldd	r30, Y+2	; 0x02
    1898:	fb 81       	ldd	r31, Y+3	; 0x03
    189a:	ee 0f       	add	r30, r30
    189c:	ff 1f       	adc	r31, r31
    189e:	e0 0f       	add	r30, r16
    18a0:	f1 1f       	adc	r31, r17
    18a2:	80 81       	ld	r24, Z
    18a4:	91 81       	ldd	r25, Z+1	; 0x01
    18a6:	9b 83       	std	Y+3, r25	; 0x03
    18a8:	8a 83       	std	Y+2, r24	; 0x02
		res[2] = path[res[2]];
    18aa:	ec 81       	ldd	r30, Y+4	; 0x04
    18ac:	fd 81       	ldd	r31, Y+5	; 0x05
    18ae:	ee 0f       	add	r30, r30
    18b0:	ff 1f       	adc	r31, r31
    18b2:	e0 0f       	add	r30, r16
    18b4:	f1 1f       	adc	r31, r17
    18b6:	80 81       	ld	r24, Z
    18b8:	91 81       	ldd	r25, Z+1	; 0x01
    18ba:	9d 83       	std	Y+5, r25	; 0x05
    18bc:	8c 83       	std	Y+4, r24	; 0x04
	}
	free(angle);
    18be:	8d 2d       	mov	r24, r13
    18c0:	9c 2d       	mov	r25, r12
    18c2:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <free>
	return res;
}
    18c6:	ce 01       	movw	r24, r28
    18c8:	df 91       	pop	r29
    18ca:	cf 91       	pop	r28
    18cc:	1f 91       	pop	r17
    18ce:	0f 91       	pop	r16
    18d0:	ff 90       	pop	r15
    18d2:	ef 90       	pop	r14
    18d4:	df 90       	pop	r13
    18d6:	cf 90       	pop	r12
    18d8:	bf 90       	pop	r11
    18da:	af 90       	pop	r10
    18dc:	9f 90       	pop	r9
    18de:	8f 90       	pop	r8
    18e0:	08 95       	ret

000018e2 <DeQueue>:

int DeQueue(struct Queue *Q) {
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	dc 01       	movw	r26, r24
	if(Q->head==NULL && Q->tail==NULL) {
    18e8:	ed 91       	ld	r30, X+
    18ea:	fc 91       	ld	r31, X
    18ec:	11 97       	sbiw	r26, 0x01	; 1
    18ee:	30 97       	sbiw	r30, 0x00	; 0
    18f0:	49 f4       	brne	.+18     	; 0x1904 <DeQueue+0x22>
    18f2:	12 96       	adiw	r26, 0x02	; 2
    18f4:	8d 91       	ld	r24, X+
    18f6:	9c 91       	ld	r25, X
    18f8:	13 97       	sbiw	r26, 0x03	; 3
    18fa:	89 2b       	or	r24, r25
    18fc:	19 f4       	brne	.+6      	; 0x1904 <DeQueue+0x22>
    18fe:	cf ef       	ldi	r28, 0xFF	; 255
    1900:	df ef       	ldi	r29, 0xFF	; 255
    1902:	10 c0       	rjmp	.+32     	; 0x1924 <DeQueue+0x42>
		return -1;
	}
	struct Node *temp = Q->head;
	int data = temp->data;
    1904:	c0 81       	ld	r28, Z
    1906:	d1 81       	ldd	r29, Z+1	; 0x01
	Q->head=Q->head->next;
    1908:	82 81       	ldd	r24, Z+2	; 0x02
    190a:	93 81       	ldd	r25, Z+3	; 0x03
    190c:	11 96       	adiw	r26, 0x01	; 1
    190e:	9c 93       	st	X, r25
    1910:	8e 93       	st	-X, r24
	if(Q->head==NULL)
    1912:	89 2b       	or	r24, r25
    1914:	21 f4       	brne	.+8      	; 0x191e <DeQueue+0x3c>
		Q->tail=NULL;
    1916:	13 96       	adiw	r26, 0x03	; 3
    1918:	1c 92       	st	X, r1
    191a:	1e 92       	st	-X, r1
    191c:	12 97       	sbiw	r26, 0x02	; 2
	free (temp);	
    191e:	cf 01       	movw	r24, r30
    1920:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <free>
	return data;
}
    1924:	ce 01       	movw	r24, r28
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	08 95       	ret

0000192c <BFS>:
			It puts the source to a queue. Then as long as the queue is not
			empty, it dequeues the first element, enqueues all the neighbours
			which were not already explored and updates the cost.
	*Example Call: int *cost = BFS(source);
*/
int* BFS (int search) {
    192c:	2f 92       	push	r2
    192e:	3f 92       	push	r3
    1930:	4f 92       	push	r4
    1932:	5f 92       	push	r5
    1934:	6f 92       	push	r6
    1936:	7f 92       	push	r7
    1938:	8f 92       	push	r8
    193a:	9f 92       	push	r9
    193c:	af 92       	push	r10
    193e:	bf 92       	push	r11
    1940:	cf 92       	push	r12
    1942:	df 92       	push	r13
    1944:	ef 92       	push	r14
    1946:	ff 92       	push	r15
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	c2 56       	subi	r28, 0x62	; 98
    1956:	d0 40       	sbci	r29, 0x00	; 0
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	cd bf       	out	0x3d, r28	; 61
    1962:	8c 01       	movw	r16, r24
	struct Queue *Q = NewQueue();	//Initializing the queue required to 
    1964:	0e 94 bc 0b 	call	0x1778	; 0x1778 <NewQueue>
    1968:	2c 01       	movw	r4, r24
									//maintan nodes to be visited
	int *bfs, source = search;
	bfs = (int *) malloc (size*sizeof (int));
    196a:	82 e6       	ldi	r24, 0x62	; 98
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <malloc>
    1972:	1c 01       	movw	r2, r24
    1974:	5c 01       	movw	r10, r24
    1976:	dc 01       	movw	r26, r24
    1978:	fe 01       	movw	r30, r28
    197a:	33 96       	adiw	r30, 0x03	; 3
	int visited[size];				//Maintains if the node is visited
	for (int i = 1; i < size; i++) {
    197c:	ce 01       	movw	r24, r28
    197e:	8d 59       	subi	r24, 0x9D	; 157
    1980:	9f 4f       	sbci	r25, 0xFF	; 255
		bfs[i] = 0;
    1982:	13 96       	adiw	r26, 0x03	; 3
    1984:	1c 92       	st	X, r1
    1986:	1e 92       	st	-X, r1
    1988:	12 97       	sbiw	r26, 0x02	; 2
		visited[i] = 0;
    198a:	11 92       	st	Z+, r1
    198c:	11 92       	st	Z+, r1
    198e:	12 96       	adiw	r26, 0x02	; 2
	struct Queue *Q = NewQueue();	//Initializing the queue required to 
									//maintan nodes to be visited
	int *bfs, source = search;
	bfs = (int *) malloc (size*sizeof (int));
	int visited[size];				//Maintains if the node is visited
	for (int i = 1; i < size; i++) {
    1990:	e8 17       	cp	r30, r24
    1992:	f9 07       	cpc	r31, r25
    1994:	b1 f7       	brne	.-20     	; 0x1982 <BFS+0x56>
		bfs[i] = 0;
		visited[i] = 0;
	}
	EnQueue (Q, search);
    1996:	c2 01       	movw	r24, r4
    1998:	b8 01       	movw	r22, r16
    199a:	0e 94 ce 0b 	call	0x179c	; 0x179c <EnQueue>
    199e:	43 c0       	rjmp	.+134    	; 0x1a26 <BFS+0xfa>
	while (!IsEmpty (Q)) {
		//Accessing the first node in the queue and marking it's neighbours to
		//be searched
		search = DeQueue (Q);
    19a0:	c2 01       	movw	r24, r4
    19a2:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <DeQueue>
		for (int i = 1; i < size; i++) {
			if (visited[i] == 0) {
				if (map[search][i] != INF) {
					//Adding weight to bfs if the node is connected
					bfs[i] = map[search][i] + bfs[search];
    19a6:	3c 01       	movw	r6, r24
    19a8:	66 0c       	add	r6, r6
    19aa:	77 1c       	adc	r7, r7
    19ac:	6a 0c       	add	r6, r10
    19ae:	7b 1c       	adc	r7, r11
    19b0:	22 e6       	ldi	r18, 0x62	; 98
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	82 9f       	mul	r24, r18
    19b6:	60 01       	movw	r12, r0
    19b8:	83 9f       	mul	r24, r19
    19ba:	d0 0c       	add	r13, r0
    19bc:	92 9f       	mul	r25, r18
    19be:	d0 0c       	add	r13, r0
    19c0:	11 24       	eor	r1, r1
    19c2:	8a e3       	ldi	r24, 0x3A	; 58
    19c4:	94 e0       	ldi	r25, 0x04	; 4
    19c6:	c8 0e       	add	r12, r24
    19c8:	d9 1e       	adc	r13, r25
    19ca:	b3 e0       	ldi	r27, 0x03	; 3
    19cc:	8b 2e       	mov	r8, r27
    19ce:	91 2c       	mov	r9, r1
    19d0:	8c 0e       	add	r8, r28
    19d2:	9d 1e       	adc	r9, r29
    19d4:	71 01       	movw	r14, r2
    19d6:	01 e0       	ldi	r16, 0x01	; 1
    19d8:	10 e0       	ldi	r17, 0x00	; 0
	while (!IsEmpty (Q)) {
		//Accessing the first node in the queue and marking it's neighbours to
		//be searched
		search = DeQueue (Q);
		for (int i = 1; i < size; i++) {
			if (visited[i] == 0) {
    19da:	f4 01       	movw	r30, r8
    19dc:	80 81       	ld	r24, Z
    19de:	91 81       	ldd	r25, Z+1	; 0x01
    19e0:	89 2b       	or	r24, r25
    19e2:	a1 f4       	brne	.+40     	; 0x1a0c <BFS+0xe0>
				if (map[search][i] != INF) {
					//Adding weight to bfs if the node is connected
					bfs[i] = map[search][i] + bfs[search];
    19e4:	f3 01       	movw	r30, r6
    19e6:	80 81       	ld	r24, Z
    19e8:	91 81       	ldd	r25, Z+1	; 0x01
    19ea:	f6 01       	movw	r30, r12
    19ec:	20 81       	ld	r18, Z
    19ee:	31 81       	ldd	r19, Z+1	; 0x01
    19f0:	82 0f       	add	r24, r18
    19f2:	93 1f       	adc	r25, r19
    19f4:	f7 01       	movw	r30, r14
    19f6:	93 83       	std	Z+3, r25	; 0x03
    19f8:	82 83       	std	Z+2, r24	; 0x02
					//In that case, neighbours of this node needs to be scanned
					//too
					EnQueue (Q, i);
    19fa:	c2 01       	movw	r24, r4
    19fc:	b8 01       	movw	r22, r16
    19fe:	0e 94 ce 0b 	call	0x179c	; 0x179c <EnQueue>
					visited [i] = 1;
    1a02:	21 e0       	ldi	r18, 0x01	; 1
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	f4 01       	movw	r30, r8
    1a08:	31 83       	std	Z+1, r19	; 0x01
    1a0a:	20 83       	st	Z, r18
	EnQueue (Q, search);
	while (!IsEmpty (Q)) {
		//Accessing the first node in the queue and marking it's neighbours to
		//be searched
		search = DeQueue (Q);
		for (int i = 1; i < size; i++) {
    1a0c:	0f 5f       	subi	r16, 0xFF	; 255
    1a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a10:	82 e0       	ldi	r24, 0x02	; 2
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	88 0e       	add	r8, r24
    1a16:	99 1e       	adc	r9, r25
    1a18:	c8 0e       	add	r12, r24
    1a1a:	d9 1e       	adc	r13, r25
    1a1c:	e8 0e       	add	r14, r24
    1a1e:	f9 1e       	adc	r15, r25
    1a20:	01 33       	cpi	r16, 0x31	; 49
    1a22:	11 05       	cpc	r17, r1
    1a24:	d1 f6       	brne	.-76     	; 0x19da <BFS+0xae>
	for (int i = 1; i < size; i++) {
		bfs[i] = 0;
		visited[i] = 0;
	}
	EnQueue (Q, search);
	while (!IsEmpty (Q)) {
    1a26:	f2 01       	movw	r30, r4
    1a28:	80 81       	ld	r24, Z
    1a2a:	91 81       	ldd	r25, Z+1	; 0x01
    1a2c:	89 2b       	or	r24, r25
    1a2e:	09 f0       	breq	.+2      	; 0x1a32 <BFS+0x106>
    1a30:	b7 cf       	rjmp	.-146    	; 0x19a0 <BFS+0x74>
				}
			}
		}
	}
	return bfs; 
}
    1a32:	c5 01       	movw	r24, r10
    1a34:	ce 59       	subi	r28, 0x9E	; 158
    1a36:	df 4f       	sbci	r29, 0xFF	; 255
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	1f 91       	pop	r17
    1a48:	0f 91       	pop	r16
    1a4a:	ff 90       	pop	r15
    1a4c:	ef 90       	pop	r14
    1a4e:	df 90       	pop	r13
    1a50:	cf 90       	pop	r12
    1a52:	bf 90       	pop	r11
    1a54:	af 90       	pop	r10
    1a56:	9f 90       	pop	r9
    1a58:	8f 90       	pop	r8
    1a5a:	7f 90       	pop	r7
    1a5c:	6f 90       	pop	r6
    1a5e:	5f 90       	pop	r5
    1a60:	4f 90       	pop	r4
    1a62:	3f 90       	pop	r3
    1a64:	2f 90       	pop	r2
    1a66:	08 95       	ret

00001a68 <heuristic>:
	*Output: An array with cost (heuristic) of traversing all nodes from the source
	*Logic: Calls BFS to calculate the heuristic
	*Example Call: int *cost = heuristic(source);
*/
int* heuristic (int destination) {
	int *heuris = BFS (destination);	//Calculates heuristics of the node
    1a68:	0e 94 96 0c 	call	0x192c	; 0x192c <BFS>
	return heuris;
}
    1a6c:	08 95       	ret

00001a6e <EmptyQueue>:

void EmptyQueue(struct Queue *Q) {
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	ec 01       	movw	r28, r24
    1a74:	03 c0       	rjmp	.+6      	; 0x1a7c <EmptyQueue+0xe>
	while(Q->head!=NULL)
		DeQueue(Q);
    1a76:	ce 01       	movw	r24, r28
    1a78:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <DeQueue>
	free (temp);	
	return data;
}

void EmptyQueue(struct Queue *Q) {
	while(Q->head!=NULL)
    1a7c:	88 81       	ld	r24, Y
    1a7e:	99 81       	ldd	r25, Y+1	; 0x01
    1a80:	89 2b       	or	r24, r25
    1a82:	c9 f7       	brne	.-14     	; 0x1a76 <EmptyQueue+0x8>
		DeQueue(Q);
}
    1a84:	df 91       	pop	r29
    1a86:	cf 91       	pop	r28
    1a88:	08 95       	ret

00001a8a <dStar>:
			Applies A* search to find the path with least cost.
			If obstacle is encountered, updates the cost and re-evaluates the
			fastest route.
	*Example Call: dStar (1, 5);
*/
int dStar (int source, int dest) {
    1a8a:	2f 92       	push	r2
    1a8c:	3f 92       	push	r3
    1a8e:	4f 92       	push	r4
    1a90:	5f 92       	push	r5
    1a92:	6f 92       	push	r6
    1a94:	7f 92       	push	r7
    1a96:	8f 92       	push	r8
    1a98:	9f 92       	push	r9
    1a9a:	af 92       	push	r10
    1a9c:	bf 92       	push	r11
    1a9e:	cf 92       	push	r12
    1aa0:	df 92       	push	r13
    1aa2:	ef 92       	push	r14
    1aa4:	ff 92       	push	r15
    1aa6:	0f 93       	push	r16
    1aa8:	1f 93       	push	r17
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	c8 5f       	subi	r28, 0xF8	; 248
    1ab4:	d1 40       	sbci	r29, 0x01	; 1
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	c3 51       	subi	r28, 0x13	; 19
    1ac2:	de 4f       	sbci	r29, 0xFE	; 254
    1ac4:	79 83       	std	Y+1, r23	; 0x01
    1ac6:	68 83       	st	Y, r22
    1ac8:	cd 5e       	subi	r28, 0xED	; 237
    1aca:	d1 40       	sbci	r29, 0x01	; 1
		int gCost[size], fCost[size];	
		int openSize = 0, closedSize = 0;				//Maintains the size of
		//open list.
		//This speeds up the scanning process.
		gCost[source] = 0;
		fCost[source] = fCostCalc (gCost[source], heuris[source]);
    1acc:	1c 01       	movw	r2, r24
    1ace:	22 0c       	add	r2, r2
    1ad0:	33 1c       	adc	r3, r3
		int parent[size], open[size], closed[size], current;	
		int gCost[size], fCost[size];	
		int openSize = 0, closedSize = 0;				//Maintains the size of
		//open list.
		//This speeds up the scanning process.
		gCost[source] = 0;
    1ad2:	9e 01       	movw	r18, r28
    1ad4:	29 5d       	subi	r18, 0xD9	; 217
    1ad6:	3e 4f       	sbci	r19, 0xFE	; 254
    1ad8:	cb 50       	subi	r28, 0x0B	; 11
    1ada:	de 4f       	sbci	r29, 0xFE	; 254
    1adc:	39 83       	std	Y+1, r19	; 0x01
    1ade:	28 83       	st	Y, r18
    1ae0:	c5 5f       	subi	r28, 0xF5	; 245
    1ae2:	d1 40       	sbci	r29, 0x01	; 1
    1ae4:	a9 01       	movw	r20, r18
    1ae6:	42 0d       	add	r20, r2
    1ae8:	53 1d       	adc	r21, r3
    1aea:	c1 51       	subi	r28, 0x11	; 17
    1aec:	de 4f       	sbci	r29, 0xFE	; 254
    1aee:	59 83       	std	Y+1, r21	; 0x01
    1af0:	48 83       	st	Y, r20
    1af2:	cf 5e       	subi	r28, 0xEF	; 239
    1af4:	d1 40       	sbci	r29, 0x01	; 1
		fCost[source] = fCostCalc (gCost[source], heuris[source]);
    1af6:	89 e8       	ldi	r24, 0x89	; 137
    1af8:	91 e0       	ldi	r25, 0x01	; 1
    1afa:	8c 0f       	add	r24, r28
    1afc:	9d 1f       	adc	r25, r29
    1afe:	82 0d       	add	r24, r2
    1b00:	93 1d       	adc	r25, r3
    1b02:	cf 50       	subi	r28, 0x0F	; 15
    1b04:	de 4f       	sbci	r29, 0xFE	; 254
    1b06:	99 83       	std	Y+1, r25	; 0x01
    1b08:	88 83       	st	Y, r24
    1b0a:	c1 5f       	subi	r28, 0xF1	; 241
    1b0c:	d1 40       	sbci	r29, 0x01	; 1
			//Initialising open and closed list to be empty
			open[i] = closed[i] = 0;
			parent[i] = -1;
			gCost[i] = fCost[i] = INF;
		}
		open[source] = 1, openSize++;
    1b0e:	e3 e6       	ldi	r30, 0x63	; 99
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	ec 0f       	add	r30, r28
    1b14:	fd 1f       	adc	r31, r29
    1b16:	e2 0d       	add	r30, r2
    1b18:	f3 1d       	adc	r31, r3
    1b1a:	cd 50       	subi	r28, 0x0D	; 13
    1b1c:	de 4f       	sbci	r29, 0xFE	; 254
    1b1e:	f9 83       	std	Y+1, r31	; 0x01
    1b20:	e8 83       	st	Y, r30
    1b22:	c3 5f       	subi	r28, 0xF3	; 243
    1b24:	d1 40       	sbci	r29, 0x01	; 1
	*Output: An array with cost (heuristic) of traversing all nodes from the source
	*Logic: Calls BFS to calculate the heuristic
	*Example Call: int *cost = heuristic(source);
*/
int* heuristic (int destination) {
	int *heuris = BFS (destination);	//Calculates heuristics of the node
    1b26:	c3 51       	subi	r28, 0x13	; 19
    1b28:	de 4f       	sbci	r29, 0xFE	; 254
    1b2a:	88 81       	ld	r24, Y
    1b2c:	99 81       	ldd	r25, Y+1	; 0x01
    1b2e:	cd 5e       	subi	r28, 0xED	; 237
    1b30:	d1 40       	sbci	r29, 0x01	; 1
    1b32:	0e 94 96 0c 	call	0x192c	; 0x192c <BFS>
    1b36:	c5 51       	subi	r28, 0x15	; 21
    1b38:	de 4f       	sbci	r29, 0xFE	; 254
    1b3a:	99 83       	std	Y+1, r25	; 0x01
    1b3c:	88 83       	st	Y, r24
    1b3e:	cb 5e       	subi	r28, 0xEB	; 235
    1b40:	d1 40       	sbci	r29, 0x01	; 1
		int parent[size], open[size], closed[size], current;	
		int gCost[size], fCost[size];	
		int openSize = 0, closedSize = 0;				//Maintains the size of
		//open list.
		//This speeds up the scanning process.
		gCost[source] = 0;
    1b42:	c1 51       	subi	r28, 0x11	; 17
    1b44:	de 4f       	sbci	r29, 0xFE	; 254
    1b46:	e8 81       	ld	r30, Y
    1b48:	f9 81       	ldd	r31, Y+1	; 0x01
    1b4a:	cf 5e       	subi	r28, 0xEF	; 239
    1b4c:	d1 40       	sbci	r29, 0x01	; 1
    1b4e:	11 82       	std	Z+1, r1	; 0x01
    1b50:	10 82       	st	Z, r1
		fCost[source] = fCostCalc (gCost[source], heuris[source]);
    1b52:	fc 01       	movw	r30, r24
    1b54:	e2 0d       	add	r30, r2
    1b56:	f3 1d       	adc	r31, r3
    1b58:	80 81       	ld	r24, Z
    1b5a:	91 81       	ldd	r25, Z+1	; 0x01
    1b5c:	cf 50       	subi	r28, 0x0F	; 15
    1b5e:	de 4f       	sbci	r29, 0xFE	; 254
    1b60:	e8 81       	ld	r30, Y
    1b62:	f9 81       	ldd	r31, Y+1	; 0x01
    1b64:	c1 5f       	subi	r28, 0xF1	; 241
    1b66:	d1 40       	sbci	r29, 0x01	; 1
    1b68:	91 83       	std	Z+1, r25	; 0x01
    1b6a:	80 83       	st	Z, r24
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
		for (int i = 0; i < size; i++) {
			//Initialising open and closed list to be empty
			open[i] = closed[i] = 0;
    1b70:	e5 ec       	ldi	r30, 0xC5	; 197
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	ec 0f       	add	r30, r28
    1b76:	fd 1f       	adc	r31, r29
    1b78:	e8 0f       	add	r30, r24
    1b7a:	f9 1f       	adc	r31, r25
    1b7c:	11 82       	std	Z+1, r1	; 0x01
    1b7e:	10 82       	st	Z, r1
    1b80:	e3 e6       	ldi	r30, 0x63	; 99
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	ec 0f       	add	r30, r28
    1b86:	fd 1f       	adc	r31, r29
    1b88:	e8 0f       	add	r30, r24
    1b8a:	f9 1f       	adc	r31, r25
    1b8c:	11 82       	std	Z+1, r1	; 0x01
    1b8e:	10 82       	st	Z, r1
			parent[i] = -1;
    1b90:	e1 e0       	ldi	r30, 0x01	; 1
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	ec 0f       	add	r30, r28
    1b96:	fd 1f       	adc	r31, r29
    1b98:	e8 0f       	add	r30, r24
    1b9a:	f9 1f       	adc	r31, r25
    1b9c:	2f ef       	ldi	r18, 0xFF	; 255
    1b9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ba0:	31 83       	std	Z+1, r19	; 0x01
    1ba2:	20 83       	st	Z, r18
			gCost[i] = fCost[i] = INF;
    1ba4:	e9 e8       	ldi	r30, 0x89	; 137
    1ba6:	f1 e0       	ldi	r31, 0x01	; 1
    1ba8:	ec 0f       	add	r30, r28
    1baa:	fd 1f       	adc	r31, r29
    1bac:	e8 0f       	add	r30, r24
    1bae:	f9 1f       	adc	r31, r25
    1bb0:	40 ec       	ldi	r20, 0xC0	; 192
    1bb2:	57 e2       	ldi	r21, 0x27	; 39
    1bb4:	51 83       	std	Z+1, r21	; 0x01
    1bb6:	40 83       	st	Z, r20
    1bb8:	e7 e2       	ldi	r30, 0x27	; 39
    1bba:	f1 e0       	ldi	r31, 0x01	; 1
    1bbc:	ec 0f       	add	r30, r28
    1bbe:	fd 1f       	adc	r31, r29
    1bc0:	e8 0f       	add	r30, r24
    1bc2:	f9 1f       	adc	r31, r25
    1bc4:	51 83       	std	Z+1, r21	; 0x01
    1bc6:	40 83       	st	Z, r20
    1bc8:	02 96       	adiw	r24, 0x02	; 2
		int openSize = 0, closedSize = 0;				//Maintains the size of
		//open list.
		//This speeds up the scanning process.
		gCost[source] = 0;
		fCost[source] = fCostCalc (gCost[source], heuris[source]);
		for (int i = 0; i < size; i++) {
    1bca:	82 36       	cpi	r24, 0x62	; 98
    1bcc:	91 05       	cpc	r25, r1
    1bce:	81 f6       	brne	.-96     	; 0x1b70 <dStar+0xe6>
			//Initialising open and closed list to be empty
			open[i] = closed[i] = 0;
			parent[i] = -1;
			gCost[i] = fCost[i] = INF;
		}
		open[source] = 1, openSize++;
    1bd0:	21 e0       	ldi	r18, 0x01	; 1
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	cd 50       	subi	r28, 0x0D	; 13
    1bd6:	de 4f       	sbci	r29, 0xFE	; 254
    1bd8:	e8 81       	ld	r30, Y
    1bda:	f9 81       	ldd	r31, Y+1	; 0x01
    1bdc:	c3 5f       	subi	r28, 0xF3	; 243
    1bde:	d1 40       	sbci	r29, 0x01	; 1
    1be0:	31 83       	std	Z+1, r19	; 0x01
    1be2:	20 83       	st	Z, r18
    1be4:	91 e0       	ldi	r25, 0x01	; 1
    1be6:	69 2e       	mov	r6, r25
    1be8:	71 2c       	mov	r7, r1
    1bea:	e5 c0       	rjmp	.+458    	; 0x1db6 <dStar+0x32c>
*/
int extractMin (int list[], int cost[], int Size) {
	//Think of initializing min
	int min = -1;	
	for (int i = 0; i < Size; i++) {
		if (list[i] != 0) {
    1bec:	f8 01       	movw	r30, r16
    1bee:	80 81       	ld	r24, Z
    1bf0:	91 81       	ldd	r25, Z+1	; 0x01
    1bf2:	89 2b       	or	r24, r25
    1bf4:	b1 f0       	breq	.+44     	; 0x1c22 <dStar+0x198>
			if (min == -1) {
    1bf6:	ff ef       	ldi	r31, 0xFF	; 255
    1bf8:	6f 3f       	cpi	r22, 0xFF	; 255
    1bfa:	7f 07       	cpc	r23, r31
    1bfc:	89 f0       	breq	.+34     	; 0x1c20 <dStar+0x196>
				min = i;
				continue;
			}
			min = ((cost[min] < cost[i]) ? min : i);
    1bfe:	fb 01       	movw	r30, r22
    1c00:	ee 0f       	add	r30, r30
    1c02:	ff 1f       	adc	r31, r31
    1c04:	29 e8       	ldi	r18, 0x89	; 137
    1c06:	31 e0       	ldi	r19, 0x01	; 1
    1c08:	2c 0f       	add	r18, r28
    1c0a:	3d 1f       	adc	r19, r29
    1c0c:	e2 0f       	add	r30, r18
    1c0e:	f3 1f       	adc	r31, r19
    1c10:	20 81       	ld	r18, Z
    1c12:	31 81       	ldd	r19, Z+1	; 0x01
    1c14:	8d 91       	ld	r24, X+
    1c16:	9c 91       	ld	r25, X
    1c18:	11 97       	sbiw	r26, 0x01	; 1
    1c1a:	28 17       	cp	r18, r24
    1c1c:	39 07       	cpc	r19, r25
    1c1e:	0c f0       	brlt	.+2      	; 0x1c22 <dStar+0x198>
    1c20:	ba 01       	movw	r22, r20
	*Example Call: int min = extractMin (openList, fCost, size);
*/
int extractMin (int list[], int cost[], int Size) {
	//Think of initializing min
	int min = -1;	
	for (int i = 0; i < Size; i++) {
    1c22:	4f 5f       	subi	r20, 0xFF	; 255
    1c24:	5f 4f       	sbci	r21, 0xFF	; 255
    1c26:	0e 5f       	subi	r16, 0xFE	; 254
    1c28:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2a:	12 96       	adiw	r26, 0x02	; 2
    1c2c:	41 33       	cpi	r20, 0x31	; 49
    1c2e:	51 05       	cpc	r21, r1
    1c30:	e9 f6       	brne	.-70     	; 0x1bec <dStar+0x162>
		//Scan as long as the open list is not empty
		while (openSize > 0) {
			current = extractMin (open, fCost, size);
			open[current] = 0, openSize--;
    1c32:	cb 01       	movw	r24, r22
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	e3 e6       	ldi	r30, 0x63	; 99
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	ec 0f       	add	r30, r28
    1c3e:	fd 1f       	adc	r31, r29
    1c40:	e8 0f       	add	r30, r24
    1c42:	f9 1f       	adc	r31, r25
    1c44:	11 82       	std	Z+1, r1	; 0x01
    1c46:	10 82       	st	Z, r1
			closed[current] = 1, closedSize++;
    1c48:	e5 ec       	ldi	r30, 0xC5	; 197
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	ec 0f       	add	r30, r28
    1c4e:	fd 1f       	adc	r31, r29
    1c50:	e8 0f       	add	r30, r24
    1c52:	f9 1f       	adc	r31, r25
    1c54:	41 e0       	ldi	r20, 0x01	; 1
    1c56:	50 e0       	ldi	r21, 0x00	; 0
    1c58:	51 83       	std	Z+1, r21	; 0x01
    1c5a:	40 83       	st	Z, r20
			if (current == dest) break;		//Path to destination is available
    1c5c:	c3 51       	subi	r28, 0x13	; 19
    1c5e:	de 4f       	sbci	r29, 0xFE	; 254
    1c60:	e8 81       	ld	r30, Y
    1c62:	f9 81       	ldd	r31, Y+1	; 0x01
    1c64:	cd 5e       	subi	r28, 0xED	; 237
    1c66:	d1 40       	sbci	r29, 0x01	; 1
    1c68:	6e 17       	cp	r22, r30
    1c6a:	7f 07       	cpc	r23, r31
    1c6c:	09 f4       	brne	.+2      	; 0x1c70 <dStar+0x1e6>
    1c6e:	ae c0       	rjmp	.+348    	; 0x1dcc <dStar+0x342>
		}
		open[source] = 1, openSize++;
		//Scan as long as the open list is not empty
		while (openSize > 0) {
			current = extractMin (open, fCost, size);
			open[current] = 0, openSize--;
    1c70:	08 94       	sec
    1c72:	61 08       	sbc	r6, r1
    1c74:	71 08       	sbc	r7, r1
    1c76:	a5 ec       	ldi	r26, 0xC5	; 197
    1c78:	8a 2e       	mov	r8, r26
    1c7a:	91 2c       	mov	r9, r1
    1c7c:	8c 0e       	add	r8, r28
    1c7e:	9d 1e       	adc	r9, r29
    1c80:	f3 e6       	ldi	r31, 0x63	; 99
    1c82:	af 2e       	mov	r10, r31
    1c84:	b1 2c       	mov	r11, r1
    1c86:	ac 0e       	add	r10, r28
    1c88:	bd 1e       	adc	r11, r29
    1c8a:	22 e6       	ldi	r18, 0x62	; 98
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	62 9f       	mul	r22, r18
    1c90:	d0 01       	movw	r26, r0
    1c92:	63 9f       	mul	r22, r19
    1c94:	b0 0d       	add	r27, r0
    1c96:	72 9f       	mul	r23, r18
    1c98:	b0 0d       	add	r27, r0
    1c9a:	11 24       	eor	r1, r1
    1c9c:	a8 5c       	subi	r26, 0xC8	; 200
    1c9e:	bb 4f       	sbci	r27, 0xFB	; 251
    1ca0:	ae 01       	movw	r20, r28
    1ca2:	49 5d       	subi	r20, 0xD9	; 217
    1ca4:	5e 4f       	sbci	r21, 0xFE	; 254
    1ca6:	c9 50       	subi	r28, 0x09	; 9
    1ca8:	de 4f       	sbci	r29, 0xFE	; 254
    1caa:	59 83       	std	Y+1, r21	; 0x01
    1cac:	48 83       	st	Y, r20
    1cae:	c7 5f       	subi	r28, 0xF7	; 247
    1cb0:	d1 40       	sbci	r29, 0x01	; 1
    1cb2:	c5 51       	subi	r28, 0x15	; 21
    1cb4:	de 4f       	sbci	r29, 0xFE	; 254
    1cb6:	c8 80       	ld	r12, Y
    1cb8:	d9 80       	ldd	r13, Y+1	; 0x01
    1cba:	cb 5e       	subi	r28, 0xEB	; 235
    1cbc:	d1 40       	sbci	r29, 0x01	; 1
    1cbe:	e9 e8       	ldi	r30, 0x89	; 137
    1cc0:	ee 2e       	mov	r14, r30
    1cc2:	e1 e0       	ldi	r30, 0x01	; 1
    1cc4:	fe 2e       	mov	r15, r30
    1cc6:	ec 0e       	add	r14, r28
    1cc8:	fd 1e       	adc	r15, r29
    1cca:	8e 01       	movw	r16, r28
    1ccc:	0f 5f       	subi	r16, 0xFF	; 255
    1cce:	1f 4f       	sbci	r17, 0xFF	; 255
							fCost[i] = fCostCalc(gCost[i], heuris[i]);
							parent[i] = current;
						} else {
							//Otherwise update path if the new one is better than
							//the already discovered path.
							if ((gCost[current] + map[current][i]) < gCost[i]) {
    1cd0:	2a 01       	movw	r4, r20
    1cd2:	48 0e       	add	r4, r24
    1cd4:	59 1e       	adc	r5, r25
			open[current] = 0, openSize--;
			closed[current] = 1, closedSize++;
			if (current == dest) break;		//Path to destination is available
			for (int i = 0; i < size; i++) {
				if (map[current][i] != INF) {
					if (closed[i] == 0) {	//if point is not on the closed list
    1cd6:	f4 01       	movw	r30, r8
    1cd8:	80 81       	ld	r24, Z
    1cda:	91 81       	ldd	r25, Z+1	; 0x01
    1cdc:	89 2b       	or	r24, r25
    1cde:	09 f0       	breq	.+2      	; 0x1ce2 <dStar+0x258>
    1ce0:	42 c0       	rjmp	.+132    	; 0x1d66 <dStar+0x2dc>
						if (open[i] == 0) {
    1ce2:	f5 01       	movw	r30, r10
    1ce4:	80 81       	ld	r24, Z
    1ce6:	91 81       	ldd	r25, Z+1	; 0x01
    1ce8:	4d 91       	ld	r20, X+
    1cea:	5c 91       	ld	r21, X
    1cec:	11 97       	sbiw	r26, 0x01	; 1
    1cee:	89 2b       	or	r24, r25
    1cf0:	e9 f4       	brne	.+58     	; 0x1d2c <dStar+0x2a2>
							//If point is not in the open as well as the closed
							//list, add the point to open list. Also calculate
							//gCost and fCost. Update parent to current for
							//retracing the path.
							open[i] = 1;
    1cf2:	21 e0       	ldi	r18, 0x01	; 1
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	31 83       	std	Z+1, r19	; 0x01
    1cf8:	20 83       	st	Z, r18
							openSize++;
    1cfa:	08 94       	sec
    1cfc:	61 1c       	adc	r6, r1
    1cfe:	71 1c       	adc	r7, r1
							gCost[i] = gCost[current] + map[current][i];
    1d00:	f2 01       	movw	r30, r4
    1d02:	80 81       	ld	r24, Z
    1d04:	91 81       	ldd	r25, Z+1	; 0x01
    1d06:	84 0f       	add	r24, r20
    1d08:	95 1f       	adc	r25, r21
    1d0a:	c9 50       	subi	r28, 0x09	; 9
    1d0c:	de 4f       	sbci	r29, 0xFE	; 254
    1d0e:	e8 81       	ld	r30, Y
    1d10:	f9 81       	ldd	r31, Y+1	; 0x01
    1d12:	c7 5f       	subi	r28, 0xF7	; 247
    1d14:	d1 40       	sbci	r29, 0x01	; 1
    1d16:	91 83       	std	Z+1, r25	; 0x01
    1d18:	80 83       	st	Z, r24
							fCost[i] = fCostCalc(gCost[i], heuris[i]);
    1d1a:	f6 01       	movw	r30, r12
    1d1c:	20 81       	ld	r18, Z
    1d1e:	31 81       	ldd	r19, Z+1	; 0x01
    1d20:	82 0f       	add	r24, r18
    1d22:	93 1f       	adc	r25, r19
    1d24:	f7 01       	movw	r30, r14
    1d26:	91 83       	std	Z+1, r25	; 0x01
    1d28:	80 83       	st	Z, r24
    1d2a:	1a c0       	rjmp	.+52     	; 0x1d60 <dStar+0x2d6>
							parent[i] = current;
						} else {
							//Otherwise update path if the new one is better than
							//the already discovered path.
							if ((gCost[current] + map[current][i]) < gCost[i]) {
    1d2c:	f2 01       	movw	r30, r4
    1d2e:	20 81       	ld	r18, Z
    1d30:	31 81       	ldd	r19, Z+1	; 0x01
    1d32:	24 0f       	add	r18, r20
    1d34:	35 1f       	adc	r19, r21
    1d36:	c9 50       	subi	r28, 0x09	; 9
    1d38:	de 4f       	sbci	r29, 0xFE	; 254
    1d3a:	e8 81       	ld	r30, Y
    1d3c:	f9 81       	ldd	r31, Y+1	; 0x01
    1d3e:	c7 5f       	subi	r28, 0xF7	; 247
    1d40:	d1 40       	sbci	r29, 0x01	; 1
    1d42:	80 81       	ld	r24, Z
    1d44:	91 81       	ldd	r25, Z+1	; 0x01
    1d46:	28 17       	cp	r18, r24
    1d48:	39 07       	cpc	r19, r25
    1d4a:	6c f4       	brge	.+26     	; 0x1d66 <dStar+0x2dc>
								gCost[i] = gCost[current] + map[current][i];
    1d4c:	31 83       	std	Z+1, r19	; 0x01
    1d4e:	20 83       	st	Z, r18
								fCost[i] = fCostCalc(gCost[i], heuris[i]);
    1d50:	f6 01       	movw	r30, r12
    1d52:	80 81       	ld	r24, Z
    1d54:	91 81       	ldd	r25, Z+1	; 0x01
    1d56:	28 0f       	add	r18, r24
    1d58:	39 1f       	adc	r19, r25
    1d5a:	f7 01       	movw	r30, r14
    1d5c:	31 83       	std	Z+1, r19	; 0x01
    1d5e:	20 83       	st	Z, r18
								parent[i] = current;
    1d60:	f8 01       	movw	r30, r16
    1d62:	71 83       	std	Z+1, r23	; 0x01
    1d64:	60 83       	st	Z, r22
    1d66:	22 e0       	ldi	r18, 0x02	; 2
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	82 0e       	add	r8, r18
    1d6c:	93 1e       	adc	r9, r19
    1d6e:	a2 0e       	add	r10, r18
    1d70:	b3 1e       	adc	r11, r19
    1d72:	12 96       	adiw	r26, 0x02	; 2
    1d74:	c9 50       	subi	r28, 0x09	; 9
    1d76:	de 4f       	sbci	r29, 0xFE	; 254
    1d78:	48 81       	ld	r20, Y
    1d7a:	59 81       	ldd	r21, Y+1	; 0x01
    1d7c:	c7 5f       	subi	r28, 0xF7	; 247
    1d7e:	d1 40       	sbci	r29, 0x01	; 1
    1d80:	4e 5f       	subi	r20, 0xFE	; 254
    1d82:	5f 4f       	sbci	r21, 0xFF	; 255
    1d84:	c9 50       	subi	r28, 0x09	; 9
    1d86:	de 4f       	sbci	r29, 0xFE	; 254
    1d88:	59 83       	std	Y+1, r21	; 0x01
    1d8a:	48 83       	st	Y, r20
    1d8c:	c7 5f       	subi	r28, 0xF7	; 247
    1d8e:	d1 40       	sbci	r29, 0x01	; 1
    1d90:	c2 0e       	add	r12, r18
    1d92:	d3 1e       	adc	r13, r19
    1d94:	e2 0e       	add	r14, r18
    1d96:	f3 1e       	adc	r15, r19
    1d98:	0e 5f       	subi	r16, 0xFE	; 254
    1d9a:	1f 4f       	sbci	r17, 0xFF	; 255
		while (openSize > 0) {
			current = extractMin (open, fCost, size);
			open[current] = 0, openSize--;
			closed[current] = 1, closedSize++;
			if (current == dest) break;		//Path to destination is available
			for (int i = 0; i < size; i++) {
    1d9c:	cb 50       	subi	r28, 0x0B	; 11
    1d9e:	de 4f       	sbci	r29, 0xFE	; 254
    1da0:	88 81       	ld	r24, Y
    1da2:	99 81       	ldd	r25, Y+1	; 0x01
    1da4:	c5 5f       	subi	r28, 0xF5	; 245
    1da6:	d1 40       	sbci	r29, 0x01	; 1
    1da8:	88 16       	cp	r8, r24
    1daa:	99 06       	cpc	r9, r25
    1dac:	09 f0       	breq	.+2      	; 0x1db0 <dStar+0x326>
    1dae:	93 cf       	rjmp	.-218    	; 0x1cd6 <dStar+0x24c>
			parent[i] = -1;
			gCost[i] = fCost[i] = INF;
		}
		open[source] = 1, openSize++;
		//Scan as long as the open list is not empty
		while (openSize > 0) {
    1db0:	61 14       	cp	r6, r1
    1db2:	71 04       	cpc	r7, r1
    1db4:	59 f0       	breq	.+22     	; 0x1dcc <dStar+0x342>
    1db6:	8e 01       	movw	r16, r28
    1db8:	0d 59       	subi	r16, 0x9D	; 157
    1dba:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbc:	de 01       	movw	r26, r28
    1dbe:	a7 57       	subi	r26, 0x77	; 119
    1dc0:	be 4f       	sbci	r27, 0xFE	; 254
    1dc2:	40 e0       	ldi	r20, 0x00	; 0
    1dc4:	50 e0       	ldi	r21, 0x00	; 0
    1dc6:	6f ef       	ldi	r22, 0xFF	; 255
    1dc8:	7f ef       	ldi	r23, 0xFF	; 255
    1dca:	10 cf       	rjmp	.-480    	; 0x1bec <dStar+0x162>
						}
					}
				}
			}
		}
		int *pathSize = (int*) malloc (sizeof(int));
    1dcc:	82 e0       	ldi	r24, 0x02	; 2
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <malloc>
    1dd4:	8c 01       	movw	r16, r24
		*pathSize = 0;
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	11 82       	std	Z+1, r1	; 0x01
    1dda:	10 82       	st	Z, r1
		int *path = pathFind (parent, dest, pathSize);
    1ddc:	ce 01       	movw	r24, r28
    1dde:	01 96       	adiw	r24, 0x01	; 1
    1de0:	c3 51       	subi	r28, 0x13	; 19
    1de2:	de 4f       	sbci	r29, 0xFE	; 254
    1de4:	68 81       	ld	r22, Y
    1de6:	79 81       	ldd	r23, Y+1	; 0x01
    1de8:	cd 5e       	subi	r28, 0xED	; 237
    1dea:	d1 40       	sbci	r29, 0x01	; 1
    1dec:	a8 01       	movw	r20, r16
    1dee:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <pathFind>
		int *result = Move (path, *pathSize);
    1df2:	f8 01       	movw	r30, r16
    1df4:	60 81       	ld	r22, Z
    1df6:	71 81       	ldd	r23, Z+1	; 0x01
    1df8:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <Move>
    1dfc:	7c 01       	movw	r14, r24
		if (result[0] == 0) {
    1dfe:	fc 01       	movw	r30, r24
    1e00:	80 81       	ld	r24, Z
    1e02:	91 81       	ldd	r25, Z+1	; 0x01
    1e04:	89 2b       	or	r24, r25
    1e06:	f9 f4       	brne	.+62     	; 0x1e46 <dStar+0x3bc>
			free (result);
    1e08:	c7 01       	movw	r24, r14
    1e0a:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <free>
		map[result[1]][result[2]] = map[result[2]][result[1]] = INF;
		free (heuris);
		free (pathSize);
		free (result);
	}
}
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	c8 50       	subi	r28, 0x08	; 8
    1e14:	de 4f       	sbci	r29, 0xFE	; 254
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	1f 91       	pop	r17
    1e26:	0f 91       	pop	r16
    1e28:	ff 90       	pop	r15
    1e2a:	ef 90       	pop	r14
    1e2c:	df 90       	pop	r13
    1e2e:	cf 90       	pop	r12
    1e30:	bf 90       	pop	r11
    1e32:	af 90       	pop	r10
    1e34:	9f 90       	pop	r9
    1e36:	8f 90       	pop	r8
    1e38:	7f 90       	pop	r7
    1e3a:	6f 90       	pop	r6
    1e3c:	5f 90       	pop	r5
    1e3e:	4f 90       	pop	r4
    1e40:	3f 90       	pop	r3
    1e42:	2f 90       	pop	r2
    1e44:	08 95       	ret
		if (result[0] == 0) {
			free (result);
			return 0;		//Movement complete
		}
		//Updates the map
		map[result[1]][result[2]] = map[result[2]][result[1]] = INF;
    1e46:	f7 01       	movw	r30, r14
    1e48:	24 81       	ldd	r18, Z+4	; 0x04
    1e4a:	35 81       	ldd	r19, Z+5	; 0x05
    1e4c:	82 81       	ldd	r24, Z+2	; 0x02
    1e4e:	93 81       	ldd	r25, Z+3	; 0x03
    1e50:	41 e3       	ldi	r20, 0x31	; 49
    1e52:	50 e0       	ldi	r21, 0x00	; 0
    1e54:	24 9f       	mul	r18, r20
    1e56:	f0 01       	movw	r30, r0
    1e58:	25 9f       	mul	r18, r21
    1e5a:	f0 0d       	add	r31, r0
    1e5c:	34 9f       	mul	r19, r20
    1e5e:	f0 0d       	add	r31, r0
    1e60:	11 24       	eor	r1, r1
    1e62:	e8 0f       	add	r30, r24
    1e64:	f9 1f       	adc	r31, r25
    1e66:	ee 0f       	add	r30, r30
    1e68:	ff 1f       	adc	r31, r31
    1e6a:	e8 5c       	subi	r30, 0xC8	; 200
    1e6c:	fb 4f       	sbci	r31, 0xFB	; 251
    1e6e:	40 ec       	ldi	r20, 0xC0	; 192
    1e70:	57 e2       	ldi	r21, 0x27	; 39
    1e72:	51 83       	std	Z+1, r21	; 0x01
    1e74:	40 83       	st	Z, r20
    1e76:	41 e3       	ldi	r20, 0x31	; 49
    1e78:	50 e0       	ldi	r21, 0x00	; 0
    1e7a:	84 9f       	mul	r24, r20
    1e7c:	f0 01       	movw	r30, r0
    1e7e:	85 9f       	mul	r24, r21
    1e80:	f0 0d       	add	r31, r0
    1e82:	94 9f       	mul	r25, r20
    1e84:	f0 0d       	add	r31, r0
    1e86:	11 24       	eor	r1, r1
    1e88:	e2 0f       	add	r30, r18
    1e8a:	f3 1f       	adc	r31, r19
    1e8c:	ee 0f       	add	r30, r30
    1e8e:	ff 1f       	adc	r31, r31
    1e90:	e8 5c       	subi	r30, 0xC8	; 200
    1e92:	fb 4f       	sbci	r31, 0xFB	; 251
    1e94:	80 ec       	ldi	r24, 0xC0	; 192
    1e96:	97 e2       	ldi	r25, 0x27	; 39
    1e98:	91 83       	std	Z+1, r25	; 0x01
    1e9a:	80 83       	st	Z, r24
		free (heuris);
    1e9c:	c5 51       	subi	r28, 0x15	; 21
    1e9e:	de 4f       	sbci	r29, 0xFE	; 254
    1ea0:	88 81       	ld	r24, Y
    1ea2:	99 81       	ldd	r25, Y+1	; 0x01
    1ea4:	cb 5e       	subi	r28, 0xEB	; 235
    1ea6:	d1 40       	sbci	r29, 0x01	; 1
    1ea8:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <free>
		free (pathSize);
    1eac:	c8 01       	movw	r24, r16
    1eae:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <free>
		free (result);
    1eb2:	c7 01       	movw	r24, r14
    1eb4:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <free>
    1eb8:	36 ce       	rjmp	.-916    	; 0x1b26 <dStar+0x9c>

00001eba <simulation>:
 uart0_init(); //Initailize UART0 for serial communiaction
 uart2_init(); //Initailize UART1 for serial communiaction
 sei();   //Enables the global interrupts
}

void simulation(int from, int to) {
    1eba:	cf 93       	push	r28
    1ebc:	df 93       	push	r29

	dStar(from, to);
    1ebe:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <dStar>
    1ec2:	c0 e7       	ldi	r28, 0x70	; 112
    1ec4:	d1 e0       	ldi	r29, 0x01	; 1
    1ec6:	17 c0       	rjmp	.+46     	; 0x1ef6 <simulation+0x3c>
	while (sequence_arr[Counter] == 0)
	{
		//lcd_print(1,14,Counter,2);
		lcd_cursor(1,1);
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	61 e0       	ldi	r22, 0x01	; 1
    1ecc:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
		lcd_string("   Waiting!!!   ");
    1ed0:	89 e9       	ldi	r24, 0x99	; 153
    1ed2:	92 e0       	ldi	r25, 0x02	; 2
    1ed4:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
		lcd_cursor(2,1);
    1ed8:	82 e0       	ldi	r24, 0x02	; 2
    1eda:	61 e0       	ldi	r22, 0x01	; 1
    1edc:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
		lcd_string(" For Slave Bot! ");
    1ee0:	8a ea       	ldi	r24, 0xAA	; 170
    1ee2:	92 e0       	ldi	r25, 0x02	; 2
    1ee4:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
    1ee8:	88 ee       	ldi	r24, 0xE8	; 232
    1eea:	93 e0       	ldi	r25, 0x03	; 3
    1eec:	fe 01       	movw	r30, r28
    1eee:	31 97       	sbiw	r30, 0x01	; 1
    1ef0:	f1 f7       	brne	.-4      	; 0x1eee <simulation+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef4:	d9 f7       	brne	.-10     	; 0x1eec <simulation+0x32>
}

void simulation(int from, int to) {

	dStar(from, to);
	while (sequence_arr[Counter] == 0)
    1ef6:	80 91 36 04 	lds	r24, 0x0436
    1efa:	90 91 37 04 	lds	r25, 0x0437
    1efe:	88 0f       	add	r24, r24
    1f00:	99 1f       	adc	r25, r25
    1f02:	e0 91 bc 17 	lds	r30, 0x17BC
    1f06:	f0 91 bd 17 	lds	r31, 0x17BD
    1f0a:	e8 0f       	add	r30, r24
    1f0c:	f9 1f       	adc	r31, r25
    1f0e:	80 81       	ld	r24, Z
    1f10:	91 81       	ldd	r25, Z+1	; 0x01
    1f12:	89 2b       	or	r24, r25
    1f14:	c9 f2       	breq	.-78     	; 0x1ec8 <simulation+0xe>
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    1f16:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    1f18:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    1f1a:	88 b9       	out	0x08, r24	; 8
		lcd_string(" For Slave Bot! ");
		_delay_ms(100);
	}

	buzzer_on();
	lcd_cursor(1,1);
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	61 e0       	ldi	r22, 0x01	; 1
    1f20:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
	lcd_string("MNP DETECTED ");
    1f24:	8b eb       	ldi	r24, 0xBB	; 187
    1f26:	92 e0       	ldi	r25, 0x02	; 2
    1f28:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
	lcd_print(1,14,sequence_arr[Counter],2);
    1f2c:	80 91 36 04 	lds	r24, 0x0436
    1f30:	90 91 37 04 	lds	r25, 0x0437
    1f34:	88 0f       	add	r24, r24
    1f36:	99 1f       	adc	r25, r25
    1f38:	e0 91 bc 17 	lds	r30, 0x17BC
    1f3c:	f0 91 bd 17 	lds	r31, 0x17BD
    1f40:	e8 0f       	add	r30, r24
    1f42:	f9 1f       	adc	r31, r25
    1f44:	40 81       	ld	r20, Z
    1f46:	51 81       	ldd	r21, Z+1	; 0x01
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	6e e0       	ldi	r22, 0x0E	; 14
    1f4c:	22 e0       	ldi	r18, 0x02	; 2
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	0e 94 3d 07 	call	0xe7a	; 0xe7a <lcd_print>
	lcd_cursor(2,1);
    1f54:	82 e0       	ldi	r24, 0x02	; 2
    1f56:	61 e0       	ldi	r22, 0x01	; 1
    1f58:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
	lcd_string("Strinking Node!!");
    1f5c:	89 ec       	ldi	r24, 0xC9	; 201
    1f5e:	92 e0       	ldi	r25, 0x02	; 2
    1f60:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
    1f64:	88 e8       	ldi	r24, 0x88	; 136
    1f66:	93 e1       	ldi	r25, 0x13	; 19
    1f68:	20 e7       	ldi	r18, 0x70	; 112
    1f6a:	31 e0       	ldi	r19, 0x01	; 1
    1f6c:	f9 01       	movw	r30, r18
    1f6e:	31 97       	sbiw	r30, 0x01	; 1
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <simulation+0xb4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f72:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f74:	d9 f7       	brne	.-10     	; 0x1f6c <simulation+0xb2>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    1f76:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    1f78:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    1f7a:	88 b9       	out	0x08, r24	; 8
	lcd_cursor(2,1);
	lcd_string("Strinking Node!!");
	_delay_ms(500);
	buzzer_off();

	++Counter;
    1f7c:	80 91 36 04 	lds	r24, 0x0436
    1f80:	90 91 37 04 	lds	r25, 0x0437
    1f84:	01 96       	adiw	r24, 0x01	; 1
    1f86:	90 93 37 04 	sts	0x0437, r25
    1f8a:	80 93 36 04 	sts	0x0436, r24
	//lcd_print(1,4,Counter,2);
	UDR0 = Counter;
    1f8e:	80 93 c6 00 	sts	0x00C6, r24
}
    1f92:	df 91       	pop	r29
    1f94:	cf 91       	pop	r28
    1f96:	08 95       	ret

00001f98 <main>:

//Main Function
int main(void)
{
    1f98:	0f 93       	push	r16
    1f9a:	1f 93       	push	r17
    1f9c:	cf 93       	push	r28
    1f9e:	df 93       	push	r29
	initial_devices();
    1fa0:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <initial_devices>
	lcd_set_4bit();
    1fa4:	0e 94 86 06 	call	0xd0c	; 0xd0c <lcd_set_4bit>
	lcd_init();
    1fa8:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <lcd_init>
	while(1) {
		if (count == arr_size)
    1fac:	20 91 0d 03 	lds	r18, 0x030D
    1fb0:	30 91 0e 03 	lds	r19, 0x030E
    1fb4:	80 91 32 04 	lds	r24, 0x0432
    1fb8:	90 91 33 04 	lds	r25, 0x0433
    1fbc:	28 17       	cp	r18, r24
    1fbe:	39 07       	cpc	r19, r25
    1fc0:	09 f0       	breq	.+2      	; 0x1fc4 <main+0x2c>
    1fc2:	57 c0       	rjmp	.+174    	; 0x2072 <main+0xda>
		{
			count++;
    1fc4:	2f 5f       	subi	r18, 0xFF	; 255
    1fc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc8:	30 93 0e 03 	sts	0x030E, r19
    1fcc:	20 93 0d 03 	sts	0x030D, r18
    1fd0:	21 50       	subi	r18, 0x01	; 1
    1fd2:	30 40       	sbci	r19, 0x00	; 0
			UDR0 = arr_size;
    1fd4:	20 93 c6 00 	sts	0x00C6, r18
			seperate();
    1fd8:	0e 94 1e 08 	call	0x103c	; 0x103c <seperate>
	//UDR0 = 'e';	
}

void remove_zero() {
	int i = 0, j = 0;
	while (i < arr_size)
    1fdc:	60 91 32 04 	lds	r22, 0x0432
    1fe0:	70 91 33 04 	lds	r23, 0x0433
    1fe4:	a0 91 bc 17 	lds	r26, 0x17BC
    1fe8:	b0 91 bd 17 	lds	r27, 0x17BD
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	11 c0       	rjmp	.+34     	; 0x2018 <main+0x80>
	{
		if(sequence_arr[i]!=0)
    1ff6:	4d 91       	ld	r20, X+
    1ff8:	5c 91       	ld	r21, X
    1ffa:	11 97       	sbiw	r26, 0x01	; 1
    1ffc:	41 15       	cp	r20, r1
    1ffe:	51 05       	cpc	r21, r1
    2000:	41 f0       	breq	.+16     	; 0x2012 <main+0x7a>
		{
			arr_master[j] = sequence_arr[i];
    2002:	fc 01       	movw	r30, r24
    2004:	ee 0f       	add	r30, r30
    2006:	ff 1f       	adc	r31, r31
    2008:	e6 57       	subi	r30, 0x76	; 118
    200a:	f8 4e       	sbci	r31, 0xE8	; 232
    200c:	51 83       	std	Z+1, r21	; 0x01
    200e:	40 83       	st	Z, r20
			j++;
    2010:	01 96       	adiw	r24, 0x01	; 1
		}
		i++;
    2012:	2f 5f       	subi	r18, 0xFF	; 255
    2014:	3f 4f       	sbci	r19, 0xFF	; 255
    2016:	12 96       	adiw	r26, 0x02	; 2
	//UDR0 = 'e';	
}

void remove_zero() {
	int i = 0, j = 0;
	while (i < arr_size)
    2018:	26 17       	cp	r18, r22
    201a:	37 07       	cpc	r19, r23
    201c:	64 f3       	brlt	.-40     	; 0x1ff6 <main+0x5e>
			arr_master[j] = sequence_arr[i];
			j++;
		}
		i++;
	}
	master_size = j;
    201e:	90 93 35 04 	sts	0x0435, r25
    2022:	80 93 34 04 	sts	0x0434, r24
    2026:	ca e8       	ldi	r28, 0x8A	; 138
    2028:	d7 e1       	ldi	r29, 0x17	; 23
    202a:	00 e0       	ldi	r16, 0x00	; 0
    202c:	10 e0       	ldi	r17, 0x00	; 0
    202e:	09 c0       	rjmp	.+18     	; 0x2042 <main+0xaa>
			count++;
			UDR0 = arr_size;
			seperate();
			remove_zero();
			for (int i = 0; i < master_size; i++) {
				simulation (arr_master[i], arr_master[i+1]);
    2030:	0f 5f       	subi	r16, 0xFF	; 255
    2032:	1f 4f       	sbci	r17, 0xFF	; 255
    2034:	6a 81       	ldd	r22, Y+2	; 0x02
    2036:	7b 81       	ldd	r23, Y+3	; 0x03
    2038:	88 81       	ld	r24, Y
    203a:	99 81       	ldd	r25, Y+1	; 0x01
    203c:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <simulation>
    2040:	22 96       	adiw	r28, 0x02	; 2
		{
			count++;
			UDR0 = arr_size;
			seperate();
			remove_zero();
			for (int i = 0; i < master_size; i++) {
    2042:	80 91 34 04 	lds	r24, 0x0434
    2046:	90 91 35 04 	lds	r25, 0x0435
    204a:	08 17       	cp	r16, r24
    204c:	19 07       	cpc	r17, r25
    204e:	84 f3       	brlt	.-32     	; 0x2030 <main+0x98>
				simulation (arr_master[i], arr_master[i+1]);
			}
			while(1) {
				lcd_cursor(1,1);
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	61 e0       	ldi	r22, 0x01	; 1
    2054:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
				lcd_string("      Task      ");
    2058:	8a ed       	ldi	r24, 0xDA	; 218
    205a:	92 e0       	ldi	r25, 0x02	; 2
    205c:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
				lcd_cursor(2,1);
    2060:	82 e0       	ldi	r24, 0x02	; 2
    2062:	61 e0       	ldi	r22, 0x01	; 1
    2064:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
				lcd_string("  Completed!!!  ");
    2068:	8b ee       	ldi	r24, 0xEB	; 235
    206a:	92 e0       	ldi	r25, 0x02	; 2
    206c:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
    2070:	ef cf       	rjmp	.-34     	; 0x2050 <main+0xb8>
			}
		}
		lcd_cursor(1,1);
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	61 e0       	ldi	r22, 0x01	; 1
    2076:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
		lcd_string("      Task      ");
    207a:	8a ed       	ldi	r24, 0xDA	; 218
    207c:	92 e0       	ldi	r25, 0x02	; 2
    207e:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
		lcd_cursor(2,1);
    2082:	82 e0       	ldi	r24, 0x02	; 2
    2084:	61 e0       	ldi	r22, 0x01	; 1
    2086:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
		lcd_string("  Initiated!!!  ");
    208a:	8c ef       	ldi	r24, 0xFC	; 252
    208c:	92 e0       	ldi	r25, 0x02	; 2
    208e:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
    2092:	8c cf       	rjmp	.-232    	; 0x1fac <main+0x14>

00002094 <__fixunssfsi>:
    2094:	ef 92       	push	r14
    2096:	ff 92       	push	r15
    2098:	0f 93       	push	r16
    209a:	1f 93       	push	r17
    209c:	7b 01       	movw	r14, r22
    209e:	8c 01       	movw	r16, r24
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e0       	ldi	r20, 0x00	; 0
    20a6:	5f e4       	ldi	r21, 0x4F	; 79
    20a8:	0e 94 cc 12 	call	0x2598	; 0x2598 <__gesf2>
    20ac:	88 23       	and	r24, r24
    20ae:	8c f0       	brlt	.+34     	; 0x20d2 <__fixunssfsi+0x3e>
    20b0:	c8 01       	movw	r24, r16
    20b2:	b7 01       	movw	r22, r14
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e0       	ldi	r20, 0x00	; 0
    20ba:	5f e4       	ldi	r21, 0x4F	; 79
    20bc:	0e 94 c2 11 	call	0x2384	; 0x2384 <__subsf3>
    20c0:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <__fixsfsi>
    20c4:	9b 01       	movw	r18, r22
    20c6:	ac 01       	movw	r20, r24
    20c8:	20 50       	subi	r18, 0x00	; 0
    20ca:	30 40       	sbci	r19, 0x00	; 0
    20cc:	40 40       	sbci	r20, 0x00	; 0
    20ce:	50 48       	sbci	r21, 0x80	; 128
    20d0:	06 c0       	rjmp	.+12     	; 0x20de <__fixunssfsi+0x4a>
    20d2:	c8 01       	movw	r24, r16
    20d4:	b7 01       	movw	r22, r14
    20d6:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <__fixsfsi>
    20da:	9b 01       	movw	r18, r22
    20dc:	ac 01       	movw	r20, r24
    20de:	b9 01       	movw	r22, r18
    20e0:	ca 01       	movw	r24, r20
    20e2:	1f 91       	pop	r17
    20e4:	0f 91       	pop	r16
    20e6:	ff 90       	pop	r15
    20e8:	ef 90       	pop	r14
    20ea:	08 95       	ret

000020ec <_fpadd_parts>:
    20ec:	a0 e0       	ldi	r26, 0x00	; 0
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	ec e7       	ldi	r30, 0x7C	; 124
    20f2:	f0 e1       	ldi	r31, 0x10	; 16
    20f4:	0c 94 d7 16 	jmp	0x2dae	; 0x2dae <__prologue_saves__>
    20f8:	dc 01       	movw	r26, r24
    20fa:	2b 01       	movw	r4, r22
    20fc:	fa 01       	movw	r30, r20
    20fe:	9c 91       	ld	r25, X
    2100:	92 30       	cpi	r25, 0x02	; 2
    2102:	08 f4       	brcc	.+2      	; 0x2106 <_fpadd_parts+0x1a>
    2104:	39 c1       	rjmp	.+626    	; 0x2378 <__stack+0x179>
    2106:	eb 01       	movw	r28, r22
    2108:	88 81       	ld	r24, Y
    210a:	82 30       	cpi	r24, 0x02	; 2
    210c:	08 f4       	brcc	.+2      	; 0x2110 <_fpadd_parts+0x24>
    210e:	33 c1       	rjmp	.+614    	; 0x2376 <__stack+0x177>
    2110:	94 30       	cpi	r25, 0x04	; 4
    2112:	69 f4       	brne	.+26     	; 0x212e <_fpadd_parts+0x42>
    2114:	84 30       	cpi	r24, 0x04	; 4
    2116:	09 f0       	breq	.+2      	; 0x211a <_fpadd_parts+0x2e>
    2118:	2f c1       	rjmp	.+606    	; 0x2378 <__stack+0x179>
    211a:	11 96       	adiw	r26, 0x01	; 1
    211c:	9c 91       	ld	r25, X
    211e:	11 97       	sbiw	r26, 0x01	; 1
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	98 17       	cp	r25, r24
    2124:	09 f4       	brne	.+2      	; 0x2128 <_fpadd_parts+0x3c>
    2126:	28 c1       	rjmp	.+592    	; 0x2378 <__stack+0x179>
    2128:	af e0       	ldi	r26, 0x0F	; 15
    212a:	b3 e0       	ldi	r27, 0x03	; 3
    212c:	25 c1       	rjmp	.+586    	; 0x2378 <__stack+0x179>
    212e:	84 30       	cpi	r24, 0x04	; 4
    2130:	09 f4       	brne	.+2      	; 0x2134 <_fpadd_parts+0x48>
    2132:	21 c1       	rjmp	.+578    	; 0x2376 <__stack+0x177>
    2134:	82 30       	cpi	r24, 0x02	; 2
    2136:	a9 f4       	brne	.+42     	; 0x2162 <_fpadd_parts+0x76>
    2138:	92 30       	cpi	r25, 0x02	; 2
    213a:	09 f0       	breq	.+2      	; 0x213e <_fpadd_parts+0x52>
    213c:	1d c1       	rjmp	.+570    	; 0x2378 <__stack+0x179>
    213e:	9a 01       	movw	r18, r20
    2140:	ad 01       	movw	r20, r26
    2142:	88 e0       	ldi	r24, 0x08	; 8
    2144:	ea 01       	movw	r28, r20
    2146:	09 90       	ld	r0, Y+
    2148:	ae 01       	movw	r20, r28
    214a:	e9 01       	movw	r28, r18
    214c:	09 92       	st	Y+, r0
    214e:	9e 01       	movw	r18, r28
    2150:	81 50       	subi	r24, 0x01	; 1
    2152:	c1 f7       	brne	.-16     	; 0x2144 <_fpadd_parts+0x58>
    2154:	e2 01       	movw	r28, r4
    2156:	89 81       	ldd	r24, Y+1	; 0x01
    2158:	11 96       	adiw	r26, 0x01	; 1
    215a:	9c 91       	ld	r25, X
    215c:	89 23       	and	r24, r25
    215e:	81 83       	std	Z+1, r24	; 0x01
    2160:	08 c1       	rjmp	.+528    	; 0x2372 <__stack+0x173>
    2162:	92 30       	cpi	r25, 0x02	; 2
    2164:	09 f4       	brne	.+2      	; 0x2168 <_fpadd_parts+0x7c>
    2166:	07 c1       	rjmp	.+526    	; 0x2376 <__stack+0x177>
    2168:	12 96       	adiw	r26, 0x02	; 2
    216a:	2d 90       	ld	r2, X+
    216c:	3c 90       	ld	r3, X
    216e:	13 97       	sbiw	r26, 0x03	; 3
    2170:	eb 01       	movw	r28, r22
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	9b 81       	ldd	r25, Y+3	; 0x03
    2176:	14 96       	adiw	r26, 0x04	; 4
    2178:	ad 90       	ld	r10, X+
    217a:	bd 90       	ld	r11, X+
    217c:	cd 90       	ld	r12, X+
    217e:	dc 90       	ld	r13, X
    2180:	17 97       	sbiw	r26, 0x07	; 7
    2182:	ec 80       	ldd	r14, Y+4	; 0x04
    2184:	fd 80       	ldd	r15, Y+5	; 0x05
    2186:	0e 81       	ldd	r16, Y+6	; 0x06
    2188:	1f 81       	ldd	r17, Y+7	; 0x07
    218a:	91 01       	movw	r18, r2
    218c:	28 1b       	sub	r18, r24
    218e:	39 0b       	sbc	r19, r25
    2190:	b9 01       	movw	r22, r18
    2192:	37 ff       	sbrs	r19, 7
    2194:	04 c0       	rjmp	.+8      	; 0x219e <_fpadd_parts+0xb2>
    2196:	66 27       	eor	r22, r22
    2198:	77 27       	eor	r23, r23
    219a:	62 1b       	sub	r22, r18
    219c:	73 0b       	sbc	r23, r19
    219e:	60 32       	cpi	r22, 0x20	; 32
    21a0:	71 05       	cpc	r23, r1
    21a2:	0c f0       	brlt	.+2      	; 0x21a6 <_fpadd_parts+0xba>
    21a4:	61 c0       	rjmp	.+194    	; 0x2268 <__stack+0x69>
    21a6:	12 16       	cp	r1, r18
    21a8:	13 06       	cpc	r1, r19
    21aa:	6c f5       	brge	.+90     	; 0x2206 <__stack+0x7>
    21ac:	37 01       	movw	r6, r14
    21ae:	48 01       	movw	r8, r16
    21b0:	06 2e       	mov	r0, r22
    21b2:	04 c0       	rjmp	.+8      	; 0x21bc <_fpadd_parts+0xd0>
    21b4:	96 94       	lsr	r9
    21b6:	87 94       	ror	r8
    21b8:	77 94       	ror	r7
    21ba:	67 94       	ror	r6
    21bc:	0a 94       	dec	r0
    21be:	d2 f7       	brpl	.-12     	; 0x21b4 <_fpadd_parts+0xc8>
    21c0:	21 e0       	ldi	r18, 0x01	; 1
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	40 e0       	ldi	r20, 0x00	; 0
    21c6:	50 e0       	ldi	r21, 0x00	; 0
    21c8:	04 c0       	rjmp	.+8      	; 0x21d2 <_fpadd_parts+0xe6>
    21ca:	22 0f       	add	r18, r18
    21cc:	33 1f       	adc	r19, r19
    21ce:	44 1f       	adc	r20, r20
    21d0:	55 1f       	adc	r21, r21
    21d2:	6a 95       	dec	r22
    21d4:	d2 f7       	brpl	.-12     	; 0x21ca <_fpadd_parts+0xde>
    21d6:	21 50       	subi	r18, 0x01	; 1
    21d8:	30 40       	sbci	r19, 0x00	; 0
    21da:	40 40       	sbci	r20, 0x00	; 0
    21dc:	50 40       	sbci	r21, 0x00	; 0
    21de:	2e 21       	and	r18, r14
    21e0:	3f 21       	and	r19, r15
    21e2:	40 23       	and	r20, r16
    21e4:	51 23       	and	r21, r17
    21e6:	21 15       	cp	r18, r1
    21e8:	31 05       	cpc	r19, r1
    21ea:	41 05       	cpc	r20, r1
    21ec:	51 05       	cpc	r21, r1
    21ee:	21 f0       	breq	.+8      	; 0x21f8 <_fpadd_parts+0x10c>
    21f0:	21 e0       	ldi	r18, 0x01	; 1
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	40 e0       	ldi	r20, 0x00	; 0
    21f6:	50 e0       	ldi	r21, 0x00	; 0
    21f8:	79 01       	movw	r14, r18
    21fa:	8a 01       	movw	r16, r20
    21fc:	e6 28       	or	r14, r6
    21fe:	f7 28       	or	r15, r7
    2200:	08 29       	or	r16, r8
    2202:	19 29       	or	r17, r9
    2204:	3c c0       	rjmp	.+120    	; 0x227e <__stack+0x7f>
    2206:	23 2b       	or	r18, r19
    2208:	d1 f1       	breq	.+116    	; 0x227e <__stack+0x7f>
    220a:	26 0e       	add	r2, r22
    220c:	37 1e       	adc	r3, r23
    220e:	35 01       	movw	r6, r10
    2210:	46 01       	movw	r8, r12
    2212:	06 2e       	mov	r0, r22
    2214:	04 c0       	rjmp	.+8      	; 0x221e <__stack+0x1f>
    2216:	96 94       	lsr	r9
    2218:	87 94       	ror	r8
    221a:	77 94       	ror	r7
    221c:	67 94       	ror	r6
    221e:	0a 94       	dec	r0
    2220:	d2 f7       	brpl	.-12     	; 0x2216 <__stack+0x17>
    2222:	21 e0       	ldi	r18, 0x01	; 1
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	40 e0       	ldi	r20, 0x00	; 0
    2228:	50 e0       	ldi	r21, 0x00	; 0
    222a:	04 c0       	rjmp	.+8      	; 0x2234 <__stack+0x35>
    222c:	22 0f       	add	r18, r18
    222e:	33 1f       	adc	r19, r19
    2230:	44 1f       	adc	r20, r20
    2232:	55 1f       	adc	r21, r21
    2234:	6a 95       	dec	r22
    2236:	d2 f7       	brpl	.-12     	; 0x222c <__stack+0x2d>
    2238:	21 50       	subi	r18, 0x01	; 1
    223a:	30 40       	sbci	r19, 0x00	; 0
    223c:	40 40       	sbci	r20, 0x00	; 0
    223e:	50 40       	sbci	r21, 0x00	; 0
    2240:	2a 21       	and	r18, r10
    2242:	3b 21       	and	r19, r11
    2244:	4c 21       	and	r20, r12
    2246:	5d 21       	and	r21, r13
    2248:	21 15       	cp	r18, r1
    224a:	31 05       	cpc	r19, r1
    224c:	41 05       	cpc	r20, r1
    224e:	51 05       	cpc	r21, r1
    2250:	21 f0       	breq	.+8      	; 0x225a <__stack+0x5b>
    2252:	21 e0       	ldi	r18, 0x01	; 1
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e0       	ldi	r20, 0x00	; 0
    2258:	50 e0       	ldi	r21, 0x00	; 0
    225a:	59 01       	movw	r10, r18
    225c:	6a 01       	movw	r12, r20
    225e:	a6 28       	or	r10, r6
    2260:	b7 28       	or	r11, r7
    2262:	c8 28       	or	r12, r8
    2264:	d9 28       	or	r13, r9
    2266:	0b c0       	rjmp	.+22     	; 0x227e <__stack+0x7f>
    2268:	82 15       	cp	r24, r2
    226a:	93 05       	cpc	r25, r3
    226c:	2c f0       	brlt	.+10     	; 0x2278 <__stack+0x79>
    226e:	1c 01       	movw	r2, r24
    2270:	aa 24       	eor	r10, r10
    2272:	bb 24       	eor	r11, r11
    2274:	65 01       	movw	r12, r10
    2276:	03 c0       	rjmp	.+6      	; 0x227e <__stack+0x7f>
    2278:	ee 24       	eor	r14, r14
    227a:	ff 24       	eor	r15, r15
    227c:	87 01       	movw	r16, r14
    227e:	11 96       	adiw	r26, 0x01	; 1
    2280:	9c 91       	ld	r25, X
    2282:	d2 01       	movw	r26, r4
    2284:	11 96       	adiw	r26, 0x01	; 1
    2286:	8c 91       	ld	r24, X
    2288:	98 17       	cp	r25, r24
    228a:	09 f4       	brne	.+2      	; 0x228e <__stack+0x8f>
    228c:	45 c0       	rjmp	.+138    	; 0x2318 <__stack+0x119>
    228e:	99 23       	and	r25, r25
    2290:	39 f0       	breq	.+14     	; 0x22a0 <__stack+0xa1>
    2292:	a8 01       	movw	r20, r16
    2294:	97 01       	movw	r18, r14
    2296:	2a 19       	sub	r18, r10
    2298:	3b 09       	sbc	r19, r11
    229a:	4c 09       	sbc	r20, r12
    229c:	5d 09       	sbc	r21, r13
    229e:	06 c0       	rjmp	.+12     	; 0x22ac <__stack+0xad>
    22a0:	a6 01       	movw	r20, r12
    22a2:	95 01       	movw	r18, r10
    22a4:	2e 19       	sub	r18, r14
    22a6:	3f 09       	sbc	r19, r15
    22a8:	40 0b       	sbc	r20, r16
    22aa:	51 0b       	sbc	r21, r17
    22ac:	57 fd       	sbrc	r21, 7
    22ae:	08 c0       	rjmp	.+16     	; 0x22c0 <__stack+0xc1>
    22b0:	11 82       	std	Z+1, r1	; 0x01
    22b2:	33 82       	std	Z+3, r3	; 0x03
    22b4:	22 82       	std	Z+2, r2	; 0x02
    22b6:	24 83       	std	Z+4, r18	; 0x04
    22b8:	35 83       	std	Z+5, r19	; 0x05
    22ba:	46 83       	std	Z+6, r20	; 0x06
    22bc:	57 83       	std	Z+7, r21	; 0x07
    22be:	1d c0       	rjmp	.+58     	; 0x22fa <__stack+0xfb>
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	81 83       	std	Z+1, r24	; 0x01
    22c4:	33 82       	std	Z+3, r3	; 0x03
    22c6:	22 82       	std	Z+2, r2	; 0x02
    22c8:	88 27       	eor	r24, r24
    22ca:	99 27       	eor	r25, r25
    22cc:	dc 01       	movw	r26, r24
    22ce:	82 1b       	sub	r24, r18
    22d0:	93 0b       	sbc	r25, r19
    22d2:	a4 0b       	sbc	r26, r20
    22d4:	b5 0b       	sbc	r27, r21
    22d6:	84 83       	std	Z+4, r24	; 0x04
    22d8:	95 83       	std	Z+5, r25	; 0x05
    22da:	a6 83       	std	Z+6, r26	; 0x06
    22dc:	b7 83       	std	Z+7, r27	; 0x07
    22de:	0d c0       	rjmp	.+26     	; 0x22fa <__stack+0xfb>
    22e0:	22 0f       	add	r18, r18
    22e2:	33 1f       	adc	r19, r19
    22e4:	44 1f       	adc	r20, r20
    22e6:	55 1f       	adc	r21, r21
    22e8:	24 83       	std	Z+4, r18	; 0x04
    22ea:	35 83       	std	Z+5, r19	; 0x05
    22ec:	46 83       	std	Z+6, r20	; 0x06
    22ee:	57 83       	std	Z+7, r21	; 0x07
    22f0:	82 81       	ldd	r24, Z+2	; 0x02
    22f2:	93 81       	ldd	r25, Z+3	; 0x03
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	93 83       	std	Z+3, r25	; 0x03
    22f8:	82 83       	std	Z+2, r24	; 0x02
    22fa:	24 81       	ldd	r18, Z+4	; 0x04
    22fc:	35 81       	ldd	r19, Z+5	; 0x05
    22fe:	46 81       	ldd	r20, Z+6	; 0x06
    2300:	57 81       	ldd	r21, Z+7	; 0x07
    2302:	da 01       	movw	r26, r20
    2304:	c9 01       	movw	r24, r18
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	a1 09       	sbc	r26, r1
    230a:	b1 09       	sbc	r27, r1
    230c:	8f 5f       	subi	r24, 0xFF	; 255
    230e:	9f 4f       	sbci	r25, 0xFF	; 255
    2310:	af 4f       	sbci	r26, 0xFF	; 255
    2312:	bf 43       	sbci	r27, 0x3F	; 63
    2314:	28 f3       	brcs	.-54     	; 0x22e0 <__stack+0xe1>
    2316:	0b c0       	rjmp	.+22     	; 0x232e <__stack+0x12f>
    2318:	91 83       	std	Z+1, r25	; 0x01
    231a:	33 82       	std	Z+3, r3	; 0x03
    231c:	22 82       	std	Z+2, r2	; 0x02
    231e:	ea 0c       	add	r14, r10
    2320:	fb 1c       	adc	r15, r11
    2322:	0c 1d       	adc	r16, r12
    2324:	1d 1d       	adc	r17, r13
    2326:	e4 82       	std	Z+4, r14	; 0x04
    2328:	f5 82       	std	Z+5, r15	; 0x05
    232a:	06 83       	std	Z+6, r16	; 0x06
    232c:	17 83       	std	Z+7, r17	; 0x07
    232e:	83 e0       	ldi	r24, 0x03	; 3
    2330:	80 83       	st	Z, r24
    2332:	24 81       	ldd	r18, Z+4	; 0x04
    2334:	35 81       	ldd	r19, Z+5	; 0x05
    2336:	46 81       	ldd	r20, Z+6	; 0x06
    2338:	57 81       	ldd	r21, Z+7	; 0x07
    233a:	57 ff       	sbrs	r21, 7
    233c:	1a c0       	rjmp	.+52     	; 0x2372 <__stack+0x173>
    233e:	c9 01       	movw	r24, r18
    2340:	aa 27       	eor	r26, r26
    2342:	97 fd       	sbrc	r25, 7
    2344:	a0 95       	com	r26
    2346:	ba 2f       	mov	r27, r26
    2348:	81 70       	andi	r24, 0x01	; 1
    234a:	90 70       	andi	r25, 0x00	; 0
    234c:	a0 70       	andi	r26, 0x00	; 0
    234e:	b0 70       	andi	r27, 0x00	; 0
    2350:	56 95       	lsr	r21
    2352:	47 95       	ror	r20
    2354:	37 95       	ror	r19
    2356:	27 95       	ror	r18
    2358:	82 2b       	or	r24, r18
    235a:	93 2b       	or	r25, r19
    235c:	a4 2b       	or	r26, r20
    235e:	b5 2b       	or	r27, r21
    2360:	84 83       	std	Z+4, r24	; 0x04
    2362:	95 83       	std	Z+5, r25	; 0x05
    2364:	a6 83       	std	Z+6, r26	; 0x06
    2366:	b7 83       	std	Z+7, r27	; 0x07
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	93 81       	ldd	r25, Z+3	; 0x03
    236c:	01 96       	adiw	r24, 0x01	; 1
    236e:	93 83       	std	Z+3, r25	; 0x03
    2370:	82 83       	std	Z+2, r24	; 0x02
    2372:	df 01       	movw	r26, r30
    2374:	01 c0       	rjmp	.+2      	; 0x2378 <__stack+0x179>
    2376:	d2 01       	movw	r26, r4
    2378:	cd 01       	movw	r24, r26
    237a:	cd b7       	in	r28, 0x3d	; 61
    237c:	de b7       	in	r29, 0x3e	; 62
    237e:	e2 e1       	ldi	r30, 0x12	; 18
    2380:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <__epilogue_restores__>

00002384 <__subsf3>:
    2384:	a0 e2       	ldi	r26, 0x20	; 32
    2386:	b0 e0       	ldi	r27, 0x00	; 0
    2388:	e8 ec       	ldi	r30, 0xC8	; 200
    238a:	f1 e1       	ldi	r31, 0x11	; 17
    238c:	0c 94 e3 16 	jmp	0x2dc6	; 0x2dc6 <__prologue_saves__+0x18>
    2390:	69 83       	std	Y+1, r22	; 0x01
    2392:	7a 83       	std	Y+2, r23	; 0x02
    2394:	8b 83       	std	Y+3, r24	; 0x03
    2396:	9c 83       	std	Y+4, r25	; 0x04
    2398:	2d 83       	std	Y+5, r18	; 0x05
    239a:	3e 83       	std	Y+6, r19	; 0x06
    239c:	4f 83       	std	Y+7, r20	; 0x07
    239e:	58 87       	std	Y+8, r21	; 0x08
    23a0:	e9 e0       	ldi	r30, 0x09	; 9
    23a2:	ee 2e       	mov	r14, r30
    23a4:	f1 2c       	mov	r15, r1
    23a6:	ec 0e       	add	r14, r28
    23a8:	fd 1e       	adc	r15, r29
    23aa:	ce 01       	movw	r24, r28
    23ac:	01 96       	adiw	r24, 0x01	; 1
    23ae:	b7 01       	movw	r22, r14
    23b0:	0e 94 ed 14 	call	0x29da	; 0x29da <__unpack_f>
    23b4:	8e 01       	movw	r16, r28
    23b6:	0f 5e       	subi	r16, 0xEF	; 239
    23b8:	1f 4f       	sbci	r17, 0xFF	; 255
    23ba:	ce 01       	movw	r24, r28
    23bc:	05 96       	adiw	r24, 0x05	; 5
    23be:	b8 01       	movw	r22, r16
    23c0:	0e 94 ed 14 	call	0x29da	; 0x29da <__unpack_f>
    23c4:	8a 89       	ldd	r24, Y+18	; 0x12
    23c6:	91 e0       	ldi	r25, 0x01	; 1
    23c8:	89 27       	eor	r24, r25
    23ca:	8a 8b       	std	Y+18, r24	; 0x12
    23cc:	c7 01       	movw	r24, r14
    23ce:	b8 01       	movw	r22, r16
    23d0:	ae 01       	movw	r20, r28
    23d2:	47 5e       	subi	r20, 0xE7	; 231
    23d4:	5f 4f       	sbci	r21, 0xFF	; 255
    23d6:	0e 94 76 10 	call	0x20ec	; 0x20ec <_fpadd_parts>
    23da:	0e 94 18 14 	call	0x2830	; 0x2830 <__pack_f>
    23de:	a0 96       	adiw	r28, 0x20	; 32
    23e0:	e6 e0       	ldi	r30, 0x06	; 6
    23e2:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <__epilogue_restores__+0x18>

000023e6 <__addsf3>:
    23e6:	a0 e2       	ldi	r26, 0x20	; 32
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	e9 ef       	ldi	r30, 0xF9	; 249
    23ec:	f1 e1       	ldi	r31, 0x11	; 17
    23ee:	0c 94 e3 16 	jmp	0x2dc6	; 0x2dc6 <__prologue_saves__+0x18>
    23f2:	69 83       	std	Y+1, r22	; 0x01
    23f4:	7a 83       	std	Y+2, r23	; 0x02
    23f6:	8b 83       	std	Y+3, r24	; 0x03
    23f8:	9c 83       	std	Y+4, r25	; 0x04
    23fa:	2d 83       	std	Y+5, r18	; 0x05
    23fc:	3e 83       	std	Y+6, r19	; 0x06
    23fe:	4f 83       	std	Y+7, r20	; 0x07
    2400:	58 87       	std	Y+8, r21	; 0x08
    2402:	f9 e0       	ldi	r31, 0x09	; 9
    2404:	ef 2e       	mov	r14, r31
    2406:	f1 2c       	mov	r15, r1
    2408:	ec 0e       	add	r14, r28
    240a:	fd 1e       	adc	r15, r29
    240c:	ce 01       	movw	r24, r28
    240e:	01 96       	adiw	r24, 0x01	; 1
    2410:	b7 01       	movw	r22, r14
    2412:	0e 94 ed 14 	call	0x29da	; 0x29da <__unpack_f>
    2416:	8e 01       	movw	r16, r28
    2418:	0f 5e       	subi	r16, 0xEF	; 239
    241a:	1f 4f       	sbci	r17, 0xFF	; 255
    241c:	ce 01       	movw	r24, r28
    241e:	05 96       	adiw	r24, 0x05	; 5
    2420:	b8 01       	movw	r22, r16
    2422:	0e 94 ed 14 	call	0x29da	; 0x29da <__unpack_f>
    2426:	c7 01       	movw	r24, r14
    2428:	b8 01       	movw	r22, r16
    242a:	ae 01       	movw	r20, r28
    242c:	47 5e       	subi	r20, 0xE7	; 231
    242e:	5f 4f       	sbci	r21, 0xFF	; 255
    2430:	0e 94 76 10 	call	0x20ec	; 0x20ec <_fpadd_parts>
    2434:	0e 94 18 14 	call	0x2830	; 0x2830 <__pack_f>
    2438:	a0 96       	adiw	r28, 0x20	; 32
    243a:	e6 e0       	ldi	r30, 0x06	; 6
    243c:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <__epilogue_restores__+0x18>

00002440 <__divsf3>:
    2440:	a8 e1       	ldi	r26, 0x18	; 24
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	e6 e2       	ldi	r30, 0x26	; 38
    2446:	f2 e1       	ldi	r31, 0x12	; 18
    2448:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__prologue_saves__+0x10>
    244c:	69 83       	std	Y+1, r22	; 0x01
    244e:	7a 83       	std	Y+2, r23	; 0x02
    2450:	8b 83       	std	Y+3, r24	; 0x03
    2452:	9c 83       	std	Y+4, r25	; 0x04
    2454:	2d 83       	std	Y+5, r18	; 0x05
    2456:	3e 83       	std	Y+6, r19	; 0x06
    2458:	4f 83       	std	Y+7, r20	; 0x07
    245a:	58 87       	std	Y+8, r21	; 0x08
    245c:	b9 e0       	ldi	r27, 0x09	; 9
    245e:	eb 2e       	mov	r14, r27
    2460:	f1 2c       	mov	r15, r1
    2462:	ec 0e       	add	r14, r28
    2464:	fd 1e       	adc	r15, r29
    2466:	ce 01       	movw	r24, r28
    2468:	01 96       	adiw	r24, 0x01	; 1
    246a:	b7 01       	movw	r22, r14
    246c:	0e 94 ed 14 	call	0x29da	; 0x29da <__unpack_f>
    2470:	8e 01       	movw	r16, r28
    2472:	0f 5e       	subi	r16, 0xEF	; 239
    2474:	1f 4f       	sbci	r17, 0xFF	; 255
    2476:	ce 01       	movw	r24, r28
    2478:	05 96       	adiw	r24, 0x05	; 5
    247a:	b8 01       	movw	r22, r16
    247c:	0e 94 ed 14 	call	0x29da	; 0x29da <__unpack_f>
    2480:	29 85       	ldd	r18, Y+9	; 0x09
    2482:	22 30       	cpi	r18, 0x02	; 2
    2484:	08 f4       	brcc	.+2      	; 0x2488 <__divsf3+0x48>
    2486:	7e c0       	rjmp	.+252    	; 0x2584 <__divsf3+0x144>
    2488:	39 89       	ldd	r19, Y+17	; 0x11
    248a:	32 30       	cpi	r19, 0x02	; 2
    248c:	10 f4       	brcc	.+4      	; 0x2492 <__divsf3+0x52>
    248e:	b8 01       	movw	r22, r16
    2490:	7c c0       	rjmp	.+248    	; 0x258a <__divsf3+0x14a>
    2492:	8a 85       	ldd	r24, Y+10	; 0x0a
    2494:	9a 89       	ldd	r25, Y+18	; 0x12
    2496:	89 27       	eor	r24, r25
    2498:	8a 87       	std	Y+10, r24	; 0x0a
    249a:	24 30       	cpi	r18, 0x04	; 4
    249c:	11 f0       	breq	.+4      	; 0x24a2 <__divsf3+0x62>
    249e:	22 30       	cpi	r18, 0x02	; 2
    24a0:	31 f4       	brne	.+12     	; 0x24ae <__divsf3+0x6e>
    24a2:	23 17       	cp	r18, r19
    24a4:	09 f0       	breq	.+2      	; 0x24a8 <__divsf3+0x68>
    24a6:	6e c0       	rjmp	.+220    	; 0x2584 <__divsf3+0x144>
    24a8:	6f e0       	ldi	r22, 0x0F	; 15
    24aa:	73 e0       	ldi	r23, 0x03	; 3
    24ac:	6e c0       	rjmp	.+220    	; 0x258a <__divsf3+0x14a>
    24ae:	34 30       	cpi	r19, 0x04	; 4
    24b0:	39 f4       	brne	.+14     	; 0x24c0 <__divsf3+0x80>
    24b2:	1d 86       	std	Y+13, r1	; 0x0d
    24b4:	1e 86       	std	Y+14, r1	; 0x0e
    24b6:	1f 86       	std	Y+15, r1	; 0x0f
    24b8:	18 8a       	std	Y+16, r1	; 0x10
    24ba:	1c 86       	std	Y+12, r1	; 0x0c
    24bc:	1b 86       	std	Y+11, r1	; 0x0b
    24be:	04 c0       	rjmp	.+8      	; 0x24c8 <__divsf3+0x88>
    24c0:	32 30       	cpi	r19, 0x02	; 2
    24c2:	21 f4       	brne	.+8      	; 0x24cc <__divsf3+0x8c>
    24c4:	84 e0       	ldi	r24, 0x04	; 4
    24c6:	89 87       	std	Y+9, r24	; 0x09
    24c8:	b7 01       	movw	r22, r14
    24ca:	5f c0       	rjmp	.+190    	; 0x258a <__divsf3+0x14a>
    24cc:	2b 85       	ldd	r18, Y+11	; 0x0b
    24ce:	3c 85       	ldd	r19, Y+12	; 0x0c
    24d0:	8b 89       	ldd	r24, Y+19	; 0x13
    24d2:	9c 89       	ldd	r25, Y+20	; 0x14
    24d4:	28 1b       	sub	r18, r24
    24d6:	39 0b       	sbc	r19, r25
    24d8:	3c 87       	std	Y+12, r19	; 0x0c
    24da:	2b 87       	std	Y+11, r18	; 0x0b
    24dc:	ed 84       	ldd	r14, Y+13	; 0x0d
    24de:	fe 84       	ldd	r15, Y+14	; 0x0e
    24e0:	0f 85       	ldd	r16, Y+15	; 0x0f
    24e2:	18 89       	ldd	r17, Y+16	; 0x10
    24e4:	ad 88       	ldd	r10, Y+21	; 0x15
    24e6:	be 88       	ldd	r11, Y+22	; 0x16
    24e8:	cf 88       	ldd	r12, Y+23	; 0x17
    24ea:	d8 8c       	ldd	r13, Y+24	; 0x18
    24ec:	ea 14       	cp	r14, r10
    24ee:	fb 04       	cpc	r15, r11
    24f0:	0c 05       	cpc	r16, r12
    24f2:	1d 05       	cpc	r17, r13
    24f4:	40 f4       	brcc	.+16     	; 0x2506 <__divsf3+0xc6>
    24f6:	ee 0c       	add	r14, r14
    24f8:	ff 1c       	adc	r15, r15
    24fa:	00 1f       	adc	r16, r16
    24fc:	11 1f       	adc	r17, r17
    24fe:	21 50       	subi	r18, 0x01	; 1
    2500:	30 40       	sbci	r19, 0x00	; 0
    2502:	3c 87       	std	Y+12, r19	; 0x0c
    2504:	2b 87       	std	Y+11, r18	; 0x0b
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	40 e0       	ldi	r20, 0x00	; 0
    250c:	50 e0       	ldi	r21, 0x00	; 0
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	a0 e0       	ldi	r26, 0x00	; 0
    2514:	b0 e4       	ldi	r27, 0x40	; 64
    2516:	60 e0       	ldi	r22, 0x00	; 0
    2518:	70 e0       	ldi	r23, 0x00	; 0
    251a:	ea 14       	cp	r14, r10
    251c:	fb 04       	cpc	r15, r11
    251e:	0c 05       	cpc	r16, r12
    2520:	1d 05       	cpc	r17, r13
    2522:	40 f0       	brcs	.+16     	; 0x2534 <__divsf3+0xf4>
    2524:	28 2b       	or	r18, r24
    2526:	39 2b       	or	r19, r25
    2528:	4a 2b       	or	r20, r26
    252a:	5b 2b       	or	r21, r27
    252c:	ea 18       	sub	r14, r10
    252e:	fb 08       	sbc	r15, r11
    2530:	0c 09       	sbc	r16, r12
    2532:	1d 09       	sbc	r17, r13
    2534:	b6 95       	lsr	r27
    2536:	a7 95       	ror	r26
    2538:	97 95       	ror	r25
    253a:	87 95       	ror	r24
    253c:	ee 0c       	add	r14, r14
    253e:	ff 1c       	adc	r15, r15
    2540:	00 1f       	adc	r16, r16
    2542:	11 1f       	adc	r17, r17
    2544:	6f 5f       	subi	r22, 0xFF	; 255
    2546:	7f 4f       	sbci	r23, 0xFF	; 255
    2548:	6f 31       	cpi	r22, 0x1F	; 31
    254a:	71 05       	cpc	r23, r1
    254c:	31 f7       	brne	.-52     	; 0x251a <__divsf3+0xda>
    254e:	da 01       	movw	r26, r20
    2550:	c9 01       	movw	r24, r18
    2552:	8f 77       	andi	r24, 0x7F	; 127
    2554:	90 70       	andi	r25, 0x00	; 0
    2556:	a0 70       	andi	r26, 0x00	; 0
    2558:	b0 70       	andi	r27, 0x00	; 0
    255a:	80 34       	cpi	r24, 0x40	; 64
    255c:	91 05       	cpc	r25, r1
    255e:	a1 05       	cpc	r26, r1
    2560:	b1 05       	cpc	r27, r1
    2562:	61 f4       	brne	.+24     	; 0x257c <__divsf3+0x13c>
    2564:	27 fd       	sbrc	r18, 7
    2566:	0a c0       	rjmp	.+20     	; 0x257c <__divsf3+0x13c>
    2568:	e1 14       	cp	r14, r1
    256a:	f1 04       	cpc	r15, r1
    256c:	01 05       	cpc	r16, r1
    256e:	11 05       	cpc	r17, r1
    2570:	29 f0       	breq	.+10     	; 0x257c <__divsf3+0x13c>
    2572:	20 5c       	subi	r18, 0xC0	; 192
    2574:	3f 4f       	sbci	r19, 0xFF	; 255
    2576:	4f 4f       	sbci	r20, 0xFF	; 255
    2578:	5f 4f       	sbci	r21, 0xFF	; 255
    257a:	20 78       	andi	r18, 0x80	; 128
    257c:	2d 87       	std	Y+13, r18	; 0x0d
    257e:	3e 87       	std	Y+14, r19	; 0x0e
    2580:	4f 87       	std	Y+15, r20	; 0x0f
    2582:	58 8b       	std	Y+16, r21	; 0x10
    2584:	be 01       	movw	r22, r28
    2586:	67 5f       	subi	r22, 0xF7	; 247
    2588:	7f 4f       	sbci	r23, 0xFF	; 255
    258a:	cb 01       	movw	r24, r22
    258c:	0e 94 18 14 	call	0x2830	; 0x2830 <__pack_f>
    2590:	68 96       	adiw	r28, 0x18	; 24
    2592:	ea e0       	ldi	r30, 0x0A	; 10
    2594:	0c 94 fb 16 	jmp	0x2df6	; 0x2df6 <__epilogue_restores__+0x10>

00002598 <__gesf2>:
    2598:	a8 e1       	ldi	r26, 0x18	; 24
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	e2 ed       	ldi	r30, 0xD2	; 210
    259e:	f2 e1       	ldi	r31, 0x12	; 18
    25a0:	0c 94 e3 16 	jmp	0x2dc6	; 0x2dc6 <__prologue_saves__+0x18>
    25a4:	69 83       	std	Y+1, r22	; 0x01
    25a6:	7a 83       	std	Y+2, r23	; 0x02
    25a8:	8b 83       	std	Y+3, r24	; 0x03
    25aa:	9c 83       	std	Y+4, r25	; 0x04
    25ac:	2d 83       	std	Y+5, r18	; 0x05
    25ae:	3e 83       	std	Y+6, r19	; 0x06
    25b0:	4f 83       	std	Y+7, r20	; 0x07
    25b2:	58 87       	std	Y+8, r21	; 0x08
    25b4:	89 e0       	ldi	r24, 0x09	; 9
    25b6:	e8 2e       	mov	r14, r24
    25b8:	f1 2c       	mov	r15, r1
    25ba:	ec 0e       	add	r14, r28
    25bc:	fd 1e       	adc	r15, r29
    25be:	ce 01       	movw	r24, r28
    25c0:	01 96       	adiw	r24, 0x01	; 1
    25c2:	b7 01       	movw	r22, r14
    25c4:	0e 94 ed 14 	call	0x29da	; 0x29da <__unpack_f>
    25c8:	8e 01       	movw	r16, r28
    25ca:	0f 5e       	subi	r16, 0xEF	; 239
    25cc:	1f 4f       	sbci	r17, 0xFF	; 255
    25ce:	ce 01       	movw	r24, r28
    25d0:	05 96       	adiw	r24, 0x05	; 5
    25d2:	b8 01       	movw	r22, r16
    25d4:	0e 94 ed 14 	call	0x29da	; 0x29da <__unpack_f>
    25d8:	89 85       	ldd	r24, Y+9	; 0x09
    25da:	82 30       	cpi	r24, 0x02	; 2
    25dc:	40 f0       	brcs	.+16     	; 0x25ee <__gesf2+0x56>
    25de:	89 89       	ldd	r24, Y+17	; 0x11
    25e0:	82 30       	cpi	r24, 0x02	; 2
    25e2:	28 f0       	brcs	.+10     	; 0x25ee <__gesf2+0x56>
    25e4:	c7 01       	movw	r24, r14
    25e6:	b8 01       	movw	r22, r16
    25e8:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fpcmp_parts_f>
    25ec:	01 c0       	rjmp	.+2      	; 0x25f0 <__gesf2+0x58>
    25ee:	8f ef       	ldi	r24, 0xFF	; 255
    25f0:	68 96       	adiw	r28, 0x18	; 24
    25f2:	e6 e0       	ldi	r30, 0x06	; 6
    25f4:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <__epilogue_restores__+0x18>

000025f8 <__fixsfsi>:
    25f8:	ac e0       	ldi	r26, 0x0C	; 12
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	e2 e0       	ldi	r30, 0x02	; 2
    25fe:	f3 e1       	ldi	r31, 0x13	; 19
    2600:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <__prologue_saves__+0x20>
    2604:	69 83       	std	Y+1, r22	; 0x01
    2606:	7a 83       	std	Y+2, r23	; 0x02
    2608:	8b 83       	std	Y+3, r24	; 0x03
    260a:	9c 83       	std	Y+4, r25	; 0x04
    260c:	ce 01       	movw	r24, r28
    260e:	01 96       	adiw	r24, 0x01	; 1
    2610:	be 01       	movw	r22, r28
    2612:	6b 5f       	subi	r22, 0xFB	; 251
    2614:	7f 4f       	sbci	r23, 0xFF	; 255
    2616:	0e 94 ed 14 	call	0x29da	; 0x29da <__unpack_f>
    261a:	8d 81       	ldd	r24, Y+5	; 0x05
    261c:	82 30       	cpi	r24, 0x02	; 2
    261e:	61 f1       	breq	.+88     	; 0x2678 <__fixsfsi+0x80>
    2620:	82 30       	cpi	r24, 0x02	; 2
    2622:	50 f1       	brcs	.+84     	; 0x2678 <__fixsfsi+0x80>
    2624:	84 30       	cpi	r24, 0x04	; 4
    2626:	21 f4       	brne	.+8      	; 0x2630 <__fixsfsi+0x38>
    2628:	8e 81       	ldd	r24, Y+6	; 0x06
    262a:	88 23       	and	r24, r24
    262c:	51 f1       	breq	.+84     	; 0x2682 <__fixsfsi+0x8a>
    262e:	2e c0       	rjmp	.+92     	; 0x268c <__fixsfsi+0x94>
    2630:	2f 81       	ldd	r18, Y+7	; 0x07
    2632:	38 85       	ldd	r19, Y+8	; 0x08
    2634:	37 fd       	sbrc	r19, 7
    2636:	20 c0       	rjmp	.+64     	; 0x2678 <__fixsfsi+0x80>
    2638:	6e 81       	ldd	r22, Y+6	; 0x06
    263a:	2f 31       	cpi	r18, 0x1F	; 31
    263c:	31 05       	cpc	r19, r1
    263e:	1c f0       	brlt	.+6      	; 0x2646 <__fixsfsi+0x4e>
    2640:	66 23       	and	r22, r22
    2642:	f9 f0       	breq	.+62     	; 0x2682 <__fixsfsi+0x8a>
    2644:	23 c0       	rjmp	.+70     	; 0x268c <__fixsfsi+0x94>
    2646:	8e e1       	ldi	r24, 0x1E	; 30
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	82 1b       	sub	r24, r18
    264c:	93 0b       	sbc	r25, r19
    264e:	29 85       	ldd	r18, Y+9	; 0x09
    2650:	3a 85       	ldd	r19, Y+10	; 0x0a
    2652:	4b 85       	ldd	r20, Y+11	; 0x0b
    2654:	5c 85       	ldd	r21, Y+12	; 0x0c
    2656:	04 c0       	rjmp	.+8      	; 0x2660 <__fixsfsi+0x68>
    2658:	56 95       	lsr	r21
    265a:	47 95       	ror	r20
    265c:	37 95       	ror	r19
    265e:	27 95       	ror	r18
    2660:	8a 95       	dec	r24
    2662:	d2 f7       	brpl	.-12     	; 0x2658 <__fixsfsi+0x60>
    2664:	66 23       	and	r22, r22
    2666:	b1 f0       	breq	.+44     	; 0x2694 <__fixsfsi+0x9c>
    2668:	50 95       	com	r21
    266a:	40 95       	com	r20
    266c:	30 95       	com	r19
    266e:	21 95       	neg	r18
    2670:	3f 4f       	sbci	r19, 0xFF	; 255
    2672:	4f 4f       	sbci	r20, 0xFF	; 255
    2674:	5f 4f       	sbci	r21, 0xFF	; 255
    2676:	0e c0       	rjmp	.+28     	; 0x2694 <__fixsfsi+0x9c>
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e0       	ldi	r20, 0x00	; 0
    267e:	50 e0       	ldi	r21, 0x00	; 0
    2680:	09 c0       	rjmp	.+18     	; 0x2694 <__fixsfsi+0x9c>
    2682:	2f ef       	ldi	r18, 0xFF	; 255
    2684:	3f ef       	ldi	r19, 0xFF	; 255
    2686:	4f ef       	ldi	r20, 0xFF	; 255
    2688:	5f e7       	ldi	r21, 0x7F	; 127
    268a:	04 c0       	rjmp	.+8      	; 0x2694 <__fixsfsi+0x9c>
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	40 e0       	ldi	r20, 0x00	; 0
    2692:	50 e8       	ldi	r21, 0x80	; 128
    2694:	b9 01       	movw	r22, r18
    2696:	ca 01       	movw	r24, r20
    2698:	2c 96       	adiw	r28, 0x0c	; 12
    269a:	e2 e0       	ldi	r30, 0x02	; 2
    269c:	0c 94 03 17 	jmp	0x2e06	; 0x2e06 <__epilogue_restores__+0x20>

000026a0 <__floatunsisf>:
    26a0:	a8 e0       	ldi	r26, 0x08	; 8
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
    26a4:	e6 e5       	ldi	r30, 0x56	; 86
    26a6:	f3 e1       	ldi	r31, 0x13	; 19
    26a8:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__prologue_saves__+0x10>
    26ac:	7b 01       	movw	r14, r22
    26ae:	8c 01       	movw	r16, r24
    26b0:	61 15       	cp	r22, r1
    26b2:	71 05       	cpc	r23, r1
    26b4:	81 05       	cpc	r24, r1
    26b6:	91 05       	cpc	r25, r1
    26b8:	19 f4       	brne	.+6      	; 0x26c0 <__floatunsisf+0x20>
    26ba:	82 e0       	ldi	r24, 0x02	; 2
    26bc:	89 83       	std	Y+1, r24	; 0x01
    26be:	60 c0       	rjmp	.+192    	; 0x2780 <__floatunsisf+0xe0>
    26c0:	83 e0       	ldi	r24, 0x03	; 3
    26c2:	89 83       	std	Y+1, r24	; 0x01
    26c4:	8e e1       	ldi	r24, 0x1E	; 30
    26c6:	c8 2e       	mov	r12, r24
    26c8:	d1 2c       	mov	r13, r1
    26ca:	dc 82       	std	Y+4, r13	; 0x04
    26cc:	cb 82       	std	Y+3, r12	; 0x03
    26ce:	ed 82       	std	Y+5, r14	; 0x05
    26d0:	fe 82       	std	Y+6, r15	; 0x06
    26d2:	0f 83       	std	Y+7, r16	; 0x07
    26d4:	18 87       	std	Y+8, r17	; 0x08
    26d6:	c8 01       	movw	r24, r16
    26d8:	b7 01       	movw	r22, r14
    26da:	0e 94 c9 13 	call	0x2792	; 0x2792 <__clzsi2>
    26de:	fc 01       	movw	r30, r24
    26e0:	31 97       	sbiw	r30, 0x01	; 1
    26e2:	f7 ff       	sbrs	r31, 7
    26e4:	3b c0       	rjmp	.+118    	; 0x275c <__floatunsisf+0xbc>
    26e6:	22 27       	eor	r18, r18
    26e8:	33 27       	eor	r19, r19
    26ea:	2e 1b       	sub	r18, r30
    26ec:	3f 0b       	sbc	r19, r31
    26ee:	57 01       	movw	r10, r14
    26f0:	68 01       	movw	r12, r16
    26f2:	02 2e       	mov	r0, r18
    26f4:	04 c0       	rjmp	.+8      	; 0x26fe <__floatunsisf+0x5e>
    26f6:	d6 94       	lsr	r13
    26f8:	c7 94       	ror	r12
    26fa:	b7 94       	ror	r11
    26fc:	a7 94       	ror	r10
    26fe:	0a 94       	dec	r0
    2700:	d2 f7       	brpl	.-12     	; 0x26f6 <__floatunsisf+0x56>
    2702:	40 e0       	ldi	r20, 0x00	; 0
    2704:	50 e0       	ldi	r21, 0x00	; 0
    2706:	60 e0       	ldi	r22, 0x00	; 0
    2708:	70 e0       	ldi	r23, 0x00	; 0
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	a0 e0       	ldi	r26, 0x00	; 0
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	04 c0       	rjmp	.+8      	; 0x271c <__floatunsisf+0x7c>
    2714:	88 0f       	add	r24, r24
    2716:	99 1f       	adc	r25, r25
    2718:	aa 1f       	adc	r26, r26
    271a:	bb 1f       	adc	r27, r27
    271c:	2a 95       	dec	r18
    271e:	d2 f7       	brpl	.-12     	; 0x2714 <__floatunsisf+0x74>
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	a1 09       	sbc	r26, r1
    2724:	b1 09       	sbc	r27, r1
    2726:	8e 21       	and	r24, r14
    2728:	9f 21       	and	r25, r15
    272a:	a0 23       	and	r26, r16
    272c:	b1 23       	and	r27, r17
    272e:	00 97       	sbiw	r24, 0x00	; 0
    2730:	a1 05       	cpc	r26, r1
    2732:	b1 05       	cpc	r27, r1
    2734:	21 f0       	breq	.+8      	; 0x273e <__floatunsisf+0x9e>
    2736:	41 e0       	ldi	r20, 0x01	; 1
    2738:	50 e0       	ldi	r21, 0x00	; 0
    273a:	60 e0       	ldi	r22, 0x00	; 0
    273c:	70 e0       	ldi	r23, 0x00	; 0
    273e:	4a 29       	or	r20, r10
    2740:	5b 29       	or	r21, r11
    2742:	6c 29       	or	r22, r12
    2744:	7d 29       	or	r23, r13
    2746:	4d 83       	std	Y+5, r20	; 0x05
    2748:	5e 83       	std	Y+6, r21	; 0x06
    274a:	6f 83       	std	Y+7, r22	; 0x07
    274c:	78 87       	std	Y+8, r23	; 0x08
    274e:	8e e1       	ldi	r24, 0x1E	; 30
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	8e 1b       	sub	r24, r30
    2754:	9f 0b       	sbc	r25, r31
    2756:	9c 83       	std	Y+4, r25	; 0x04
    2758:	8b 83       	std	Y+3, r24	; 0x03
    275a:	12 c0       	rjmp	.+36     	; 0x2780 <__floatunsisf+0xe0>
    275c:	30 97       	sbiw	r30, 0x00	; 0
    275e:	81 f0       	breq	.+32     	; 0x2780 <__floatunsisf+0xe0>
    2760:	0e 2e       	mov	r0, r30
    2762:	04 c0       	rjmp	.+8      	; 0x276c <__floatunsisf+0xcc>
    2764:	ee 0c       	add	r14, r14
    2766:	ff 1c       	adc	r15, r15
    2768:	00 1f       	adc	r16, r16
    276a:	11 1f       	adc	r17, r17
    276c:	0a 94       	dec	r0
    276e:	d2 f7       	brpl	.-12     	; 0x2764 <__floatunsisf+0xc4>
    2770:	ed 82       	std	Y+5, r14	; 0x05
    2772:	fe 82       	std	Y+6, r15	; 0x06
    2774:	0f 83       	std	Y+7, r16	; 0x07
    2776:	18 87       	std	Y+8, r17	; 0x08
    2778:	ce 1a       	sub	r12, r30
    277a:	df 0a       	sbc	r13, r31
    277c:	dc 82       	std	Y+4, r13	; 0x04
    277e:	cb 82       	std	Y+3, r12	; 0x03
    2780:	1a 82       	std	Y+2, r1	; 0x02
    2782:	ce 01       	movw	r24, r28
    2784:	01 96       	adiw	r24, 0x01	; 1
    2786:	0e 94 18 14 	call	0x2830	; 0x2830 <__pack_f>
    278a:	28 96       	adiw	r28, 0x08	; 8
    278c:	ea e0       	ldi	r30, 0x0A	; 10
    278e:	0c 94 fb 16 	jmp	0x2df6	; 0x2df6 <__epilogue_restores__+0x10>

00002792 <__clzsi2>:
    2792:	ef 92       	push	r14
    2794:	ff 92       	push	r15
    2796:	0f 93       	push	r16
    2798:	1f 93       	push	r17
    279a:	7b 01       	movw	r14, r22
    279c:	8c 01       	movw	r16, r24
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	e8 16       	cp	r14, r24
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	f8 06       	cpc	r15, r24
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	08 07       	cpc	r16, r24
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	18 07       	cpc	r17, r24
    27ae:	88 f4       	brcc	.+34     	; 0x27d2 <__clzsi2+0x40>
    27b0:	8f ef       	ldi	r24, 0xFF	; 255
    27b2:	e8 16       	cp	r14, r24
    27b4:	f1 04       	cpc	r15, r1
    27b6:	01 05       	cpc	r16, r1
    27b8:	11 05       	cpc	r17, r1
    27ba:	31 f0       	breq	.+12     	; 0x27c8 <__clzsi2+0x36>
    27bc:	28 f0       	brcs	.+10     	; 0x27c8 <__clzsi2+0x36>
    27be:	88 e0       	ldi	r24, 0x08	; 8
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	a0 e0       	ldi	r26, 0x00	; 0
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	17 c0       	rjmp	.+46     	; 0x27f6 <__clzsi2+0x64>
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	a0 e0       	ldi	r26, 0x00	; 0
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	12 c0       	rjmp	.+36     	; 0x27f6 <__clzsi2+0x64>
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	e8 16       	cp	r14, r24
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	f8 06       	cpc	r15, r24
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	08 07       	cpc	r16, r24
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	18 07       	cpc	r17, r24
    27e2:	28 f0       	brcs	.+10     	; 0x27ee <__clzsi2+0x5c>
    27e4:	88 e1       	ldi	r24, 0x18	; 24
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	a0 e0       	ldi	r26, 0x00	; 0
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	04 c0       	rjmp	.+8      	; 0x27f6 <__clzsi2+0x64>
    27ee:	80 e1       	ldi	r24, 0x10	; 16
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	a0 e0       	ldi	r26, 0x00	; 0
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	20 e2       	ldi	r18, 0x20	; 32
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	40 e0       	ldi	r20, 0x00	; 0
    27fc:	50 e0       	ldi	r21, 0x00	; 0
    27fe:	28 1b       	sub	r18, r24
    2800:	39 0b       	sbc	r19, r25
    2802:	4a 0b       	sbc	r20, r26
    2804:	5b 0b       	sbc	r21, r27
    2806:	04 c0       	rjmp	.+8      	; 0x2810 <__clzsi2+0x7e>
    2808:	16 95       	lsr	r17
    280a:	07 95       	ror	r16
    280c:	f7 94       	ror	r15
    280e:	e7 94       	ror	r14
    2810:	8a 95       	dec	r24
    2812:	d2 f7       	brpl	.-12     	; 0x2808 <__clzsi2+0x76>
    2814:	f7 01       	movw	r30, r14
    2816:	e9 5e       	subi	r30, 0xE9	; 233
    2818:	fc 4f       	sbci	r31, 0xFC	; 252
    281a:	80 81       	ld	r24, Z
    281c:	28 1b       	sub	r18, r24
    281e:	31 09       	sbc	r19, r1
    2820:	41 09       	sbc	r20, r1
    2822:	51 09       	sbc	r21, r1
    2824:	c9 01       	movw	r24, r18
    2826:	1f 91       	pop	r17
    2828:	0f 91       	pop	r16
    282a:	ff 90       	pop	r15
    282c:	ef 90       	pop	r14
    282e:	08 95       	ret

00002830 <__pack_f>:
    2830:	df 92       	push	r13
    2832:	ef 92       	push	r14
    2834:	ff 92       	push	r15
    2836:	0f 93       	push	r16
    2838:	1f 93       	push	r17
    283a:	fc 01       	movw	r30, r24
    283c:	e4 80       	ldd	r14, Z+4	; 0x04
    283e:	f5 80       	ldd	r15, Z+5	; 0x05
    2840:	06 81       	ldd	r16, Z+6	; 0x06
    2842:	17 81       	ldd	r17, Z+7	; 0x07
    2844:	d1 80       	ldd	r13, Z+1	; 0x01
    2846:	80 81       	ld	r24, Z
    2848:	82 30       	cpi	r24, 0x02	; 2
    284a:	48 f4       	brcc	.+18     	; 0x285e <__pack_f+0x2e>
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	a0 e1       	ldi	r26, 0x10	; 16
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	e8 2a       	or	r14, r24
    2856:	f9 2a       	or	r15, r25
    2858:	0a 2b       	or	r16, r26
    285a:	1b 2b       	or	r17, r27
    285c:	a5 c0       	rjmp	.+330    	; 0x29a8 <__pack_f+0x178>
    285e:	84 30       	cpi	r24, 0x04	; 4
    2860:	09 f4       	brne	.+2      	; 0x2864 <__pack_f+0x34>
    2862:	9f c0       	rjmp	.+318    	; 0x29a2 <__pack_f+0x172>
    2864:	82 30       	cpi	r24, 0x02	; 2
    2866:	21 f4       	brne	.+8      	; 0x2870 <__pack_f+0x40>
    2868:	ee 24       	eor	r14, r14
    286a:	ff 24       	eor	r15, r15
    286c:	87 01       	movw	r16, r14
    286e:	05 c0       	rjmp	.+10     	; 0x287a <__pack_f+0x4a>
    2870:	e1 14       	cp	r14, r1
    2872:	f1 04       	cpc	r15, r1
    2874:	01 05       	cpc	r16, r1
    2876:	11 05       	cpc	r17, r1
    2878:	19 f4       	brne	.+6      	; 0x2880 <__pack_f+0x50>
    287a:	e0 e0       	ldi	r30, 0x00	; 0
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	96 c0       	rjmp	.+300    	; 0x29ac <__pack_f+0x17c>
    2880:	62 81       	ldd	r22, Z+2	; 0x02
    2882:	73 81       	ldd	r23, Z+3	; 0x03
    2884:	9f ef       	ldi	r25, 0xFF	; 255
    2886:	62 38       	cpi	r22, 0x82	; 130
    2888:	79 07       	cpc	r23, r25
    288a:	0c f0       	brlt	.+2      	; 0x288e <__pack_f+0x5e>
    288c:	5b c0       	rjmp	.+182    	; 0x2944 <__pack_f+0x114>
    288e:	22 e8       	ldi	r18, 0x82	; 130
    2890:	3f ef       	ldi	r19, 0xFF	; 255
    2892:	26 1b       	sub	r18, r22
    2894:	37 0b       	sbc	r19, r23
    2896:	2a 31       	cpi	r18, 0x1A	; 26
    2898:	31 05       	cpc	r19, r1
    289a:	2c f0       	brlt	.+10     	; 0x28a6 <__pack_f+0x76>
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	40 e0       	ldi	r20, 0x00	; 0
    28a2:	50 e0       	ldi	r21, 0x00	; 0
    28a4:	2a c0       	rjmp	.+84     	; 0x28fa <__pack_f+0xca>
    28a6:	b8 01       	movw	r22, r16
    28a8:	a7 01       	movw	r20, r14
    28aa:	02 2e       	mov	r0, r18
    28ac:	04 c0       	rjmp	.+8      	; 0x28b6 <__pack_f+0x86>
    28ae:	76 95       	lsr	r23
    28b0:	67 95       	ror	r22
    28b2:	57 95       	ror	r21
    28b4:	47 95       	ror	r20
    28b6:	0a 94       	dec	r0
    28b8:	d2 f7       	brpl	.-12     	; 0x28ae <__pack_f+0x7e>
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	a0 e0       	ldi	r26, 0x00	; 0
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	04 c0       	rjmp	.+8      	; 0x28cc <__pack_f+0x9c>
    28c4:	88 0f       	add	r24, r24
    28c6:	99 1f       	adc	r25, r25
    28c8:	aa 1f       	adc	r26, r26
    28ca:	bb 1f       	adc	r27, r27
    28cc:	2a 95       	dec	r18
    28ce:	d2 f7       	brpl	.-12     	; 0x28c4 <__pack_f+0x94>
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	a1 09       	sbc	r26, r1
    28d4:	b1 09       	sbc	r27, r1
    28d6:	8e 21       	and	r24, r14
    28d8:	9f 21       	and	r25, r15
    28da:	a0 23       	and	r26, r16
    28dc:	b1 23       	and	r27, r17
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	a1 05       	cpc	r26, r1
    28e2:	b1 05       	cpc	r27, r1
    28e4:	21 f0       	breq	.+8      	; 0x28ee <__pack_f+0xbe>
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	a0 e0       	ldi	r26, 0x00	; 0
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	9a 01       	movw	r18, r20
    28f0:	ab 01       	movw	r20, r22
    28f2:	28 2b       	or	r18, r24
    28f4:	39 2b       	or	r19, r25
    28f6:	4a 2b       	or	r20, r26
    28f8:	5b 2b       	or	r21, r27
    28fa:	da 01       	movw	r26, r20
    28fc:	c9 01       	movw	r24, r18
    28fe:	8f 77       	andi	r24, 0x7F	; 127
    2900:	90 70       	andi	r25, 0x00	; 0
    2902:	a0 70       	andi	r26, 0x00	; 0
    2904:	b0 70       	andi	r27, 0x00	; 0
    2906:	80 34       	cpi	r24, 0x40	; 64
    2908:	91 05       	cpc	r25, r1
    290a:	a1 05       	cpc	r26, r1
    290c:	b1 05       	cpc	r27, r1
    290e:	39 f4       	brne	.+14     	; 0x291e <__pack_f+0xee>
    2910:	27 ff       	sbrs	r18, 7
    2912:	09 c0       	rjmp	.+18     	; 0x2926 <__pack_f+0xf6>
    2914:	20 5c       	subi	r18, 0xC0	; 192
    2916:	3f 4f       	sbci	r19, 0xFF	; 255
    2918:	4f 4f       	sbci	r20, 0xFF	; 255
    291a:	5f 4f       	sbci	r21, 0xFF	; 255
    291c:	04 c0       	rjmp	.+8      	; 0x2926 <__pack_f+0xf6>
    291e:	21 5c       	subi	r18, 0xC1	; 193
    2920:	3f 4f       	sbci	r19, 0xFF	; 255
    2922:	4f 4f       	sbci	r20, 0xFF	; 255
    2924:	5f 4f       	sbci	r21, 0xFF	; 255
    2926:	e0 e0       	ldi	r30, 0x00	; 0
    2928:	f0 e0       	ldi	r31, 0x00	; 0
    292a:	20 30       	cpi	r18, 0x00	; 0
    292c:	a0 e0       	ldi	r26, 0x00	; 0
    292e:	3a 07       	cpc	r19, r26
    2930:	a0 e0       	ldi	r26, 0x00	; 0
    2932:	4a 07       	cpc	r20, r26
    2934:	a0 e4       	ldi	r26, 0x40	; 64
    2936:	5a 07       	cpc	r21, r26
    2938:	10 f0       	brcs	.+4      	; 0x293e <__pack_f+0x10e>
    293a:	e1 e0       	ldi	r30, 0x01	; 1
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	79 01       	movw	r14, r18
    2940:	8a 01       	movw	r16, r20
    2942:	27 c0       	rjmp	.+78     	; 0x2992 <__pack_f+0x162>
    2944:	60 38       	cpi	r22, 0x80	; 128
    2946:	71 05       	cpc	r23, r1
    2948:	64 f5       	brge	.+88     	; 0x29a2 <__pack_f+0x172>
    294a:	fb 01       	movw	r30, r22
    294c:	e1 58       	subi	r30, 0x81	; 129
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	d8 01       	movw	r26, r16
    2952:	c7 01       	movw	r24, r14
    2954:	8f 77       	andi	r24, 0x7F	; 127
    2956:	90 70       	andi	r25, 0x00	; 0
    2958:	a0 70       	andi	r26, 0x00	; 0
    295a:	b0 70       	andi	r27, 0x00	; 0
    295c:	80 34       	cpi	r24, 0x40	; 64
    295e:	91 05       	cpc	r25, r1
    2960:	a1 05       	cpc	r26, r1
    2962:	b1 05       	cpc	r27, r1
    2964:	39 f4       	brne	.+14     	; 0x2974 <__pack_f+0x144>
    2966:	e7 fe       	sbrs	r14, 7
    2968:	0d c0       	rjmp	.+26     	; 0x2984 <__pack_f+0x154>
    296a:	80 e4       	ldi	r24, 0x40	; 64
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	a0 e0       	ldi	r26, 0x00	; 0
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	04 c0       	rjmp	.+8      	; 0x297c <__pack_f+0x14c>
    2974:	8f e3       	ldi	r24, 0x3F	; 63
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	a0 e0       	ldi	r26, 0x00	; 0
    297a:	b0 e0       	ldi	r27, 0x00	; 0
    297c:	e8 0e       	add	r14, r24
    297e:	f9 1e       	adc	r15, r25
    2980:	0a 1f       	adc	r16, r26
    2982:	1b 1f       	adc	r17, r27
    2984:	17 ff       	sbrs	r17, 7
    2986:	05 c0       	rjmp	.+10     	; 0x2992 <__pack_f+0x162>
    2988:	16 95       	lsr	r17
    298a:	07 95       	ror	r16
    298c:	f7 94       	ror	r15
    298e:	e7 94       	ror	r14
    2990:	31 96       	adiw	r30, 0x01	; 1
    2992:	87 e0       	ldi	r24, 0x07	; 7
    2994:	16 95       	lsr	r17
    2996:	07 95       	ror	r16
    2998:	f7 94       	ror	r15
    299a:	e7 94       	ror	r14
    299c:	8a 95       	dec	r24
    299e:	d1 f7       	brne	.-12     	; 0x2994 <__pack_f+0x164>
    29a0:	05 c0       	rjmp	.+10     	; 0x29ac <__pack_f+0x17c>
    29a2:	ee 24       	eor	r14, r14
    29a4:	ff 24       	eor	r15, r15
    29a6:	87 01       	movw	r16, r14
    29a8:	ef ef       	ldi	r30, 0xFF	; 255
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	6e 2f       	mov	r22, r30
    29ae:	67 95       	ror	r22
    29b0:	66 27       	eor	r22, r22
    29b2:	67 95       	ror	r22
    29b4:	90 2f       	mov	r25, r16
    29b6:	9f 77       	andi	r25, 0x7F	; 127
    29b8:	d7 94       	ror	r13
    29ba:	dd 24       	eor	r13, r13
    29bc:	d7 94       	ror	r13
    29be:	8e 2f       	mov	r24, r30
    29c0:	86 95       	lsr	r24
    29c2:	49 2f       	mov	r20, r25
    29c4:	46 2b       	or	r20, r22
    29c6:	58 2f       	mov	r21, r24
    29c8:	5d 29       	or	r21, r13
    29ca:	b7 01       	movw	r22, r14
    29cc:	ca 01       	movw	r24, r20
    29ce:	1f 91       	pop	r17
    29d0:	0f 91       	pop	r16
    29d2:	ff 90       	pop	r15
    29d4:	ef 90       	pop	r14
    29d6:	df 90       	pop	r13
    29d8:	08 95       	ret

000029da <__unpack_f>:
    29da:	fc 01       	movw	r30, r24
    29dc:	db 01       	movw	r26, r22
    29de:	40 81       	ld	r20, Z
    29e0:	51 81       	ldd	r21, Z+1	; 0x01
    29e2:	22 81       	ldd	r18, Z+2	; 0x02
    29e4:	62 2f       	mov	r22, r18
    29e6:	6f 77       	andi	r22, 0x7F	; 127
    29e8:	70 e0       	ldi	r23, 0x00	; 0
    29ea:	22 1f       	adc	r18, r18
    29ec:	22 27       	eor	r18, r18
    29ee:	22 1f       	adc	r18, r18
    29f0:	93 81       	ldd	r25, Z+3	; 0x03
    29f2:	89 2f       	mov	r24, r25
    29f4:	88 0f       	add	r24, r24
    29f6:	82 2b       	or	r24, r18
    29f8:	28 2f       	mov	r18, r24
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	99 1f       	adc	r25, r25
    29fe:	99 27       	eor	r25, r25
    2a00:	99 1f       	adc	r25, r25
    2a02:	11 96       	adiw	r26, 0x01	; 1
    2a04:	9c 93       	st	X, r25
    2a06:	11 97       	sbiw	r26, 0x01	; 1
    2a08:	21 15       	cp	r18, r1
    2a0a:	31 05       	cpc	r19, r1
    2a0c:	a9 f5       	brne	.+106    	; 0x2a78 <__unpack_f+0x9e>
    2a0e:	41 15       	cp	r20, r1
    2a10:	51 05       	cpc	r21, r1
    2a12:	61 05       	cpc	r22, r1
    2a14:	71 05       	cpc	r23, r1
    2a16:	11 f4       	brne	.+4      	; 0x2a1c <__unpack_f+0x42>
    2a18:	82 e0       	ldi	r24, 0x02	; 2
    2a1a:	37 c0       	rjmp	.+110    	; 0x2a8a <__unpack_f+0xb0>
    2a1c:	82 e8       	ldi	r24, 0x82	; 130
    2a1e:	9f ef       	ldi	r25, 0xFF	; 255
    2a20:	13 96       	adiw	r26, 0x03	; 3
    2a22:	9c 93       	st	X, r25
    2a24:	8e 93       	st	-X, r24
    2a26:	12 97       	sbiw	r26, 0x02	; 2
    2a28:	9a 01       	movw	r18, r20
    2a2a:	ab 01       	movw	r20, r22
    2a2c:	67 e0       	ldi	r22, 0x07	; 7
    2a2e:	22 0f       	add	r18, r18
    2a30:	33 1f       	adc	r19, r19
    2a32:	44 1f       	adc	r20, r20
    2a34:	55 1f       	adc	r21, r21
    2a36:	6a 95       	dec	r22
    2a38:	d1 f7       	brne	.-12     	; 0x2a2e <__unpack_f+0x54>
    2a3a:	83 e0       	ldi	r24, 0x03	; 3
    2a3c:	8c 93       	st	X, r24
    2a3e:	0d c0       	rjmp	.+26     	; 0x2a5a <__unpack_f+0x80>
    2a40:	22 0f       	add	r18, r18
    2a42:	33 1f       	adc	r19, r19
    2a44:	44 1f       	adc	r20, r20
    2a46:	55 1f       	adc	r21, r21
    2a48:	12 96       	adiw	r26, 0x02	; 2
    2a4a:	8d 91       	ld	r24, X+
    2a4c:	9c 91       	ld	r25, X
    2a4e:	13 97       	sbiw	r26, 0x03	; 3
    2a50:	01 97       	sbiw	r24, 0x01	; 1
    2a52:	13 96       	adiw	r26, 0x03	; 3
    2a54:	9c 93       	st	X, r25
    2a56:	8e 93       	st	-X, r24
    2a58:	12 97       	sbiw	r26, 0x02	; 2
    2a5a:	20 30       	cpi	r18, 0x00	; 0
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	38 07       	cpc	r19, r24
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	48 07       	cpc	r20, r24
    2a64:	80 e4       	ldi	r24, 0x40	; 64
    2a66:	58 07       	cpc	r21, r24
    2a68:	58 f3       	brcs	.-42     	; 0x2a40 <__unpack_f+0x66>
    2a6a:	14 96       	adiw	r26, 0x04	; 4
    2a6c:	2d 93       	st	X+, r18
    2a6e:	3d 93       	st	X+, r19
    2a70:	4d 93       	st	X+, r20
    2a72:	5c 93       	st	X, r21
    2a74:	17 97       	sbiw	r26, 0x07	; 7
    2a76:	08 95       	ret
    2a78:	2f 3f       	cpi	r18, 0xFF	; 255
    2a7a:	31 05       	cpc	r19, r1
    2a7c:	79 f4       	brne	.+30     	; 0x2a9c <__unpack_f+0xc2>
    2a7e:	41 15       	cp	r20, r1
    2a80:	51 05       	cpc	r21, r1
    2a82:	61 05       	cpc	r22, r1
    2a84:	71 05       	cpc	r23, r1
    2a86:	19 f4       	brne	.+6      	; 0x2a8e <__unpack_f+0xb4>
    2a88:	84 e0       	ldi	r24, 0x04	; 4
    2a8a:	8c 93       	st	X, r24
    2a8c:	08 95       	ret
    2a8e:	64 ff       	sbrs	r22, 4
    2a90:	03 c0       	rjmp	.+6      	; 0x2a98 <__unpack_f+0xbe>
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	8c 93       	st	X, r24
    2a96:	12 c0       	rjmp	.+36     	; 0x2abc <__unpack_f+0xe2>
    2a98:	1c 92       	st	X, r1
    2a9a:	10 c0       	rjmp	.+32     	; 0x2abc <__unpack_f+0xe2>
    2a9c:	2f 57       	subi	r18, 0x7F	; 127
    2a9e:	30 40       	sbci	r19, 0x00	; 0
    2aa0:	13 96       	adiw	r26, 0x03	; 3
    2aa2:	3c 93       	st	X, r19
    2aa4:	2e 93       	st	-X, r18
    2aa6:	12 97       	sbiw	r26, 0x02	; 2
    2aa8:	83 e0       	ldi	r24, 0x03	; 3
    2aaa:	8c 93       	st	X, r24
    2aac:	87 e0       	ldi	r24, 0x07	; 7
    2aae:	44 0f       	add	r20, r20
    2ab0:	55 1f       	adc	r21, r21
    2ab2:	66 1f       	adc	r22, r22
    2ab4:	77 1f       	adc	r23, r23
    2ab6:	8a 95       	dec	r24
    2ab8:	d1 f7       	brne	.-12     	; 0x2aae <__unpack_f+0xd4>
    2aba:	70 64       	ori	r23, 0x40	; 64
    2abc:	14 96       	adiw	r26, 0x04	; 4
    2abe:	4d 93       	st	X+, r20
    2ac0:	5d 93       	st	X+, r21
    2ac2:	6d 93       	st	X+, r22
    2ac4:	7c 93       	st	X, r23
    2ac6:	17 97       	sbiw	r26, 0x07	; 7
    2ac8:	08 95       	ret

00002aca <__fpcmp_parts_f>:
    2aca:	1f 93       	push	r17
    2acc:	dc 01       	movw	r26, r24
    2ace:	fb 01       	movw	r30, r22
    2ad0:	9c 91       	ld	r25, X
    2ad2:	92 30       	cpi	r25, 0x02	; 2
    2ad4:	08 f4       	brcc	.+2      	; 0x2ad8 <__fpcmp_parts_f+0xe>
    2ad6:	47 c0       	rjmp	.+142    	; 0x2b66 <__fpcmp_parts_f+0x9c>
    2ad8:	80 81       	ld	r24, Z
    2ada:	82 30       	cpi	r24, 0x02	; 2
    2adc:	08 f4       	brcc	.+2      	; 0x2ae0 <__fpcmp_parts_f+0x16>
    2ade:	43 c0       	rjmp	.+134    	; 0x2b66 <__fpcmp_parts_f+0x9c>
    2ae0:	94 30       	cpi	r25, 0x04	; 4
    2ae2:	51 f4       	brne	.+20     	; 0x2af8 <__fpcmp_parts_f+0x2e>
    2ae4:	11 96       	adiw	r26, 0x01	; 1
    2ae6:	1c 91       	ld	r17, X
    2ae8:	84 30       	cpi	r24, 0x04	; 4
    2aea:	99 f5       	brne	.+102    	; 0x2b52 <__fpcmp_parts_f+0x88>
    2aec:	81 81       	ldd	r24, Z+1	; 0x01
    2aee:	68 2f       	mov	r22, r24
    2af0:	70 e0       	ldi	r23, 0x00	; 0
    2af2:	61 1b       	sub	r22, r17
    2af4:	71 09       	sbc	r23, r1
    2af6:	3f c0       	rjmp	.+126    	; 0x2b76 <__fpcmp_parts_f+0xac>
    2af8:	84 30       	cpi	r24, 0x04	; 4
    2afa:	21 f0       	breq	.+8      	; 0x2b04 <__fpcmp_parts_f+0x3a>
    2afc:	92 30       	cpi	r25, 0x02	; 2
    2afe:	31 f4       	brne	.+12     	; 0x2b0c <__fpcmp_parts_f+0x42>
    2b00:	82 30       	cpi	r24, 0x02	; 2
    2b02:	b9 f1       	breq	.+110    	; 0x2b72 <__fpcmp_parts_f+0xa8>
    2b04:	81 81       	ldd	r24, Z+1	; 0x01
    2b06:	88 23       	and	r24, r24
    2b08:	89 f1       	breq	.+98     	; 0x2b6c <__fpcmp_parts_f+0xa2>
    2b0a:	2d c0       	rjmp	.+90     	; 0x2b66 <__fpcmp_parts_f+0x9c>
    2b0c:	11 96       	adiw	r26, 0x01	; 1
    2b0e:	1c 91       	ld	r17, X
    2b10:	11 97       	sbiw	r26, 0x01	; 1
    2b12:	82 30       	cpi	r24, 0x02	; 2
    2b14:	f1 f0       	breq	.+60     	; 0x2b52 <__fpcmp_parts_f+0x88>
    2b16:	81 81       	ldd	r24, Z+1	; 0x01
    2b18:	18 17       	cp	r17, r24
    2b1a:	d9 f4       	brne	.+54     	; 0x2b52 <__fpcmp_parts_f+0x88>
    2b1c:	12 96       	adiw	r26, 0x02	; 2
    2b1e:	2d 91       	ld	r18, X+
    2b20:	3c 91       	ld	r19, X
    2b22:	13 97       	sbiw	r26, 0x03	; 3
    2b24:	82 81       	ldd	r24, Z+2	; 0x02
    2b26:	93 81       	ldd	r25, Z+3	; 0x03
    2b28:	82 17       	cp	r24, r18
    2b2a:	93 07       	cpc	r25, r19
    2b2c:	94 f0       	brlt	.+36     	; 0x2b52 <__fpcmp_parts_f+0x88>
    2b2e:	28 17       	cp	r18, r24
    2b30:	39 07       	cpc	r19, r25
    2b32:	bc f0       	brlt	.+46     	; 0x2b62 <__fpcmp_parts_f+0x98>
    2b34:	14 96       	adiw	r26, 0x04	; 4
    2b36:	8d 91       	ld	r24, X+
    2b38:	9d 91       	ld	r25, X+
    2b3a:	0d 90       	ld	r0, X+
    2b3c:	bc 91       	ld	r27, X
    2b3e:	a0 2d       	mov	r26, r0
    2b40:	24 81       	ldd	r18, Z+4	; 0x04
    2b42:	35 81       	ldd	r19, Z+5	; 0x05
    2b44:	46 81       	ldd	r20, Z+6	; 0x06
    2b46:	57 81       	ldd	r21, Z+7	; 0x07
    2b48:	28 17       	cp	r18, r24
    2b4a:	39 07       	cpc	r19, r25
    2b4c:	4a 07       	cpc	r20, r26
    2b4e:	5b 07       	cpc	r21, r27
    2b50:	18 f4       	brcc	.+6      	; 0x2b58 <__fpcmp_parts_f+0x8e>
    2b52:	11 23       	and	r17, r17
    2b54:	41 f0       	breq	.+16     	; 0x2b66 <__fpcmp_parts_f+0x9c>
    2b56:	0a c0       	rjmp	.+20     	; 0x2b6c <__fpcmp_parts_f+0xa2>
    2b58:	82 17       	cp	r24, r18
    2b5a:	93 07       	cpc	r25, r19
    2b5c:	a4 07       	cpc	r26, r20
    2b5e:	b5 07       	cpc	r27, r21
    2b60:	40 f4       	brcc	.+16     	; 0x2b72 <__fpcmp_parts_f+0xa8>
    2b62:	11 23       	and	r17, r17
    2b64:	19 f0       	breq	.+6      	; 0x2b6c <__fpcmp_parts_f+0xa2>
    2b66:	61 e0       	ldi	r22, 0x01	; 1
    2b68:	70 e0       	ldi	r23, 0x00	; 0
    2b6a:	05 c0       	rjmp	.+10     	; 0x2b76 <__fpcmp_parts_f+0xac>
    2b6c:	6f ef       	ldi	r22, 0xFF	; 255
    2b6e:	7f ef       	ldi	r23, 0xFF	; 255
    2b70:	02 c0       	rjmp	.+4      	; 0x2b76 <__fpcmp_parts_f+0xac>
    2b72:	60 e0       	ldi	r22, 0x00	; 0
    2b74:	70 e0       	ldi	r23, 0x00	; 0
    2b76:	cb 01       	movw	r24, r22
    2b78:	1f 91       	pop	r17
    2b7a:	08 95       	ret

00002b7c <malloc>:
    2b7c:	cf 93       	push	r28
    2b7e:	df 93       	push	r29
    2b80:	bc 01       	movw	r22, r24
    2b82:	82 30       	cpi	r24, 0x02	; 2
    2b84:	91 05       	cpc	r25, r1
    2b86:	10 f4       	brcc	.+4      	; 0x2b8c <malloc+0x10>
    2b88:	62 e0       	ldi	r22, 0x02	; 2
    2b8a:	70 e0       	ldi	r23, 0x00	; 0
    2b8c:	a0 91 8c 2a 	lds	r26, 0x2A8C
    2b90:	b0 91 8d 2a 	lds	r27, 0x2A8D
    2b94:	ed 01       	movw	r28, r26
    2b96:	e0 e0       	ldi	r30, 0x00	; 0
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	40 e0       	ldi	r20, 0x00	; 0
    2b9c:	50 e0       	ldi	r21, 0x00	; 0
    2b9e:	21 c0       	rjmp	.+66     	; 0x2be2 <malloc+0x66>
    2ba0:	88 81       	ld	r24, Y
    2ba2:	99 81       	ldd	r25, Y+1	; 0x01
    2ba4:	86 17       	cp	r24, r22
    2ba6:	97 07       	cpc	r25, r23
    2ba8:	69 f4       	brne	.+26     	; 0x2bc4 <malloc+0x48>
    2baa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bac:	9b 81       	ldd	r25, Y+3	; 0x03
    2bae:	30 97       	sbiw	r30, 0x00	; 0
    2bb0:	19 f0       	breq	.+6      	; 0x2bb8 <malloc+0x3c>
    2bb2:	93 83       	std	Z+3, r25	; 0x03
    2bb4:	82 83       	std	Z+2, r24	; 0x02
    2bb6:	04 c0       	rjmp	.+8      	; 0x2bc0 <malloc+0x44>
    2bb8:	90 93 8d 2a 	sts	0x2A8D, r25
    2bbc:	80 93 8c 2a 	sts	0x2A8C, r24
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	34 c0       	rjmp	.+104    	; 0x2c2c <malloc+0xb0>
    2bc4:	68 17       	cp	r22, r24
    2bc6:	79 07       	cpc	r23, r25
    2bc8:	38 f4       	brcc	.+14     	; 0x2bd8 <malloc+0x5c>
    2bca:	41 15       	cp	r20, r1
    2bcc:	51 05       	cpc	r21, r1
    2bce:	19 f0       	breq	.+6      	; 0x2bd6 <malloc+0x5a>
    2bd0:	84 17       	cp	r24, r20
    2bd2:	95 07       	cpc	r25, r21
    2bd4:	08 f4       	brcc	.+2      	; 0x2bd8 <malloc+0x5c>
    2bd6:	ac 01       	movw	r20, r24
    2bd8:	fe 01       	movw	r30, r28
    2bda:	8a 81       	ldd	r24, Y+2	; 0x02
    2bdc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bde:	9c 01       	movw	r18, r24
    2be0:	e9 01       	movw	r28, r18
    2be2:	20 97       	sbiw	r28, 0x00	; 0
    2be4:	e9 f6       	brne	.-70     	; 0x2ba0 <malloc+0x24>
    2be6:	41 15       	cp	r20, r1
    2be8:	51 05       	cpc	r21, r1
    2bea:	a9 f1       	breq	.+106    	; 0x2c56 <malloc+0xda>
    2bec:	ca 01       	movw	r24, r20
    2bee:	86 1b       	sub	r24, r22
    2bf0:	97 0b       	sbc	r25, r23
    2bf2:	04 97       	sbiw	r24, 0x04	; 4
    2bf4:	08 f4       	brcc	.+2      	; 0x2bf8 <malloc+0x7c>
    2bf6:	ba 01       	movw	r22, r20
    2bf8:	e0 e0       	ldi	r30, 0x00	; 0
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	2a c0       	rjmp	.+84     	; 0x2c52 <malloc+0xd6>
    2bfe:	8d 91       	ld	r24, X+
    2c00:	9c 91       	ld	r25, X
    2c02:	11 97       	sbiw	r26, 0x01	; 1
    2c04:	84 17       	cp	r24, r20
    2c06:	95 07       	cpc	r25, r21
    2c08:	f9 f4       	brne	.+62     	; 0x2c48 <malloc+0xcc>
    2c0a:	64 17       	cp	r22, r20
    2c0c:	75 07       	cpc	r23, r21
    2c0e:	81 f4       	brne	.+32     	; 0x2c30 <malloc+0xb4>
    2c10:	12 96       	adiw	r26, 0x02	; 2
    2c12:	8d 91       	ld	r24, X+
    2c14:	9c 91       	ld	r25, X
    2c16:	13 97       	sbiw	r26, 0x03	; 3
    2c18:	30 97       	sbiw	r30, 0x00	; 0
    2c1a:	19 f0       	breq	.+6      	; 0x2c22 <malloc+0xa6>
    2c1c:	93 83       	std	Z+3, r25	; 0x03
    2c1e:	82 83       	std	Z+2, r24	; 0x02
    2c20:	04 c0       	rjmp	.+8      	; 0x2c2a <malloc+0xae>
    2c22:	90 93 8d 2a 	sts	0x2A8D, r25
    2c26:	80 93 8c 2a 	sts	0x2A8C, r24
    2c2a:	fd 01       	movw	r30, r26
    2c2c:	32 96       	adiw	r30, 0x02	; 2
    2c2e:	4f c0       	rjmp	.+158    	; 0x2cce <malloc+0x152>
    2c30:	ca 01       	movw	r24, r20
    2c32:	86 1b       	sub	r24, r22
    2c34:	97 0b       	sbc	r25, r23
    2c36:	fd 01       	movw	r30, r26
    2c38:	e8 0f       	add	r30, r24
    2c3a:	f9 1f       	adc	r31, r25
    2c3c:	61 93       	st	Z+, r22
    2c3e:	71 93       	st	Z+, r23
    2c40:	02 97       	sbiw	r24, 0x02	; 2
    2c42:	8d 93       	st	X+, r24
    2c44:	9c 93       	st	X, r25
    2c46:	43 c0       	rjmp	.+134    	; 0x2cce <malloc+0x152>
    2c48:	fd 01       	movw	r30, r26
    2c4a:	82 81       	ldd	r24, Z+2	; 0x02
    2c4c:	93 81       	ldd	r25, Z+3	; 0x03
    2c4e:	9c 01       	movw	r18, r24
    2c50:	d9 01       	movw	r26, r18
    2c52:	10 97       	sbiw	r26, 0x00	; 0
    2c54:	a1 f6       	brne	.-88     	; 0x2bfe <malloc+0x82>
    2c56:	80 91 8a 2a 	lds	r24, 0x2A8A
    2c5a:	90 91 8b 2a 	lds	r25, 0x2A8B
    2c5e:	89 2b       	or	r24, r25
    2c60:	41 f4       	brne	.+16     	; 0x2c72 <malloc+0xf6>
    2c62:	80 91 19 04 	lds	r24, 0x0419
    2c66:	90 91 1a 04 	lds	r25, 0x041A
    2c6a:	90 93 8b 2a 	sts	0x2A8B, r25
    2c6e:	80 93 8a 2a 	sts	0x2A8A, r24
    2c72:	40 91 1b 04 	lds	r20, 0x041B
    2c76:	50 91 1c 04 	lds	r21, 0x041C
    2c7a:	41 15       	cp	r20, r1
    2c7c:	51 05       	cpc	r21, r1
    2c7e:	41 f4       	brne	.+16     	; 0x2c90 <malloc+0x114>
    2c80:	4d b7       	in	r20, 0x3d	; 61
    2c82:	5e b7       	in	r21, 0x3e	; 62
    2c84:	80 91 17 04 	lds	r24, 0x0417
    2c88:	90 91 18 04 	lds	r25, 0x0418
    2c8c:	48 1b       	sub	r20, r24
    2c8e:	59 0b       	sbc	r21, r25
    2c90:	20 91 8a 2a 	lds	r18, 0x2A8A
    2c94:	30 91 8b 2a 	lds	r19, 0x2A8B
    2c98:	24 17       	cp	r18, r20
    2c9a:	35 07       	cpc	r19, r21
    2c9c:	b0 f4       	brcc	.+44     	; 0x2cca <malloc+0x14e>
    2c9e:	ca 01       	movw	r24, r20
    2ca0:	82 1b       	sub	r24, r18
    2ca2:	93 0b       	sbc	r25, r19
    2ca4:	86 17       	cp	r24, r22
    2ca6:	97 07       	cpc	r25, r23
    2ca8:	80 f0       	brcs	.+32     	; 0x2cca <malloc+0x14e>
    2caa:	ab 01       	movw	r20, r22
    2cac:	4e 5f       	subi	r20, 0xFE	; 254
    2cae:	5f 4f       	sbci	r21, 0xFF	; 255
    2cb0:	84 17       	cp	r24, r20
    2cb2:	95 07       	cpc	r25, r21
    2cb4:	50 f0       	brcs	.+20     	; 0x2cca <malloc+0x14e>
    2cb6:	42 0f       	add	r20, r18
    2cb8:	53 1f       	adc	r21, r19
    2cba:	50 93 8b 2a 	sts	0x2A8B, r21
    2cbe:	40 93 8a 2a 	sts	0x2A8A, r20
    2cc2:	f9 01       	movw	r30, r18
    2cc4:	61 93       	st	Z+, r22
    2cc6:	71 93       	st	Z+, r23
    2cc8:	02 c0       	rjmp	.+4      	; 0x2cce <malloc+0x152>
    2cca:	e0 e0       	ldi	r30, 0x00	; 0
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	cf 01       	movw	r24, r30
    2cd0:	df 91       	pop	r29
    2cd2:	cf 91       	pop	r28
    2cd4:	08 95       	ret

00002cd6 <free>:
    2cd6:	cf 93       	push	r28
    2cd8:	df 93       	push	r29
    2cda:	00 97       	sbiw	r24, 0x00	; 0
    2cdc:	09 f4       	brne	.+2      	; 0x2ce0 <free+0xa>
    2cde:	50 c0       	rjmp	.+160    	; 0x2d80 <free+0xaa>
    2ce0:	ec 01       	movw	r28, r24
    2ce2:	22 97       	sbiw	r28, 0x02	; 2
    2ce4:	1b 82       	std	Y+3, r1	; 0x03
    2ce6:	1a 82       	std	Y+2, r1	; 0x02
    2ce8:	a0 91 8c 2a 	lds	r26, 0x2A8C
    2cec:	b0 91 8d 2a 	lds	r27, 0x2A8D
    2cf0:	10 97       	sbiw	r26, 0x00	; 0
    2cf2:	09 f1       	breq	.+66     	; 0x2d36 <free+0x60>
    2cf4:	40 e0       	ldi	r20, 0x00	; 0
    2cf6:	50 e0       	ldi	r21, 0x00	; 0
    2cf8:	ac 17       	cp	r26, r28
    2cfa:	bd 07       	cpc	r27, r29
    2cfc:	08 f1       	brcs	.+66     	; 0x2d40 <free+0x6a>
    2cfe:	bb 83       	std	Y+3, r27	; 0x03
    2d00:	aa 83       	std	Y+2, r26	; 0x02
    2d02:	fe 01       	movw	r30, r28
    2d04:	21 91       	ld	r18, Z+
    2d06:	31 91       	ld	r19, Z+
    2d08:	e2 0f       	add	r30, r18
    2d0a:	f3 1f       	adc	r31, r19
    2d0c:	ae 17       	cp	r26, r30
    2d0e:	bf 07       	cpc	r27, r31
    2d10:	79 f4       	brne	.+30     	; 0x2d30 <free+0x5a>
    2d12:	8d 91       	ld	r24, X+
    2d14:	9c 91       	ld	r25, X
    2d16:	11 97       	sbiw	r26, 0x01	; 1
    2d18:	28 0f       	add	r18, r24
    2d1a:	39 1f       	adc	r19, r25
    2d1c:	2e 5f       	subi	r18, 0xFE	; 254
    2d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d20:	39 83       	std	Y+1, r19	; 0x01
    2d22:	28 83       	st	Y, r18
    2d24:	12 96       	adiw	r26, 0x02	; 2
    2d26:	8d 91       	ld	r24, X+
    2d28:	9c 91       	ld	r25, X
    2d2a:	13 97       	sbiw	r26, 0x03	; 3
    2d2c:	9b 83       	std	Y+3, r25	; 0x03
    2d2e:	8a 83       	std	Y+2, r24	; 0x02
    2d30:	41 15       	cp	r20, r1
    2d32:	51 05       	cpc	r21, r1
    2d34:	71 f4       	brne	.+28     	; 0x2d52 <free+0x7c>
    2d36:	d0 93 8d 2a 	sts	0x2A8D, r29
    2d3a:	c0 93 8c 2a 	sts	0x2A8C, r28
    2d3e:	20 c0       	rjmp	.+64     	; 0x2d80 <free+0xaa>
    2d40:	12 96       	adiw	r26, 0x02	; 2
    2d42:	8d 91       	ld	r24, X+
    2d44:	9c 91       	ld	r25, X
    2d46:	13 97       	sbiw	r26, 0x03	; 3
    2d48:	ad 01       	movw	r20, r26
    2d4a:	00 97       	sbiw	r24, 0x00	; 0
    2d4c:	11 f0       	breq	.+4      	; 0x2d52 <free+0x7c>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	d3 cf       	rjmp	.-90     	; 0x2cf8 <free+0x22>
    2d52:	fa 01       	movw	r30, r20
    2d54:	d3 83       	std	Z+3, r29	; 0x03
    2d56:	c2 83       	std	Z+2, r28	; 0x02
    2d58:	21 91       	ld	r18, Z+
    2d5a:	31 91       	ld	r19, Z+
    2d5c:	e2 0f       	add	r30, r18
    2d5e:	f3 1f       	adc	r31, r19
    2d60:	ce 17       	cp	r28, r30
    2d62:	df 07       	cpc	r29, r31
    2d64:	69 f4       	brne	.+26     	; 0x2d80 <free+0xaa>
    2d66:	88 81       	ld	r24, Y
    2d68:	99 81       	ldd	r25, Y+1	; 0x01
    2d6a:	28 0f       	add	r18, r24
    2d6c:	39 1f       	adc	r19, r25
    2d6e:	2e 5f       	subi	r18, 0xFE	; 254
    2d70:	3f 4f       	sbci	r19, 0xFF	; 255
    2d72:	fa 01       	movw	r30, r20
    2d74:	31 83       	std	Z+1, r19	; 0x01
    2d76:	20 83       	st	Z, r18
    2d78:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d7c:	93 83       	std	Z+3, r25	; 0x03
    2d7e:	82 83       	std	Z+2, r24	; 0x02
    2d80:	df 91       	pop	r29
    2d82:	cf 91       	pop	r28
    2d84:	08 95       	ret

00002d86 <__udivmodhi4>:
    2d86:	aa 1b       	sub	r26, r26
    2d88:	bb 1b       	sub	r27, r27
    2d8a:	51 e1       	ldi	r21, 0x11	; 17
    2d8c:	07 c0       	rjmp	.+14     	; 0x2d9c <__udivmodhi4_ep>

00002d8e <__udivmodhi4_loop>:
    2d8e:	aa 1f       	adc	r26, r26
    2d90:	bb 1f       	adc	r27, r27
    2d92:	a6 17       	cp	r26, r22
    2d94:	b7 07       	cpc	r27, r23
    2d96:	10 f0       	brcs	.+4      	; 0x2d9c <__udivmodhi4_ep>
    2d98:	a6 1b       	sub	r26, r22
    2d9a:	b7 0b       	sbc	r27, r23

00002d9c <__udivmodhi4_ep>:
    2d9c:	88 1f       	adc	r24, r24
    2d9e:	99 1f       	adc	r25, r25
    2da0:	5a 95       	dec	r21
    2da2:	a9 f7       	brne	.-22     	; 0x2d8e <__udivmodhi4_loop>
    2da4:	80 95       	com	r24
    2da6:	90 95       	com	r25
    2da8:	bc 01       	movw	r22, r24
    2daa:	cd 01       	movw	r24, r26
    2dac:	08 95       	ret

00002dae <__prologue_saves__>:
    2dae:	2f 92       	push	r2
    2db0:	3f 92       	push	r3
    2db2:	4f 92       	push	r4
    2db4:	5f 92       	push	r5
    2db6:	6f 92       	push	r6
    2db8:	7f 92       	push	r7
    2dba:	8f 92       	push	r8
    2dbc:	9f 92       	push	r9
    2dbe:	af 92       	push	r10
    2dc0:	bf 92       	push	r11
    2dc2:	cf 92       	push	r12
    2dc4:	df 92       	push	r13
    2dc6:	ef 92       	push	r14
    2dc8:	ff 92       	push	r15
    2dca:	0f 93       	push	r16
    2dcc:	1f 93       	push	r17
    2dce:	cf 93       	push	r28
    2dd0:	df 93       	push	r29
    2dd2:	cd b7       	in	r28, 0x3d	; 61
    2dd4:	de b7       	in	r29, 0x3e	; 62
    2dd6:	ca 1b       	sub	r28, r26
    2dd8:	db 0b       	sbc	r29, r27
    2dda:	0f b6       	in	r0, 0x3f	; 63
    2ddc:	f8 94       	cli
    2dde:	de bf       	out	0x3e, r29	; 62
    2de0:	0f be       	out	0x3f, r0	; 63
    2de2:	cd bf       	out	0x3d, r28	; 61
    2de4:	19 94       	eijmp

00002de6 <__epilogue_restores__>:
    2de6:	2a 88       	ldd	r2, Y+18	; 0x12
    2de8:	39 88       	ldd	r3, Y+17	; 0x11
    2dea:	48 88       	ldd	r4, Y+16	; 0x10
    2dec:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dee:	6e 84       	ldd	r6, Y+14	; 0x0e
    2df0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2df2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2df4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2df6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2df8:	b9 84       	ldd	r11, Y+9	; 0x09
    2dfa:	c8 84       	ldd	r12, Y+8	; 0x08
    2dfc:	df 80       	ldd	r13, Y+7	; 0x07
    2dfe:	ee 80       	ldd	r14, Y+6	; 0x06
    2e00:	fd 80       	ldd	r15, Y+5	; 0x05
    2e02:	0c 81       	ldd	r16, Y+4	; 0x04
    2e04:	1b 81       	ldd	r17, Y+3	; 0x03
    2e06:	aa 81       	ldd	r26, Y+2	; 0x02
    2e08:	b9 81       	ldd	r27, Y+1	; 0x01
    2e0a:	ce 0f       	add	r28, r30
    2e0c:	d1 1d       	adc	r29, r1
    2e0e:	0f b6       	in	r0, 0x3f	; 63
    2e10:	f8 94       	cli
    2e12:	de bf       	out	0x3e, r29	; 62
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	cd bf       	out	0x3d, r28	; 61
    2e18:	ed 01       	movw	r28, r26
    2e1a:	08 95       	ret

00002e1c <_exit>:
    2e1c:	f8 94       	cli

00002e1e <__stop_program>:
    2e1e:	ff cf       	rjmp	.-2      	; 0x2e1e <__stop_program>
