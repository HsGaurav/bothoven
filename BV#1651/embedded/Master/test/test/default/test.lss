
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000370  00800200  00002f16  00002faa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ab2  00800570  00800570  0000331a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000331a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006f9  00000000  00000000  0000333a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002a63  00000000  00000000  00003a33  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000417  00000000  00000000  00006496  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000261b  00000000  00000000  000068ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004f0  00000000  00000000  00008ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000717  00000000  00000000  000093b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001296  00000000  00000000  00009acf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000258  00000000  00000000  0000ad65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__vector_5>
      18:	0c 94 cb 02 	jmp	0x596	; 0x596 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 14 08 	jmp	0x1028	; 0x1028 <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__vector_51>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	15 e0       	ldi	r17, 0x05	; 5
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 e1       	ldi	r30, 0x16	; 22
      fc:	ff e2       	ldi	r31, 0x2F	; 47
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 37       	cpi	r26, 0x70	; 112
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	10 e1       	ldi	r17, 0x10	; 16
     110:	a0 e7       	ldi	r26, 0x70	; 112
     112:	b5 e0       	ldi	r27, 0x05	; 5
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a2 32       	cpi	r26, 0x22	; 34
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <main>
     122:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <IsEmpty>:
void EmptyQueue(struct Queue *Q) {
	while(Q->head!=NULL)
		DeQueue(Q);
}

int IsEmpty(struct Queue *Q){
     12a:	fc 01       	movw	r30, r24
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	91 81       	ldd	r25, Z+1	; 0x01
     134:	89 2b       	or	r24, r25
     136:	11 f4       	brne	.+4      	; 0x13c <IsEmpty+0x12>
     138:	21 e0       	ldi	r18, 0x01	; 1
     13a:	30 e0       	ldi	r19, 0x00	; 0
	return (Q->head==NULL) ? 1 : 0 ;
}
     13c:	c9 01       	movw	r24, r18
     13e:	08 95       	ret

00000140 <initMap>:
	*Output: integer-> 0 if everything was successful
	*Logic: Initializes the map with the know map.
	*		Required only at the begining.
	*Example Call: initMap();
*/
int initMap () {
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
	//Initializes each nodes as unconnected
	for (int i = 0; i < size; i++)
     148:	62 e3       	ldi	r22, 0x32	; 50
     14a:	70 e0       	ldi	r23, 0x00	; 0
		for (int j = 0; j < size; j++)
			map [i][j] = INF;
     14c:	40 ec       	ldi	r20, 0xC0	; 192
     14e:	57 e2       	ldi	r21, 0x27	; 39
     150:	0b c0       	rjmp	.+22     	; 0x168 <initMap+0x28>
     152:	41 93       	st	Z+, r20
     154:	51 93       	st	Z+, r21
	*Example Call: initMap();
*/
int initMap () {
	//Initializes each nodes as unconnected
	for (int i = 0; i < size; i++)
		for (int j = 0; j < size; j++)
     156:	01 96       	adiw	r24, 0x01	; 1
     158:	8a 30       	cpi	r24, 0x0A	; 10
     15a:	91 05       	cpc	r25, r1
     15c:	d1 f7       	brne	.-12     	; 0x152 <initMap+0x12>
	*		Required only at the begining.
	*Example Call: initMap();
*/
int initMap () {
	//Initializes each nodes as unconnected
	for (int i = 0; i < size; i++)
     15e:	2f 5f       	subi	r18, 0xFF	; 255
     160:	3f 4f       	sbci	r19, 0xFF	; 255
     162:	2a 30       	cpi	r18, 0x0A	; 10
     164:	31 05       	cpc	r19, r1
     166:	61 f0       	breq	.+24     	; 0x180 <initMap+0x40>
     168:	26 9f       	mul	r18, r22
     16a:	f0 01       	movw	r30, r0
     16c:	27 9f       	mul	r18, r23
     16e:	f0 0d       	add	r31, r0
     170:	36 9f       	mul	r19, r22
     172:	f0 0d       	add	r31, r0
     174:	11 24       	eor	r1, r1
     176:	e6 57       	subi	r30, 0x76	; 118
     178:	fa 4f       	sbci	r31, 0xFA	; 250
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	e9 cf       	rjmp	.-46     	; 0x152 <initMap+0x12>
     180:	ec eb       	ldi	r30, 0xBC	; 188
     182:	f5 e0       	ldi	r31, 0x05	; 5
		for (int j = 0; j < size; j++)
			map [i][j] = INF;
	//Connects nodes 1 through 14 in sequential order
	for (int i = 1; i < 14; i++)
		{map[i][i+1]=1;
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	95 83       	std	Z+5, r25	; 0x05
     18a:	84 83       	std	Z+4, r24	; 0x04
		map[i][i-1]=1;}
     18c:	91 83       	std	Z+1, r25	; 0x01
     18e:	80 83       	st	Z, r24
     190:	f4 96       	adiw	r30, 0x34	; 52
	//Initializes each nodes as unconnected
	for (int i = 0; i < size; i++)
		for (int j = 0; j < size; j++)
			map [i][j] = INF;
	//Connects nodes 1 through 14 in sequential order
	for (int i = 1; i < 14; i++)
     192:	28 e0       	ldi	r18, 0x08	; 8
     194:	e0 36       	cpi	r30, 0x60	; 96
     196:	f2 07       	cpc	r31, r18
     198:	b9 f7       	brne	.-18     	; 0x188 <initMap+0x48>
     19a:	ec ef       	ldi	r30, 0xFC	; 252
     19c:	f8 e0       	ldi	r31, 0x08	; 8
		{map[i][i+1]=1;
		map[i][i-1]=1;}

	//Connects nodes 16 through 24 in sequential order
	for (int i = 17; i < 24; i++)
		{map[i][i+1]=1;
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	95 83       	std	Z+5, r25	; 0x05
     1a4:	84 83       	std	Z+4, r24	; 0x04
		map[i][i-1]=1;}
     1a6:	91 83       	std	Z+1, r25	; 0x01
     1a8:	80 83       	st	Z, r24
     1aa:	f4 96       	adiw	r30, 0x34	; 52
	for (int i = 1; i < 14; i++)
		{map[i][i+1]=1;
		map[i][i-1]=1;}

	//Connects nodes 16 through 24 in sequential order
	for (int i = 17; i < 24; i++)
     1ac:	2a e0       	ldi	r18, 0x0A	; 10
     1ae:	e8 36       	cpi	r30, 0x68	; 104
     1b0:	f2 07       	cpc	r31, r18
     1b2:	b9 f7       	brne	.-18     	; 0x1a2 <initMap+0x62>
		{map[i][i+1]=1;
		map[i][i-1]=1;}
	//Manually connecting nodes that are connected in the map
	//Replace it with soft code if you ever find a method
	map[14][13] = 1;
     1b4:	90 93 61 08 	sts	0x0861, r25
     1b8:	80 93 60 08 	sts	0x0860, r24
	map[16][17] = 1;
     1bc:	90 93 cd 08 	sts	0x08CD, r25
     1c0:	80 93 cc 08 	sts	0x08CC, r24
	map[24][23] = 1;
     1c4:	91 83       	std	Z+1, r25	; 0x01
     1c6:	80 83       	st	Z, r24
	map[9][14]  = map[14][9]  = 1;
     1c8:	90 93 59 08 	sts	0x0859, r25
     1cc:	80 93 58 08 	sts	0x0858, r24
     1d0:	90 93 69 07 	sts	0x0769, r25
     1d4:	80 93 68 07 	sts	0x0768, r24
	map[3][14]  = map[14][3]  = 1;
     1d8:	90 93 4d 08 	sts	0x084D, r25
     1dc:	80 93 4c 08 	sts	0x084C, r24
     1e0:	90 93 3d 06 	sts	0x063D, r25
     1e4:	80 93 3c 06 	sts	0x063C, r24
	map[3][13]  = map[13][3]  = 1;
     1e8:	90 93 1b 08 	sts	0x081B, r25
     1ec:	80 93 1a 08 	sts	0x081A, r24
     1f0:	90 93 3b 06 	sts	0x063B, r25
     1f4:	80 93 3a 06 	sts	0x063A, r24
	map[12][15] = map[15][12] = 1;
     1f8:	90 93 91 08 	sts	0x0891, r25
     1fc:	80 93 90 08 	sts	0x0890, r24
     200:	90 93 01 08 	sts	0x0801, r25
     204:	80 93 00 08 	sts	0x0800, r24
	map[15][23] = map[23][15] = 1;
     208:	90 93 27 0a 	sts	0x0A27, r25
     20c:	80 93 26 0a 	sts	0x0A26, r24
     210:	90 93 a7 08 	sts	0x08A7, r25
     214:	80 93 a6 08 	sts	0x08A6, r24
	map[16][23] = map[23][16] = 1;
     218:	90 93 29 0a 	sts	0x0A29, r25
     21c:	80 93 28 0a 	sts	0x0A28, r24
     220:	90 93 d9 08 	sts	0x08D9, r25
     224:	80 93 d8 08 	sts	0x08D8, r24
	map[12][17] = map[17][12] = 1;
     228:	90 93 f5 08 	sts	0x08F5, r25
     22c:	80 93 f4 08 	sts	0x08F4, r24
     230:	90 93 05 08 	sts	0x0805, r25
     234:	80 93 04 08 	sts	0x0804, r24
	map[1][24]	= map[24][1]  = 1;
     238:	90 93 3d 0a 	sts	0x0A3D, r25
     23c:	80 93 3c 0a 	sts	0x0A3C, r24
     240:	90 93 ed 05 	sts	0x05ED, r25
     244:	80 93 ec 05 	sts	0x05EC, r24
     248:	e4 e7       	ldi	r30, 0x74	; 116
     24a:	fa e0       	ldi	r31, 0x0A	; 10
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	90 e0       	ldi	r25, 0x00	; 0

	for (int i = 1; i < 25; i++)
		for (int j = 0; j < 2; j++)
			map_link[i][j] = (j == 0 ? i : -1);
     250:	2f ef       	ldi	r18, 0xFF	; 255
     252:	3f ef       	ldi	r19, 0xFF	; 255
     254:	91 83       	std	Z+1, r25	; 0x01
     256:	80 83       	st	Z, r24
     258:	33 83       	std	Z+3, r19	; 0x03
     25a:	22 83       	std	Z+2, r18	; 0x02
	map[15][23] = map[23][15] = 1;
	map[16][23] = map[23][16] = 1;
	map[12][17] = map[17][12] = 1;
	map[1][24]	= map[24][1]  = 1;

	for (int i = 1; i < 25; i++)
     25c:	01 96       	adiw	r24, 0x01	; 1
     25e:	34 96       	adiw	r30, 0x04	; 4
     260:	89 31       	cpi	r24, 0x19	; 25
     262:	91 05       	cpc	r25, r1
     264:	b9 f7       	brne	.-18     	; 0x254 <initMap+0x114>
		for (int j = 0; j < 2; j++)
			map_link[i][j] = (j == 0 ? i : -1);
	//Manually linking nodes to notes
	//Replace hard code with a better method if and when available
	map_link[25][0] = 1;
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	90 93 d5 0a 	sts	0x0AD5, r25
     26e:	80 93 d4 0a 	sts	0x0AD4, r24
	map_link[27][0] = 5;
     272:	85 e0       	ldi	r24, 0x05	; 5
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	90 93 dd 0a 	sts	0x0ADD, r25
     27a:	80 93 dc 0a 	sts	0x0ADC, r24
	map_link[33][0] = 21;
     27e:	85 e1       	ldi	r24, 0x15	; 21
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	90 93 f5 0a 	sts	0x0AF5, r25
     286:	80 93 f4 0a 	sts	0x0AF4, r24
	map_link[26][0] = 14;
     28a:	8e e0       	ldi	r24, 0x0E	; 14
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	90 93 d9 0a 	sts	0x0AD9, r25
     292:	80 93 d8 0a 	sts	0x0AD8, r24
	map_link[26][1] = 11;
     296:	8b e0       	ldi	r24, 0x0B	; 11
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	90 93 db 0a 	sts	0x0ADB, r25
     29e:	80 93 da 0a 	sts	0x0ADA, r24
     2a2:	c6 ed       	ldi	r28, 0xD6	; 214
     2a4:	db e0       	ldi	r29, 0x0B	; 11
     2a6:	fe 01       	movw	r30, r28
     2a8:	f4 96       	adiw	r30, 0x34	; 52
     2aa:	22 ee       	ldi	r18, 0xE2	; 226
     2ac:	3f ef       	ldi	r19, 0xFF	; 255
	
	//Storing absolute angle of every point.
	int sangle = -30;
	for (int i = 2; i < 23; i=i+2)
	{
		map_angle[i][i+1] = sangle;
     2ae:	e0 97       	sbiw	r28, 0x30	; 48
     2b0:	39 83       	std	Y+1, r19	; 0x01
     2b2:	28 83       	st	Y, r18
     2b4:	e0 96       	adiw	r28, 0x30	; 48
		map_angle[i+1][i+2] = sangle;
     2b6:	3d 83       	std	Y+5, r19	; 0x05
     2b8:	2c 83       	std	Y+4, r18	; 0x04
		if (sangle < 0)
     2ba:	37 ff       	sbrs	r19, 7
     2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <initMap+0x186>
		{
			map_angle[i+1][i] = sangle + 180;
     2be:	c9 01       	movw	r24, r18
     2c0:	8c 54       	subi	r24, 0x4C	; 76
     2c2:	9f 4f       	sbci	r25, 0xFF	; 255
     2c4:	06 c0       	rjmp	.+12     	; 0x2d2 <initMap+0x192>
			map_angle[i+2][i+1] = sangle + 180;
		}
		if (sangle > 0)
     2c6:	12 16       	cp	r1, r18
     2c8:	13 06       	cpc	r1, r19
     2ca:	3c f4       	brge	.+14     	; 0x2da <initMap+0x19a>
		{
			map_angle[i+1][i] = sangle - 180;
     2cc:	c9 01       	movw	r24, r18
     2ce:	84 5b       	subi	r24, 0xB4	; 180
     2d0:	90 40       	sbci	r25, 0x00	; 0
     2d2:	99 83       	std	Y+1, r25	; 0x01
     2d4:	88 83       	st	Y, r24
			map_angle[i+2][i+1] = sangle - 180;
     2d6:	91 83       	std	Z+1, r25	; 0x01
     2d8:	80 83       	st	Z, r24
		}
		sangle -= 30;
     2da:	2e 51       	subi	r18, 0x1E	; 30
     2dc:	30 40       	sbci	r19, 0x00	; 0
		if (sangle < -180)
     2de:	8f ef       	ldi	r24, 0xFF	; 255
     2e0:	2c 34       	cpi	r18, 0x4C	; 76
     2e2:	38 07       	cpc	r19, r24
     2e4:	14 f4       	brge	.+4      	; 0x2ea <initMap+0x1aa>
     2e6:	26 e9       	ldi	r18, 0x96	; 150
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	c8 59       	subi	r28, 0x98	; 152
     2ec:	df 4f       	sbci	r29, 0xFF	; 255
     2ee:	e8 59       	subi	r30, 0x98	; 152
     2f0:	ff 4f       	sbci	r31, 0xFF	; 255
	map_link[26][1] = 11;
	
	
	//Storing absolute angle of every point.
	int sangle = -30;
	for (int i = 2; i < 23; i=i+2)
     2f2:	80 e1       	ldi	r24, 0x10	; 16
     2f4:	ce 34       	cpi	r28, 0x4E	; 78
     2f6:	d8 07       	cpc	r29, r24
     2f8:	d1 f6       	brne	.-76     	; 0x2ae <initMap+0x16e>
			sangle = 150;
		}
	}


	map_angle[1][2] = 0;
     2fa:	10 92 73 0b 	sts	0x0B73, r1
     2fe:	10 92 72 0b 	sts	0x0B72, r1
	map_angle[2][1] = 180;
     302:	84 eb       	ldi	r24, 0xB4	; 180
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	90 93 a3 0b 	sts	0x0BA3, r25
     30a:	80 93 a2 0b 	sts	0x0BA2, r24
	map_angle[1][24] = 180;
     30e:	90 93 9f 0b 	sts	0x0B9F, r25
     312:	80 93 9e 0b 	sts	0x0B9E, r24
	map_angle[24][1] = 0;
     316:	10 92 ef 0f 	sts	0x0FEF, r1
     31a:	10 92 ee 0f 	sts	0x0FEE, r1

	map_angle[3][25]  = -150;
     31e:	aa e6       	ldi	r26, 0x6A	; 106
     320:	bf ef       	ldi	r27, 0xFF	; 255
     322:	b0 93 05 0c 	sts	0x0C05, r27
     326:	a0 93 04 0c 	sts	0x0C04, r26
    map_angle[25][3]  = 30;
     32a:	ee e1       	ldi	r30, 0x1E	; 30
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	f0 93 25 10 	sts	0x1025, r31
     332:	e0 93 24 10 	sts	0x1024, r30
	map_angle[3][26]  = -90;
     336:	66 ea       	ldi	r22, 0xA6	; 166
     338:	7f ef       	ldi	r23, 0xFF	; 255
     33a:	70 93 07 0c 	sts	0x0C07, r23
     33e:	60 93 06 0c 	sts	0x0C06, r22
	map_angle[26][3]  = 90;
     342:	4a e5       	ldi	r20, 0x5A	; 90
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	59 87       	std	Y+9, r21	; 0x09
     348:	48 87       	std	Y+8, r20	; 0x08
	map_angle[7][45]  = 150;
     34a:	26 e9       	ldi	r18, 0x96	; 150
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	30 93 f5 0c 	sts	0x0CF5, r19
     352:	20 93 f4 0c 	sts	0x0CF4, r18
	map_angle[45][7]  = -30;	
     356:	82 ee       	ldi	r24, 0xE2	; 226
     358:	9f ef       	ldi	r25, 0xFF	; 255
     35a:	90 93 15 14 	sts	0x1415, r25
     35e:	80 93 14 14 	sts	0x1414, r24
	map_angle[23][43] = -90;
     362:	70 93 11 10 	sts	0x1011, r23
     366:	60 93 10 10 	sts	0x1010, r22
	map_angle[43][23] = 90;
     36a:	50 93 d1 13 	sts	0x13D1, r21
     36e:	40 93 d0 13 	sts	0x13D0, r20
	map_angle[23][44] = -30;
     372:	90 93 13 10 	sts	0x1013, r25
     376:	80 93 12 10 	sts	0x1012, r24
	map_angle[44][23] = 150;
     37a:	30 93 03 14 	sts	0x1403, r19
     37e:	20 93 02 14 	sts	0x1402, r18
	map_angle[25][26] = -30;
     382:	9d 83       	std	Y+5, r25	; 0x05
     384:	8c 83       	std	Y+4, r24	; 0x04
	map_angle[26][25] = 150;
     386:	3d ab       	std	Y+53, r19	; 0x35
     388:	2c ab       	std	Y+52, r18	; 0x34
	map_angle[35][43] = 90;
     38a:	50 93 69 12 	sts	0x1269, r21
     38e:	40 93 68 12 	sts	0x1268, r20
	map_angle[43][35] = -90;
     392:	70 93 e9 13 	sts	0x13E9, r23
     396:	60 93 e8 13 	sts	0x13E8, r22
	map_angle[36][44] = 150;
     39a:	30 93 9d 12 	sts	0x129D, r19
     39e:	20 93 9c 12 	sts	0x129C, r18
	map_angle[44][36] = -30;
     3a2:	90 93 1d 14 	sts	0x141D, r25
     3a6:	80 93 1c 14 	sts	0x141C, r24
	map_angle[27][45] = -30;
     3aa:	90 93 dd 10 	sts	0x10DD, r25
     3ae:	80 93 dc 10 	sts	0x10DC, r24
	map_angle[45][27] = 150;
     3b2:	30 93 3d 14 	sts	0x143D, r19
     3b6:	20 93 3c 14 	sts	0x143C, r18
	map_angle[27][38] = -150;
     3ba:	b0 93 cf 10 	sts	0x10CF, r27
     3be:	a0 93 ce 10 	sts	0x10CE, r26
	map_angle[38][27] = 30;
     3c2:	f0 93 df 12 	sts	0x12DF, r31
     3c6:	e0 93 de 12 	sts	0x12DE, r30
	map_angle[35][42] = -30;
     3ca:	90 93 67 12 	sts	0x1267, r25
     3ce:	80 93 66 12 	sts	0x1266, r24
	map_angle[42][35] = 150;
     3d2:	30 93 b7 13 	sts	0x13B7, r19
     3d6:	20 93 b6 13 	sts	0x13B6, r18
	map_angle[36][37] = -90;
     3da:	70 93 8f 12 	sts	0x128F, r23
     3de:	60 93 8e 12 	sts	0x128E, r22
	map_angle[37][36] = 90;
     3e2:	50 93 bf 12 	sts	0x12BF, r21
     3e6:	40 93 be 12 	sts	0x12BE, r20
	map_angle[37][38] = 150;
     3ea:	30 93 c3 12 	sts	0x12C3, r19
     3ee:	20 93 c2 12 	sts	0x12C2, r18
	map_angle[38][37] = -30;
     3f2:	90 93 f3 12 	sts	0x12F3, r25
     3f6:	80 93 f2 12 	sts	0x12F2, r24
	map_angle[25][36] = -150;
     3fa:	b9 8f       	std	Y+25, r27	; 0x19
     3fc:	a8 8f       	std	Y+24, r26	; 0x18
	map_angle[36][25] = 30;
     3fe:	f0 93 77 12 	sts	0x1277, r31
     402:	e0 93 76 12 	sts	0x1276, r30
	map_angle[26][27] = -90;
     406:	79 af       	std	Y+57, r23	; 0x39
     408:	68 af       	std	Y+56, r22	; 0x38
	map_angle[34][35] = 30;
     40a:	f0 93 27 12 	sts	0x1227, r31
     40e:	e0 93 26 12 	sts	0x1226, r30
	map_angle[35][34] = -150;
     412:	b0 93 57 12 	sts	0x1257, r27
     416:	a0 93 56 12 	sts	0x1256, r26
	map_angle[35][36] = 30;
     41a:	f0 93 5b 12 	sts	0x125B, r31
     41e:	e0 93 5a 12 	sts	0x125A, r30
	map_angle[36][35] = -150;
     422:	b0 93 8b 12 	sts	0x128B, r27
     426:	a0 93 8a 12 	sts	0x128A, r26
	map_angle[19][34] = 30;
     42a:	f0 93 37 0f 	sts	0x0F37, r31
     42e:	e0 93 36 0f 	sts	0x0F36, r30
	map_angle[34][19] = -150;
     432:	b0 93 07 12 	sts	0x1207, r27
     436:	a0 93 06 12 	sts	0x1206, r26

	
	return 0;
	
}
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	08 95       	ret

00000444 <fCostCalc>:
	*Input: gCost and hCost (heuristic)
	*Output: Single integer which is the fCost
	*Logic: Adds gCost and hCost to return the fCost.
	*Example Call: int fCost = fCostCalc (gCost, hCost);
*/
int fCostCalc (int gCost, int heuristic) {
     444:	68 0f       	add	r22, r24
     446:	79 1f       	adc	r23, r25
	return gCost + heuristic;
}
     448:	cb 01       	movw	r24, r22
     44a:	08 95       	ret

0000044c <extractMin>:
	*Logic: Starts index of min at -1. It then checks for all the elements in
			the open list in one scan while also checking their cost and
			updating min in the process.
	*Example Call: int min = extractMin (openList, fCost, size);
*/
int extractMin (int list[], int cost[], int Size) {
     44c:	ef 92       	push	r14
     44e:	ff 92       	push	r15
     450:	0f 93       	push	r16
     452:	1f 93       	push	r17
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	8b 01       	movw	r16, r22
     45a:	7a 01       	movw	r14, r20
     45c:	bc 01       	movw	r22, r24
     45e:	e8 01       	movw	r28, r16
     460:	af ef       	ldi	r26, 0xFF	; 255
     462:	bf ef       	ldi	r27, 0xFF	; 255
     464:	40 e0       	ldi	r20, 0x00	; 0
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	1b c0       	rjmp	.+54     	; 0x4a0 <extractMin+0x54>
	//Think of initializing min
	int min = -1;	
	for (int i = 0; i < Size; i++) {
		if (list[i] != 0) {
     46a:	fb 01       	movw	r30, r22
     46c:	80 81       	ld	r24, Z
     46e:	91 81       	ldd	r25, Z+1	; 0x01
     470:	89 2b       	or	r24, r25
     472:	89 f0       	breq	.+34     	; 0x496 <extractMin+0x4a>
			if (min == -1) {
     474:	ff ef       	ldi	r31, 0xFF	; 255
     476:	af 3f       	cpi	r26, 0xFF	; 255
     478:	bf 07       	cpc	r27, r31
     47a:	61 f0       	breq	.+24     	; 0x494 <extractMin+0x48>
				min = i;
				continue;
			}
			min = ((cost[min] < cost[i]) ? min : i);
     47c:	fd 01       	movw	r30, r26
     47e:	ee 0f       	add	r30, r30
     480:	ff 1f       	adc	r31, r31
     482:	e0 0f       	add	r30, r16
     484:	f1 1f       	adc	r31, r17
     486:	20 81       	ld	r18, Z
     488:	31 81       	ldd	r19, Z+1	; 0x01
     48a:	88 81       	ld	r24, Y
     48c:	99 81       	ldd	r25, Y+1	; 0x01
     48e:	28 17       	cp	r18, r24
     490:	39 07       	cpc	r19, r25
     492:	0c f0       	brlt	.+2      	; 0x496 <extractMin+0x4a>
     494:	da 01       	movw	r26, r20
	*Example Call: int min = extractMin (openList, fCost, size);
*/
int extractMin (int list[], int cost[], int Size) {
	//Think of initializing min
	int min = -1;	
	for (int i = 0; i < Size; i++) {
     496:	4f 5f       	subi	r20, 0xFF	; 255
     498:	5f 4f       	sbci	r21, 0xFF	; 255
     49a:	6e 5f       	subi	r22, 0xFE	; 254
     49c:	7f 4f       	sbci	r23, 0xFF	; 255
     49e:	22 96       	adiw	r28, 0x02	; 2
     4a0:	4e 15       	cp	r20, r14
     4a2:	5f 05       	cpc	r21, r15
     4a4:	14 f3       	brlt	.-60     	; 0x46a <extractMin+0x1e>
			}
			min = ((cost[min] < cost[i]) ? min : i);
		}
	}
	return min;
}
     4a6:	cd 01       	movw	r24, r26
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	1f 91       	pop	r17
     4ae:	0f 91       	pop	r16
     4b0:	ff 90       	pop	r15
     4b2:	ef 90       	pop	r14
     4b4:	08 95       	ret

000004b6 <reverse>:
			index is strictly less than the right one, it swaps those. It then
			increases the left pointer while decreasing the right one.
	*Example Call: reverse (arr, size);
*/
void reverse (int *Rev, int Size) {
	int j = Size-1, i = 0, temp;
     4b6:	61 50       	subi	r22, 0x01	; 1
     4b8:	70 40       	sbci	r23, 0x00	; 0
     4ba:	dc 01       	movw	r26, r24
     4bc:	fb 01       	movw	r30, r22
     4be:	ee 0f       	add	r30, r30
     4c0:	ff 1f       	adc	r31, r31
     4c2:	ea 0f       	add	r30, r26
     4c4:	fb 1f       	adc	r31, r27
     4c6:	40 e0       	ldi	r20, 0x00	; 0
     4c8:	50 e0       	ldi	r21, 0x00	; 0
     4ca:	0e c0       	rjmp	.+28     	; 0x4e8 <reverse+0x32>
	while(i < j) {
		temp = Rev[i];
     4cc:	2d 91       	ld	r18, X+
     4ce:	3c 91       	ld	r19, X
     4d0:	11 97       	sbiw	r26, 0x01	; 1
		Rev[i] = Rev[j];
     4d2:	80 81       	ld	r24, Z
     4d4:	91 81       	ldd	r25, Z+1	; 0x01
     4d6:	8d 93       	st	X+, r24
     4d8:	9d 93       	st	X+, r25
		Rev[j] = temp;
     4da:	31 83       	std	Z+1, r19	; 0x01
     4dc:	20 83       	st	Z, r18
		i++;
     4de:	4f 5f       	subi	r20, 0xFF	; 255
     4e0:	5f 4f       	sbci	r21, 0xFF	; 255
		j--;
     4e2:	61 50       	subi	r22, 0x01	; 1
     4e4:	70 40       	sbci	r23, 0x00	; 0
     4e6:	32 97       	sbiw	r30, 0x02	; 2
			increases the left pointer while decreasing the right one.
	*Example Call: reverse (arr, size);
*/
void reverse (int *Rev, int Size) {
	int j = Size-1, i = 0, temp;
	while(i < j) {
     4e8:	46 17       	cp	r20, r22
     4ea:	57 07       	cpc	r21, r23
     4ec:	7c f3       	brlt	.-34     	; 0x4cc <reverse+0x16>
		Rev[i] = Rev[j];
		Rev[j] = temp;
		i++;
		j--;
	}
}
     4ee:	08 95       	ret

000004f0 <adc_pin_config>:
*/

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     4f0:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     4f2:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     4f4:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     4f8:	10 92 08 01 	sts	0x0108, r1
}
     4fc:	08 95       	ret

000004fe <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     4fe:	81 b1       	in	r24, 0x01	; 1
     500:	8f 60       	ori	r24, 0x0F	; 15
     502:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     504:	82 b1       	in	r24, 0x02	; 2
     506:	80 7f       	andi	r24, 0xF0	; 240
     508:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     50a:	ea e0       	ldi	r30, 0x0A	; 10
     50c:	f1 e0       	ldi	r31, 0x01	; 1
     50e:	80 81       	ld	r24, Z
     510:	88 61       	ori	r24, 0x18	; 24
     512:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     514:	eb e0       	ldi	r30, 0x0B	; 11
     516:	f1 e0       	ldi	r31, 0x01	; 1
     518:	80 81       	ld	r24, Z
     51a:	88 61       	ori	r24, 0x18	; 24
     51c:	80 83       	st	Z, r24
}
     51e:	08 95       	ret

00000520 <left_encoder_pin_config>:

void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     520:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     522:	74 9a       	sbi	0x0e, 4	; 14
}
     524:	08 95       	ret

00000526 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     526:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     528:	75 9a       	sbi	0x0e, 5	; 14
}
     52a:	08 95       	ret

0000052c <port_init>:
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
}
//Function to configure LCD port
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     52c:	87 b1       	in	r24, 0x07	; 7
     52e:	87 6f       	ori	r24, 0xF7	; 247
     530:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     532:	88 b1       	in	r24, 0x08	; 8
     534:	80 78       	andi	r24, 0x80	; 128
     536:	88 b9       	out	0x08, r24	; 8
*/

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     538:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     53a:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     53c:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     540:	10 92 08 01 	sts	0x0108, r1
}

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     544:	81 b1       	in	r24, 0x01	; 1
     546:	8f 60       	ori	r24, 0x0F	; 15
     548:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     54a:	82 b1       	in	r24, 0x02	; 2
     54c:	80 7f       	andi	r24, 0xF0	; 240
     54e:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     550:	ea e0       	ldi	r30, 0x0A	; 10
     552:	f1 e0       	ldi	r31, 0x01	; 1
     554:	80 81       	ld	r24, Z
     556:	88 61       	ori	r24, 0x18	; 24
     558:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     55a:	eb e0       	ldi	r30, 0x0B	; 11
     55c:	f1 e0       	ldi	r31, 0x01	; 1
     55e:	80 81       	ld	r24, Z
     560:	88 61       	ori	r24, 0x18	; 24
     562:	80 83       	st	Z, r24
	*Example Call: int *cost = BFS(source);
*/

void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     564:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     566:	43 98       	cbi	0x08, 3	; 8
}

void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     568:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     56a:	74 9a       	sbi	0x0e, 4	; 14
}

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     56c:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     56e:	75 9a       	sbi	0x0e, 5	; 14
	adc_pin_config();
	motion_pin_config();	
	buzzer_pin_config();
	left_encoder_pin_config(); //left encoder pin config
	right_encoder_pin_config(); //right encoder pin config
}
     570:	08 95       	ret

00000572 <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
     572:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     574:	ea e6       	ldi	r30, 0x6A	; 106
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	80 81       	ld	r24, Z
     57a:	82 60       	ori	r24, 0x02	; 2
     57c:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     57e:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
     580:	78 94       	sei
}
     582:	08 95       	ret

00000584 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
     584:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     586:	ea e6       	ldi	r30, 0x6A	; 106
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	88 60       	ori	r24, 0x08	; 8
     58e:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     590:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
     592:	78 94       	sei
}
     594:	08 95       	ret

00000596 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
     596:	1f 92       	push	r1
     598:	0f 92       	push	r0
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	0f 92       	push	r0
     59e:	11 24       	eor	r1, r1
     5a0:	8f 93       	push	r24
     5a2:	9f 93       	push	r25
     5a4:	af 93       	push	r26
     5a6:	bf 93       	push	r27
	ShaftCountRight++;  //increment right shaft position count
     5a8:	80 91 74 05 	lds	r24, 0x0574
     5ac:	90 91 75 05 	lds	r25, 0x0575
     5b0:	a0 91 76 05 	lds	r26, 0x0576
     5b4:	b0 91 77 05 	lds	r27, 0x0577
     5b8:	01 96       	adiw	r24, 0x01	; 1
     5ba:	a1 1d       	adc	r26, r1
     5bc:	b1 1d       	adc	r27, r1
     5be:	80 93 74 05 	sts	0x0574, r24
     5c2:	90 93 75 05 	sts	0x0575, r25
     5c6:	a0 93 76 05 	sts	0x0576, r26
     5ca:	b0 93 77 05 	sts	0x0577, r27
}
     5ce:	bf 91       	pop	r27
     5d0:	af 91       	pop	r26
     5d2:	9f 91       	pop	r25
     5d4:	8f 91       	pop	r24
     5d6:	0f 90       	pop	r0
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	0f 90       	pop	r0
     5dc:	1f 90       	pop	r1
     5de:	18 95       	reti

000005e0 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     5e0:	1f 92       	push	r1
     5e2:	0f 92       	push	r0
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	0f 92       	push	r0
     5e8:	11 24       	eor	r1, r1
     5ea:	8f 93       	push	r24
     5ec:	9f 93       	push	r25
     5ee:	af 93       	push	r26
     5f0:	bf 93       	push	r27
	ShaftCountLeft++;  //increment left shaft position count
     5f2:	80 91 70 05 	lds	r24, 0x0570
     5f6:	90 91 71 05 	lds	r25, 0x0571
     5fa:	a0 91 72 05 	lds	r26, 0x0572
     5fe:	b0 91 73 05 	lds	r27, 0x0573
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	a1 1d       	adc	r26, r1
     606:	b1 1d       	adc	r27, r1
     608:	80 93 70 05 	sts	0x0570, r24
     60c:	90 93 71 05 	sts	0x0571, r25
     610:	a0 93 72 05 	sts	0x0572, r26
     614:	b0 93 73 05 	sts	0x0573, r27
}
     618:	bf 91       	pop	r27
     61a:	af 91       	pop	r26
     61c:	9f 91       	pop	r25
     61e:	8f 91       	pop	r24
     620:	0f 90       	pop	r0
     622:	0f be       	out	0x3f, r0	; 63
     624:	0f 90       	pop	r0
     626:	1f 90       	pop	r1
     628:	18 95       	reti

0000062a <timer1_init>:

void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     62a:	e1 e8       	ldi	r30, 0x81	; 129
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     630:	8c ef       	ldi	r24, 0xFC	; 252
     632:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
     63c:	93 e0       	ldi	r25, 0x03	; 3
     63e:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     642:	8f ef       	ldi	r24, 0xFF	; 255
     644:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
     648:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     64c:	80 93 8a 00 	sts	0x008A, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
     650:	90 93 8d 00 	sts	0x008D, r25
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
     654:	80 93 8c 00 	sts	0x008C, r24
 ICR1H  = 0x03;	
     658:	90 93 87 00 	sts	0x0087, r25
 ICR1L  = 0xFF;
     65c:	80 93 86 00 	sts	0x0086, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     660:	8b ea       	ldi	r24, 0xAB	; 171
     662:	80 93 80 00 	sts	0x0080, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     666:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     66a:	8c e0       	ldi	r24, 0x0C	; 12
     66c:	80 83       	st	Z, r24
}
     66e:	08 95       	ret

00000670 <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     670:	e1 e2       	ldi	r30, 0x21	; 33
     672:	f1 e0       	ldi	r31, 0x01	; 1
     674:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     676:	9f ef       	ldi	r25, 0xFF	; 255
     678:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     682:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     686:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     68a:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     68e:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     692:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     696:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     69a:	89 ea       	ldi	r24, 0xA9	; 169
     69c:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     6a0:	8b e0       	ldi	r24, 0x0B	; 11
     6a2:	80 83       	st	Z, r24
}
     6a4:	08 95       	ret

000006a6 <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
     6a6:	ea e7       	ldi	r30, 0x7A	; 122
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     6ac:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     6b0:	80 e2       	ldi	r24, 0x20	; 32
     6b2:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     6b6:	80 e8       	ldi	r24, 0x80	; 128
     6b8:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     6ba:	86 e8       	ldi	r24, 0x86	; 134
     6bc:	80 83       	st	Z, r24
}
     6be:	08 95       	ret

000006c0 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
     6c0:	98 2f       	mov	r25, r24
	unsigned char a;
	if(Ch>7)
     6c2:	88 30       	cpi	r24, 0x08	; 8
     6c4:	18 f0       	brcs	.+6      	; 0x6cc <ADC_Conversion+0xc>
	{
		ADCSRB = 0x08;
     6c6:	88 e0       	ldi	r24, 0x08	; 8
     6c8:	80 93 7b 00 	sts	0x007B, r24
	}
	Ch = Ch & 0x07;  			
	ADMUX= 0x20| Ch;	   		
     6cc:	97 70       	andi	r25, 0x07	; 7
     6ce:	90 62       	ori	r25, 0x20	; 32
     6d0:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     6d4:	80 91 7a 00 	lds	r24, 0x007A
     6d8:	80 64       	ori	r24, 0x40	; 64
     6da:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     6de:	80 91 7a 00 	lds	r24, 0x007A
     6e2:	84 ff       	sbrs	r24, 4
     6e4:	fc cf       	rjmp	.-8      	; 0x6de <ADC_Conversion+0x1e>
	a=ADCH;
     6e6:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     6ea:	90 91 7a 00 	lds	r25, 0x007A
     6ee:	90 61       	ori	r25, 0x10	; 16
     6f0:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB = 0x00;
     6f4:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     6f8:	08 95       	ret

000006fa <velocity>:
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     6fa:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     6fe:	60 93 2a 01 	sts	0x012A, r22
}
     702:	08 95       	ret

00000704 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     704:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     706:	90 7f       	andi	r25, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     708:	8f 70       	andi	r24, 0x0F	; 15
     70a:	89 2b       	or	r24, r25
 PORTA = PortARestore; 		// executing the command
     70c:	82 b9       	out	0x02, r24	; 2
}
     70e:	08 95       	ret

00000710 <forward>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     710:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     712:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     714:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     716:	82 b9       	out	0x02, r24	; 2
}

void forward (void) 
{
  motion_set (0x06);
}
     718:	08 95       	ret

0000071a <back>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     71a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     71c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     71e:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     720:	82 b9       	out	0x02, r24	; 2
}

void back (void) //both wheels backward
{
  motion_set(0x09);
}
     722:	08 95       	ret

00000724 <left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     724:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     726:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     728:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     72a:	82 b9       	out	0x02, r24	; 2
}

void left (void) //Left wheel backward, Right wheel forward
{
  motion_set(0x05);
}
     72c:	08 95       	ret

0000072e <right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     72e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     730:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     732:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     734:	82 b9       	out	0x02, r24	; 2
}

void right (void) //Left wheel forward, Right wheel backward
{
  motion_set(0x0A);
}
     736:	08 95       	ret

00000738 <soft_left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     738:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     73a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     73c:	84 60       	ori	r24, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     73e:	82 b9       	out	0x02, r24	; 2
}

void soft_left (void) //Left wheel stationary, Right wheel forward
{
 motion_set(0x04);
}
     740:	08 95       	ret

00000742 <soft_right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     742:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     744:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     746:	82 60       	ori	r24, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     748:	82 b9       	out	0x02, r24	; 2
}

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
 motion_set(0x02);
}
     74a:	08 95       	ret

0000074c <soft_left_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     74c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     74e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     750:	81 60       	ori	r24, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     752:	82 b9       	out	0x02, r24	; 2
}

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
 motion_set(0x01);
}
     754:	08 95       	ret

00000756 <soft_right_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     756:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     758:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     75a:	88 60       	ori	r24, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     75c:	82 b9       	out	0x02, r24	; 2
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
 motion_set(0x08);
}
     75e:	08 95       	ret

00000760 <stop>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     760:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     762:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     764:	82 b9       	out	0x02, r24	; 2
}

void stop (void)
{
  motion_set (0x00);
}
     766:	08 95       	ret

00000768 <angle_rotate>:

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     768:	ef 92       	push	r14
     76a:	ff 92       	push	r15
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     770:	a0 e0       	ldi	r26, 0x00	; 0
     772:	b0 e0       	ldi	r27, 0x00	; 0
     774:	bc 01       	movw	r22, r24
     776:	cd 01       	movw	r24, r26
     778:	0e 94 cb 13 	call	0x2796	; 0x2796 <__floatunsisf>
     77c:	28 e4       	ldi	r18, 0x48	; 72
     77e:	31 ee       	ldi	r19, 0xE1	; 225
     780:	42 e8       	ldi	r20, 0x82	; 130
     782:	50 e4       	ldi	r21, 0x40	; 64
     784:	0e 94 9b 12 	call	0x2536	; 0x2536 <__divsf3>
     788:	0e 94 c5 10 	call	0x218a	; 0x218a <__fixunssfsi>
     78c:	7b 01       	movw	r14, r22
     78e:	00 e0       	ldi	r16, 0x00	; 0
     790:	10 e0       	ldi	r17, 0x00	; 0
	ShaftCountRight = 0;
     792:	10 92 74 05 	sts	0x0574, r1
     796:	10 92 75 05 	sts	0x0575, r1
     79a:	10 92 76 05 	sts	0x0576, r1
     79e:	10 92 77 05 	sts	0x0577, r1
	ShaftCountLeft = 0;
     7a2:	10 92 70 05 	sts	0x0570, r1
     7a6:	10 92 71 05 	sts	0x0571, r1
     7aa:	10 92 72 05 	sts	0x0572, r1
     7ae:	10 92 73 05 	sts	0x0573, r1

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     7b2:	80 91 74 05 	lds	r24, 0x0574
     7b6:	90 91 75 05 	lds	r25, 0x0575
     7ba:	a0 91 76 05 	lds	r26, 0x0576
     7be:	b0 91 77 05 	lds	r27, 0x0577
     7c2:	20 91 70 05 	lds	r18, 0x0570
     7c6:	30 91 71 05 	lds	r19, 0x0571
     7ca:	40 91 72 05 	lds	r20, 0x0572
     7ce:	50 91 73 05 	lds	r21, 0x0573
     7d2:	8e 15       	cp	r24, r14
     7d4:	9f 05       	cpc	r25, r15
     7d6:	a0 07       	cpc	r26, r16
     7d8:	b1 07       	cpc	r27, r17
     7da:	28 f4       	brcc	.+10     	; 0x7e6 <angle_rotate+0x7e>
     7dc:	2e 15       	cp	r18, r14
     7de:	3f 05       	cpc	r19, r15
     7e0:	40 07       	cpc	r20, r16
     7e2:	51 07       	cpc	r21, r17
     7e4:	30 f3       	brcs	.-52     	; 0x7b2 <angle_rotate+0x4a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     7e6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     7e8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     7ea:	82 b9       	out	0x02, r24	; 2
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
		break;
	}
	stop(); //Stop robot
}
     7ec:	1f 91       	pop	r17
     7ee:	0f 91       	pop	r16
     7f0:	ff 90       	pop	r15
     7f2:	ef 90       	pop	r14
     7f4:	08 95       	ret

000007f6 <left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     7f6:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     7f8:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     7fa:	25 60       	ori	r18, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     7fc:	22 b9       	out	0x02, r18	; 2

void left_degrees(unsigned int Degrees)
{
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
	angle_rotate(Degrees);
     7fe:	0e 94 b4 03 	call	0x768	; 0x768 <angle_rotate>
}
     802:	08 95       	ret

00000804 <right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     804:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     806:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     808:	2a 60       	ori	r18, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     80a:	22 b9       	out	0x02, r18	; 2

void right_degrees(unsigned int Degrees)
{
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
	angle_rotate(Degrees);
     80c:	0e 94 b4 03 	call	0x768	; 0x768 <angle_rotate>
}
     810:	08 95       	ret

00000812 <soft_left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     812:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     814:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     816:	24 60       	ori	r18, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     818:	22 b9       	out	0x02, r18	; 2
void soft_left_degrees(unsigned int Degrees)
{
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left(); //Turn soft left
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     81a:	88 0f       	add	r24, r24
     81c:	99 1f       	adc	r25, r25
     81e:	0e 94 b4 03 	call	0x768	; 0x768 <angle_rotate>
}
     822:	08 95       	ret

00000824 <soft_right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     824:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     826:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     828:	22 60       	ori	r18, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     82a:	22 b9       	out	0x02, r18	; 2
void soft_right_degrees(unsigned int Degrees)
{
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right();  //Turn soft right
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     82c:	88 0f       	add	r24, r24
     82e:	99 1f       	adc	r25, r25
     830:	0e 94 b4 03 	call	0x768	; 0x768 <angle_rotate>
}
     834:	08 95       	ret

00000836 <soft_left_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     836:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     838:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     83a:	21 60       	ori	r18, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     83c:	22 b9       	out	0x02, r18	; 2
void soft_left_2_degrees(unsigned int Degrees)
{
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left_2(); //Turn reverse soft left
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     83e:	88 0f       	add	r24, r24
     840:	99 1f       	adc	r25, r25
     842:	0e 94 b4 03 	call	0x768	; 0x768 <angle_rotate>
}
     846:	08 95       	ret

00000848 <soft_right_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     848:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     84a:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     84c:	28 60       	ori	r18, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     84e:	22 b9       	out	0x02, r18	; 2
void soft_right_2_degrees(unsigned int Degrees)
{
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right_2();  //Turn reverse soft right
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     850:	88 0f       	add	r24, r24
     852:	99 1f       	adc	r25, r25
     854:	0e 94 b4 03 	call	0x768	; 0x768 <angle_rotate>
}
     858:	08 95       	ret

0000085a <init_devices>:

void init_devices (void)
{
 	cli(); //Clears the global interrupts
     85a:	f8 94       	cli
	port_init();
     85c:	0e 94 96 02 	call	0x52c	; 0x52c <port_init>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void adc_init()
{
	ADCSRA = 0x00;
     860:	ea e7       	ldi	r30, 0x7A	; 122
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     866:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     86a:	80 e2       	ldi	r24, 0x20	; 32
     86c:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     870:	80 e8       	ldi	r24, 0x80	; 128
     872:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     874:	86 e8       	ldi	r24, 0x86	; 134
     876:	80 83       	st	Z, r24
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     878:	e1 e2       	ldi	r30, 0x21	; 33
     87a:	f1 e0       	ldi	r31, 0x01	; 1
     87c:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     87e:	9f ef       	ldi	r25, 0xFF	; 255
     880:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     88a:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     88e:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     892:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     896:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     89a:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     89e:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     8a2:	89 ea       	ldi	r24, 0xA9	; 169
     8a4:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     8a8:	8b e0       	ldi	r24, 0x0B	; 11
     8aa:	80 83       	st	Z, r24
	right_encoder_pin_config(); //right encoder pin config
}

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
     8ac:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     8ae:	ea e6       	ldi	r30, 0x6A	; 106
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	80 81       	ld	r24, Z
     8b4:	82 60       	ori	r24, 0x02	; 2
     8b6:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     8b8:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
     8ba:	78 94       	sei
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
     8bc:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     8be:	ea e6       	ldi	r30, 0x6A	; 106
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	80 81       	ld	r24, Z
     8c4:	88 60       	ori	r24, 0x08	; 8
     8c6:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     8c8:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
     8ca:	78 94       	sei
	port_init();
	adc_init();
	timer5_init();
	left_position_encoder_interrupt_init();
	right_position_encoder_interrupt_init();
	sei();   //Enables the global interrupts
     8cc:	78 94       	sei
}
     8ce:	08 95       	ret

000008d0 <move>:
	*Example Call: move();
*/

void move()
{
	senser_value_L = ADC_Conversion(3);	//Getting data of Left WL Sensor
     8d0:	83 e0       	ldi	r24, 0x03	; 3
     8d2:	0e 94 60 03 	call	0x6c0	; 0x6c0 <ADC_Conversion>
     8d6:	80 93 29 0b 	sts	0x0B29, r24
     8da:	10 92 2a 0b 	sts	0x0B2A, r1
	senser_value_C = ADC_Conversion(2);	//Getting data of Center WL Sensor
     8de:	82 e0       	ldi	r24, 0x02	; 2
     8e0:	0e 94 60 03 	call	0x6c0	; 0x6c0 <ADC_Conversion>
     8e4:	80 93 6e 0a 	sts	0x0A6E, r24
     8e8:	10 92 6f 0a 	sts	0x0A6F, r1
	senser_value_R = ADC_Conversion(1);	//Getting data of Right WL Sensor
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	0e 94 60 03 	call	0x6c0	; 0x6c0 <ADC_Conversion>
     8f2:	28 2f       	mov	r18, r24
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	30 93 35 0b 	sts	0x0B35, r19
     8fa:	20 93 34 0b 	sts	0x0B34, r18

	// If black line is at left sensor and center sensor is not decting a black line
	// Speed up right motor a bit to get a left turn
	// Further set the flag to be equal to '1' suggesting that bot has taken left turn this time
	if ((senser_value_L > Threshold) && (senser_value_C < Threshold))
     8fe:	40 91 29 0b 	lds	r20, 0x0B29
     902:	50 91 2a 0b 	lds	r21, 0x0B2A
     906:	49 32       	cpi	r20, 0x29	; 41
     908:	51 05       	cpc	r21, r1
     90a:	f4 f0       	brlt	.+60     	; 0x948 <move+0x78>
     90c:	80 91 6e 0a 	lds	r24, 0x0A6E
     910:	90 91 6f 0a 	lds	r25, 0x0A6F
     914:	88 97       	sbiw	r24, 0x28	; 40
     916:	c4 f4       	brge	.+48     	; 0x948 <move+0x78>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     918:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     91a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     91c:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     91e:	82 b9       	out	0x02, r24	; 2
	// Speed up right motor a bit to get a left turn
	// Further set the flag to be equal to '1' suggesting that bot has taken left turn this time
	if ((senser_value_L > Threshold) && (senser_value_C < Threshold))
	{
		forward();
		left_motor = 125;
     920:	8d e7       	ldi	r24, 0x7D	; 125
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	90 93 7f 05 	sts	0x057F, r25
     928:	80 93 7e 05 	sts	0x057E, r24
		right_motor = 250;
     92c:	8a ef       	ldi	r24, 0xFA	; 250
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	90 93 81 05 	sts	0x0581, r25
     934:	80 93 80 05 	sts	0x0580, r24
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     938:	8d e7       	ldi	r24, 0x7D	; 125
     93a:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     93e:	8a ef       	ldi	r24, 0xFA	; 250
     940:	80 93 2a 01 	sts	0x012A, r24
	{
		forward();
		left_motor = 125;
		right_motor = 250;
		velocity(left_motor,right_motor);
		flag = 1;
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	20 c0       	rjmp	.+64     	; 0x988 <move+0xb8>
	}
	// If black line is at right sensor and center sensor is not decting a black line
	// Speed up left motor a bit to get a right turn
	// Further set the flag to be equal to '2' suggesting that bot has taken right turn this time
	else if ((senser_value_R > Threshold) && (senser_value_C < Threshold))
     948:	29 32       	cpi	r18, 0x29	; 41
     94a:	31 05       	cpc	r19, r1
     94c:	04 f1       	brlt	.+64     	; 0x98e <move+0xbe>
     94e:	80 91 6e 0a 	lds	r24, 0x0A6E
     952:	90 91 6f 0a 	lds	r25, 0x0A6F
     956:	88 97       	sbiw	r24, 0x28	; 40
     958:	d4 f4       	brge	.+52     	; 0x98e <move+0xbe>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     95a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     95c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     95e:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     960:	82 b9       	out	0x02, r24	; 2
	// Speed up left motor a bit to get a right turn
	// Further set the flag to be equal to '2' suggesting that bot has taken right turn this time
	else if ((senser_value_R > Threshold) && (senser_value_C < Threshold))
	{
		forward();
		left_motor = 250;
     962:	8a ef       	ldi	r24, 0xFA	; 250
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	90 93 7f 05 	sts	0x057F, r25
     96a:	80 93 7e 05 	sts	0x057E, r24
		right_motor = 125;
     96e:	8d e7       	ldi	r24, 0x7D	; 125
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	90 93 81 05 	sts	0x0581, r25
     976:	80 93 80 05 	sts	0x0580, r24
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     97a:	8a ef       	ldi	r24, 0xFA	; 250
     97c:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     980:	8d e7       	ldi	r24, 0x7D	; 125
     982:	80 93 2a 01 	sts	0x012A, r24
	{
		forward();
		left_motor = 250;
		right_motor = 125;
		velocity(left_motor,right_motor);
		flag = 2;
     986:	82 e0       	ldi	r24, 0x02	; 2
     988:	80 93 78 05 	sts	0x0578, r24
     98c:	08 95       	ret
	}
	// If black line is at center sensor and left & right sensors are not decting a black line
	// Speed up both motors equally to get a straight movement
	else if ((senser_value_C > Threshold) && (senser_value_L < Threshold) && (senser_value_R < Threshold))
     98e:	80 91 6e 0a 	lds	r24, 0x0A6E
     992:	90 91 6f 0a 	lds	r25, 0x0A6F
     996:	89 32       	cpi	r24, 0x29	; 41
     998:	91 05       	cpc	r25, r1
     99a:	c4 f0       	brlt	.+48     	; 0x9cc <move+0xfc>
     99c:	48 32       	cpi	r20, 0x28	; 40
     99e:	51 05       	cpc	r21, r1
     9a0:	ac f4       	brge	.+42     	; 0x9cc <move+0xfc>
     9a2:	28 32       	cpi	r18, 0x28	; 40
     9a4:	31 05       	cpc	r19, r1
     9a6:	dc f5       	brge	.+118    	; 0xa1e <move+0x14e>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9a8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9aa:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9ac:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     9ae:	82 b9       	out	0x02, r24	; 2
	// If black line is at center sensor and left & right sensors are not decting a black line
	// Speed up both motors equally to get a straight movement
	else if ((senser_value_C > Threshold) && (senser_value_L < Threshold) && (senser_value_R < Threshold))
	{
		forward();
		left_motor = 250;
     9b0:	8a ef       	ldi	r24, 0xFA	; 250
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	90 93 7f 05 	sts	0x057F, r25
     9b8:	80 93 7e 05 	sts	0x057E, r24
		right_motor = 250;
     9bc:	90 93 81 05 	sts	0x0581, r25
     9c0:	80 93 80 05 	sts	0x0580, r24
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     9c4:	8a ef       	ldi	r24, 0xFA	; 250
     9c6:	80 93 28 01 	sts	0x0128, r24
     9ca:	20 c0       	rjmp	.+64     	; 0xa0c <move+0x13c>
		right_motor = 250;
		velocity(left_motor, right_motor);
	}
	// If black line is nowhere to be found
	// Speed up right or left motor according to the flag set
	else if ((senser_value_R < Threshold) && (senser_value_C < Threshold) && (senser_value_L < Threshold))
     9cc:	28 32       	cpi	r18, 0x28	; 40
     9ce:	31 05       	cpc	r19, r1
     9d0:	34 f5       	brge	.+76     	; 0xa1e <move+0x14e>
     9d2:	88 97       	sbiw	r24, 0x28	; 40
     9d4:	24 f5       	brge	.+72     	; 0xa1e <move+0x14e>
     9d6:	48 32       	cpi	r20, 0x28	; 40
     9d8:	51 05       	cpc	r21, r1
     9da:	0c f5       	brge	.+66     	; 0xa1e <move+0x14e>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9dc:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9de:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9e0:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     9e2:	82 b9       	out	0x02, r24	; 2
	// If black line is nowhere to be found
	// Speed up right or left motor according to the flag set
	else if ((senser_value_R < Threshold) && (senser_value_C < Threshold) && (senser_value_L < Threshold))
	{
		forward();
		left_motor = 100;
     9e4:	84 e6       	ldi	r24, 0x64	; 100
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	90 93 7f 05 	sts	0x057F, r25
     9ec:	80 93 7e 05 	sts	0x057E, r24
		right_motor = 250;
     9f0:	8a ef       	ldi	r24, 0xFA	; 250
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	90 93 81 05 	sts	0x0581, r25
     9f8:	80 93 80 05 	sts	0x0580, r24
		if (flag == 1) {
     9fc:	80 91 78 05 	lds	r24, 0x0578
     a00:	81 30       	cpi	r24, 0x01	; 1
     a02:	39 f4       	brne	.+14     	; 0xa12 <move+0x142>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     a04:	84 e6       	ldi	r24, 0x64	; 100
     a06:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     a0a:	8a ef       	ldi	r24, 0xFA	; 250
     a0c:	80 93 2a 01 	sts	0x012A, r24
     a10:	08 95       	ret
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     a12:	8a ef       	ldi	r24, 0xFA	; 250
     a14:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     a18:	84 e6       	ldi	r24, 0x64	; 100
     a1a:	80 93 2a 01 	sts	0x012A, r24
     a1e:	08 95       	ret

00000a20 <linear_distance_mm>:
}

//Function used for moving robot forward by specified distance

void linear_distance_mm(unsigned int DistanceInMM)
{
     a20:	ef 92       	push	r14
     a22:	ff 92       	push	r15
     a24:	0f 93       	push	r16
     a26:	1f 93       	push	r17
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     a28:	a0 e0       	ldi	r26, 0x00	; 0
     a2a:	b0 e0       	ldi	r27, 0x00	; 0
     a2c:	bc 01       	movw	r22, r24
     a2e:	cd 01       	movw	r24, r26
     a30:	0e 94 cb 13 	call	0x2796	; 0x2796 <__floatunsisf>
     a34:	25 ee       	ldi	r18, 0xE5	; 229
     a36:	30 ed       	ldi	r19, 0xD0	; 208
     a38:	4a ea       	ldi	r20, 0xAA	; 170
     a3a:	50 e4       	ldi	r21, 0x40	; 64
     a3c:	0e 94 9b 12 	call	0x2536	; 0x2536 <__divsf3>
     a40:	0e 94 c5 10 	call	0x218a	; 0x218a <__fixunssfsi>
     a44:	7b 01       	movw	r14, r22
     a46:	8c 01       	movw	r16, r24
	
	ShaftCountRight = 0;
     a48:	10 92 74 05 	sts	0x0574, r1
     a4c:	10 92 75 05 	sts	0x0575, r1
     a50:	10 92 76 05 	sts	0x0576, r1
     a54:	10 92 77 05 	sts	0x0577, r1
	while(1)
	{
		move();
     a58:	0e 94 68 04 	call	0x8d0	; 0x8d0 <move>
		if(ShaftCountRight > ReqdShaftCountInt)
     a5c:	80 91 74 05 	lds	r24, 0x0574
     a60:	90 91 75 05 	lds	r25, 0x0575
     a64:	a0 91 76 05 	lds	r26, 0x0576
     a68:	b0 91 77 05 	lds	r27, 0x0577
     a6c:	e8 16       	cp	r14, r24
     a6e:	f9 06       	cpc	r15, r25
     a70:	0a 07       	cpc	r16, r26
     a72:	1b 07       	cpc	r17, r27
     a74:	88 f7       	brcc	.-30     	; 0xa58 <linear_distance_mm+0x38>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a76:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a78:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     a7a:	82 b9       	out	0x02, r24	; 2
		{
			break;
		}
	}
	stop(); //Stop robot
}
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	08 95       	ret

00000a86 <back_mm>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a86:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a88:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a8a:	29 60       	ori	r18, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     a8c:	22 b9       	out	0x02, r18	; 2
}

void back_mm(unsigned int DistanceInMM)
{
	back();
	linear_distance_mm(DistanceInMM);
     a8e:	0e 94 10 05 	call	0xa20	; 0xa20 <linear_distance_mm>
}
     a92:	08 95       	ret

00000a94 <forward_mm>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a94:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a96:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a98:	26 60       	ori	r18, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     a9a:	22 b9       	out	0x02, r18	; 2
}

void forward_mm(unsigned int DistanceInMM)
{
	forward();
	linear_distance_mm(DistanceInMM);
     a9c:	0e 94 10 05 	call	0xa20	; 0xa20 <linear_distance_mm>
}
     aa0:	08 95       	ret

00000aa2 <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     aa2:	86 e6       	ldi	r24, 0x66	; 102
     aa4:	9e e0       	ldi	r25, 0x0E	; 14
     aa6:	fc 01       	movw	r30, r24
     aa8:	31 97       	sbiw	r30, 0x01	; 1
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <lcd_set_4bit+0x6>
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     aac:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     aae:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     ab0:	40 e3       	ldi	r20, 0x30	; 48
     ab2:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     ab4:	42 9a       	sbi	0x08, 2	; 8
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	38 e4       	ldi	r19, 0x48	; 72
     aba:	f9 01       	movw	r30, r18
     abc:	31 97       	sbiw	r30, 0x01	; 1
     abe:	f1 f7       	brne	.-4      	; 0xabc <lcd_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     ac0:	42 98       	cbi	0x08, 2	; 8
     ac2:	fc 01       	movw	r30, r24
     ac4:	31 97       	sbiw	r30, 0x01	; 1
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     ac8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     aca:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     acc:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     ace:	42 9a       	sbi	0x08, 2	; 8
     ad0:	f9 01       	movw	r30, r18
     ad2:	31 97       	sbiw	r30, 0x01	; 1
     ad4:	f1 f7       	brne	.-4      	; 0xad2 <lcd_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     ad6:	42 98       	cbi	0x08, 2	; 8
     ad8:	fc 01       	movw	r30, r24
     ada:	31 97       	sbiw	r30, 0x01	; 1
     adc:	f1 f7       	brne	.-4      	; 0xada <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     ade:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     ae0:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     ae2:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     ae4:	42 9a       	sbi	0x08, 2	; 8
     ae6:	f9 01       	movw	r30, r18
     ae8:	31 97       	sbiw	r30, 0x01	; 1
     aea:	f1 f7       	brne	.-4      	; 0xae8 <lcd_set_4bit+0x46>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     aec:	42 98       	cbi	0x08, 2	; 8
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	f1 f7       	brne	.-4      	; 0xaee <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     af2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     af4:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     af6:	80 e2       	ldi	r24, 0x20	; 32
     af8:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     afa:	42 9a       	sbi	0x08, 2	; 8
     afc:	c9 01       	movw	r24, r18
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	f1 f7       	brne	.-4      	; 0xafe <lcd_set_4bit+0x5c>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b02:	42 98       	cbi	0x08, 2	; 8

	
}
     b04:	08 95       	ret

00000b06 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     b06:	98 b1       	in	r25, 0x08	; 8
     b08:	9f 70       	andi	r25, 0x0F	; 15
     b0a:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     b0c:	28 b1       	in	r18, 0x08	; 8
     b0e:	98 2f       	mov	r25, r24
     b10:	90 7f       	andi	r25, 0xF0	; 240
     b12:	92 2b       	or	r25, r18
     b14:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     b16:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     b18:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     b1a:	42 9a       	sbi	0x08, 2	; 8
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	38 e4       	ldi	r19, 0x48	; 72
     b20:	f9 01       	movw	r30, r18
     b22:	31 97       	sbiw	r30, 0x01	; 1
     b24:	f1 f7       	brne	.-4      	; 0xb22 <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     b26:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     b28:	98 b1       	in	r25, 0x08	; 8
     b2a:	9f 70       	andi	r25, 0x0F	; 15
     b2c:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     b2e:	98 b1       	in	r25, 0x08	; 8
     b30:	82 95       	swap	r24
     b32:	80 7f       	andi	r24, 0xF0	; 240
     b34:	98 2b       	or	r25, r24
     b36:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     b38:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     b3a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     b3c:	42 9a       	sbi	0x08, 2	; 8
     b3e:	c9 01       	movw	r24, r18
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	f1 f7       	brne	.-4      	; 0xb40 <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     b44:	42 98       	cbi	0x08, 2	; 8
}
     b46:	08 95       	ret

00000b48 <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     b48:	0e 94 51 05 	call	0xaa2	; 0xaa2 <lcd_set_4bit>
     b4c:	86 e6       	ldi	r24, 0x66	; 102
     b4e:	9e e0       	ldi	r25, 0x0E	; 14
     b50:	01 97       	sbiw	r24, 0x01	; 1
     b52:	f1 f7       	brne	.-4      	; 0xb50 <lcd_init+0x8>
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     b54:	88 e2       	ldi	r24, 0x28	; 40
     b56:	0e 94 83 05 	call	0xb06	; 0xb06 <lcd_wr_command>
	lcd_wr_command(0x01);
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	0e 94 83 05 	call	0xb06	; 0xb06 <lcd_wr_command>
	lcd_wr_command(0x06);
     b60:	86 e0       	ldi	r24, 0x06	; 6
     b62:	0e 94 83 05 	call	0xb06	; 0xb06 <lcd_wr_command>
	lcd_wr_command(0x0E);
     b66:	8e e0       	ldi	r24, 0x0E	; 14
     b68:	0e 94 83 05 	call	0xb06	; 0xb06 <lcd_wr_command>
	lcd_wr_command(0x80);
     b6c:	80 e8       	ldi	r24, 0x80	; 128
     b6e:	0e 94 83 05 	call	0xb06	; 0xb06 <lcd_wr_command>
		
}
     b72:	08 95       	ret

00000b74 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     b74:	98 b1       	in	r25, 0x08	; 8
     b76:	9f 70       	andi	r25, 0x0F	; 15
     b78:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     b7a:	28 b1       	in	r18, 0x08	; 8
     b7c:	98 2f       	mov	r25, r24
     b7e:	90 7f       	andi	r25, 0xF0	; 240
     b80:	92 2b       	or	r25, r18
     b82:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     b84:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     b86:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     b88:	42 9a       	sbi	0x08, 2	; 8
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	38 e4       	ldi	r19, 0x48	; 72
     b8e:	f9 01       	movw	r30, r18
     b90:	31 97       	sbiw	r30, 0x01	; 1
     b92:	f1 f7       	brne	.-4      	; 0xb90 <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     b94:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     b96:	98 b1       	in	r25, 0x08	; 8
     b98:	9f 70       	andi	r25, 0x0F	; 15
     b9a:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     b9c:	98 b1       	in	r25, 0x08	; 8
     b9e:	82 95       	swap	r24
     ba0:	80 7f       	andi	r24, 0xF0	; 240
     ba2:	98 2b       	or	r25, r24
     ba4:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     ba6:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     ba8:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     baa:	42 9a       	sbi	0x08, 2	; 8
     bac:	c9 01       	movw	r24, r18
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	f1 f7       	brne	.-4      	; 0xbae <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     bb2:	42 98       	cbi	0x08, 2	; 8
}
     bb4:	08 95       	ret

00000bb6 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     bb6:	80 e8       	ldi	r24, 0x80	; 128
     bb8:	0e 94 83 05 	call	0xb06	; 0xb06 <lcd_wr_command>
}
     bbc:	08 95       	ret

00000bbe <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	ec 01       	movw	r28, r24
     bc4:	03 c0       	rjmp	.+6      	; 0xbcc <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     bc6:	0e 94 ba 05 	call	0xb74	; 0xb74 <lcd_wr_char>
		str++;
     bca:	21 96       	adiw	r28, 0x01	; 1


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     bcc:	88 81       	ld	r24, Y
     bce:	88 23       	and	r24, r24
     bd0:	d1 f7       	brne	.-12     	; 0xbc6 <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     bd8:	82 30       	cpi	r24, 0x02	; 2
     bda:	69 f0       	breq	.+26     	; 0xbf6 <lcd_cursor+0x1e>
     bdc:	83 30       	cpi	r24, 0x03	; 3
     bde:	18 f4       	brcc	.+6      	; 0xbe6 <lcd_cursor+0xe>
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	a9 f4       	brne	.+42     	; 0xc0e <lcd_cursor+0x36>
     be4:	05 c0       	rjmp	.+10     	; 0xbf0 <lcd_cursor+0x18>
     be6:	83 30       	cpi	r24, 0x03	; 3
     be8:	49 f0       	breq	.+18     	; 0xbfc <lcd_cursor+0x24>
     bea:	84 30       	cpi	r24, 0x04	; 4
     bec:	81 f4       	brne	.+32     	; 0xc0e <lcd_cursor+0x36>
     bee:	0b c0       	rjmp	.+22     	; 0xc06 <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     bf0:	86 2f       	mov	r24, r22
     bf2:	81 58       	subi	r24, 0x81	; 129
     bf4:	05 c0       	rjmp	.+10     	; 0xc00 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     bf6:	86 2f       	mov	r24, r22
     bf8:	81 54       	subi	r24, 0x41	; 65
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     bfc:	86 2f       	mov	r24, r22
     bfe:	8d 56       	subi	r24, 0x6D	; 109
     c00:	0e 94 83 05 	call	0xb06	; 0xb06 <lcd_wr_command>
     c04:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     c06:	86 2f       	mov	r24, r22
     c08:	8d 52       	subi	r24, 0x2D	; 45
     c0a:	0e 94 83 05 	call	0xb06	; 0xb06 <lcd_wr_command>
     c0e:	08 95       	ret

00000c10 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     c10:	0f 93       	push	r16
     c12:	1f 93       	push	r17
     c14:	cf 93       	push	r28
     c16:	df 93       	push	r29
     c18:	8a 01       	movw	r16, r20
     c1a:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     c1c:	88 23       	and	r24, r24
     c1e:	11 f0       	breq	.+4      	; 0xc24 <lcd_print+0x14>
     c20:	66 23       	and	r22, r22
     c22:	19 f4       	brne	.+6      	; 0xc2a <lcd_print+0x1a>
	{
		lcd_home();
     c24:	0e 94 db 05 	call	0xbb6	; 0xbb6 <lcd_home>
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     c2a:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     c2e:	c5 30       	cpi	r28, 0x05	; 5
     c30:	d1 05       	cpc	r29, r1
     c32:	71 f4       	brne	.+28     	; 0xc50 <lcd_print+0x40>
	{
		million=value/10000+48;
     c34:	c8 01       	movw	r24, r16
     c36:	60 e1       	ldi	r22, 0x10	; 16
     c38:	77 e2       	ldi	r23, 0x27	; 39
     c3a:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__udivmodhi4>
     c3e:	cb 01       	movw	r24, r22
     c40:	c0 96       	adiw	r24, 0x30	; 48
     c42:	90 93 fb 0a 	sts	0x0AFB, r25
     c46:	80 93 fa 0a 	sts	0x0AFA, r24
		lcd_wr_char(million);
     c4a:	0e 94 ba 05 	call	0xb74	; 0xb74 <lcd_wr_char>
     c4e:	05 c0       	rjmp	.+10     	; 0xc5a <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     c50:	c4 30       	cpi	r28, 0x04	; 4
     c52:	d1 05       	cpc	r29, r1
     c54:	11 f0       	breq	.+4      	; 0xc5a <lcd_print+0x4a>
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	16 c0       	rjmp	.+44     	; 0xc86 <lcd_print+0x76>
	{
		temp = value/1000;
     c5a:	c8 01       	movw	r24, r16
     c5c:	68 ee       	ldi	r22, 0xE8	; 232
     c5e:	73 e0       	ldi	r23, 0x03	; 3
     c60:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__udivmodhi4>
     c64:	cb 01       	movw	r24, r22
     c66:	60 93 24 0b 	sts	0x0B24, r22
     c6a:	90 93 25 0b 	sts	0x0B25, r25
		thousand = temp%10 + 48;
     c6e:	6a e0       	ldi	r22, 0x0A	; 10
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__udivmodhi4>
     c76:	c0 96       	adiw	r24, 0x30	; 48
     c78:	90 93 3b 0b 	sts	0x0B3B, r25
     c7c:	80 93 3a 0b 	sts	0x0B3A, r24
		lcd_wr_char(thousand);
     c80:	0e 94 ba 05 	call	0xb74	; 0xb74 <lcd_wr_char>
     c84:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     c86:	c3 30       	cpi	r28, 0x03	; 3
     c88:	d1 05       	cpc	r29, r1
     c8a:	21 f0       	breq	.+8      	; 0xc94 <lcd_print+0x84>
     c8c:	81 30       	cpi	r24, 0x01	; 1
     c8e:	11 f0       	breq	.+4      	; 0xc94 <lcd_print+0x84>
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	16 c0       	rjmp	.+44     	; 0xcc0 <lcd_print+0xb0>
	{
		temp = value/100;
     c94:	c8 01       	movw	r24, r16
     c96:	64 e6       	ldi	r22, 0x64	; 100
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__udivmodhi4>
     c9e:	cb 01       	movw	r24, r22
     ca0:	60 93 24 0b 	sts	0x0B24, r22
     ca4:	90 93 25 0b 	sts	0x0B25, r25
		hundred = temp%10 + 48;
     ca8:	6a e0       	ldi	r22, 0x0A	; 10
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__udivmodhi4>
     cb0:	c0 96       	adiw	r24, 0x30	; 48
     cb2:	90 93 33 0b 	sts	0x0B33, r25
     cb6:	80 93 32 0b 	sts	0x0B32, r24
		lcd_wr_char(hundred);
     cba:	0e 94 ba 05 	call	0xb74	; 0xb74 <lcd_wr_char>
     cbe:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     cc0:	c2 30       	cpi	r28, 0x02	; 2
     cc2:	d1 05       	cpc	r29, r1
     cc4:	21 f0       	breq	.+8      	; 0xcce <lcd_print+0xbe>
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	11 f0       	breq	.+4      	; 0xcce <lcd_print+0xbe>
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	16 c0       	rjmp	.+44     	; 0xcfa <lcd_print+0xea>
	{
		temp = value/10;
     cce:	c8 01       	movw	r24, r16
     cd0:	6a e0       	ldi	r22, 0x0A	; 10
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__udivmodhi4>
     cd8:	cb 01       	movw	r24, r22
     cda:	60 93 24 0b 	sts	0x0B24, r22
     cde:	90 93 25 0b 	sts	0x0B25, r25
		tens = temp%10 + 48;
     ce2:	6a e0       	ldi	r22, 0x0A	; 10
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__udivmodhi4>
     cea:	c0 96       	adiw	r24, 0x30	; 48
     cec:	90 93 28 0b 	sts	0x0B28, r25
     cf0:	80 93 27 0b 	sts	0x0B27, r24
		lcd_wr_char(tens);
     cf4:	0e 94 ba 05 	call	0xb74	; 0xb74 <lcd_wr_char>
     cf8:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     cfa:	c1 30       	cpi	r28, 0x01	; 1
     cfc:	d1 05       	cpc	r29, r1
     cfe:	11 f0       	breq	.+4      	; 0xd04 <lcd_print+0xf4>
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	61 f4       	brne	.+24     	; 0xd1c <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     d04:	c8 01       	movw	r24, r16
     d06:	6a e0       	ldi	r22, 0x0A	; 10
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__udivmodhi4>
     d0e:	c0 96       	adiw	r24, 0x30	; 48
     d10:	90 93 39 0b 	sts	0x0B39, r25
     d14:	80 93 38 0b 	sts	0x0B38, r24
		lcd_wr_char(unit);
     d18:	0e 94 ba 05 	call	0xb74	; 0xb74 <lcd_wr_char>
	}
	if(digits>5)
     d1c:	26 97       	sbiw	r28, 0x06	; 6
     d1e:	1c f0       	brlt	.+6      	; 0xd26 <lcd_print+0x116>
	{
		lcd_wr_char('E');
     d20:	85 e4       	ldi	r24, 0x45	; 69
     d22:	0e 94 ba 05 	call	0xb74	; 0xb74 <lcd_wr_char>
	}
	
}
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	08 95       	ret

00000d30 <print_sensor>:
	return a;
}

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	18 2f       	mov	r17, r24
     d36:	06 2f       	mov	r16, r22
     d38:	84 2f       	mov	r24, r20
	
	ADC_Value = ADC_Conversion(channel);
     d3a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <ADC_Conversion>
     d3e:	48 2f       	mov	r20, r24
     d40:	80 93 26 0b 	sts	0x0B26, r24
	lcd_print(row, coloumn, ADC_Value, 3);
     d44:	81 2f       	mov	r24, r17
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	60 2f       	mov	r22, r16
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	50 e0       	ldi	r21, 0x00	; 0
     d4e:	23 e0       	ldi	r18, 0x03	; 3
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	0e 94 08 06 	call	0xc10	; 0xc10 <lcd_print>

	return ADC_Value;
}
     d56:	1f 91       	pop	r17
     d58:	0f 91       	pop	r16
     d5a:	08 95       	ret

00000d5c <servo3_pin_config>:
	**********************************END**************************************
*/

void servo3_pin_config (void)
{
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
     d5c:	27 9a       	sbi	0x04, 7	; 4
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
     d5e:	2f 9a       	sbi	0x05, 7	; 5
}
     d60:	08 95       	ret

00000d62 <buzzer_pin_config>:
	*Example Call: int *cost = BFS(source);
*/

void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     d62:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     d64:	43 98       	cbi	0x08, 3	; 8
}
     d66:	08 95       	ret

00000d68 <lcd_port_config>:
//Function to configure LCD port
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     d68:	87 b1       	in	r24, 0x07	; 7
     d6a:	87 6f       	ori	r24, 0xF7	; 247
     d6c:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     d6e:	88 b1       	in	r24, 0x08	; 8
     d70:	80 78       	andi	r24, 0x80	; 128
     d72:	88 b9       	out	0x08, r24	; 8
}
     d74:	08 95       	ret

00000d76 <port_initial>:
	**********************************END**************************************
*/

void servo3_pin_config (void)
{
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
     d76:	27 9a       	sbi	0x04, 7	; 4
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
     d78:	2f 9a       	sbi	0x05, 7	; 5
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
}
//Function to configure LCD port
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     d7a:	87 b1       	in	r24, 0x07	; 7
     d7c:	87 6f       	ori	r24, 0xF7	; 247
     d7e:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     d80:	88 b1       	in	r24, 0x08	; 8
     d82:	80 78       	andi	r24, 0x80	; 128
     d84:	88 b9       	out	0x08, r24	; 8
*/

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     d86:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     d88:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     d8a:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     d8e:	10 92 08 01 	sts	0x0108, r1
}

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     d92:	81 b1       	in	r24, 0x01	; 1
     d94:	8f 60       	ori	r24, 0x0F	; 15
     d96:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     d98:	82 b1       	in	r24, 0x02	; 2
     d9a:	80 7f       	andi	r24, 0xF0	; 240
     d9c:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     d9e:	ea e0       	ldi	r30, 0x0A	; 10
     da0:	f1 e0       	ldi	r31, 0x01	; 1
     da2:	80 81       	ld	r24, Z
     da4:	88 61       	ori	r24, 0x18	; 24
     da6:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     da8:	eb e0       	ldi	r30, 0x0B	; 11
     daa:	f1 e0       	ldi	r31, 0x01	; 1
     dac:	80 81       	ld	r24, Z
     dae:	88 61       	ori	r24, 0x18	; 24
     db0:	80 83       	st	Z, r24
	*Example Call: int *cost = BFS(source);
*/

void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     db2:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     db4:	43 98       	cbi	0x08, 3	; 8
}

void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     db6:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     db8:	74 9a       	sbi	0x0e, 4	; 14
}

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     dba:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     dbc:	75 9a       	sbi	0x0e, 5	; 14
	adc_pin_config();
	motion_pin_config();	
	buzzer_pin_config();
	left_encoder_pin_config(); //left encoder pin config
	right_encoder_pin_config(); //right encoder pin config
}
     dbe:	08 95       	ret

00000dc0 <uart0_init>:
// actual baud rate:9600 (error 0.0%)
// char arr_size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
     dc0:	e1 ec       	ldi	r30, 0xC1	; 193
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	10 82       	st	Z, r1
 UCSR0A = 0x00;
     dc6:	10 92 c0 00 	sts	0x00C0, r1
 UCSR0C = 0x06;
     dca:	86 e0       	ldi	r24, 0x06	; 6
     dcc:	80 93 c2 00 	sts	0x00C2, r24
 UBRR0L = 0x5F; //set baud rate lo
     dd0:	8f e5       	ldi	r24, 0x5F	; 95
     dd2:	80 93 c4 00 	sts	0x00C4, r24
 UBRR0H = 0x00; //set baud rate hi
     dd6:	10 92 c5 00 	sts	0x00C5, r1
 UCSR0B = 0x98;
     dda:	88 e9       	ldi	r24, 0x98	; 152
     ddc:	80 83       	st	Z, r24
}
     dde:	08 95       	ret

00000de0 <uart2_init>:
// actual baud rate:9600 (error 0.0%)
// char arr_size: 8 bit
// parity: Disabled
void uart2_init(void)
{
 UCSR2B = 0x00; //disable while setting baud rate
     de0:	e1 ed       	ldi	r30, 0xD1	; 209
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	10 82       	st	Z, r1
 UCSR2A = 0x00;
     de6:	10 92 d0 00 	sts	0x00D0, r1
 UCSR2C = 0x06;
     dea:	86 e0       	ldi	r24, 0x06	; 6
     dec:	80 93 d2 00 	sts	0x00D2, r24
 UBRR2L = 0x5F; //set baud rate lo
     df0:	8f e5       	ldi	r24, 0x5F	; 95
     df2:	80 93 d4 00 	sts	0x00D4, r24
 UBRR2H = 0x00; //set baud rate hi
     df6:	10 92 d5 00 	sts	0x00D5, r1
 UCSR2B = 0x98;
     dfa:	88 e9       	ldi	r24, 0x98	; 152
     dfc:	80 83       	st	Z, r24
}
     dfe:	08 95       	ret

00000e00 <buzzer_on>:

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     e00:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     e02:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     e04:	88 b9       	out	0x08, r24	; 8
}
     e06:	08 95       	ret

00000e08 <buzzer_off>:

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     e08:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
     e0a:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     e0c:	88 b9       	out	0x08, r24	; 8
}
     e0e:	08 95       	ret

00000e10 <servo_3>:

void servo_3(unsigned char degrees)
{
 float PositionServo = 0;
 PositionServo = ((float)degrees / 1.86) + 35.0;
 OCR1CH = 0x00;
     e10:	10 92 8d 00 	sts	0x008D, r1
 OCR1CL = (unsigned char) PositionServo;
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	a0 e0       	ldi	r26, 0x00	; 0
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	bc 01       	movw	r22, r24
     e1c:	cd 01       	movw	r24, r26
     e1e:	0e 94 cb 13 	call	0x2796	; 0x2796 <__floatunsisf>
     e22:	2b e7       	ldi	r18, 0x7B	; 123
     e24:	34 e1       	ldi	r19, 0x14	; 20
     e26:	4e ee       	ldi	r20, 0xEE	; 238
     e28:	5f e3       	ldi	r21, 0x3F	; 63
     e2a:	0e 94 9b 12 	call	0x2536	; 0x2536 <__divsf3>
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	4c e0       	ldi	r20, 0x0C	; 12
     e34:	52 e4       	ldi	r21, 0x42	; 66
     e36:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__addsf3>
     e3a:	0e 94 c5 10 	call	0x218a	; 0x218a <__fixunssfsi>
     e3e:	60 93 8c 00 	sts	0x008C, r22
}
     e42:	08 95       	ret

00000e44 <seperate>:
			the indices that have to be played by the slave have been replaced by 0s.
			In, slave_arr the indices that have to be played by the master has been replaced by 0s.
			This method allows for us to maintain sequence of plays.
	*example-call: seperate();
*/
void seperate() {
     e44:	cf 92       	push	r12
     e46:	df 92       	push	r13
     e48:	ef 92       	push	r14
     e4a:	ff 92       	push	r15
     e4c:	0f 93       	push	r16
     e4e:	1f 93       	push	r17
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
			UDR0 = arr_slave[i];

			sequence_arr[i] = 0;
		}
		else {
			arr_slave[i] = 0;
     e54:	e0 90 30 0b 	lds	r14, 0x0B30
     e58:	f0 90 31 0b 	lds	r15, 0x0B31
			_delay_ms(100);

			UDR0 = arr_slave[i];

			sequence_arr[i] = arr[i];
     e5c:	00 91 2e 0b 	lds	r16, 0x0B2E
     e60:	10 91 2f 0b 	lds	r17, 0x0B2F
     e64:	a0 91 6c 0a 	lds	r26, 0x0A6C
     e68:	b0 91 6d 0a 	lds	r27, 0x0A6D
     e6c:	c0 e0       	ldi	r28, 0x00	; 0
     e6e:	d0 e0       	ldi	r29, 0x00	; 0
     e70:	40 e0       	ldi	r20, 0x00	; 0
     e72:	50 e0       	ldi	r21, 0x00	; 0
     e74:	60 e7       	ldi	r22, 0x70	; 112
     e76:	c6 2e       	mov	r12, r22
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	d6 2e       	mov	r13, r22
     e7c:	3c c0       	rjmp	.+120    	; 0xef6 <seperate+0xb2>
	*example-call: seperate();
*/
void seperate() {
	for (int i = 0; i < arr_size; ++i)
	{
		if ((arr[i] >= 8 && arr[i] <= 18) || (arr[i] >= 28 && arr[i] <= 32))
     e7e:	6c 91       	ld	r22, X
     e80:	11 96       	adiw	r26, 0x01	; 1
     e82:	7c 91       	ld	r23, X
     e84:	11 97       	sbiw	r26, 0x01	; 1
     e86:	9b 01       	movw	r18, r22
     e88:	c9 01       	movw	r24, r18
     e8a:	08 97       	sbiw	r24, 0x08	; 8
     e8c:	0b 97       	sbiw	r24, 0x0b	; 11
     e8e:	28 f0       	brcs	.+10     	; 0xe9a <seperate+0x56>
     e90:	2c 51       	subi	r18, 0x1C	; 28
     e92:	30 40       	sbci	r19, 0x00	; 0
     e94:	25 30       	cpi	r18, 0x05	; 5
     e96:	31 05       	cpc	r19, r1
     e98:	a0 f4       	brcc	.+40     	; 0xec2 <seperate+0x7e>
		{
			arr_slave[i] = arr[i];
     e9a:	f7 01       	movw	r30, r14
     e9c:	e4 0f       	add	r30, r20
     e9e:	f5 1f       	adc	r31, r21
     ea0:	60 83       	st	Z, r22
     ea2:	71 83       	std	Z+1, r23	; 0x01
     ea4:	88 ee       	ldi	r24, 0xE8	; 232
     ea6:	93 e0       	ldi	r25, 0x03	; 3
     ea8:	f6 01       	movw	r30, r12
     eaa:	31 97       	sbiw	r30, 0x01	; 1
     eac:	f1 f7       	brne	.-4      	; 0xeaa <seperate+0x66>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb0:	d9 f7       	brne	.-10     	; 0xea8 <seperate+0x64>
			_delay_ms(100);

			UDR0 = arr_slave[i];
     eb2:	60 93 c6 00 	sts	0x00C6, r22

			sequence_arr[i] = 0;
     eb6:	f8 01       	movw	r30, r16
     eb8:	e4 0f       	add	r30, r20
     eba:	f5 1f       	adc	r31, r21
     ebc:	11 82       	std	Z+1, r1	; 0x01
     ebe:	10 82       	st	Z, r1
     ec0:	16 c0       	rjmp	.+44     	; 0xeee <seperate+0xaa>
		}
		else {
			arr_slave[i] = 0;
     ec2:	f7 01       	movw	r30, r14
     ec4:	e4 0f       	add	r30, r20
     ec6:	f5 1f       	adc	r31, r21
     ec8:	11 82       	std	Z+1, r1	; 0x01
     eca:	10 82       	st	Z, r1
     ecc:	88 ee       	ldi	r24, 0xE8	; 232
     ece:	93 e0       	ldi	r25, 0x03	; 3
     ed0:	f6 01       	movw	r30, r12
     ed2:	31 97       	sbiw	r30, 0x01	; 1
     ed4:	f1 f7       	brne	.-4      	; 0xed2 <seperate+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed8:	d9 f7       	brne	.-10     	; 0xed0 <seperate+0x8c>
			_delay_ms(100);

			UDR0 = arr_slave[i];
     eda:	10 92 c6 00 	sts	0x00C6, r1

			sequence_arr[i] = arr[i];
     ede:	f8 01       	movw	r30, r16
     ee0:	e4 0f       	add	r30, r20
     ee2:	f5 1f       	adc	r31, r21
     ee4:	8d 91       	ld	r24, X+
     ee6:	9c 91       	ld	r25, X
     ee8:	11 97       	sbiw	r26, 0x01	; 1
     eea:	91 83       	std	Z+1, r25	; 0x01
     eec:	80 83       	st	Z, r24
			In, slave_arr the indices that have to be played by the master has been replaced by 0s.
			This method allows for us to maintain sequence of plays.
	*example-call: seperate();
*/
void seperate() {
	for (int i = 0; i < arr_size; ++i)
     eee:	21 96       	adiw	r28, 0x01	; 1
     ef0:	4e 5f       	subi	r20, 0xFE	; 254
     ef2:	5f 4f       	sbci	r21, 0xFF	; 255
     ef4:	12 96       	adiw	r26, 0x02	; 2
     ef6:	80 91 84 05 	lds	r24, 0x0584
     efa:	90 91 85 05 	lds	r25, 0x0585
     efe:	c8 17       	cp	r28, r24
     f00:	d9 07       	cpc	r29, r25
     f02:	0c f4       	brge	.+2      	; 0xf06 <seperate+0xc2>
     f04:	bc cf       	rjmp	.-136    	; 0xe7e <seperate+0x3a>
			UDR0 = arr_slave[i];

			sequence_arr[i] = arr[i];
		}
	}
}
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	1f 91       	pop	r17
     f0c:	0f 91       	pop	r16
     f0e:	ff 90       	pop	r15
     f10:	ef 90       	pop	r14
     f12:	df 90       	pop	r13
     f14:	cf 90       	pop	r12
     f16:	08 95       	ret

00000f18 <remove_zero>:
	*Logic: Removes the zeros from the seqence_arr which were inserted by seperate
	*example-call: remove_zero();
*/
void remove_zero() {
	int i = 0, j = 1;
    arr_master[0] = 1;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	90 93 fd 0a 	sts	0x0AFD, r25
     f20:	80 93 fc 0a 	sts	0x0AFC, r24
	while (i < arr_size)
     f24:	60 91 84 05 	lds	r22, 0x0584
     f28:	70 91 85 05 	lds	r23, 0x0585
     f2c:	a0 91 2e 0b 	lds	r26, 0x0B2E
     f30:	b0 91 2f 0b 	lds	r27, 0x0B2F
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	11 c0       	rjmp	.+34     	; 0xf5c <remove_zero+0x44>
	{
		if(sequence_arr[i]!=0)
     f3a:	4d 91       	ld	r20, X+
     f3c:	5c 91       	ld	r21, X
     f3e:	11 97       	sbiw	r26, 0x01	; 1
     f40:	41 15       	cp	r20, r1
     f42:	51 05       	cpc	r21, r1
     f44:	41 f0       	breq	.+16     	; 0xf56 <remove_zero+0x3e>
		{
			arr_master[j] = sequence_arr[i];
     f46:	fc 01       	movw	r30, r24
     f48:	ee 0f       	add	r30, r30
     f4a:	ff 1f       	adc	r31, r31
     f4c:	e4 50       	subi	r30, 0x04	; 4
     f4e:	f5 4f       	sbci	r31, 0xF5	; 245
     f50:	51 83       	std	Z+1, r21	; 0x01
     f52:	40 83       	st	Z, r20
			j++;
     f54:	01 96       	adiw	r24, 0x01	; 1
		}
		i++;
     f56:	2f 5f       	subi	r18, 0xFF	; 255
     f58:	3f 4f       	sbci	r19, 0xFF	; 255
     f5a:	12 96       	adiw	r26, 0x02	; 2
	*example-call: remove_zero();
*/
void remove_zero() {
	int i = 0, j = 1;
    arr_master[0] = 1;
	while (i < arr_size)
     f5c:	26 17       	cp	r18, r22
     f5e:	37 07       	cpc	r19, r23
     f60:	64 f3       	brlt	.-40     	; 0xf3a <remove_zero+0x22>
			arr_master[j] = sequence_arr[i];
			j++;
		}
		i++;
	}
	master_size = j;
     f62:	90 93 87 05 	sts	0x0587, r25
     f66:	80 93 86 05 	sts	0x0586, r24
}
     f6a:	08 95       	ret

00000f6c <strike>:
	*Output: NIL
	*Logic: rotates the servo motor to right, wait for 50 millisecond, rotate to left,
			wait for another 50 millisecond and finally comes at center position
	*example-call: strike();
*/
void strike() {
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
	lcd_cursor(1,1);
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	61 e0       	ldi	r22, 0x01	; 1
     f76:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
	lcd_string("MNP DETECTED ");
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	92 e0       	ldi	r25, 0x02	; 2
     f7e:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
	lcd_print(1,14,sequence_arr[Counter],2);
     f82:	80 91 88 05 	lds	r24, 0x0588
     f86:	90 91 89 05 	lds	r25, 0x0589
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	e0 91 2e 0b 	lds	r30, 0x0B2E
     f92:	f0 91 2f 0b 	lds	r31, 0x0B2F
     f96:	e8 0f       	add	r30, r24
     f98:	f9 1f       	adc	r31, r25
     f9a:	40 81       	ld	r20, Z
     f9c:	51 81       	ldd	r21, Z+1	; 0x01
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	6e e0       	ldi	r22, 0x0E	; 14
     fa2:	22 e0       	ldi	r18, 0x02	; 2
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	0e 94 08 06 	call	0xc10	; 0xc10 <lcd_print>
	lcd_cursor(2,1);
     faa:	82 e0       	ldi	r24, 0x02	; 2
     fac:	61 e0       	ldi	r22, 0x01	; 1
     fae:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
	lcd_string("Strinking Node!!");
     fb2:	8e e0       	ldi	r24, 0x0E	; 14
     fb4:	92 e0       	ldi	r25, 0x02	; 2
     fb6:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
     fba:	19 e6       	ldi	r17, 0x69	; 105
     fbc:	c0 e0       	ldi	r28, 0x00	; 0
     fbe:	d8 e4       	ldi	r29, 0x48	; 72

	unsigned char i = 0;

	for (i = 105; i <210; i++)
		{
			servo_3(i);
     fc0:	81 2f       	mov	r24, r17
     fc2:	0e 94 08 07 	call	0xe10	; 0xe10 <servo_3>
     fc6:	ce 01       	movw	r24, r28
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <strike+0x5c>
	lcd_cursor(2,1);
	lcd_string("Strinking Node!!");

	unsigned char i = 0;

	for (i = 105; i <210; i++)
     fcc:	1f 5f       	subi	r17, 0xFF	; 255
     fce:	12 3d       	cpi	r17, 0xD2	; 210
     fd0:	b9 f7       	brne	.-18     	; 0xfc0 <strike+0x54>
     fd2:	84 ef       	ldi	r24, 0xF4	; 244
     fd4:	91 e0       	ldi	r25, 0x01	; 1
     fd6:	20 e7       	ldi	r18, 0x70	; 112
     fd8:	31 e0       	ldi	r19, 0x01	; 1
     fda:	f9 01       	movw	r30, r18
     fdc:	31 97       	sbiw	r30, 0x01	; 1
     fde:	f1 f7       	brne	.-4      	; 0xfdc <strike+0x70>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe2:	d9 f7       	brne	.-10     	; 0xfda <strike+0x6e>
     fe4:	c0 e0       	ldi	r28, 0x00	; 0
     fe6:	d8 e4       	ldi	r29, 0x48	; 72
			 _delay_ms(5);
		}
	_delay_ms(50);
	for (i = 210; i >0; i--)
		{
			 servo_3(i);
     fe8:	81 2f       	mov	r24, r17
     fea:	0e 94 08 07 	call	0xe10	; 0xe10 <servo_3>
     fee:	ce 01       	movw	r24, r28
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <strike+0x84>
		{
			servo_3(i);
			 _delay_ms(5);
		}
	_delay_ms(50);
	for (i = 210; i >0; i--)
     ff4:	11 50       	subi	r17, 0x01	; 1
     ff6:	c1 f7       	brne	.-16     	; 0xfe8 <strike+0x7c>
     ff8:	84 ef       	ldi	r24, 0xF4	; 244
     ffa:	91 e0       	ldi	r25, 0x01	; 1
     ffc:	20 e7       	ldi	r18, 0x70	; 112
     ffe:	31 e0       	ldi	r19, 0x01	; 1
    1000:	f9 01       	movw	r30, r18
    1002:	31 97       	sbiw	r30, 0x01	; 1
    1004:	f1 f7       	brne	.-4      	; 0x1002 <strike+0x96>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1006:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1008:	d9 f7       	brne	.-10     	; 0x1000 <strike+0x94>
    100a:	c0 e0       	ldi	r28, 0x00	; 0
    100c:	d0 e9       	ldi	r29, 0x90	; 144
		}
 	 _delay_ms(50);

	for (i = 0; i <105; i++)
		{
			servo_3(i);
    100e:	81 2f       	mov	r24, r17
    1010:	0e 94 08 07 	call	0xe10	; 0xe10 <servo_3>
    1014:	ce 01       	movw	r24, r28
    1016:	01 97       	sbiw	r24, 0x01	; 1
    1018:	f1 f7       	brne	.-4      	; 0x1016 <strike+0xaa>
			 servo_3(i);
			 _delay_ms(5);
		}
 	 _delay_ms(50);

	for (i = 0; i <105; i++)
    101a:	1f 5f       	subi	r17, 0xFF	; 255
    101c:	19 36       	cpi	r17, 0x69	; 105
    101e:	b9 f7       	brne	.-18     	; 0x100e <strike+0xa2>
		{
			servo_3(i);
			_delay_ms(10);
		}
}
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	08 95       	ret

00001028 <__vector_25>:

SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
    1028:	1f 92       	push	r1
    102a:	0f 92       	push	r0
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	0f 92       	push	r0
    1030:	11 24       	eor	r1, r1
    1032:	8f 93       	push	r24
    1034:	9f 93       	push	r25
	data = UDR0; 				//making copy of data from UDR0 in 'data' variable
    1036:	80 91 c6 00 	lds	r24, 0x00C6
    103a:	80 93 2d 0b 	sts	0x0B2D, r24
	
	//UDR2 = data; 				//echo data back to PC

	update = (signed int) data;
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	90 93 37 0b 	sts	0x0B37, r25
    1044:	80 93 36 0b 	sts	0x0B36, r24
	if (update > 0) {
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	21 f0       	breq	.+8      	; 0x1054 <__vector_25+0x2c>
		Counter = update;
    104c:	90 93 89 05 	sts	0x0589, r25
    1050:	80 93 88 05 	sts	0x0588, r24
	}
}
    1054:	9f 91       	pop	r25
    1056:	8f 91       	pop	r24
    1058:	0f 90       	pop	r0
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	0f 90       	pop	r0
    105e:	1f 90       	pop	r1
    1060:	18 95       	reti

00001062 <initial_devices>:
}

//Function To Initialize all The Devices
void initial_devices()
{
 	cli(); //Clears the global interrupts
    1062:	f8 94       	cli
 	port_initial();  //Initializes all the ports
    1064:	0e 94 bb 06 	call	0xd76	; 0xd76 <port_initial>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void adc_init()
{
	ADCSRA = 0x00;
    1068:	ea e7       	ldi	r30, 0x7A	; 122
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    106e:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    1072:	80 e2       	ldi	r24, 0x20	; 32
    1074:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
    1078:	80 e8       	ldi	r24, 0x80	; 128
    107a:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    107c:	86 e8       	ldi	r24, 0x86	; 134
    107e:	80 83       	st	Z, r24
 	adc_init();
 	timer1_init();
    1080:	0e 94 15 03 	call	0x62a	; 0x62a <timer1_init>
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
    1084:	e1 e2       	ldi	r30, 0x21	; 33
    1086:	f1 e0       	ldi	r31, 0x01	; 1
    1088:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    108a:	9f ef       	ldi	r25, 0xFF	; 255
    108c:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    1096:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    109a:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    109e:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    10a2:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    10a6:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    10aa:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    10ae:	89 ea       	ldi	r24, 0xA9	; 169
    10b0:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    10b4:	8b e0       	ldi	r24, 0x0B	; 11
    10b6:	80 83       	st	Z, r24
	right_encoder_pin_config(); //right encoder pin config
}

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
    10b8:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    10ba:	ea e6       	ldi	r30, 0x6A	; 106
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	82 60       	ori	r24, 0x02	; 2
    10c2:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    10c4:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
    10c6:	78 94       	sei
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
    10c8:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    10ca:	ea e6       	ldi	r30, 0x6A	; 106
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	88 60       	ori	r24, 0x08	; 8
    10d2:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    10d4:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
    10d6:	78 94       	sei
// actual baud rate:9600 (error 0.0%)
// char arr_size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
    10d8:	e1 ec       	ldi	r30, 0xC1	; 193
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	10 82       	st	Z, r1
 UCSR0A = 0x00;
    10de:	10 92 c0 00 	sts	0x00C0, r1
 UCSR0C = 0x06;
    10e2:	26 e0       	ldi	r18, 0x06	; 6
    10e4:	20 93 c2 00 	sts	0x00C2, r18
 UBRR0L = 0x5F; //set baud rate lo
    10e8:	9f e5       	ldi	r25, 0x5F	; 95
    10ea:	90 93 c4 00 	sts	0x00C4, r25
 UBRR0H = 0x00; //set baud rate hi
    10ee:	10 92 c5 00 	sts	0x00C5, r1
 UCSR0B = 0x98;
    10f2:	88 e9       	ldi	r24, 0x98	; 152
    10f4:	80 83       	st	Z, r24
// actual baud rate:9600 (error 0.0%)
// char arr_size: 8 bit
// parity: Disabled
void uart2_init(void)
{
 UCSR2B = 0x00; //disable while setting baud rate
    10f6:	e1 ed       	ldi	r30, 0xD1	; 209
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	10 82       	st	Z, r1
 UCSR2A = 0x00;
    10fc:	10 92 d0 00 	sts	0x00D0, r1
 UCSR2C = 0x06;
    1100:	20 93 d2 00 	sts	0x00D2, r18
 UBRR2L = 0x5F; //set baud rate lo
    1104:	90 93 d4 00 	sts	0x00D4, r25
 UBRR2H = 0x00; //set baud rate hi
    1108:	10 92 d5 00 	sts	0x00D5, r1
 UCSR2B = 0x98;
    110c:	80 83       	st	Z, r24
	timer5_init();
	left_position_encoder_interrupt_init();
	right_position_encoder_interrupt_init();
	uart0_init(); //Initailize UART0 for serial communiaction
	uart2_init(); //Initailize UART1 for serial communiaction
 	sei();   //Enables the global interrupts
    110e:	78 94       	sei
}
    1110:	08 95       	ret

00001112 <__vector_51>:

/*
	Here we are getting the array from python file and storing it in the arr
*/
SIGNAL(SIG_USART2_RECV) 		// ISR for receive complete interrupt
{
    1112:	1f 92       	push	r1
    1114:	0f 92       	push	r0
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	0f 92       	push	r0
    111a:	0b b6       	in	r0, 0x3b	; 59
    111c:	0f 92       	push	r0
    111e:	11 24       	eor	r1, r1
    1120:	2f 93       	push	r18
    1122:	3f 93       	push	r19
    1124:	4f 93       	push	r20
    1126:	5f 93       	push	r21
    1128:	6f 93       	push	r22
    112a:	7f 93       	push	r23
    112c:	8f 93       	push	r24
    112e:	9f 93       	push	r25
    1130:	af 93       	push	r26
    1132:	bf 93       	push	r27
    1134:	ef 93       	push	r30
    1136:	ff 93       	push	r31
	data = UDR2; 				//making copy of data from UDR2 in 'data' variable
    1138:	20 91 d6 00 	lds	r18, 0x00D6
    113c:	20 93 2d 0b 	sts	0x0B2D, r18

	UDR2 = data; 				//echo data back to PC
    1140:	20 93 d6 00 	sts	0x00D6, r18

	if (count == -1)
    1144:	e0 91 5f 04 	lds	r30, 0x045F
    1148:	f0 91 60 04 	lds	r31, 0x0460
    114c:	8f ef       	ldi	r24, 0xFF	; 255
    114e:	ef 3f       	cpi	r30, 0xFF	; 255
    1150:	f8 07       	cpc	r31, r24
    1152:	61 f5       	brne	.+88     	; 0x11ac <__vector_51+0x9a>
	{
		arr_size = (signed int) data;
		arr_size -= 48;
    1154:	82 2f       	mov	r24, r18
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	c0 97       	sbiw	r24, 0x30	; 48
    115a:	90 93 85 05 	sts	0x0585, r25
    115e:	80 93 84 05 	sts	0x0584, r24
		count++;
    1162:	10 92 60 04 	sts	0x0460, r1
    1166:	10 92 5f 04 	sts	0x045F, r1
		// lcd_print(1,1,arr_size,2);
		arr = (signed int*) malloc(arr_size*sizeof(signed int));
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0e 94 39 16 	call	0x2c72	; 0x2c72 <malloc>
    1172:	80 93 6c 0a 	sts	0x0A6C, r24
    1176:	90 93 6d 0a 	sts	0x0A6D, r25
		sequence_arr = (signed int*) malloc(arr_size*sizeof(signed int));
    117a:	80 91 84 05 	lds	r24, 0x0584
    117e:	90 91 85 05 	lds	r25, 0x0585
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	0e 94 39 16 	call	0x2c72	; 0x2c72 <malloc>
    118a:	80 93 2e 0b 	sts	0x0B2E, r24
    118e:	90 93 2f 0b 	sts	0x0B2F, r25
		arr_slave = (signed int*) malloc(arr_size*sizeof(signed int));
    1192:	80 91 84 05 	lds	r24, 0x0584
    1196:	90 91 85 05 	lds	r25, 0x0585
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0e 94 39 16 	call	0x2c72	; 0x2c72 <malloc>
    11a2:	80 93 30 0b 	sts	0x0B30, r24
    11a6:	90 93 31 0b 	sts	0x0B31, r25
    11aa:	27 c0       	rjmp	.+78     	; 0x11fa <__vector_51+0xe8>
	}

	else if (count < arr_size) {
    11ac:	80 91 84 05 	lds	r24, 0x0584
    11b0:	90 91 85 05 	lds	r25, 0x0585
    11b4:	e8 17       	cp	r30, r24
    11b6:	f9 07       	cpc	r31, r25
    11b8:	04 f5       	brge	.+64     	; 0x11fa <__vector_51+0xe8>
		arr[count] = (signed int) data;
    11ba:	80 91 6c 0a 	lds	r24, 0x0A6C
    11be:	90 91 6d 0a 	lds	r25, 0x0A6D
    11c2:	ee 0f       	add	r30, r30
    11c4:	ff 1f       	adc	r31, r31
    11c6:	e8 0f       	add	r30, r24
    11c8:	f9 1f       	adc	r31, r25
    11ca:	20 83       	st	Z, r18
    11cc:	11 82       	std	Z+1, r1	; 0x01
		arr[count] -= 48;
    11ce:	e0 91 5f 04 	lds	r30, 0x045F
    11d2:	f0 91 60 04 	lds	r31, 0x0460
    11d6:	ee 0f       	add	r30, r30
    11d8:	ff 1f       	adc	r31, r31
    11da:	e8 0f       	add	r30, r24
    11dc:	f9 1f       	adc	r31, r25
    11de:	80 81       	ld	r24, Z
    11e0:	91 81       	ldd	r25, Z+1	; 0x01
    11e2:	c0 97       	sbiw	r24, 0x30	; 48
    11e4:	91 83       	std	Z+1, r25	; 0x01
    11e6:	80 83       	st	Z, r24
		count++;
    11e8:	80 91 5f 04 	lds	r24, 0x045F
    11ec:	90 91 60 04 	lds	r25, 0x0460
    11f0:	01 96       	adiw	r24, 0x01	; 1
    11f2:	90 93 60 04 	sts	0x0460, r25
    11f6:	80 93 5f 04 	sts	0x045F, r24
		// lcd_print(2,1,count+1,2);
	}
}
    11fa:	ff 91       	pop	r31
    11fc:	ef 91       	pop	r30
    11fe:	bf 91       	pop	r27
    1200:	af 91       	pop	r26
    1202:	9f 91       	pop	r25
    1204:	8f 91       	pop	r24
    1206:	7f 91       	pop	r23
    1208:	6f 91       	pop	r22
    120a:	5f 91       	pop	r21
    120c:	4f 91       	pop	r20
    120e:	3f 91       	pop	r19
    1210:	2f 91       	pop	r18
    1212:	0f 90       	pop	r0
    1214:	0b be       	out	0x3b, r0	; 59
    1216:	0f 90       	pop	r0
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	0f 90       	pop	r0
    121c:	1f 90       	pop	r1
    121e:	18 95       	reti

00001220 <mapRun>:
	*Output: 0 on successful completion
	*Logic: Given a array of nodes, executes dStar to find the best path
			to touch all the nodes and follows it.
*/
int* mapRun(signed int angle[], int Size_)
{
    1220:	8f 92       	push	r8
    1222:	9f 92       	push	r9
    1224:	af 92       	push	r10
    1226:	bf 92       	push	r11
    1228:	df 92       	push	r13
    122a:	ef 92       	push	r14
    122c:	ff 92       	push	r15
    122e:	0f 93       	push	r16
    1230:	1f 93       	push	r17
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	4c 01       	movw	r8, r24
    1238:	5b 01       	movw	r10, r22
	// after dectecting the note bot will turn angle[i] angle
	signed int count = -1;
	lcd_print(1, 4, Size_, 2);
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	64 e0       	ldi	r22, 0x04	; 4
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	a5 01       	movw	r20, r10
    1244:	22 e0       	ldi	r18, 0x02	; 2
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	0e 94 08 06 	call	0xc10	; 0xc10 <lcd_print>
    124c:	80 e2       	ldi	r24, 0x20	; 32
    124e:	9e e4       	ldi	r25, 0x4E	; 78
    1250:	20 e7       	ldi	r18, 0x70	; 112
    1252:	31 e0       	ldi	r19, 0x01	; 1
    1254:	f9 01       	movw	r30, r18
    1256:	31 97       	sbiw	r30, 0x01	; 1
    1258:	f1 f7       	brne	.-4      	; 0x1256 <mapRun+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    125a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    125c:	d9 f7       	brne	.-10     	; 0x1254 <mapRun+0x34>
	_delay_ms(2000);
	int *res = (int*) malloc (3*sizeof(int));		//Holds result
    125e:	86 e0       	ldi	r24, 0x06	; 6
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	0e 94 39 16 	call	0x2c72	; 0x2c72 <malloc>
    1266:	ec 01       	movw	r28, r24
	for (int i = 0; i < 3; i++)
		res[i] = 0;
    1268:	19 82       	std	Y+1, r1	; 0x01
    126a:	18 82       	st	Y, r1
    126c:	1b 82       	std	Y+3, r1	; 0x03
    126e:	1a 82       	std	Y+2, r1	; 0x02
    1270:	1d 82       	std	Y+5, r1	; 0x05
    1272:	1c 82       	std	Y+4, r1	; 0x04
    1274:	ee 24       	eor	r14, r14
    1276:	ea 94       	dec	r14
    1278:	fe 2c       	mov	r15, r14
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    127a:	ba ef       	ldi	r27, 0xFA	; 250
    127c:	db 2e       	mov	r13, r27
    127e:	00 e7       	ldi	r16, 0x70	; 112
    1280:	11 e0       	ldi	r17, 0x01	; 1
    1282:	5d c1       	rjmp	.+698    	; 0x153e <mapRun+0x31e>

	while(count < Size_)
	{
		// int flag = 0;

		Front_IR_Sensor = ADC_Conversion(11);    //Getting data of Center IR Proximity Sensor Sensor
    1284:	8b e0       	ldi	r24, 0x0B	; 11
    1286:	0e 94 60 03 	call	0x6c0	; 0x6c0 <ADC_Conversion>
    128a:	80 93 83 05 	sts	0x0583, r24
		// 	//return res;
		// }

		// If center center plus left or right sensor detects the black line
		// The bot is over a node
		if ((senser_value_C > 50) && (senser_value_L > 50) || (senser_value_C > 50) && (senser_value_R > 50))
    128e:	80 91 6e 0a 	lds	r24, 0x0A6E
    1292:	90 91 6f 0a 	lds	r25, 0x0A6F
    1296:	c3 97       	sbiw	r24, 0x33	; 51
    1298:	0c f4       	brge	.+2      	; 0x129c <mapRun+0x7c>
    129a:	4f c1       	rjmp	.+670    	; 0x153a <mapRun+0x31a>
    129c:	80 91 29 0b 	lds	r24, 0x0B29
    12a0:	90 91 2a 0b 	lds	r25, 0x0B2A
    12a4:	c3 97       	sbiw	r24, 0x33	; 51
    12a6:	3c f4       	brge	.+14     	; 0x12b6 <mapRun+0x96>
    12a8:	80 91 34 0b 	lds	r24, 0x0B34
    12ac:	90 91 35 0b 	lds	r25, 0x0B35
    12b0:	c3 97       	sbiw	r24, 0x33	; 51
    12b2:	0c f4       	brge	.+2      	; 0x12b6 <mapRun+0x96>
    12b4:	42 c1       	rjmp	.+644    	; 0x153a <mapRun+0x31a>
		{
			lcd_cursor(2,1);
    12b6:	82 e0       	ldi	r24, 0x02	; 2
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	61 e0       	ldi	r22, 0x01	; 1
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
			lcd_string("NOTE DETECTED!!!");
    12c2:	8f e1       	ldi	r24, 0x1F	; 31
    12c4:	92 e0       	ldi	r25, 0x02	; 2
    12c6:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
			
			count++;
    12ca:	08 94       	sec
    12cc:	e1 1c       	adc	r14, r1
    12ce:	f1 1c       	adc	r15, r1
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    12d0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    12d2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    12d4:	82 b9       	out	0x02, r24	; 2

			//if angle[i] is 60 the bot has to take a 60 degree turn
			// bot will move 6 cm ahead and 30 degree left to skip the current black line
			// then it will rotate left until it finds another black line
			// lcd will print "60 degree success"
			if (angle[count] == 60 || angle[count] == -300)
    12d6:	f7 01       	movw	r30, r14
    12d8:	ee 0f       	add	r30, r30
    12da:	ff 1f       	adc	r31, r31
    12dc:	e8 0d       	add	r30, r8
    12de:	f9 1d       	adc	r31, r9
    12e0:	01 90       	ld	r0, Z+
    12e2:	f0 81       	ld	r31, Z
    12e4:	e0 2d       	mov	r30, r0
    12e6:	ec 33       	cpi	r30, 0x3C	; 60
    12e8:	f1 05       	cpc	r31, r1
    12ea:	21 f0       	breq	.+8      	; 0x12f4 <mapRun+0xd4>
    12ec:	8e ef       	ldi	r24, 0xFE	; 254
    12ee:	e4 3d       	cpi	r30, 0xD4	; 212
    12f0:	f8 07       	cpc	r31, r24
    12f2:	71 f5       	brne	.+92     	; 0x1350 <mapRun+0x130>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    12f4:	d0 92 28 01 	sts	0x0128, r13
	OCR5BL = (unsigned char)right_motor;
    12f8:	d0 92 2a 01 	sts	0x012A, r13
			// then it will rotate left until it finds another black line
			// lcd will print "60 degree success"
			if (angle[count] == 60 || angle[count] == -300)
			{
				velocity(250,250);
				forward_mm(60);
    12fc:	8c e3       	ldi	r24, 0x3C	; 60
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	0e 94 4a 05 	call	0xa94	; 0xa94 <forward_mm>
    1304:	88 ee       	ldi	r24, 0xE8	; 232
    1306:	93 e0       	ldi	r25, 0x03	; 3
    1308:	f8 01       	movw	r30, r16
    130a:	31 97       	sbiw	r30, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <mapRun+0xea>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    130e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1310:	d9 f7       	brne	.-10     	; 0x1308 <mapRun+0xe8>
		        _delay_ms(100);

		        left_degrees(30);
    1312:	8e e1       	ldi	r24, 0x1E	; 30
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <left_degrees>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    131a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    131c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    131e:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
    1320:	82 b9       	out	0x02, r24	; 2

		        left_degrees(30);
		        do
		        {
		          left();
		          senser_value_C = ADC_Conversion(2);
    1322:	82 e0       	ldi	r24, 0x02	; 2
    1324:	0e 94 60 03 	call	0x6c0	; 0x6c0 <ADC_Conversion>
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	90 93 6f 0a 	sts	0x0A6F, r25
    132e:	80 93 6e 0a 	sts	0x0A6E, r24
		        }
		        while (senser_value_C < 75);
    1332:	8b 34       	cpi	r24, 0x4B	; 75
    1334:	91 05       	cpc	r25, r1
    1336:	8c f3       	brlt	.-30     	; 0x131a <mapRun+0xfa>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1338:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    133a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    133c:	82 b9       	out	0x02, r24	; 2
		          left();
		          senser_value_C = ADC_Conversion(2);
		        }
		        while (senser_value_C < 75);
		        stop();
		        lcd_cursor(1,1);
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	61 e0       	ldi	r22, 0x01	; 1
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
		        lcd_string("60 degree succes");
    134a:	80 e3       	ldi	r24, 0x30	; 48
    134c:	92 e0       	ldi	r25, 0x02	; 2
    134e:	3b c0       	rjmp	.+118    	; 0x13c6 <mapRun+0x1a6>
			}
			//if angle[i] is 120 the bot has to take a 120 degree turn
			// bot will move 1.5 cm ahead and 30 degree back left to skip the current black line
			// then it will rotate soft left until it finds another black line
			// lcd will print "120 degree success"
			else if (angle[count] == 120 || angle[count] == -240)
    1350:	e8 37       	cpi	r30, 0x78	; 120
    1352:	f1 05       	cpc	r31, r1
    1354:	21 f0       	breq	.+8      	; 0x135e <mapRun+0x13e>
    1356:	8f ef       	ldi	r24, 0xFF	; 255
    1358:	e0 31       	cpi	r30, 0x10	; 16
    135a:	f8 07       	cpc	r31, r24
    135c:	b9 f5       	brne	.+110    	; 0x13cc <mapRun+0x1ac>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    135e:	d0 92 28 01 	sts	0x0128, r13
	OCR5BL = (unsigned char)right_motor;
    1362:	d0 92 2a 01 	sts	0x012A, r13
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1366:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1368:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    136a:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    136c:	82 b9       	out	0x02, r24	; 2
    136e:	8c ea       	ldi	r24, 0xAC	; 172
    1370:	9d e0       	ldi	r25, 0x0D	; 13
    1372:	f8 01       	movw	r30, r16
    1374:	31 97       	sbiw	r30, 0x01	; 1
    1376:	f1 f7       	brne	.-4      	; 0x1374 <mapRun+0x154>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1378:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    137a:	d9 f7       	brne	.-10     	; 0x1372 <mapRun+0x152>
			else if (angle[count] == 120 || angle[count] == -240)
			{
				velocity(250,250);
				forward();
		        _delay_ms(350);
		        left_degrees(90);
    137c:	8a e5       	ldi	r24, 0x5A	; 90
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <left_degrees>
    1384:	88 e8       	ldi	r24, 0x88	; 136
    1386:	93 e1       	ldi	r25, 0x13	; 19
    1388:	f8 01       	movw	r30, r16
    138a:	31 97       	sbiw	r30, 0x01	; 1
    138c:	f1 f7       	brne	.-4      	; 0x138a <mapRun+0x16a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    138e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1390:	d9 f7       	brne	.-10     	; 0x1388 <mapRun+0x168>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1392:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1394:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1396:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
    1398:	82 b9       	out	0x02, r24	; 2
		        left_degrees(90);
		        _delay_ms(500);
		        do
		        {
		          left();
		          senser_value_C = ADC_Conversion(2);
    139a:	82 e0       	ldi	r24, 0x02	; 2
    139c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <ADC_Conversion>
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	90 93 6f 0a 	sts	0x0A6F, r25
    13a6:	80 93 6e 0a 	sts	0x0A6E, r24
		        }
		        while (senser_value_C < 75);
    13aa:	8b 34       	cpi	r24, 0x4B	; 75
    13ac:	91 05       	cpc	r25, r1
    13ae:	8c f3       	brlt	.-30     	; 0x1392 <mapRun+0x172>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    13b0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    13b2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    13b4:	82 b9       	out	0x02, r24	; 2
		          left();
		          senser_value_C = ADC_Conversion(2);
		        }
		        while (senser_value_C < 75);
		        stop();
		        lcd_cursor(1,1);
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	61 e0       	ldi	r22, 0x01	; 1
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
		        lcd_string("120 degree succes");
    13c2:	81 e4       	ldi	r24, 0x41	; 65
    13c4:	92 e0       	ldi	r25, 0x02	; 2
    13c6:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
    13ca:	a0 c0       	rjmp	.+320    	; 0x150c <mapRun+0x2ec>
			}
			//if angle[i] is -60 the bot has to take a -60 degree turn
			// bot will move 6 cm ahead and 30 degree right to skip the current black line
			// then it will rotate rihgt until it finds another black line
			// lcd will print "-60 degree success"
			else if (angle[count] == -60 || angle[count] == 300)
    13cc:	8f ef       	ldi	r24, 0xFF	; 255
    13ce:	e4 3c       	cpi	r30, 0xC4	; 196
    13d0:	f8 07       	cpc	r31, r24
    13d2:	21 f0       	breq	.+8      	; 0x13dc <mapRun+0x1bc>
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	ec 32       	cpi	r30, 0x2C	; 44
    13d8:	f8 07       	cpc	r31, r24
    13da:	71 f5       	brne	.+92     	; 0x1438 <mapRun+0x218>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    13dc:	d0 92 28 01 	sts	0x0128, r13
	OCR5BL = (unsigned char)right_motor;
    13e0:	d0 92 2a 01 	sts	0x012A, r13
			// then it will rotate rihgt until it finds another black line
			// lcd will print "-60 degree success"
			else if (angle[count] == -60 || angle[count] == 300)
			{
				velocity(250,250);
				forward_mm(60);
    13e4:	8c e3       	ldi	r24, 0x3C	; 60
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	0e 94 4a 05 	call	0xa94	; 0xa94 <forward_mm>
    13ec:	88 ee       	ldi	r24, 0xE8	; 232
    13ee:	93 e0       	ldi	r25, 0x03	; 3
    13f0:	f8 01       	movw	r30, r16
    13f2:	31 97       	sbiw	r30, 0x01	; 1
    13f4:	f1 f7       	brne	.-4      	; 0x13f2 <mapRun+0x1d2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f8:	d9 f7       	brne	.-10     	; 0x13f0 <mapRun+0x1d0>
		        _delay_ms(100);
		        right_degrees(30);
    13fa:	8e e1       	ldi	r24, 0x1E	; 30
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0e 94 02 04 	call	0x804	; 0x804 <right_degrees>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1402:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1404:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1406:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    1408:	82 b9       	out	0x02, r24	; 2
		        _delay_ms(100);
		        right_degrees(30);
		        do
		        {
		          right();
		          senser_value_C = ADC_Conversion(2);
    140a:	82 e0       	ldi	r24, 0x02	; 2
    140c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <ADC_Conversion>
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	90 93 6f 0a 	sts	0x0A6F, r25
    1416:	80 93 6e 0a 	sts	0x0A6E, r24
		        }
		        while (senser_value_C < 75);
    141a:	8b 34       	cpi	r24, 0x4B	; 75
    141c:	91 05       	cpc	r25, r1
    141e:	8c f3       	brlt	.-30     	; 0x1402 <mapRun+0x1e2>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1420:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1422:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1424:	82 b9       	out	0x02, r24	; 2
		          right();
		          senser_value_C = ADC_Conversion(2);
		        }
		        while (senser_value_C < 75);
		        stop();
		        lcd_cursor(1,1);
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	61 e0       	ldi	r22, 0x01	; 1
    142c:	70 e0       	ldi	r23, 0x00	; 0
    142e:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
		        lcd_string("-60 degree suces");
    1432:	83 e5       	ldi	r24, 0x53	; 83
    1434:	92 e0       	ldi	r25, 0x02	; 2
    1436:	c7 cf       	rjmp	.-114    	; 0x13c6 <mapRun+0x1a6>
			}
			//if angle[i] is -120 the bot has to take a -120 degree turn
			// bot will move 1.5 cm ahead and 30 degree back right to skip the current black line
			// then it will rotate soft right until it finds another black line
			// lcd will print "-120 degree success"
			else if (angle[count] == -120 || angle[count] == 240)
    1438:	8f ef       	ldi	r24, 0xFF	; 255
    143a:	e8 38       	cpi	r30, 0x88	; 136
    143c:	f8 07       	cpc	r31, r24
    143e:	19 f0       	breq	.+6      	; 0x1446 <mapRun+0x226>
    1440:	e0 3f       	cpi	r30, 0xF0	; 240
    1442:	f1 05       	cpc	r31, r1
    1444:	51 f5       	brne	.+84     	; 0x149a <mapRun+0x27a>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1446:	d0 92 28 01 	sts	0x0128, r13
	OCR5BL = (unsigned char)right_motor;
    144a:	d0 92 2a 01 	sts	0x012A, r13
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    144e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1450:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1452:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1454:	82 b9       	out	0x02, r24	; 2
    1456:	8c ea       	ldi	r24, 0xAC	; 172
    1458:	9d e0       	ldi	r25, 0x0D	; 13
    145a:	f8 01       	movw	r30, r16
    145c:	31 97       	sbiw	r30, 0x01	; 1
    145e:	f1 f7       	brne	.-4      	; 0x145c <mapRun+0x23c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1460:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1462:	d9 f7       	brne	.-10     	; 0x145a <mapRun+0x23a>
			else if (angle[count] == -120 || angle[count] == 240)
			{
				velocity(250,250);
				forward();
		        _delay_ms(350);
		        right_degrees(90);
    1464:	8a e5       	ldi	r24, 0x5A	; 90
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	0e 94 02 04 	call	0x804	; 0x804 <right_degrees>
    146c:	88 e8       	ldi	r24, 0x88	; 136
    146e:	93 e1       	ldi	r25, 0x13	; 19
    1470:	f8 01       	movw	r30, r16
    1472:	31 97       	sbiw	r30, 0x01	; 1
    1474:	f1 f7       	brne	.-4      	; 0x1472 <mapRun+0x252>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1476:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1478:	d9 f7       	brne	.-10     	; 0x1470 <mapRun+0x250>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    147a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    147c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    147e:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    1480:	82 b9       	out	0x02, r24	; 2
		        right_degrees(90);
		        _delay_ms(500);
		        do
		        {
		          right();
		          senser_value_C = ADC_Conversion(2);
    1482:	82 e0       	ldi	r24, 0x02	; 2
    1484:	0e 94 60 03 	call	0x6c0	; 0x6c0 <ADC_Conversion>
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	90 93 6f 0a 	sts	0x0A6F, r25
    148e:	80 93 6e 0a 	sts	0x0A6E, r24
		        }
		        while (senser_value_C < 75);
    1492:	8b 34       	cpi	r24, 0x4B	; 75
    1494:	91 05       	cpc	r25, r1
    1496:	8c f3       	brlt	.-30     	; 0x147a <mapRun+0x25a>
    1498:	8b cf       	rjmp	.-234    	; 0x13b0 <mapRun+0x190>
		        lcd_string("120 degree succes");
			}
			//if angle[i] is 180 the bot has to take a 190 degree turn
			// bot will move left for 500 milliseconds to skip the current black line
			// then it will rotate left until it finds another black line
			else if (angle[count] == 180 || angle[count] == -180)
    149a:	e4 3b       	cpi	r30, 0xB4	; 180
    149c:	f1 05       	cpc	r31, r1
    149e:	19 f0       	breq	.+6      	; 0x14a6 <mapRun+0x286>
    14a0:	ec 54       	subi	r30, 0x4C	; 76
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	99 f5       	brne	.+102    	; 0x150c <mapRun+0x2ec>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    14a6:	d0 92 28 01 	sts	0x0128, r13
	OCR5BL = (unsigned char)right_motor;
    14aa:	d0 92 2a 01 	sts	0x012A, r13
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    14ae:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    14b0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    14b2:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    14b4:	82 b9       	out	0x02, r24	; 2
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    14b6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    14b8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    14ba:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    14bc:	82 b9       	out	0x02, r24	; 2
    14be:	88 eb       	ldi	r24, 0xB8	; 184
    14c0:	9b e0       	ldi	r25, 0x0B	; 11
    14c2:	f8 01       	movw	r30, r16
    14c4:	31 97       	sbiw	r30, 0x01	; 1
    14c6:	f1 f7       	brne	.-4      	; 0x14c4 <mapRun+0x2a4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ca:	d9 f7       	brne	.-10     	; 0x14c2 <mapRun+0x2a2>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    14cc:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    14ce:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    14d0:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
    14d2:	82 b9       	out	0x02, r24	; 2
    14d4:	80 ed       	ldi	r24, 0xD0	; 208
    14d6:	97 e0       	ldi	r25, 0x07	; 7
    14d8:	f8 01       	movw	r30, r16
    14da:	31 97       	sbiw	r30, 0x01	; 1
    14dc:	f1 f7       	brne	.-4      	; 0x14da <mapRun+0x2ba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e0:	d9 f7       	brne	.-10     	; 0x14d8 <mapRun+0x2b8>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    14e2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    14e4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    14e6:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    14e8:	82 b9       	out	0x02, r24	; 2
		        back();
		        _delay_ms(200);
		        do
		        {
		          right();
		          Center_white_line = ADC_Conversion(2);
    14ea:	82 e0       	ldi	r24, 0x02	; 2
    14ec:	0e 94 60 03 	call	0x6c0	; 0x6c0 <ADC_Conversion>
    14f0:	80 93 7a 05 	sts	0x057A, r24
		        }
		        while (Center_white_line < 75);
    14f4:	8b 34       	cpi	r24, 0x4B	; 75
    14f6:	a8 f3       	brcs	.-22     	; 0x14e2 <mapRun+0x2c2>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    14f8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    14fa:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    14fc:	82 b9       	out	0x02, r24	; 2
    14fe:	88 ee       	ldi	r24, 0xE8	; 232
    1500:	93 e0       	ldi	r25, 0x03	; 3
    1502:	f8 01       	movw	r30, r16
    1504:	31 97       	sbiw	r30, 0x01	; 1
    1506:	f1 f7       	brne	.-4      	; 0x1504 <mapRun+0x2e4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1508:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150a:	d9 f7       	brne	.-10     	; 0x1502 <mapRun+0x2e2>
		        stop();
		        _delay_ms(100);
			}

			// by default lcd will be print "MOVING ON FLEX"
			lcd_cursor(1,1);
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	61 e0       	ldi	r22, 0x01	; 1
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
			lcd_string("                ");
    1518:	84 e6       	ldi	r24, 0x64	; 100
    151a:	92 e0       	ldi	r25, 0x02	; 2
    151c:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
			lcd_cursor(2,1);
    1520:	82 e0       	ldi	r24, 0x02	; 2
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	61 e0       	ldi	r22, 0x01	; 1
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
			lcd_string("MOVING ON FLEX!!");
    152c:	85 e7       	ldi	r24, 0x75	; 117
    152e:	92 e0       	ldi	r25, 0x02	; 2
    1530:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
		}
		if (count < Size_)
    1534:	ea 14       	cp	r14, r10
    1536:	fb 04       	cpc	r15, r11
    1538:	14 f4       	brge	.+4      	; 0x153e <mapRun+0x31e>
		{
			move();// calling the move function
    153a:	0e 94 68 04 	call	0x8d0	; 0x8d0 <move>
	_delay_ms(2000);
	int *res = (int*) malloc (3*sizeof(int));		//Holds result
	for (int i = 0; i < 3; i++)
		res[i] = 0;

	while(count < Size_)
    153e:	ea 14       	cp	r14, r10
    1540:	fb 04       	cpc	r15, r11
    1542:	0c f4       	brge	.+2      	; 0x1546 <mapRun+0x326>
    1544:	9f ce       	rjmp	.-706    	; 0x1284 <mapRun+0x64>
			move();// calling the move function
		}
		
	}
	return res;
}
    1546:	ce 01       	movw	r24, r28
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	ff 90       	pop	r15
    1552:	ef 90       	pop	r14
    1554:	df 90       	pop	r13
    1556:	bf 90       	pop	r11
    1558:	af 90       	pop	r10
    155a:	9f 90       	pop	r9
    155c:	8f 90       	pop	r8
    155e:	08 95       	ret

00001560 <pathFind>:
			the source (where the index of the parent is -1.) In the process,
			it also keeps updating the number of nodes in the path from source
			to the destination.	
	*Example Call: int *path = pathFind (parent, destination, &pathSize);
*/
int* pathFind (int* parent, int destination, int* pathSize) {
    1560:	cf 92       	push	r12
    1562:	df 92       	push	r13
    1564:	ef 92       	push	r14
    1566:	ff 92       	push	r15
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	6c 01       	movw	r12, r24
    1572:	16 2f       	mov	r17, r22
    1574:	07 2f       	mov	r16, r23
    1576:	7a 01       	movw	r14, r20
	int *path = (int*) malloc (size*sizeof(int));
    1578:	84 e1       	ldi	r24, 0x14	; 20
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	0e 94 39 16 	call	0x2c72	; 0x2c72 <malloc>
    1580:	ec 01       	movw	r28, r24
	*pathSize = 1;			//There is at least one element (destination)
    1582:	21 e0       	ldi	r18, 0x01	; 1
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	d7 01       	movw	r26, r14
    1588:	2d 93       	st	X+, r18
    158a:	3c 93       	st	X, r19
	int i = destination, j = 1;
	path[0] = destination;
    158c:	18 83       	st	Y, r17
    158e:	09 83       	std	Y+1, r16	; 0x01
    1590:	ac 01       	movw	r20, r24
    1592:	21 2f       	mov	r18, r17
    1594:	30 2f       	mov	r19, r16
    1596:	c9 01       	movw	r24, r18
    1598:	e1 e0       	ldi	r30, 0x01	; 1
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	0e c0       	rjmp	.+28     	; 0x15ba <pathFind+0x5a>
	//Creates a path 
	while (parent[i] != -1) {
		(*pathSize)++;
    159e:	d7 01       	movw	r26, r14
    15a0:	8d 91       	ld	r24, X+
    15a2:	9c 91       	ld	r25, X
    15a4:	11 97       	sbiw	r26, 0x01	; 1
    15a6:	01 96       	adiw	r24, 0x01	; 1
    15a8:	8d 93       	st	X+, r24
    15aa:	9c 93       	st	X, r25
		path[j++] = parent[i];
    15ac:	db 01       	movw	r26, r22
    15ae:	8d 91       	ld	r24, X+
    15b0:	9c 91       	ld	r25, X
    15b2:	da 01       	movw	r26, r20
    15b4:	8d 93       	st	X+, r24
    15b6:	9c 93       	st	X, r25
    15b8:	31 96       	adiw	r30, 0x01	; 1
	int *path = (int*) malloc (size*sizeof(int));
	*pathSize = 1;			//There is at least one element (destination)
	int i = destination, j = 1;
	path[0] = destination;
	//Creates a path 
	while (parent[i] != -1) {
    15ba:	bc 01       	movw	r22, r24
    15bc:	66 0f       	add	r22, r22
    15be:	77 1f       	adc	r23, r23
    15c0:	6c 0d       	add	r22, r12
    15c2:	7d 1d       	adc	r23, r13
    15c4:	4e 5f       	subi	r20, 0xFE	; 254
    15c6:	5f 4f       	sbci	r21, 0xFF	; 255
    15c8:	db 01       	movw	r26, r22
    15ca:	8d 91       	ld	r24, X+
    15cc:	9c 91       	ld	r25, X
    15ce:	bf ef       	ldi	r27, 0xFF	; 255
    15d0:	8f 3f       	cpi	r24, 0xFF	; 255
    15d2:	9b 07       	cpc	r25, r27
    15d4:	21 f7       	brne	.-56     	; 0x159e <pathFind+0x3e>
		(*pathSize)++;
		path[j++] = parent[i];
		i = parent[i];
	}
	path[j] = -1;
    15d6:	ee 0f       	add	r30, r30
    15d8:	ff 1f       	adc	r31, r31
    15da:	ec 0f       	add	r30, r28
    15dc:	fd 1f       	adc	r31, r29
    15de:	91 83       	std	Z+1, r25	; 0x01
    15e0:	80 83       	st	Z, r24
	//Corrects the order of the path
	reverse (path, *pathSize);
    15e2:	f7 01       	movw	r30, r14
    15e4:	60 81       	ld	r22, Z
    15e6:	71 81       	ldd	r23, Z+1	; 0x01
    15e8:	ce 01       	movw	r24, r28
    15ea:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <reverse>
	/*for (int i = 0; i < *pathSize; i++)
		cout << path[i] << "\t";
	cout << endl;
	*/
	return path;
}
    15ee:	ce 01       	movw	r24, r28
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	1f 91       	pop	r17
    15f6:	0f 91       	pop	r16
    15f8:	ff 90       	pop	r15
    15fa:	ef 90       	pop	r14
    15fc:	df 90       	pop	r13
    15fe:	cf 90       	pop	r12
    1600:	08 95       	ret

00001602 <NewQueue>:
	struct Node *temp = (struct Node*) malloc (sizeof(struct Node));
	// struct Node *temp = (struct Node*) malloc (2*sizeof(int*));
	temp->next=NULL;
	return temp;
}
struct Queue * NewQueue() {
    1602:	ff 92       	push	r15
    1604:	0f 93       	push	r16
    1606:	1f 93       	push	r17
	lcd_cursor(1,1);
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	61 e0       	ldi	r22, 0x01	; 1
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
	lcd_string("Entered DStar 5 ");
    1614:	86 e8       	ldi	r24, 0x86	; 134
    1616:	92 e0       	ldi	r25, 0x02	; 2
    1618:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>

	struct Queue *Q = (struct Queue*) malloc (sizeof(struct Queue));
    161c:	84 e0       	ldi	r24, 0x04	; 4
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	0e 94 39 16 	call	0x2c72	; 0x2c72 <malloc>
    1624:	f9 2e       	mov	r15, r25
    1626:	08 2f       	mov	r16, r24
    1628:	19 2f       	mov	r17, r25
	// struct Queue *Q = (struct Queue*) malloc (2*sizeof(int*));

	lcd_cursor(1,1);
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	61 e0       	ldi	r22, 0x01	; 1
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
	lcd_string("Entered DStar 61");
    1636:	87 e9       	ldi	r24, 0x97	; 151
    1638:	92 e0       	ldi	r25, 0x02	; 2
    163a:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>

	Q->head=NULL;
    163e:	f8 01       	movw	r30, r16
    1640:	11 82       	std	Z+1, r1	; 0x01
    1642:	10 82       	st	Z, r1

	lcd_cursor(1,1);
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	61 e0       	ldi	r22, 0x01	; 1
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
	lcd_string("Entered DStar 62");
    1650:	88 ea       	ldi	r24, 0xA8	; 168
    1652:	92 e0       	ldi	r25, 0x02	; 2
    1654:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>

	Q->tail=NULL;
    1658:	f8 01       	movw	r30, r16
    165a:	13 82       	std	Z+3, r1	; 0x03
    165c:	12 82       	std	Z+2, r1	; 0x02

	lcd_cursor(1,1);
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	61 e0       	ldi	r22, 0x01	; 1
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
	lcd_string("Entered DStar 63");
    166a:	89 eb       	ldi	r24, 0xB9	; 185
    166c:	92 e0       	ldi	r25, 0x02	; 2
    166e:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>

	return Q;
}
    1672:	80 2f       	mov	r24, r16
    1674:	9f 2d       	mov	r25, r15
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	ff 90       	pop	r15
    167c:	08 95       	ret

0000167e <NewNode>:
int DeQueue(struct Queue *Q);
void EmptyQueue(struct Queue *Q);
int IsEmpty(struct Queue *Q);

struct Node * NewNode() {
	struct Node *temp = (struct Node*) malloc (sizeof(struct Node));
    167e:	84 e0       	ldi	r24, 0x04	; 4
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 94 39 16 	call	0x2c72	; 0x2c72 <malloc>
    1686:	fc 01       	movw	r30, r24
	// struct Node *temp = (struct Node*) malloc (2*sizeof(int*));
	temp->next=NULL;
    1688:	13 82       	std	Z+3, r1	; 0x03
    168a:	12 82       	std	Z+2, r1	; 0x02
	return temp;
}
    168c:	08 95       	ret

0000168e <EnQueue>:
	lcd_string("Entered DStar 63");

	return Q;
}

void EnQueue(struct Queue *Q, int data) {
    168e:	0f 93       	push	r16
    1690:	1f 93       	push	r17
    1692:	cf 93       	push	r28
    1694:	df 93       	push	r29
    1696:	ec 01       	movw	r28, r24
    1698:	8b 01       	movw	r16, r22
	struct Node * temp= NewNode();
    169a:	0e 94 3f 0b 	call	0x167e	; 0x167e <NewNode>
    169e:	dc 01       	movw	r26, r24
	temp->data=data;
    16a0:	11 96       	adiw	r26, 0x01	; 1
    16a2:	1c 93       	st	X, r17
    16a4:	0e 93       	st	-X, r16
	if(Q->head==NULL && Q->tail==NULL) {
    16a6:	88 81       	ld	r24, Y
    16a8:	99 81       	ldd	r25, Y+1	; 0x01
    16aa:	89 2b       	or	r24, r25
    16ac:	39 f4       	brne	.+14     	; 0x16bc <EnQueue+0x2e>
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	9b 81       	ldd	r25, Y+3	; 0x03
    16b2:	89 2b       	or	r24, r25
    16b4:	19 f4       	brne	.+6      	; 0x16bc <EnQueue+0x2e>
		Q->head=temp;
    16b6:	b9 83       	std	Y+1, r27	; 0x01
    16b8:	a8 83       	st	Y, r26
    16ba:	04 c0       	rjmp	.+8      	; 0x16c4 <EnQueue+0x36>
		Q->tail=temp;
		return;
	}
	Q->tail->next=temp;
    16bc:	ea 81       	ldd	r30, Y+2	; 0x02
    16be:	fb 81       	ldd	r31, Y+3	; 0x03
    16c0:	b3 83       	std	Z+3, r27	; 0x03
    16c2:	a2 83       	std	Z+2, r26	; 0x02
	Q->tail=temp;
    16c4:	bb 83       	std	Y+3, r27	; 0x03
    16c6:	aa 83       	std	Y+2, r26	; 0x02
}
    16c8:	df 91       	pop	r29
    16ca:	cf 91       	pop	r28
    16cc:	1f 91       	pop	r17
    16ce:	0f 91       	pop	r16
    16d0:	08 95       	ret

000016d2 <Move>:
				3rd tells the node it was supposed to go to.
	*Logic: Converts nodes to an array of angle and calls the run function
			Returns the result by changing index to actual nodes
	*Example Call: int *res = Move (path, pathSize);
*/
int* Move (int path[], int pathSize) {
    16d2:	8f 92       	push	r8
    16d4:	9f 92       	push	r9
    16d6:	af 92       	push	r10
    16d8:	bf 92       	push	r11
    16da:	cf 92       	push	r12
    16dc:	df 92       	push	r13
    16de:	ef 92       	push	r14
    16e0:	ff 92       	push	r15
    16e2:	0f 93       	push	r16
    16e4:	1f 93       	push	r17
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	5c 01       	movw	r10, r24
    16ec:	7b 01       	movw	r14, r22
	signed int *angle = (signed int*) malloc(pathSize*sizeof(int));
    16ee:	cb 01       	movw	r24, r22
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	0e 94 39 16 	call	0x2c72	; 0x2c72 <malloc>
    16f8:	8c 01       	movw	r16, r24
    16fa:	e5 01       	movw	r28, r10
    16fc:	bc 01       	movw	r22, r24
    16fe:	41 e0       	ldi	r20, 0x01	; 1
    1700:	50 e0       	ldi	r21, 0x00	; 0
	for (int j = 0, i = 1; i < pathSize-1; i++, j++) {
    1702:	67 01       	movw	r12, r14
    1704:	08 94       	sec
    1706:	c1 08       	sbc	r12, r1
    1708:	d1 08       	sbc	r13, r1
		//This could be buggy
		angle[j] = map_angle[path[i]][path[i+1]] - 
    170a:	29 e1       	ldi	r18, 0x19	; 25
    170c:	82 2e       	mov	r8, r18
    170e:	91 2c       	mov	r9, r1
    1710:	2c c0       	rjmp	.+88     	; 0x176a <Move+0x98>
    1712:	2a 81       	ldd	r18, Y+2	; 0x02
    1714:	3b 81       	ldd	r19, Y+3	; 0x03
    1716:	28 9d       	mul	r18, r8
    1718:	d0 01       	movw	r26, r0
    171a:	29 9d       	mul	r18, r9
    171c:	b0 0d       	add	r27, r0
    171e:	38 9d       	mul	r19, r8
    1720:	b0 0d       	add	r27, r0
    1722:	11 24       	eor	r1, r1
    1724:	8c 81       	ldd	r24, Y+4	; 0x04
    1726:	9d 81       	ldd	r25, Y+5	; 0x05
    1728:	a8 0f       	add	r26, r24
    172a:	b9 1f       	adc	r27, r25
    172c:	aa 0f       	add	r26, r26
    172e:	bb 1f       	adc	r27, r27
    1730:	a4 5c       	subi	r26, 0xC4	; 196
    1732:	b4 4f       	sbci	r27, 0xF4	; 244
    1734:	89 91       	ld	r24, Y+
    1736:	99 91       	ld	r25, Y+
    1738:	88 9d       	mul	r24, r8
    173a:	f0 01       	movw	r30, r0
    173c:	89 9d       	mul	r24, r9
    173e:	f0 0d       	add	r31, r0
    1740:	98 9d       	mul	r25, r8
    1742:	f0 0d       	add	r31, r0
    1744:	11 24       	eor	r1, r1
    1746:	e2 0f       	add	r30, r18
    1748:	f3 1f       	adc	r31, r19
    174a:	ee 0f       	add	r30, r30
    174c:	ff 1f       	adc	r31, r31
    174e:	e4 5c       	subi	r30, 0xC4	; 196
    1750:	f4 4f       	sbci	r31, 0xF4	; 244
    1752:	8d 91       	ld	r24, X+
    1754:	9c 91       	ld	r25, X
    1756:	20 81       	ld	r18, Z
    1758:	31 81       	ldd	r19, Z+1	; 0x01
    175a:	82 1b       	sub	r24, r18
    175c:	93 0b       	sbc	r25, r19
    175e:	fb 01       	movw	r30, r22
    1760:	81 93       	st	Z+, r24
    1762:	91 93       	st	Z+, r25
    1764:	bf 01       	movw	r22, r30
			Returns the result by changing index to actual nodes
	*Example Call: int *res = Move (path, pathSize);
*/
int* Move (int path[], int pathSize) {
	signed int *angle = (signed int*) malloc(pathSize*sizeof(int));
	for (int j = 0, i = 1; i < pathSize-1; i++, j++) {
    1766:	4f 5f       	subi	r20, 0xFF	; 255
    1768:	5f 4f       	sbci	r21, 0xFF	; 255
    176a:	4c 15       	cp	r20, r12
    176c:	5d 05       	cpc	r21, r13
    176e:	8c f2       	brlt	.-94     	; 0x1712 <Move+0x40>
		//This could be buggy
		angle[j] = map_angle[path[i]][path[i+1]] - 
					map_angle[path[i-1]][path[i]];
	}
	angle[pathSize-1] = -1;
    1770:	f7 01       	movw	r30, r14
    1772:	31 97       	sbiw	r30, 0x01	; 1
    1774:	ee 0f       	add	r30, r30
    1776:	ff 1f       	adc	r31, r31
    1778:	e0 0f       	add	r30, r16
    177a:	f1 1f       	adc	r31, r17
    177c:	8f ef       	ldi	r24, 0xFF	; 255
    177e:	9f ef       	ldi	r25, 0xFF	; 255
    1780:	91 83       	std	Z+1, r25	; 0x01
    1782:	80 83       	st	Z, r24
	lcd_print(1, 14, pathSize, 2);
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	6e e0       	ldi	r22, 0x0E	; 14
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	a7 01       	movw	r20, r14
    178e:	22 e0       	ldi	r18, 0x02	; 2
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	0e 94 08 06 	call	0xc10	; 0xc10 <lcd_print>
	for (int i = 4; i < 2*pathSize; ++i){
    1796:	67 01       	movw	r12, r14
    1798:	cc 0c       	add	r12, r12
    179a:	dd 1c       	adc	r13, r13
    179c:	c4 e0       	ldi	r28, 0x04	; 4
    179e:	d0 e0       	ldi	r29, 0x00	; 0
    17a0:	0e c0       	rjmp	.+28     	; 0x17be <Move+0xec>
		lcd_print(1,i,path[i/2],2);
    17a2:	fe 01       	movw	r30, r28
    17a4:	ee 7f       	andi	r30, 0xFE	; 254
    17a6:	ea 0d       	add	r30, r10
    17a8:	fb 1d       	adc	r31, r11
    17aa:	40 81       	ld	r20, Z
    17ac:	51 81       	ldd	r21, Z+1	; 0x01
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	be 01       	movw	r22, r28
    17b4:	22 e0       	ldi	r18, 0x02	; 2
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	0e 94 08 06 	call	0xc10	; 0xc10 <lcd_print>
		angle[j] = map_angle[path[i]][path[i+1]] - 
					map_angle[path[i-1]][path[i]];
	}
	angle[pathSize-1] = -1;
	lcd_print(1, 14, pathSize, 2);
	for (int i = 4; i < 2*pathSize; ++i){
    17bc:	22 96       	adiw	r28, 0x02	; 2
    17be:	cc 15       	cp	r28, r12
    17c0:	dd 05       	cpc	r29, r13
    17c2:	7c f3       	brlt	.-34     	; 0x17a2 <Move+0xd0>
    17c4:	80 e5       	ldi	r24, 0x50	; 80
    17c6:	93 ec       	ldi	r25, 0xC3	; 195
    17c8:	20 e7       	ldi	r18, 0x70	; 112
    17ca:	31 e0       	ldi	r19, 0x01	; 1
    17cc:	f9 01       	movw	r30, r18
    17ce:	31 97       	sbiw	r30, 0x01	; 1
    17d0:	f1 f7       	brne	.-4      	; 0x17ce <Move+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d4:	d9 f7       	brne	.-10     	; 0x17cc <Move+0xfa>
		lcd_print(1,i,path[i/2],2);
		++i;
	}
	_delay_ms(5000);
	int *res = mapRun (angle, pathSize);
    17d6:	c8 01       	movw	r24, r16
    17d8:	b7 01       	movw	r22, r14
    17da:	0e 94 10 09 	call	0x1220	; 0x1220 <mapRun>
    17de:	ec 01       	movw	r28, r24
	if (res[0] != 0) {
    17e0:	88 81       	ld	r24, Y
    17e2:	99 81       	ldd	r25, Y+1	; 0x01
    17e4:	89 2b       	or	r24, r25
    17e6:	a1 f0       	breq	.+40     	; 0x1810 <Move+0x13e>
		res[1] = path[res[1]];
    17e8:	ea 81       	ldd	r30, Y+2	; 0x02
    17ea:	fb 81       	ldd	r31, Y+3	; 0x03
    17ec:	ee 0f       	add	r30, r30
    17ee:	ff 1f       	adc	r31, r31
    17f0:	ea 0d       	add	r30, r10
    17f2:	fb 1d       	adc	r31, r11
    17f4:	80 81       	ld	r24, Z
    17f6:	91 81       	ldd	r25, Z+1	; 0x01
    17f8:	9b 83       	std	Y+3, r25	; 0x03
    17fa:	8a 83       	std	Y+2, r24	; 0x02
		res[2] = path[res[2]];
    17fc:	ec 81       	ldd	r30, Y+4	; 0x04
    17fe:	fd 81       	ldd	r31, Y+5	; 0x05
    1800:	ee 0f       	add	r30, r30
    1802:	ff 1f       	adc	r31, r31
    1804:	ea 0d       	add	r30, r10
    1806:	fb 1d       	adc	r31, r11
    1808:	80 81       	ld	r24, Z
    180a:	91 81       	ldd	r25, Z+1	; 0x01
    180c:	9d 83       	std	Y+5, r25	; 0x05
    180e:	8c 83       	std	Y+4, r24	; 0x04
	}
	free(angle);
    1810:	c8 01       	movw	r24, r16
    1812:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <free>
	return res;
}
    1816:	ce 01       	movw	r24, r28
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	ff 90       	pop	r15
    1822:	ef 90       	pop	r14
    1824:	df 90       	pop	r13
    1826:	cf 90       	pop	r12
    1828:	bf 90       	pop	r11
    182a:	af 90       	pop	r10
    182c:	9f 90       	pop	r9
    182e:	8f 90       	pop	r8
    1830:	08 95       	ret

00001832 <DeQueue>:

int DeQueue(struct Queue *Q) {
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	dc 01       	movw	r26, r24
	if(Q->head==NULL && Q->tail==NULL) {
    1838:	ed 91       	ld	r30, X+
    183a:	fc 91       	ld	r31, X
    183c:	11 97       	sbiw	r26, 0x01	; 1
    183e:	30 97       	sbiw	r30, 0x00	; 0
    1840:	49 f4       	brne	.+18     	; 0x1854 <DeQueue+0x22>
    1842:	12 96       	adiw	r26, 0x02	; 2
    1844:	8d 91       	ld	r24, X+
    1846:	9c 91       	ld	r25, X
    1848:	13 97       	sbiw	r26, 0x03	; 3
    184a:	89 2b       	or	r24, r25
    184c:	19 f4       	brne	.+6      	; 0x1854 <DeQueue+0x22>
    184e:	cf ef       	ldi	r28, 0xFF	; 255
    1850:	df ef       	ldi	r29, 0xFF	; 255
    1852:	10 c0       	rjmp	.+32     	; 0x1874 <DeQueue+0x42>
		return -1;
	}
	struct Node *temp = Q->head;
	int data = temp->data;
    1854:	c0 81       	ld	r28, Z
    1856:	d1 81       	ldd	r29, Z+1	; 0x01
	Q->head=Q->head->next;
    1858:	82 81       	ldd	r24, Z+2	; 0x02
    185a:	93 81       	ldd	r25, Z+3	; 0x03
    185c:	11 96       	adiw	r26, 0x01	; 1
    185e:	9c 93       	st	X, r25
    1860:	8e 93       	st	-X, r24
	if(Q->head==NULL)
    1862:	89 2b       	or	r24, r25
    1864:	21 f4       	brne	.+8      	; 0x186e <DeQueue+0x3c>
		Q->tail=NULL;
    1866:	13 96       	adiw	r26, 0x03	; 3
    1868:	1c 92       	st	X, r1
    186a:	1e 92       	st	-X, r1
    186c:	12 97       	sbiw	r26, 0x02	; 2
	free (temp);	
    186e:	cf 01       	movw	r24, r30
    1870:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <free>
	return data;
}
    1874:	ce 01       	movw	r24, r28
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	08 95       	ret

0000187c <BFS>:
			It puts the source to a queue. Then as long as the queue is not
			empty, it dequeues the first element, enqueues all the neighbours
			which were not already explored and updates the cost.
	*Example Call: int *cost = BFS(source);
*/
int* BFS (int search) {
    187c:	2f 92       	push	r2
    187e:	3f 92       	push	r3
    1880:	4f 92       	push	r4
    1882:	5f 92       	push	r5
    1884:	6f 92       	push	r6
    1886:	7f 92       	push	r7
    1888:	8f 92       	push	r8
    188a:	9f 92       	push	r9
    188c:	af 92       	push	r10
    188e:	bf 92       	push	r11
    1890:	cf 92       	push	r12
    1892:	df 92       	push	r13
    1894:	ef 92       	push	r14
    1896:	ff 92       	push	r15
    1898:	0f 93       	push	r16
    189a:	1f 93       	push	r17
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	64 97       	sbiw	r28, 0x14	; 20
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	f8 94       	cli
    18aa:	de bf       	out	0x3e, r29	; 62
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	cd bf       	out	0x3d, r28	; 61
    18b0:	5c 01       	movw	r10, r24
	lcd_cursor(1,1);
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	61 e0       	ldi	r22, 0x01	; 1
    18b8:	70 e0       	ldi	r23, 0x00	; 0
    18ba:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
	lcd_string("Entered DStar 4 ");
    18be:	8a ec       	ldi	r24, 0xCA	; 202
    18c0:	92 e0       	ldi	r25, 0x02	; 2
    18c2:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
	struct Queue *Q = NewQueue();	//Initializing the queue required to 
    18c6:	0e 94 01 0b 	call	0x1602	; 0x1602 <NewQueue>
    18ca:	2c 01       	movw	r4, r24
									//maintan nodes to be visited
	lcd_cursor(1,1);
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	61 e0       	ldi	r22, 0x01	; 1
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
	lcd_string("Entered DStar 6 ");
    18d8:	8b ed       	ldi	r24, 0xDB	; 219
    18da:	92 e0       	ldi	r25, 0x02	; 2
    18dc:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
	int *bfs, source = search;
	bfs = (int *) malloc (size*sizeof (int));
    18e0:	84 e1       	ldi	r24, 0x14	; 20
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0e 94 39 16 	call	0x2c72	; 0x2c72 <malloc>
    18e8:	1c 01       	movw	r2, r24
    18ea:	4c 01       	movw	r8, r24
    18ec:	7c 01       	movw	r14, r24
    18ee:	8e 01       	movw	r16, r28
    18f0:	0d 5f       	subi	r16, 0xFD	; 253
    18f2:	1f 4f       	sbci	r17, 0xFF	; 255
	int visited[size];				//Maintains if the node is visited
	for (int i = 1; i < size; i++) {
    18f4:	65 e1       	ldi	r22, 0x15	; 21
    18f6:	c6 2e       	mov	r12, r22
    18f8:	d1 2c       	mov	r13, r1
    18fa:	cc 0e       	add	r12, r28
    18fc:	dd 1e       	adc	r13, r29
		bfs[i] = 0;
    18fe:	f7 01       	movw	r30, r14
    1900:	13 82       	std	Z+3, r1	; 0x03
    1902:	12 82       	std	Z+2, r1	; 0x02
		visited[i] = 0;
    1904:	f8 01       	movw	r30, r16
    1906:	11 92       	st	Z+, r1
    1908:	11 92       	st	Z+, r1
    190a:	8f 01       	movw	r16, r30
		lcd_cursor(1,1);
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	61 e0       	ldi	r22, 0x01	; 1
    1912:	70 e0       	ldi	r23, 0x00	; 0
    1914:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
		lcd_string("Entered DStar 7 ");
    1918:	8c ee       	ldi	r24, 0xEC	; 236
    191a:	92 e0       	ldi	r25, 0x02	; 2
    191c:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
    1920:	22 e0       	ldi	r18, 0x02	; 2
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	e2 0e       	add	r14, r18
    1926:	f3 1e       	adc	r15, r19
	lcd_cursor(1,1);
	lcd_string("Entered DStar 6 ");
	int *bfs, source = search;
	bfs = (int *) malloc (size*sizeof (int));
	int visited[size];				//Maintains if the node is visited
	for (int i = 1; i < size; i++) {
    1928:	0c 15       	cp	r16, r12
    192a:	1d 05       	cpc	r17, r13
    192c:	41 f7       	brne	.-48     	; 0x18fe <BFS+0x82>
		bfs[i] = 0;
		visited[i] = 0;
		lcd_cursor(1,1);
		lcd_string("Entered DStar 7 ");
	}
	lcd_cursor(1,1);
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	61 e0       	ldi	r22, 0x01	; 1
    1934:	70 e0       	ldi	r23, 0x00	; 0
    1936:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
	lcd_string("Entered DStar 8 ");
    193a:	8d ef       	ldi	r24, 0xFD	; 253
    193c:	92 e0       	ldi	r25, 0x02	; 2
    193e:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
	EnQueue (Q, search);
    1942:	c2 01       	movw	r24, r4
    1944:	b5 01       	movw	r22, r10
    1946:	0e 94 47 0b 	call	0x168e	; 0x168e <EnQueue>
    194a:	78 c0       	rjmp	.+240    	; 0x1a3c <BFS+0x1c0>
	while (!IsEmpty (Q)) {
		//Accessing the first node in the queue and marking it's neighbours to
		//be searched
		lcd_cursor(1,1);
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	61 e0       	ldi	r22, 0x01	; 1
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
		lcd_string("Entered DStar 9 ");
    1958:	8e e0       	ldi	r24, 0x0E	; 14
    195a:	93 e0       	ldi	r25, 0x03	; 3
    195c:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
		search = DeQueue (Q);
    1960:	c2 01       	movw	r24, r4
    1962:	0e 94 19 0c 	call	0x1832	; 0x1832 <DeQueue>
		for (int i = 1; i < size; i++) {
			if (visited[i] == 0) {
				if (map[search][i] != INF) {
					//Adding weight to bfs if the node is connected
					bfs[i] = map[search][i] + bfs[search];
    1966:	3c 01       	movw	r6, r24
    1968:	66 0c       	add	r6, r6
    196a:	77 1c       	adc	r7, r7
    196c:	68 0c       	add	r6, r8
    196e:	79 1c       	adc	r7, r9
    1970:	e2 e3       	ldi	r30, 0x32	; 50
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	8e 9f       	mul	r24, r30
    1976:	70 01       	movw	r14, r0
    1978:	8f 9f       	mul	r24, r31
    197a:	f0 0c       	add	r15, r0
    197c:	9e 9f       	mul	r25, r30
    197e:	f0 0c       	add	r15, r0
    1980:	11 24       	eor	r1, r1
    1982:	2c e8       	ldi	r18, 0x8C	; 140
    1984:	35 e0       	ldi	r19, 0x05	; 5
    1986:	e2 0e       	add	r14, r18
    1988:	f3 1e       	adc	r15, r19
    198a:	43 e0       	ldi	r20, 0x03	; 3
    198c:	a4 2e       	mov	r10, r20
    198e:	b1 2c       	mov	r11, r1
    1990:	ac 0e       	add	r10, r28
    1992:	bd 1e       	adc	r11, r29
    1994:	61 01       	movw	r12, r2
    1996:	01 e0       	ldi	r16, 0x01	; 1
    1998:	10 e0       	ldi	r17, 0x00	; 0
		//be searched
		lcd_cursor(1,1);
		lcd_string("Entered DStar 9 ");
		search = DeQueue (Q);
		for (int i = 1; i < size; i++) {
			if (visited[i] == 0) {
    199a:	f5 01       	movw	r30, r10
    199c:	80 81       	ld	r24, Z
    199e:	91 81       	ldd	r25, Z+1	; 0x01
    19a0:	89 2b       	or	r24, r25
    19a2:	a1 f4       	brne	.+40     	; 0x19cc <BFS+0x150>
				if (map[search][i] != INF) {
					//Adding weight to bfs if the node is connected
					bfs[i] = map[search][i] + bfs[search];
    19a4:	f3 01       	movw	r30, r6
    19a6:	80 81       	ld	r24, Z
    19a8:	91 81       	ldd	r25, Z+1	; 0x01
    19aa:	f7 01       	movw	r30, r14
    19ac:	20 81       	ld	r18, Z
    19ae:	31 81       	ldd	r19, Z+1	; 0x01
    19b0:	82 0f       	add	r24, r18
    19b2:	93 1f       	adc	r25, r19
    19b4:	f6 01       	movw	r30, r12
    19b6:	93 83       	std	Z+3, r25	; 0x03
    19b8:	82 83       	std	Z+2, r24	; 0x02
					//In that case, neighbours of this node needs to be scanned
					//too
					EnQueue (Q, i);
    19ba:	c2 01       	movw	r24, r4
    19bc:	b8 01       	movw	r22, r16
    19be:	0e 94 47 0b 	call	0x168e	; 0x168e <EnQueue>
					visited [i] = 1;
    19c2:	21 e0       	ldi	r18, 0x01	; 1
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	f5 01       	movw	r30, r10
    19c8:	31 83       	std	Z+1, r19	; 0x01
    19ca:	20 83       	st	Z, r18
				}
			}
			lcd_cursor(1,1);
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	61 e0       	ldi	r22, 0x01	; 1
    19d2:	70 e0       	ldi	r23, 0x00	; 0
    19d4:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
			lcd_string("Entered DStar ");
    19d8:	8f e1       	ldi	r24, 0x1F	; 31
    19da:	93 e0       	ldi	r25, 0x03	; 3
    19dc:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
			lcd_print(1, 15, i, 2);
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	6f e0       	ldi	r22, 0x0F	; 15
    19e6:	70 e0       	ldi	r23, 0x00	; 0
    19e8:	a8 01       	movw	r20, r16
    19ea:	22 e0       	ldi	r18, 0x02	; 2
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	0e 94 08 06 	call	0xc10	; 0xc10 <lcd_print>
		//Accessing the first node in the queue and marking it's neighbours to
		//be searched
		lcd_cursor(1,1);
		lcd_string("Entered DStar 9 ");
		search = DeQueue (Q);
		for (int i = 1; i < size; i++) {
    19f2:	0f 5f       	subi	r16, 0xFF	; 255
    19f4:	1f 4f       	sbci	r17, 0xFF	; 255
    19f6:	82 e0       	ldi	r24, 0x02	; 2
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	a8 0e       	add	r10, r24
    19fc:	b9 1e       	adc	r11, r25
    19fe:	e8 0e       	add	r14, r24
    1a00:	f9 1e       	adc	r15, r25
    1a02:	c8 0e       	add	r12, r24
    1a04:	d9 1e       	adc	r13, r25
    1a06:	0a 30       	cpi	r16, 0x0A	; 10
    1a08:	11 05       	cpc	r17, r1
    1a0a:	39 f6       	brne	.-114    	; 0x199a <BFS+0x11e>
			}
			lcd_cursor(1,1);
			lcd_string("Entered DStar ");
			lcd_print(1, 15, i, 2);
		}
		lcd_cursor(1,1);
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	61 e0       	ldi	r22, 0x01	; 1
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
		lcd_string("ELoop completed");
    1a18:	8e e2       	ldi	r24, 0x2E	; 46
    1a1a:	93 e0       	ldi	r25, 0x03	; 3
    1a1c:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    1a20:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    1a22:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    1a24:	88 b9       	out	0x08, r24	; 8
    1a26:	80 ed       	ldi	r24, 0xD0	; 208
    1a28:	97 e0       	ldi	r25, 0x07	; 7
    1a2a:	e0 e7       	ldi	r30, 0x70	; 112
    1a2c:	f1 e0       	ldi	r31, 0x01	; 1
    1a2e:	31 97       	sbiw	r30, 0x01	; 1
    1a30:	f1 f7       	brne	.-4      	; 0x1a2e <BFS+0x1b2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a32:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a34:	d1 f7       	brne	.-12     	; 0x1a2a <BFS+0x1ae>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    1a36:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    1a38:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    1a3a:	88 b9       	out	0x08, r24	; 8
		lcd_string("Entered DStar 7 ");
	}
	lcd_cursor(1,1);
	lcd_string("Entered DStar 8 ");
	EnQueue (Q, search);
	while (!IsEmpty (Q)) {
    1a3c:	f2 01       	movw	r30, r4
    1a3e:	80 81       	ld	r24, Z
    1a40:	91 81       	ldd	r25, Z+1	; 0x01
    1a42:	89 2b       	or	r24, r25
    1a44:	09 f0       	breq	.+2      	; 0x1a48 <BFS+0x1cc>
    1a46:	82 cf       	rjmp	.-252    	; 0x194c <BFS+0xd0>
		lcd_string("ELoop completed");
		buzzer_on();
		_delay_ms(200);
		buzzer_off();
	}
	lcd_cursor(1,1);
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	61 e0       	ldi	r22, 0x01	; 1
    1a4e:	70 e0       	ldi	r23, 0x00	; 0
    1a50:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
	lcd_string("Entered DStar 12");
    1a54:	8e e3       	ldi	r24, 0x3E	; 62
    1a56:	93 e0       	ldi	r25, 0x03	; 3
    1a58:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
	return bfs; 
}
    1a5c:	c4 01       	movw	r24, r8
    1a5e:	64 96       	adiw	r28, 0x14	; 20
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	cd bf       	out	0x3d, r28	; 61
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	1f 91       	pop	r17
    1a70:	0f 91       	pop	r16
    1a72:	ff 90       	pop	r15
    1a74:	ef 90       	pop	r14
    1a76:	df 90       	pop	r13
    1a78:	cf 90       	pop	r12
    1a7a:	bf 90       	pop	r11
    1a7c:	af 90       	pop	r10
    1a7e:	9f 90       	pop	r9
    1a80:	8f 90       	pop	r8
    1a82:	7f 90       	pop	r7
    1a84:	6f 90       	pop	r6
    1a86:	5f 90       	pop	r5
    1a88:	4f 90       	pop	r4
    1a8a:	3f 90       	pop	r3
    1a8c:	2f 90       	pop	r2
    1a8e:	08 95       	ret

00001a90 <heuristic>:
	*Input: Source of the search tree
	*Output: An array with cost (heuristic) of traversing all nodes from the source
	*Logic: Calls BFS to calculate the heuristic
	*Example Call: int *cost = heuristic(source);
*/
int* heuristic (int destination) {
    1a90:	0f 93       	push	r16
    1a92:	1f 93       	push	r17
    1a94:	8c 01       	movw	r16, r24
	lcd_cursor(1,1);
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	61 e0       	ldi	r22, 0x01	; 1
    1a9c:	70 e0       	ldi	r23, 0x00	; 0
    1a9e:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
	lcd_string("Entered DStar 3 ");
    1aa2:	8f e4       	ldi	r24, 0x4F	; 79
    1aa4:	93 e0       	ldi	r25, 0x03	; 3
    1aa6:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
	int *heuris = BFS (destination);	//Calculates heuristics of the node
    1aaa:	c8 01       	movw	r24, r16
    1aac:	0e 94 3e 0c 	call	0x187c	; 0x187c <BFS>
	return heuris;
}
    1ab0:	1f 91       	pop	r17
    1ab2:	0f 91       	pop	r16
    1ab4:	08 95       	ret

00001ab6 <EmptyQueue>:

void EmptyQueue(struct Queue *Q) {
    1ab6:	cf 93       	push	r28
    1ab8:	df 93       	push	r29
    1aba:	ec 01       	movw	r28, r24
    1abc:	03 c0       	rjmp	.+6      	; 0x1ac4 <EmptyQueue+0xe>
	while(Q->head!=NULL)
		DeQueue(Q);
    1abe:	ce 01       	movw	r24, r28
    1ac0:	0e 94 19 0c 	call	0x1832	; 0x1832 <DeQueue>
	free (temp);	
	return data;
}

void EmptyQueue(struct Queue *Q) {
	while(Q->head!=NULL)
    1ac4:	88 81       	ld	r24, Y
    1ac6:	99 81       	ldd	r25, Y+1	; 0x01
    1ac8:	89 2b       	or	r24, r25
    1aca:	c9 f7       	brne	.-14     	; 0x1abe <EmptyQueue+0x8>
		DeQueue(Q);
}
    1acc:	df 91       	pop	r29
    1ace:	cf 91       	pop	r28
    1ad0:	08 95       	ret

00001ad2 <dStar>:
			Applies A* search to find the path with least cost.
			If obstacle is encountered, updates the cost and re-evaluates the
			fastest route.
	*Example Call: dStar (1, 5);
*/
int dStar (int source, int dest) {
    1ad2:	2f 92       	push	r2
    1ad4:	3f 92       	push	r3
    1ad6:	4f 92       	push	r4
    1ad8:	5f 92       	push	r5
    1ada:	6f 92       	push	r6
    1adc:	7f 92       	push	r7
    1ade:	8f 92       	push	r8
    1ae0:	9f 92       	push	r9
    1ae2:	af 92       	push	r10
    1ae4:	bf 92       	push	r11
    1ae6:	cf 92       	push	r12
    1ae8:	df 92       	push	r13
    1aea:	ef 92       	push	r14
    1aec:	ff 92       	push	r15
    1aee:	0f 93       	push	r16
    1af0:	1f 93       	push	r17
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
    1afa:	ce 56       	subi	r28, 0x6E	; 110
    1afc:	d0 40       	sbci	r29, 0x00	; 0
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	f8 94       	cli
    1b02:	de bf       	out	0x3e, r29	; 62
    1b04:	0f be       	out	0x3f, r0	; 63
    1b06:	cd bf       	out	0x3d, r28	; 61
    1b08:	2c 01       	movw	r4, r24
    1b0a:	a9 96       	adiw	r28, 0x29	; 41
    1b0c:	7f af       	std	Y+63, r23	; 0x3f
    1b0e:	6e af       	std	Y+62, r22	; 0x3e
    1b10:	a9 97       	sbiw	r28, 0x29	; 41
		lcd_string("First for loop 1");
		for (int i = 0; i < size; i++) {
			//Initialising open and closed list to be empty
			open[i] = closed[i] = 0;
			parent[i] = -1;
			gCost[i] = fCost[i] = INF;
    1b12:	9e 01       	movw	r18, r28
    1b14:	23 5c       	subi	r18, 0xC3	; 195
    1b16:	3f 4f       	sbci	r19, 0xFF	; 255
    1b18:	ad 96       	adiw	r28, 0x2d	; 45
    1b1a:	3f af       	std	Y+63, r19	; 0x3f
    1b1c:	2e af       	std	Y+62, r18	; 0x3e
    1b1e:	ad 97       	sbiw	r28, 0x2d	; 45
			lcd_cursor(2,1);
			lcd_string("While for loop  ");
		}
		lcd_cursor(2,1);
		lcd_string("First while loop");
		if (parent[dest] == -1) {
    1b20:	ab 01       	movw	r20, r22
    1b22:	44 0f       	add	r20, r20
    1b24:	55 1f       	adc	r21, r21
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	8c 0f       	add	r24, r28
    1b2c:	9d 1f       	adc	r25, r29
    1b2e:	84 0f       	add	r24, r20
    1b30:	95 1f       	adc	r25, r21
    1b32:	ab 96       	adiw	r28, 0x2b	; 43
    1b34:	9f af       	std	Y+63, r25	; 0x3f
    1b36:	8e af       	std	Y+62, r24	; 0x3e
    1b38:	ab 97       	sbiw	r28, 0x2b	; 43
			fastest route.
	*Example Call: dStar (1, 5);
*/
int dStar (int source, int dest) {
	while (1) {
		lcd_cursor(1,1);
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	61 e0       	ldi	r22, 0x01	; 1
    1b40:	70 e0       	ldi	r23, 0x00	; 0
    1b42:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
		lcd_string("Entered DStar   ");
    1b46:	80 e6       	ldi	r24, 0x60	; 96
    1b48:	93 e0       	ldi	r25, 0x03	; 3
    1b4a:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
		lcd_cursor(1,1);
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	61 e0       	ldi	r22, 0x01	; 1
    1b54:	70 e0       	ldi	r23, 0x00	; 0
    1b56:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
		lcd_string("Entered DStar 1 ");
    1b5a:	81 e7       	ldi	r24, 0x71	; 113
    1b5c:	93 e0       	ldi	r25, 0x03	; 3
    1b5e:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
		int *heuris = heuristic (dest);		//Gets the h cost or heuristic
    1b62:	a9 96       	adiw	r28, 0x29	; 41
    1b64:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b66:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b68:	a9 97       	sbiw	r28, 0x29	; 41
    1b6a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <heuristic>
    1b6e:	a7 96       	adiw	r28, 0x27	; 39
    1b70:	9f af       	std	Y+63, r25	; 0x3f
    1b72:	8e af       	std	Y+62, r24	; 0x3e
    1b74:	a7 97       	sbiw	r28, 0x27	; 39
		lcd_cursor(1,1);
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	61 e0       	ldi	r22, 0x01	; 1
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
		lcd_string("Entered DStar 2 ");
    1b82:	82 e8       	ldi	r24, 0x82	; 130
    1b84:	93 e0       	ldi	r25, 0x03	; 3
    1b86:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
		int parent[size], open[size], closed[size], current;	
		int gCost[size], fCost[size];	
		int openSize = 0, closedSize = 0;				//Maintains the size of
		//open list.
		//This speeds up the scanning process.
		gCost[source] = 0;
    1b8a:	f2 01       	movw	r30, r4
    1b8c:	ee 0f       	add	r30, r30
    1b8e:	ff 1f       	adc	r31, r31
    1b90:	a1 e0       	ldi	r26, 0x01	; 1
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	ac 0f       	add	r26, r28
    1b96:	bd 1f       	adc	r27, r29
    1b98:	ae 0f       	add	r26, r30
    1b9a:	bf 1f       	adc	r27, r31
    1b9c:	dd 96       	adiw	r26, 0x3d	; 61
    1b9e:	1c 92       	st	X, r1
    1ba0:	1e 92       	st	-X, r1
    1ba2:	dc 97       	sbiw	r26, 0x3c	; 60
		fCost[source] = fCostCalc (gCost[source], heuris[source]);
    1ba4:	a1 e5       	ldi	r26, 0x51	; 81
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	ac 0f       	add	r26, r28
    1baa:	bd 1f       	adc	r27, r29
    1bac:	ae 0f       	add	r26, r30
    1bae:	bf 1f       	adc	r27, r31
    1bb0:	a7 96       	adiw	r28, 0x27	; 39
    1bb2:	2e ad       	ldd	r18, Y+62	; 0x3e
    1bb4:	3f ad       	ldd	r19, Y+63	; 0x3f
    1bb6:	a7 97       	sbiw	r28, 0x27	; 39
    1bb8:	e2 0f       	add	r30, r18
    1bba:	f3 1f       	adc	r31, r19
    1bbc:	80 81       	ld	r24, Z
    1bbe:	91 81       	ldd	r25, Z+1	; 0x01
    1bc0:	8d 93       	st	X+, r24
    1bc2:	9c 93       	st	X, r25
		lcd_cursor(2,1);
    1bc4:	82 e0       	ldi	r24, 0x02	; 2
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	61 e0       	ldi	r22, 0x01	; 1
    1bca:	70 e0       	ldi	r23, 0x00	; 0
    1bcc:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
		lcd_string("First for loop 1");
    1bd0:	83 e9       	ldi	r24, 0x93	; 147
    1bd2:	93 e0       	ldi	r25, 0x03	; 3
    1bd4:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	90 e0       	ldi	r25, 0x00	; 0
		for (int i = 0; i < size; i++) {
			//Initialising open and closed list to be empty
			open[i] = closed[i] = 0;
    1bdc:	e9 e2       	ldi	r30, 0x29	; 41
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	ec 0f       	add	r30, r28
    1be2:	fd 1f       	adc	r31, r29
    1be4:	e8 0f       	add	r30, r24
    1be6:	f9 1f       	adc	r31, r25
    1be8:	11 82       	std	Z+1, r1	; 0x01
    1bea:	10 82       	st	Z, r1
    1bec:	e5 e1       	ldi	r30, 0x15	; 21
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	ec 0f       	add	r30, r28
    1bf2:	fd 1f       	adc	r31, r29
    1bf4:	e8 0f       	add	r30, r24
    1bf6:	f9 1f       	adc	r31, r25
    1bf8:	11 82       	std	Z+1, r1	; 0x01
    1bfa:	10 82       	st	Z, r1
			parent[i] = -1;
    1bfc:	e1 e0       	ldi	r30, 0x01	; 1
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	ec 0f       	add	r30, r28
    1c02:	fd 1f       	adc	r31, r29
    1c04:	e8 0f       	add	r30, r24
    1c06:	f9 1f       	adc	r31, r25
    1c08:	4f ef       	ldi	r20, 0xFF	; 255
    1c0a:	5f ef       	ldi	r21, 0xFF	; 255
    1c0c:	51 83       	std	Z+1, r21	; 0x01
    1c0e:	40 83       	st	Z, r20
			gCost[i] = fCost[i] = INF;
    1c10:	e1 e5       	ldi	r30, 0x51	; 81
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	ec 0f       	add	r30, r28
    1c16:	fd 1f       	adc	r31, r29
    1c18:	e8 0f       	add	r30, r24
    1c1a:	f9 1f       	adc	r31, r25
    1c1c:	20 ec       	ldi	r18, 0xC0	; 192
    1c1e:	37 e2       	ldi	r19, 0x27	; 39
    1c20:	31 83       	std	Z+1, r19	; 0x01
    1c22:	20 83       	st	Z, r18
    1c24:	ed e3       	ldi	r30, 0x3D	; 61
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	ec 0f       	add	r30, r28
    1c2a:	fd 1f       	adc	r31, r29
    1c2c:	e8 0f       	add	r30, r24
    1c2e:	f9 1f       	adc	r31, r25
    1c30:	31 83       	std	Z+1, r19	; 0x01
    1c32:	20 83       	st	Z, r18
    1c34:	02 96       	adiw	r24, 0x02	; 2
		//This speeds up the scanning process.
		gCost[source] = 0;
		fCost[source] = fCostCalc (gCost[source], heuris[source]);
		lcd_cursor(2,1);
		lcd_string("First for loop 1");
		for (int i = 0; i < size; i++) {
    1c36:	84 31       	cpi	r24, 0x14	; 20
    1c38:	91 05       	cpc	r25, r1
    1c3a:	81 f6       	brne	.-96     	; 0x1bdc <dStar+0x10a>
			//Initialising open and closed list to be empty
			open[i] = closed[i] = 0;
			parent[i] = -1;
			gCost[i] = fCost[i] = INF;
		}
		lcd_cursor(2,1);
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	61 e0       	ldi	r22, 0x01	; 1
    1c42:	70 e0       	ldi	r23, 0x00	; 0
    1c44:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
		lcd_string("First for loop  ");
    1c48:	84 ea       	ldi	r24, 0xA4	; 164
    1c4a:	93 e0       	ldi	r25, 0x03	; 3
    1c4c:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
		open[source] = 1, openSize++;
    1c50:	f2 01       	movw	r30, r4
    1c52:	ee 0f       	add	r30, r30
    1c54:	ff 1f       	adc	r31, r31
    1c56:	41 e0       	ldi	r20, 0x01	; 1
    1c58:	50 e0       	ldi	r21, 0x00	; 0
    1c5a:	4c 0f       	add	r20, r28
    1c5c:	5d 1f       	adc	r21, r29
    1c5e:	e4 0f       	add	r30, r20
    1c60:	f5 1f       	adc	r31, r21
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	95 8b       	std	Z+21, r25	; 0x15
    1c68:	84 8b       	std	Z+20, r24	; 0x14
    1c6a:	31 e0       	ldi	r19, 0x01	; 1
    1c6c:	23 2e       	mov	r2, r19
    1c6e:	31 2c       	mov	r3, r1
    1c70:	d4 c0       	rjmp	.+424    	; 0x1e1a <dStar+0x348>
*/
int extractMin (int list[], int cost[], int Size) {
	//Think of initializing min
	int min = -1;	
	for (int i = 0; i < Size; i++) {
		if (list[i] != 0) {
    1c72:	f7 01       	movw	r30, r14
    1c74:	80 81       	ld	r24, Z
    1c76:	91 81       	ldd	r25, Z+1	; 0x01
    1c78:	89 2b       	or	r24, r25
    1c7a:	b1 f0       	breq	.+44     	; 0x1ca8 <dStar+0x1d6>
			if (min == -1) {
    1c7c:	ff ef       	ldi	r31, 0xFF	; 255
    1c7e:	6f 3f       	cpi	r22, 0xFF	; 255
    1c80:	7f 07       	cpc	r23, r31
    1c82:	89 f0       	breq	.+34     	; 0x1ca6 <dStar+0x1d4>
				min = i;
				continue;
			}
			min = ((cost[min] < cost[i]) ? min : i);
    1c84:	fb 01       	movw	r30, r22
    1c86:	ee 0f       	add	r30, r30
    1c88:	ff 1f       	adc	r31, r31
    1c8a:	21 e5       	ldi	r18, 0x51	; 81
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	2c 0f       	add	r18, r28
    1c90:	3d 1f       	adc	r19, r29
    1c92:	e2 0f       	add	r30, r18
    1c94:	f3 1f       	adc	r31, r19
    1c96:	20 81       	ld	r18, Z
    1c98:	31 81       	ldd	r19, Z+1	; 0x01
    1c9a:	8d 91       	ld	r24, X+
    1c9c:	9c 91       	ld	r25, X
    1c9e:	11 97       	sbiw	r26, 0x01	; 1
    1ca0:	28 17       	cp	r18, r24
    1ca2:	39 07       	cpc	r19, r25
    1ca4:	0c f0       	brlt	.+2      	; 0x1ca8 <dStar+0x1d6>
    1ca6:	ba 01       	movw	r22, r20
	*Example Call: int min = extractMin (openList, fCost, size);
*/
int extractMin (int list[], int cost[], int Size) {
	//Think of initializing min
	int min = -1;	
	for (int i = 0; i < Size; i++) {
    1ca8:	4f 5f       	subi	r20, 0xFF	; 255
    1caa:	5f 4f       	sbci	r21, 0xFF	; 255
    1cac:	82 e0       	ldi	r24, 0x02	; 2
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	e8 0e       	add	r14, r24
    1cb2:	f9 1e       	adc	r15, r25
    1cb4:	12 96       	adiw	r26, 0x02	; 2
    1cb6:	4a 30       	cpi	r20, 0x0A	; 10
    1cb8:	51 05       	cpc	r21, r1
    1cba:	d9 f6       	brne	.-74     	; 0x1c72 <dStar+0x1a0>
		//Scan as long as the open list is not empty
		while (openSize > 0) {
			current = extractMin (open, fCost, size);
			open[current] = 0, openSize--;
    1cbc:	fb 01       	movw	r30, r22
    1cbe:	ee 0f       	add	r30, r30
    1cc0:	ff 1f       	adc	r31, r31
    1cc2:	21 e0       	ldi	r18, 0x01	; 1
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	2c 0f       	add	r18, r28
    1cc8:	3d 1f       	adc	r19, r29
    1cca:	e2 0f       	add	r30, r18
    1ccc:	f3 1f       	adc	r31, r19
    1cce:	15 8a       	std	Z+21, r1	; 0x15
    1cd0:	14 8a       	std	Z+20, r1	; 0x14
			closed[current] = 1, closedSize++;
    1cd2:	41 e0       	ldi	r20, 0x01	; 1
    1cd4:	50 e0       	ldi	r21, 0x00	; 0
    1cd6:	51 a7       	std	Z+41, r21	; 0x29
    1cd8:	40 a7       	std	Z+40, r20	; 0x28
			if (current == dest) break;		//Path to destination is available
    1cda:	a9 96       	adiw	r28, 0x29	; 41
    1cdc:	8e ad       	ldd	r24, Y+62	; 0x3e
    1cde:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ce0:	a9 97       	sbiw	r28, 0x29	; 41
    1ce2:	68 17       	cp	r22, r24
    1ce4:	79 07       	cpc	r23, r25
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <dStar+0x218>
    1ce8:	a5 c0       	rjmp	.+330    	; 0x1e34 <dStar+0x362>
		lcd_string("First for loop  ");
		open[source] = 1, openSize++;
		//Scan as long as the open list is not empty
		while (openSize > 0) {
			current = extractMin (open, fCost, size);
			open[current] = 0, openSize--;
    1cea:	08 94       	sec
    1cec:	21 08       	sbc	r2, r1
    1cee:	31 08       	sbc	r3, r1
    1cf0:	89 e2       	ldi	r24, 0x29	; 41
    1cf2:	68 2e       	mov	r6, r24
    1cf4:	71 2c       	mov	r7, r1
    1cf6:	6c 0e       	add	r6, r28
    1cf8:	7d 1e       	adc	r7, r29
    1cfa:	05 e1       	ldi	r16, 0x15	; 21
    1cfc:	80 2e       	mov	r8, r16
    1cfe:	91 2c       	mov	r9, r1
    1d00:	8c 0e       	add	r8, r28
    1d02:	9d 1e       	adc	r9, r29
    1d04:	22 e3       	ldi	r18, 0x32	; 50
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	62 9f       	mul	r22, r18
    1d0a:	70 01       	movw	r14, r0
    1d0c:	63 9f       	mul	r22, r19
    1d0e:	f0 0c       	add	r15, r0
    1d10:	72 9f       	mul	r23, r18
    1d12:	f0 0c       	add	r15, r0
    1d14:	11 24       	eor	r1, r1
    1d16:	4a e8       	ldi	r20, 0x8A	; 138
    1d18:	55 e0       	ldi	r21, 0x05	; 5
    1d1a:	e4 0e       	add	r14, r20
    1d1c:	f5 1e       	adc	r15, r21
    1d1e:	de 01       	movw	r26, r28
    1d20:	dd 96       	adiw	r26, 0x3d	; 61
    1d22:	a7 96       	adiw	r28, 0x27	; 39
    1d24:	ae ac       	ldd	r10, Y+62	; 0x3e
    1d26:	bf ac       	ldd	r11, Y+63	; 0x3f
    1d28:	a7 97       	sbiw	r28, 0x27	; 39
    1d2a:	11 e5       	ldi	r17, 0x51	; 81
    1d2c:	c1 2e       	mov	r12, r17
    1d2e:	d1 2c       	mov	r13, r1
    1d30:	cc 0e       	add	r12, r28
    1d32:	dd 1e       	adc	r13, r29
    1d34:	8e 01       	movw	r16, r28
    1d36:	0f 5f       	subi	r16, 0xFF	; 255
    1d38:	1f 4f       	sbci	r17, 0xFF	; 255
							fCost[i] = fCostCalc(gCost[i], heuris[i]);
							parent[i] = current;
						} else {
							//Otherwise update path if the new one is better than
							//the already discovered path.
							if ((gCost[current] + map[current][i]) < gCost[i]) {
    1d3a:	cf 01       	movw	r24, r30
    1d3c:	cc 96       	adiw	r24, 0x3c	; 60
    1d3e:	af 96       	adiw	r28, 0x2f	; 47
    1d40:	9f af       	std	Y+63, r25	; 0x3f
    1d42:	8e af       	std	Y+62, r24	; 0x3e
    1d44:	af 97       	sbiw	r28, 0x2f	; 47
			open[current] = 0, openSize--;
			closed[current] = 1, closedSize++;
			if (current == dest) break;		//Path to destination is available
			for (int i = 0; i < size; i++) {
				if (map[current][i] != INF) {
					if (closed[i] == 0) {	//if point is not on the closed list
    1d46:	f3 01       	movw	r30, r6
    1d48:	80 81       	ld	r24, Z
    1d4a:	91 81       	ldd	r25, Z+1	; 0x01
    1d4c:	89 2b       	or	r24, r25
    1d4e:	09 f0       	breq	.+2      	; 0x1d52 <dStar+0x280>
    1d50:	40 c0       	rjmp	.+128    	; 0x1dd2 <dStar+0x300>
						if (open[i] == 0) {
    1d52:	f4 01       	movw	r30, r8
    1d54:	80 81       	ld	r24, Z
    1d56:	91 81       	ldd	r25, Z+1	; 0x01
    1d58:	f7 01       	movw	r30, r14
    1d5a:	40 81       	ld	r20, Z
    1d5c:	51 81       	ldd	r21, Z+1	; 0x01
    1d5e:	89 2b       	or	r24, r25
    1d60:	e1 f4       	brne	.+56     	; 0x1d9a <dStar+0x2c8>
							//If point is not in the open as well as the closed
							//list, add the point to open list. Also calculate
							//gCost and fCost. Update parent to current for
							//retracing the path.
							open[i] = 1;
    1d62:	21 e0       	ldi	r18, 0x01	; 1
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	f4 01       	movw	r30, r8
    1d68:	31 83       	std	Z+1, r19	; 0x01
    1d6a:	20 83       	st	Z, r18
							openSize++;
    1d6c:	08 94       	sec
    1d6e:	21 1c       	adc	r2, r1
    1d70:	31 1c       	adc	r3, r1
							gCost[i] = gCost[current] + map[current][i];
    1d72:	af 96       	adiw	r28, 0x2f	; 47
    1d74:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d76:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d78:	af 97       	sbiw	r28, 0x2f	; 47
    1d7a:	80 81       	ld	r24, Z
    1d7c:	91 81       	ldd	r25, Z+1	; 0x01
    1d7e:	84 0f       	add	r24, r20
    1d80:	95 1f       	adc	r25, r21
    1d82:	11 96       	adiw	r26, 0x01	; 1
    1d84:	9c 93       	st	X, r25
    1d86:	8e 93       	st	-X, r24
							fCost[i] = fCostCalc(gCost[i], heuris[i]);
    1d88:	f5 01       	movw	r30, r10
    1d8a:	20 81       	ld	r18, Z
    1d8c:	31 81       	ldd	r19, Z+1	; 0x01
    1d8e:	82 0f       	add	r24, r18
    1d90:	93 1f       	adc	r25, r19
    1d92:	f6 01       	movw	r30, r12
    1d94:	91 83       	std	Z+1, r25	; 0x01
    1d96:	80 83       	st	Z, r24
    1d98:	19 c0       	rjmp	.+50     	; 0x1dcc <dStar+0x2fa>
							parent[i] = current;
						} else {
							//Otherwise update path if the new one is better than
							//the already discovered path.
							if ((gCost[current] + map[current][i]) < gCost[i]) {
    1d9a:	af 96       	adiw	r28, 0x2f	; 47
    1d9c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d9e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1da0:	af 97       	sbiw	r28, 0x2f	; 47
    1da2:	20 81       	ld	r18, Z
    1da4:	31 81       	ldd	r19, Z+1	; 0x01
    1da6:	24 0f       	add	r18, r20
    1da8:	35 1f       	adc	r19, r21
    1daa:	8d 91       	ld	r24, X+
    1dac:	9c 91       	ld	r25, X
    1dae:	11 97       	sbiw	r26, 0x01	; 1
    1db0:	28 17       	cp	r18, r24
    1db2:	39 07       	cpc	r19, r25
    1db4:	74 f4       	brge	.+28     	; 0x1dd2 <dStar+0x300>
								gCost[i] = gCost[current] + map[current][i];
    1db6:	11 96       	adiw	r26, 0x01	; 1
    1db8:	3c 93       	st	X, r19
    1dba:	2e 93       	st	-X, r18
								fCost[i] = fCostCalc(gCost[i], heuris[i]);
    1dbc:	f5 01       	movw	r30, r10
    1dbe:	80 81       	ld	r24, Z
    1dc0:	91 81       	ldd	r25, Z+1	; 0x01
    1dc2:	28 0f       	add	r18, r24
    1dc4:	39 1f       	adc	r19, r25
    1dc6:	f6 01       	movw	r30, r12
    1dc8:	31 83       	std	Z+1, r19	; 0x01
    1dca:	20 83       	st	Z, r18
								parent[i] = current;
    1dcc:	f8 01       	movw	r30, r16
    1dce:	71 83       	std	Z+1, r23	; 0x01
    1dd0:	60 83       	st	Z, r22
    1dd2:	22 e0       	ldi	r18, 0x02	; 2
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	62 0e       	add	r6, r18
    1dd8:	73 1e       	adc	r7, r19
    1dda:	82 0e       	add	r8, r18
    1ddc:	93 1e       	adc	r9, r19
    1dde:	e2 0e       	add	r14, r18
    1de0:	f3 1e       	adc	r15, r19
    1de2:	12 96       	adiw	r26, 0x02	; 2
    1de4:	a2 0e       	add	r10, r18
    1de6:	b3 1e       	adc	r11, r19
    1de8:	c2 0e       	add	r12, r18
    1dea:	d3 1e       	adc	r13, r19
    1dec:	0e 5f       	subi	r16, 0xFE	; 254
    1dee:	1f 4f       	sbci	r17, 0xFF	; 255
		while (openSize > 0) {
			current = extractMin (open, fCost, size);
			open[current] = 0, openSize--;
			closed[current] = 1, closedSize++;
			if (current == dest) break;		//Path to destination is available
			for (int i = 0; i < size; i++) {
    1df0:	ad 96       	adiw	r28, 0x2d	; 45
    1df2:	4e ad       	ldd	r20, Y+62	; 0x3e
    1df4:	5f ad       	ldd	r21, Y+63	; 0x3f
    1df6:	ad 97       	sbiw	r28, 0x2d	; 45
    1df8:	64 16       	cp	r6, r20
    1dfa:	75 06       	cpc	r7, r21
    1dfc:	09 f0       	breq	.+2      	; 0x1e00 <dStar+0x32e>
    1dfe:	a3 cf       	rjmp	.-186    	; 0x1d46 <dStar+0x274>
							}
						}
					}
				}
			}
			lcd_cursor(2,1);
    1e00:	82 e0       	ldi	r24, 0x02	; 2
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	61 e0       	ldi	r22, 0x01	; 1
    1e06:	70 e0       	ldi	r23, 0x00	; 0
    1e08:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
			lcd_string("While for loop  ");
    1e0c:	85 eb       	ldi	r24, 0xB5	; 181
    1e0e:	93 e0       	ldi	r25, 0x03	; 3
    1e10:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
		}
		lcd_cursor(2,1);
		lcd_string("First for loop  ");
		open[source] = 1, openSize++;
		//Scan as long as the open list is not empty
		while (openSize > 0) {
    1e14:	21 14       	cp	r2, r1
    1e16:	31 04       	cpc	r3, r1
    1e18:	69 f0       	breq	.+26     	; 0x1e34 <dStar+0x362>
    1e1a:	b5 e1       	ldi	r27, 0x15	; 21
    1e1c:	eb 2e       	mov	r14, r27
    1e1e:	f1 2c       	mov	r15, r1
    1e20:	ec 0e       	add	r14, r28
    1e22:	fd 1e       	adc	r15, r29
    1e24:	de 01       	movw	r26, r28
    1e26:	af 5a       	subi	r26, 0xAF	; 175
    1e28:	bf 4f       	sbci	r27, 0xFF	; 255
    1e2a:	40 e0       	ldi	r20, 0x00	; 0
    1e2c:	50 e0       	ldi	r21, 0x00	; 0
    1e2e:	6f ef       	ldi	r22, 0xFF	; 255
    1e30:	7f ef       	ldi	r23, 0xFF	; 255
    1e32:	1f cf       	rjmp	.-450    	; 0x1c72 <dStar+0x1a0>
				}
			}
			lcd_cursor(2,1);
			lcd_string("While for loop  ");
		}
		lcd_cursor(2,1);
    1e34:	82 e0       	ldi	r24, 0x02	; 2
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	61 e0       	ldi	r22, 0x01	; 1
    1e3a:	70 e0       	ldi	r23, 0x00	; 0
    1e3c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
		lcd_string("First while loop");
    1e40:	86 ec       	ldi	r24, 0xC6	; 198
    1e42:	93 e0       	ldi	r25, 0x03	; 3
    1e44:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
		if (parent[dest] == -1) {
    1e48:	ab 96       	adiw	r28, 0x2b	; 43
    1e4a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e4c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e4e:	ab 97       	sbiw	r28, 0x2b	; 43
    1e50:	80 81       	ld	r24, Z
    1e52:	91 81       	ldd	r25, Z+1	; 0x01
    1e54:	8f 5f       	subi	r24, 0xFF	; 255
    1e56:	9f 4f       	sbci	r25, 0xFF	; 255
    1e58:	39 f4       	brne	.+14     	; 0x1e68 <dStar+0x396>
			//Path cannot exist.
			free (heuris);
    1e5a:	a7 96       	adiw	r28, 0x27	; 39
    1e5c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e5e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e60:	a7 97       	sbiw	r28, 0x27	; 39
    1e62:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <free>
    1e66:	62 c0       	rjmp	.+196    	; 0x1f2c <dStar+0x45a>
			return source;
		}
		int *pathSize = (int*) malloc (sizeof(int));
    1e68:	82 e0       	ldi	r24, 0x02	; 2
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	0e 94 39 16 	call	0x2c72	; 0x2c72 <malloc>
    1e70:	8c 01       	movw	r16, r24
		*pathSize = 0;
    1e72:	fc 01       	movw	r30, r24
    1e74:	11 82       	std	Z+1, r1	; 0x01
    1e76:	10 82       	st	Z, r1
		int *path = pathFind (parent, dest, pathSize);
    1e78:	ce 01       	movw	r24, r28
    1e7a:	01 96       	adiw	r24, 0x01	; 1
    1e7c:	a9 96       	adiw	r28, 0x29	; 41
    1e7e:	6e ad       	ldd	r22, Y+62	; 0x3e
    1e80:	7f ad       	ldd	r23, Y+63	; 0x3f
    1e82:	a9 97       	sbiw	r28, 0x29	; 41
    1e84:	a8 01       	movw	r20, r16
    1e86:	0e 94 b0 0a 	call	0x1560	; 0x1560 <pathFind>
    1e8a:	7c 01       	movw	r14, r24
		lcd_cursor(1,1);
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	61 e0       	ldi	r22, 0x01	; 1
    1e92:	70 e0       	ldi	r23, 0x00	; 0
    1e94:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
		lcd_string("Entering Move   ");
    1e98:	87 ed       	ldi	r24, 0xD7	; 215
    1e9a:	93 e0       	ldi	r25, 0x03	; 3
    1e9c:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
		int *result = Move (*path, pathSize);
    1ea0:	f7 01       	movw	r30, r14
    1ea2:	80 81       	ld	r24, Z
    1ea4:	91 81       	ldd	r25, Z+1	; 0x01
    1ea6:	b8 01       	movw	r22, r16
    1ea8:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <Move>
    1eac:	7c 01       	movw	r14, r24
		free (heuris);
    1eae:	a7 96       	adiw	r28, 0x27	; 39
    1eb0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1eb2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1eb4:	a7 97       	sbiw	r28, 0x27	; 39
    1eb6:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <free>
		free (pathSize);
    1eba:	c8 01       	movw	r24, r16
    1ebc:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <free>
		if (result[0] == 0) {
    1ec0:	f7 01       	movw	r30, r14
    1ec2:	80 81       	ld	r24, Z
    1ec4:	91 81       	ldd	r25, Z+1	; 0x01
    1ec6:	89 2b       	or	r24, r25
    1ec8:	31 f4       	brne	.+12     	; 0x1ed6 <dStar+0x404>
			free (result);
    1eca:	c7 01       	movw	r24, r14
    1ecc:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <free>
    1ed0:	44 24       	eor	r4, r4
    1ed2:	55 24       	eor	r5, r5
    1ed4:	2b c0       	rjmp	.+86     	; 0x1f2c <dStar+0x45a>
			return 0;		//Movement complete
		}
		source = result[1];
    1ed6:	f7 01       	movw	r30, r14
    1ed8:	42 80       	ldd	r4, Z+2	; 0x02
    1eda:	53 80       	ldd	r5, Z+3	; 0x03
		//Updates the map
		map[result[1]][result[2]] = map[result[2]][result[1]] = INF;
    1edc:	24 81       	ldd	r18, Z+4	; 0x04
    1ede:	35 81       	ldd	r19, Z+5	; 0x05
    1ee0:	89 e1       	ldi	r24, 0x19	; 25
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	28 9f       	mul	r18, r24
    1ee6:	f0 01       	movw	r30, r0
    1ee8:	29 9f       	mul	r18, r25
    1eea:	f0 0d       	add	r31, r0
    1eec:	38 9f       	mul	r19, r24
    1eee:	f0 0d       	add	r31, r0
    1ef0:	11 24       	eor	r1, r1
    1ef2:	e4 0d       	add	r30, r4
    1ef4:	f5 1d       	adc	r31, r5
    1ef6:	ee 0f       	add	r30, r30
    1ef8:	ff 1f       	adc	r31, r31
    1efa:	e6 57       	subi	r30, 0x76	; 118
    1efc:	fa 4f       	sbci	r31, 0xFA	; 250
    1efe:	40 ec       	ldi	r20, 0xC0	; 192
    1f00:	57 e2       	ldi	r21, 0x27	; 39
    1f02:	51 83       	std	Z+1, r21	; 0x01
    1f04:	40 83       	st	Z, r20
    1f06:	48 9e       	mul	r4, r24
    1f08:	f0 01       	movw	r30, r0
    1f0a:	49 9e       	mul	r4, r25
    1f0c:	f0 0d       	add	r31, r0
    1f0e:	58 9e       	mul	r5, r24
    1f10:	f0 0d       	add	r31, r0
    1f12:	11 24       	eor	r1, r1
    1f14:	e2 0f       	add	r30, r18
    1f16:	f3 1f       	adc	r31, r19
    1f18:	ee 0f       	add	r30, r30
    1f1a:	ff 1f       	adc	r31, r31
    1f1c:	e6 57       	subi	r30, 0x76	; 118
    1f1e:	fa 4f       	sbci	r31, 0xFA	; 250
    1f20:	51 83       	std	Z+1, r21	; 0x01
    1f22:	40 83       	st	Z, r20
		free (result);
    1f24:	c7 01       	movw	r24, r14
    1f26:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <free>
    1f2a:	07 ce       	rjmp	.-1010   	; 0x1b3a <dStar+0x68>
	}
}
    1f2c:	c2 01       	movw	r24, r4
    1f2e:	c2 59       	subi	r28, 0x92	; 146
    1f30:	df 4f       	sbci	r29, 0xFF	; 255
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	cd bf       	out	0x3d, r28	; 61
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	1f 91       	pop	r17
    1f42:	0f 91       	pop	r16
    1f44:	ff 90       	pop	r15
    1f46:	ef 90       	pop	r14
    1f48:	df 90       	pop	r13
    1f4a:	cf 90       	pop	r12
    1f4c:	bf 90       	pop	r11
    1f4e:	af 90       	pop	r10
    1f50:	9f 90       	pop	r9
    1f52:	8f 90       	pop	r8
    1f54:	7f 90       	pop	r7
    1f56:	6f 90       	pop	r6
    1f58:	5f 90       	pop	r5
    1f5a:	4f 90       	pop	r4
    1f5c:	3f 90       	pop	r3
    1f5e:	2f 90       	pop	r2
    1f60:	08 95       	ret

00001f62 <main>:
	*Logic: Runs the entire program.
	*Example Call: Automatic calling
*/
int main(void)
{
	initial_devices();
    1f62:	0e 94 31 08 	call	0x1062	; 0x1062 <initial_devices>
	lcd_set_4bit();
    1f66:	0e 94 51 05 	call	0xaa2	; 0xaa2 <lcd_set_4bit>
	lcd_init();
    1f6a:	0e 94 a4 05 	call	0xb48	; 0xb48 <lcd_init>
	servo_3(105);
    1f6e:	89 e6       	ldi	r24, 0x69	; 105
    1f70:	0e 94 08 07 	call	0xe10	; 0xe10 <servo_3>
	while(1) {
		// if (count == arr_size)
		if (count == -1)
    1f74:	80 91 5f 04 	lds	r24, 0x045F
    1f78:	90 91 60 04 	lds	r25, 0x0460
    1f7c:	8f 5f       	subi	r24, 0xFF	; 255
    1f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f80:	09 f0       	breq	.+2      	; 0x1f84 <main+0x22>
    1f82:	54 c0       	rjmp	.+168    	; 0x202c <main+0xca>
		{
			lcd_cursor(1,1);
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	61 e0       	ldi	r22, 0x01	; 1
    1f88:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
			lcd_string("      Array     ");
    1f8c:	88 ee       	ldi	r24, 0xE8	; 232
    1f8e:	93 e0       	ldi	r25, 0x03	; 3
    1f90:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
			lcd_cursor(2,1);
    1f94:	82 e0       	ldi	r24, 0x02	; 2
    1f96:	61 e0       	ldi	r22, 0x01	; 1
    1f98:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
			lcd_string("   Recieved!!!  ");
    1f9c:	89 ef       	ldi	r24, 0xF9	; 249
    1f9e:	93 e0       	ldi	r25, 0x03	; 3
    1fa0:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
    1fa4:	80 e2       	ldi	r24, 0x20	; 32
    1fa6:	9e e4       	ldi	r25, 0x4E	; 78
    1fa8:	20 e7       	ldi	r18, 0x70	; 112
    1faa:	31 e0       	ldi	r19, 0x01	; 1
    1fac:	f9 01       	movw	r30, r18
    1fae:	31 97       	sbiw	r30, 0x01	; 1
    1fb0:	f1 f7       	brne	.-4      	; 0x1fae <main+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb4:	d9 f7       	brne	.-10     	; 0x1fac <main+0x4a>
			// seperate();
			// remove_zero();
			// for (int i = 0; i < master_size - 1; i++) {
			// 	simulation (arr_master[i], arr_master[i+1]);
			// }
			dStar(1,7);
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	67 e0       	ldi	r22, 0x07	; 7
    1fbc:	70 e0       	ldi	r23, 0x00	; 0
    1fbe:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <dStar>
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	40 e7       	ldi	r20, 0x70	; 112
    1fc8:	51 e0       	ldi	r21, 0x01	; 1
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    1fca:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    1fcc:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    1fce:	88 b9       	out	0x08, r24	; 8
    1fd0:	80 ed       	ldi	r24, 0xD0	; 208
    1fd2:	97 e0       	ldi	r25, 0x07	; 7
    1fd4:	fa 01       	movw	r30, r20
    1fd6:	31 97       	sbiw	r30, 0x01	; 1
    1fd8:	f1 f7       	brne	.-4      	; 0x1fd6 <main+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fda:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fdc:	d9 f7       	brne	.-10     	; 0x1fd4 <main+0x72>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    1fde:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    1fe0:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    1fe2:	88 b9       	out	0x08, r24	; 8
    1fe4:	84 ef       	ldi	r24, 0xF4	; 244
    1fe6:	91 e0       	ldi	r25, 0x01	; 1
    1fe8:	fa 01       	movw	r30, r20
    1fea:	31 97       	sbiw	r30, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <main+0x88>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff0:	d9 f7       	brne	.-10     	; 0x1fe8 <main+0x86>
			// remove_zero();
			// for (int i = 0; i < master_size - 1; i++) {
			// 	simulation (arr_master[i], arr_master[i+1]);
			// }
			dStar(1,7);
			for ( int i = 0; i < 20; i++) {
    1ff2:	2f 5f       	subi	r18, 0xFF	; 255
    1ff4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff6:	24 31       	cpi	r18, 0x14	; 20
    1ff8:	31 05       	cpc	r19, r1
    1ffa:	39 f7       	brne	.-50     	; 0x1fca <main+0x68>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1ffc:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1ffe:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    2000:	82 b9       	out	0x02, r24	; 2
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    2002:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char)right_motor;
    2006:	10 92 2a 01 	sts	0x012A, r1
				_delay_ms(50);
			}
			while(1) {
				stop();
				velocity(0,0);
				lcd_cursor(1,1);
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	61 e0       	ldi	r22, 0x01	; 1
    200e:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
				lcd_string("      Task      ");
    2012:	8a e0       	ldi	r24, 0x0A	; 10
    2014:	94 e0       	ldi	r25, 0x04	; 4
    2016:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
				lcd_cursor(2,1);
    201a:	82 e0       	ldi	r24, 0x02	; 2
    201c:	61 e0       	ldi	r22, 0x01	; 1
    201e:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
				lcd_string("  Completed!!!  ");
    2022:	8b e1       	ldi	r24, 0x1B	; 27
    2024:	94 e0       	ldi	r25, 0x04	; 4
    2026:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
    202a:	e8 cf       	rjmp	.-48     	; 0x1ffc <main+0x9a>
			}
		}
		lcd_cursor(1,1);
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	61 e0       	ldi	r22, 0x01	; 1
    2030:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
		lcd_string("      Task      ");
    2034:	8a e0       	ldi	r24, 0x0A	; 10
    2036:	94 e0       	ldi	r25, 0x04	; 4
    2038:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
		lcd_cursor(2,1);
    203c:	82 e0       	ldi	r24, 0x02	; 2
    203e:	61 e0       	ldi	r22, 0x01	; 1
    2040:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
		lcd_string("  Initiated!!!  ");
    2044:	8c e2       	ldi	r24, 0x2C	; 44
    2046:	94 e0       	ldi	r25, 0x04	; 4
    2048:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
    204c:	93 cf       	rjmp	.-218    	; 0x1f74 <main+0x12>

0000204e <simulation>:
	*Output: NIL
	*Logic: simulates (later changed to actually do it)
			the dStar and holding at node detection.
	*Example Call: simulation(1, 8);
*/
void simulation(int from, int to) {
    204e:	ef 92       	push	r14
    2050:	ff 92       	push	r15
    2052:	0f 93       	push	r16
    2054:	1f 93       	push	r17
    2056:	cf 93       	push	r28
    2058:	df 93       	push	r29
    205a:	eb 01       	movw	r28, r22

	signed int success = dStar(from,to);
    205c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <dStar>
    2060:	8c 01       	movw	r16, r24
    2062:	b0 e7       	ldi	r27, 0x70	; 112
    2064:	eb 2e       	mov	r14, r27
    2066:	b1 e0       	ldi	r27, 0x01	; 1
    2068:	fb 2e       	mov	r15, r27
    206a:	46 c0       	rjmp	.+140    	; 0x20f8 <simulation+0xaa>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    206c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    206e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    2070:	82 b9       	out	0x02, r24	; 2
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    2072:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char)right_motor;
    2076:	10 92 2a 01 	sts	0x012A, r1

	while (sequence_arr[Counter] == 0)
	{
		stop();
		velocity(0,0);
		lcd_cursor(1,1);
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	61 e0       	ldi	r22, 0x01	; 1
    207e:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
		lcd_string("   Waiting!!!   ");
    2082:	8d e3       	ldi	r24, 0x3D	; 61
    2084:	94 e0       	ldi	r25, 0x04	; 4
    2086:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
		lcd_cursor(2,1);
    208a:	82 e0       	ldi	r24, 0x02	; 2
    208c:	61 e0       	ldi	r22, 0x01	; 1
    208e:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <lcd_cursor>
		lcd_string(" For Slave Bot! ");
    2092:	8e e4       	ldi	r24, 0x4E	; 78
    2094:	94 e0       	ldi	r25, 0x04	; 4
    2096:	0e 94 df 05 	call	0xbbe	; 0xbbe <lcd_string>
    209a:	88 ee       	ldi	r24, 0xE8	; 232
    209c:	93 e0       	ldi	r25, 0x03	; 3
    209e:	f7 01       	movw	r30, r14
    20a0:	31 97       	sbiw	r30, 0x01	; 1
    20a2:	f1 f7       	brne	.-4      	; 0x20a0 <simulation+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a6:	d9 f7       	brne	.-10     	; 0x209e <simulation+0x50>
		_delay_ms(100);
		if(update < 0) {
    20a8:	80 91 36 0b 	lds	r24, 0x0B36
    20ac:	90 91 37 0b 	lds	r25, 0x0B37
    20b0:	97 ff       	sbrs	r25, 7
    20b2:	22 c0       	rjmp	.+68     	; 0x20f8 <simulation+0xaa>
			dStar(to, -update);
    20b4:	66 27       	eor	r22, r22
    20b6:	77 27       	eor	r23, r23
    20b8:	68 1b       	sub	r22, r24
    20ba:	79 0b       	sbc	r23, r25
    20bc:	ce 01       	movw	r24, r28
    20be:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <dStar>
			strike();
    20c2:	0e 94 b6 07 	call	0xf6c	; 0xf6c <strike>
			++Counter;
    20c6:	80 91 88 05 	lds	r24, 0x0588
    20ca:	90 91 89 05 	lds	r25, 0x0589
    20ce:	01 96       	adiw	r24, 0x01	; 1
    20d0:	90 93 89 05 	sts	0x0589, r25
    20d4:	80 93 88 05 	sts	0x0588, r24
			UDR0 = Counter;
    20d8:	80 93 c6 00 	sts	0x00C6, r24
			dStar(-update, to);
    20dc:	80 91 36 0b 	lds	r24, 0x0B36
    20e0:	90 91 37 0b 	lds	r25, 0x0B37
    20e4:	90 95       	com	r25
    20e6:	81 95       	neg	r24
    20e8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ea:	be 01       	movw	r22, r28
    20ec:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <dStar>
			update = 0;
    20f0:	10 92 37 0b 	sts	0x0B37, r1
    20f4:	10 92 36 0b 	sts	0x0B36, r1
*/
void simulation(int from, int to) {

	signed int success = dStar(from,to);

	while (sequence_arr[Counter] == 0)
    20f8:	20 91 2e 0b 	lds	r18, 0x0B2E
    20fc:	30 91 2f 0b 	lds	r19, 0x0B2F
    2100:	e0 91 88 05 	lds	r30, 0x0588
    2104:	f0 91 89 05 	lds	r31, 0x0589
    2108:	ee 0f       	add	r30, r30
    210a:	ff 1f       	adc	r31, r31
    210c:	e2 0f       	add	r30, r18
    210e:	f3 1f       	adc	r31, r19
    2110:	80 81       	ld	r24, Z
    2112:	91 81       	ldd	r25, Z+1	; 0x01
    2114:	89 2b       	or	r24, r25
    2116:	09 f4       	brne	.+2      	; 0x211a <simulation+0xcc>
    2118:	a9 cf       	rjmp	.-174    	; 0x206c <simulation+0x1e>
			dStar(-update, to);
			update = 0;
		}
	}

	if (success == 0) {
    211a:	01 15       	cp	r16, r1
    211c:	11 05       	cpc	r17, r1
    211e:	41 f0       	breq	.+16     	; 0x2130 <simulation+0xe2>
		++Counter;
		UDR0 = Counter;
	} else {
		signed int update_for_other = 0;
		signed int index;
		for (int i = 0; i < master_size; ++i) {
    2120:	40 91 86 05 	lds	r20, 0x0586
    2124:	50 91 87 05 	lds	r21, 0x0587
    2128:	f9 01       	movw	r30, r18
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	17 c0       	rjmp	.+46     	; 0x215e <simulation+0x110>
			update = 0;
		}
	}

	if (success == 0) {
		strike();
    2130:	0e 94 b6 07 	call	0xf6c	; 0xf6c <strike>

		++Counter;
    2134:	80 91 88 05 	lds	r24, 0x0588
    2138:	90 91 89 05 	lds	r25, 0x0589
    213c:	01 96       	adiw	r24, 0x01	; 1
    213e:	90 93 89 05 	sts	0x0589, r25
    2142:	80 93 88 05 	sts	0x0588, r24
		UDR0 = Counter;
    2146:	80 93 c6 00 	sts	0x00C6, r24
    214a:	18 c0       	rjmp	.+48     	; 0x217c <simulation+0x12e>
	} else {
		signed int update_for_other = 0;
		signed int index;
		for (int i = 0; i < master_size; ++i) {
			if (sequence_arr[i] == to) {
    214c:	81 91       	ld	r24, Z+
    214e:	91 91       	ld	r25, Z+
    2150:	8c 17       	cp	r24, r28
    2152:	9d 07       	cpc	r25, r29
    2154:	11 f4       	brne	.+4      	; 0x215a <simulation+0x10c>
    2156:	f9 01       	movw	r30, r18
    2158:	05 c0       	rjmp	.+10     	; 0x2164 <simulation+0x116>
		++Counter;
		UDR0 = Counter;
	} else {
		signed int update_for_other = 0;
		signed int index;
		for (int i = 0; i < master_size; ++i) {
    215a:	2f 5f       	subi	r18, 0xFF	; 255
    215c:	3f 4f       	sbci	r19, 0xFF	; 255
    215e:	24 17       	cp	r18, r20
    2160:	35 07       	cpc	r19, r21
    2162:	a4 f3       	brlt	.-24     	; 0x214c <simulation+0xfe>
				index = i;
				break;
			}
		}
		update_for_other = -to;
		UDR0 = update_for_other;
    2164:	88 27       	eor	r24, r24
    2166:	99 27       	eor	r25, r25
    2168:	8c 1b       	sub	r24, r28
    216a:	9d 0b       	sbc	r25, r29
    216c:	80 93 c6 00 	sts	0x00C6, r24

		arr_master[index] = success;
    2170:	ee 0f       	add	r30, r30
    2172:	ff 1f       	adc	r31, r31
    2174:	e4 50       	subi	r30, 0x04	; 4
    2176:	f5 4f       	sbci	r31, 0xF5	; 245
    2178:	11 83       	std	Z+1, r17	; 0x01
    217a:	00 83       	st	Z, r16
	}
}
    217c:	df 91       	pop	r29
    217e:	cf 91       	pop	r28
    2180:	1f 91       	pop	r17
    2182:	0f 91       	pop	r16
    2184:	ff 90       	pop	r15
    2186:	ef 90       	pop	r14
    2188:	08 95       	ret

0000218a <__fixunssfsi>:
    218a:	ef 92       	push	r14
    218c:	ff 92       	push	r15
    218e:	0f 93       	push	r16
    2190:	1f 93       	push	r17
    2192:	7b 01       	movw	r14, r22
    2194:	8c 01       	movw	r16, r24
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	40 e0       	ldi	r20, 0x00	; 0
    219c:	5f e4       	ldi	r21, 0x4F	; 79
    219e:	0e 94 47 13 	call	0x268e	; 0x268e <__gesf2>
    21a2:	88 23       	and	r24, r24
    21a4:	8c f0       	brlt	.+34     	; 0x21c8 <__fixunssfsi+0x3e>
    21a6:	c8 01       	movw	r24, r16
    21a8:	b7 01       	movw	r22, r14
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e0       	ldi	r20, 0x00	; 0
    21b0:	5f e4       	ldi	r21, 0x4F	; 79
    21b2:	0e 94 3d 12 	call	0x247a	; 0x247a <__subsf3>
    21b6:	0e 94 77 13 	call	0x26ee	; 0x26ee <__fixsfsi>
    21ba:	9b 01       	movw	r18, r22
    21bc:	ac 01       	movw	r20, r24
    21be:	20 50       	subi	r18, 0x00	; 0
    21c0:	30 40       	sbci	r19, 0x00	; 0
    21c2:	40 40       	sbci	r20, 0x00	; 0
    21c4:	50 48       	sbci	r21, 0x80	; 128
    21c6:	06 c0       	rjmp	.+12     	; 0x21d4 <__fixunssfsi+0x4a>
    21c8:	c8 01       	movw	r24, r16
    21ca:	b7 01       	movw	r22, r14
    21cc:	0e 94 77 13 	call	0x26ee	; 0x26ee <__fixsfsi>
    21d0:	9b 01       	movw	r18, r22
    21d2:	ac 01       	movw	r20, r24
    21d4:	b9 01       	movw	r22, r18
    21d6:	ca 01       	movw	r24, r20
    21d8:	1f 91       	pop	r17
    21da:	0f 91       	pop	r16
    21dc:	ff 90       	pop	r15
    21de:	ef 90       	pop	r14
    21e0:	08 95       	ret

000021e2 <_fpadd_parts>:
    21e2:	a0 e0       	ldi	r26, 0x00	; 0
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	e7 ef       	ldi	r30, 0xF7	; 247
    21e8:	f0 e1       	ldi	r31, 0x10	; 16
    21ea:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <__prologue_saves__>
    21ee:	dc 01       	movw	r26, r24
    21f0:	2b 01       	movw	r4, r22
    21f2:	fa 01       	movw	r30, r20
    21f4:	9c 91       	ld	r25, X
    21f6:	92 30       	cpi	r25, 0x02	; 2
    21f8:	08 f4       	brcc	.+2      	; 0x21fc <_fpadd_parts+0x1a>
    21fa:	39 c1       	rjmp	.+626    	; 0x246e <__stack+0x26f>
    21fc:	eb 01       	movw	r28, r22
    21fe:	88 81       	ld	r24, Y
    2200:	82 30       	cpi	r24, 0x02	; 2
    2202:	08 f4       	brcc	.+2      	; 0x2206 <__stack+0x7>
    2204:	33 c1       	rjmp	.+614    	; 0x246c <__stack+0x26d>
    2206:	94 30       	cpi	r25, 0x04	; 4
    2208:	69 f4       	brne	.+26     	; 0x2224 <__stack+0x25>
    220a:	84 30       	cpi	r24, 0x04	; 4
    220c:	09 f0       	breq	.+2      	; 0x2210 <__stack+0x11>
    220e:	2f c1       	rjmp	.+606    	; 0x246e <__stack+0x26f>
    2210:	11 96       	adiw	r26, 0x01	; 1
    2212:	9c 91       	ld	r25, X
    2214:	11 97       	sbiw	r26, 0x01	; 1
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	98 17       	cp	r25, r24
    221a:	09 f4       	brne	.+2      	; 0x221e <__stack+0x1f>
    221c:	28 c1       	rjmp	.+592    	; 0x246e <__stack+0x26f>
    221e:	a1 e6       	ldi	r26, 0x61	; 97
    2220:	b4 e0       	ldi	r27, 0x04	; 4
    2222:	25 c1       	rjmp	.+586    	; 0x246e <__stack+0x26f>
    2224:	84 30       	cpi	r24, 0x04	; 4
    2226:	09 f4       	brne	.+2      	; 0x222a <__stack+0x2b>
    2228:	21 c1       	rjmp	.+578    	; 0x246c <__stack+0x26d>
    222a:	82 30       	cpi	r24, 0x02	; 2
    222c:	a9 f4       	brne	.+42     	; 0x2258 <__stack+0x59>
    222e:	92 30       	cpi	r25, 0x02	; 2
    2230:	09 f0       	breq	.+2      	; 0x2234 <__stack+0x35>
    2232:	1d c1       	rjmp	.+570    	; 0x246e <__stack+0x26f>
    2234:	9a 01       	movw	r18, r20
    2236:	ad 01       	movw	r20, r26
    2238:	88 e0       	ldi	r24, 0x08	; 8
    223a:	ea 01       	movw	r28, r20
    223c:	09 90       	ld	r0, Y+
    223e:	ae 01       	movw	r20, r28
    2240:	e9 01       	movw	r28, r18
    2242:	09 92       	st	Y+, r0
    2244:	9e 01       	movw	r18, r28
    2246:	81 50       	subi	r24, 0x01	; 1
    2248:	c1 f7       	brne	.-16     	; 0x223a <__stack+0x3b>
    224a:	e2 01       	movw	r28, r4
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	11 96       	adiw	r26, 0x01	; 1
    2250:	9c 91       	ld	r25, X
    2252:	89 23       	and	r24, r25
    2254:	81 83       	std	Z+1, r24	; 0x01
    2256:	08 c1       	rjmp	.+528    	; 0x2468 <__stack+0x269>
    2258:	92 30       	cpi	r25, 0x02	; 2
    225a:	09 f4       	brne	.+2      	; 0x225e <__stack+0x5f>
    225c:	07 c1       	rjmp	.+526    	; 0x246c <__stack+0x26d>
    225e:	12 96       	adiw	r26, 0x02	; 2
    2260:	2d 90       	ld	r2, X+
    2262:	3c 90       	ld	r3, X
    2264:	13 97       	sbiw	r26, 0x03	; 3
    2266:	eb 01       	movw	r28, r22
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	9b 81       	ldd	r25, Y+3	; 0x03
    226c:	14 96       	adiw	r26, 0x04	; 4
    226e:	ad 90       	ld	r10, X+
    2270:	bd 90       	ld	r11, X+
    2272:	cd 90       	ld	r12, X+
    2274:	dc 90       	ld	r13, X
    2276:	17 97       	sbiw	r26, 0x07	; 7
    2278:	ec 80       	ldd	r14, Y+4	; 0x04
    227a:	fd 80       	ldd	r15, Y+5	; 0x05
    227c:	0e 81       	ldd	r16, Y+6	; 0x06
    227e:	1f 81       	ldd	r17, Y+7	; 0x07
    2280:	91 01       	movw	r18, r2
    2282:	28 1b       	sub	r18, r24
    2284:	39 0b       	sbc	r19, r25
    2286:	b9 01       	movw	r22, r18
    2288:	37 ff       	sbrs	r19, 7
    228a:	04 c0       	rjmp	.+8      	; 0x2294 <__stack+0x95>
    228c:	66 27       	eor	r22, r22
    228e:	77 27       	eor	r23, r23
    2290:	62 1b       	sub	r22, r18
    2292:	73 0b       	sbc	r23, r19
    2294:	60 32       	cpi	r22, 0x20	; 32
    2296:	71 05       	cpc	r23, r1
    2298:	0c f0       	brlt	.+2      	; 0x229c <__stack+0x9d>
    229a:	61 c0       	rjmp	.+194    	; 0x235e <__stack+0x15f>
    229c:	12 16       	cp	r1, r18
    229e:	13 06       	cpc	r1, r19
    22a0:	6c f5       	brge	.+90     	; 0x22fc <__stack+0xfd>
    22a2:	37 01       	movw	r6, r14
    22a4:	48 01       	movw	r8, r16
    22a6:	06 2e       	mov	r0, r22
    22a8:	04 c0       	rjmp	.+8      	; 0x22b2 <__stack+0xb3>
    22aa:	96 94       	lsr	r9
    22ac:	87 94       	ror	r8
    22ae:	77 94       	ror	r7
    22b0:	67 94       	ror	r6
    22b2:	0a 94       	dec	r0
    22b4:	d2 f7       	brpl	.-12     	; 0x22aa <__stack+0xab>
    22b6:	21 e0       	ldi	r18, 0x01	; 1
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	40 e0       	ldi	r20, 0x00	; 0
    22bc:	50 e0       	ldi	r21, 0x00	; 0
    22be:	04 c0       	rjmp	.+8      	; 0x22c8 <__stack+0xc9>
    22c0:	22 0f       	add	r18, r18
    22c2:	33 1f       	adc	r19, r19
    22c4:	44 1f       	adc	r20, r20
    22c6:	55 1f       	adc	r21, r21
    22c8:	6a 95       	dec	r22
    22ca:	d2 f7       	brpl	.-12     	; 0x22c0 <__stack+0xc1>
    22cc:	21 50       	subi	r18, 0x01	; 1
    22ce:	30 40       	sbci	r19, 0x00	; 0
    22d0:	40 40       	sbci	r20, 0x00	; 0
    22d2:	50 40       	sbci	r21, 0x00	; 0
    22d4:	2e 21       	and	r18, r14
    22d6:	3f 21       	and	r19, r15
    22d8:	40 23       	and	r20, r16
    22da:	51 23       	and	r21, r17
    22dc:	21 15       	cp	r18, r1
    22de:	31 05       	cpc	r19, r1
    22e0:	41 05       	cpc	r20, r1
    22e2:	51 05       	cpc	r21, r1
    22e4:	21 f0       	breq	.+8      	; 0x22ee <__stack+0xef>
    22e6:	21 e0       	ldi	r18, 0x01	; 1
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e0       	ldi	r20, 0x00	; 0
    22ec:	50 e0       	ldi	r21, 0x00	; 0
    22ee:	79 01       	movw	r14, r18
    22f0:	8a 01       	movw	r16, r20
    22f2:	e6 28       	or	r14, r6
    22f4:	f7 28       	or	r15, r7
    22f6:	08 29       	or	r16, r8
    22f8:	19 29       	or	r17, r9
    22fa:	3c c0       	rjmp	.+120    	; 0x2374 <__stack+0x175>
    22fc:	23 2b       	or	r18, r19
    22fe:	d1 f1       	breq	.+116    	; 0x2374 <__stack+0x175>
    2300:	26 0e       	add	r2, r22
    2302:	37 1e       	adc	r3, r23
    2304:	35 01       	movw	r6, r10
    2306:	46 01       	movw	r8, r12
    2308:	06 2e       	mov	r0, r22
    230a:	04 c0       	rjmp	.+8      	; 0x2314 <__stack+0x115>
    230c:	96 94       	lsr	r9
    230e:	87 94       	ror	r8
    2310:	77 94       	ror	r7
    2312:	67 94       	ror	r6
    2314:	0a 94       	dec	r0
    2316:	d2 f7       	brpl	.-12     	; 0x230c <__stack+0x10d>
    2318:	21 e0       	ldi	r18, 0x01	; 1
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e0       	ldi	r20, 0x00	; 0
    231e:	50 e0       	ldi	r21, 0x00	; 0
    2320:	04 c0       	rjmp	.+8      	; 0x232a <__stack+0x12b>
    2322:	22 0f       	add	r18, r18
    2324:	33 1f       	adc	r19, r19
    2326:	44 1f       	adc	r20, r20
    2328:	55 1f       	adc	r21, r21
    232a:	6a 95       	dec	r22
    232c:	d2 f7       	brpl	.-12     	; 0x2322 <__stack+0x123>
    232e:	21 50       	subi	r18, 0x01	; 1
    2330:	30 40       	sbci	r19, 0x00	; 0
    2332:	40 40       	sbci	r20, 0x00	; 0
    2334:	50 40       	sbci	r21, 0x00	; 0
    2336:	2a 21       	and	r18, r10
    2338:	3b 21       	and	r19, r11
    233a:	4c 21       	and	r20, r12
    233c:	5d 21       	and	r21, r13
    233e:	21 15       	cp	r18, r1
    2340:	31 05       	cpc	r19, r1
    2342:	41 05       	cpc	r20, r1
    2344:	51 05       	cpc	r21, r1
    2346:	21 f0       	breq	.+8      	; 0x2350 <__stack+0x151>
    2348:	21 e0       	ldi	r18, 0x01	; 1
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e0       	ldi	r20, 0x00	; 0
    234e:	50 e0       	ldi	r21, 0x00	; 0
    2350:	59 01       	movw	r10, r18
    2352:	6a 01       	movw	r12, r20
    2354:	a6 28       	or	r10, r6
    2356:	b7 28       	or	r11, r7
    2358:	c8 28       	or	r12, r8
    235a:	d9 28       	or	r13, r9
    235c:	0b c0       	rjmp	.+22     	; 0x2374 <__stack+0x175>
    235e:	82 15       	cp	r24, r2
    2360:	93 05       	cpc	r25, r3
    2362:	2c f0       	brlt	.+10     	; 0x236e <__stack+0x16f>
    2364:	1c 01       	movw	r2, r24
    2366:	aa 24       	eor	r10, r10
    2368:	bb 24       	eor	r11, r11
    236a:	65 01       	movw	r12, r10
    236c:	03 c0       	rjmp	.+6      	; 0x2374 <__stack+0x175>
    236e:	ee 24       	eor	r14, r14
    2370:	ff 24       	eor	r15, r15
    2372:	87 01       	movw	r16, r14
    2374:	11 96       	adiw	r26, 0x01	; 1
    2376:	9c 91       	ld	r25, X
    2378:	d2 01       	movw	r26, r4
    237a:	11 96       	adiw	r26, 0x01	; 1
    237c:	8c 91       	ld	r24, X
    237e:	98 17       	cp	r25, r24
    2380:	09 f4       	brne	.+2      	; 0x2384 <__stack+0x185>
    2382:	45 c0       	rjmp	.+138    	; 0x240e <__stack+0x20f>
    2384:	99 23       	and	r25, r25
    2386:	39 f0       	breq	.+14     	; 0x2396 <__stack+0x197>
    2388:	a8 01       	movw	r20, r16
    238a:	97 01       	movw	r18, r14
    238c:	2a 19       	sub	r18, r10
    238e:	3b 09       	sbc	r19, r11
    2390:	4c 09       	sbc	r20, r12
    2392:	5d 09       	sbc	r21, r13
    2394:	06 c0       	rjmp	.+12     	; 0x23a2 <__stack+0x1a3>
    2396:	a6 01       	movw	r20, r12
    2398:	95 01       	movw	r18, r10
    239a:	2e 19       	sub	r18, r14
    239c:	3f 09       	sbc	r19, r15
    239e:	40 0b       	sbc	r20, r16
    23a0:	51 0b       	sbc	r21, r17
    23a2:	57 fd       	sbrc	r21, 7
    23a4:	08 c0       	rjmp	.+16     	; 0x23b6 <__stack+0x1b7>
    23a6:	11 82       	std	Z+1, r1	; 0x01
    23a8:	33 82       	std	Z+3, r3	; 0x03
    23aa:	22 82       	std	Z+2, r2	; 0x02
    23ac:	24 83       	std	Z+4, r18	; 0x04
    23ae:	35 83       	std	Z+5, r19	; 0x05
    23b0:	46 83       	std	Z+6, r20	; 0x06
    23b2:	57 83       	std	Z+7, r21	; 0x07
    23b4:	1d c0       	rjmp	.+58     	; 0x23f0 <__stack+0x1f1>
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	81 83       	std	Z+1, r24	; 0x01
    23ba:	33 82       	std	Z+3, r3	; 0x03
    23bc:	22 82       	std	Z+2, r2	; 0x02
    23be:	88 27       	eor	r24, r24
    23c0:	99 27       	eor	r25, r25
    23c2:	dc 01       	movw	r26, r24
    23c4:	82 1b       	sub	r24, r18
    23c6:	93 0b       	sbc	r25, r19
    23c8:	a4 0b       	sbc	r26, r20
    23ca:	b5 0b       	sbc	r27, r21
    23cc:	84 83       	std	Z+4, r24	; 0x04
    23ce:	95 83       	std	Z+5, r25	; 0x05
    23d0:	a6 83       	std	Z+6, r26	; 0x06
    23d2:	b7 83       	std	Z+7, r27	; 0x07
    23d4:	0d c0       	rjmp	.+26     	; 0x23f0 <__stack+0x1f1>
    23d6:	22 0f       	add	r18, r18
    23d8:	33 1f       	adc	r19, r19
    23da:	44 1f       	adc	r20, r20
    23dc:	55 1f       	adc	r21, r21
    23de:	24 83       	std	Z+4, r18	; 0x04
    23e0:	35 83       	std	Z+5, r19	; 0x05
    23e2:	46 83       	std	Z+6, r20	; 0x06
    23e4:	57 83       	std	Z+7, r21	; 0x07
    23e6:	82 81       	ldd	r24, Z+2	; 0x02
    23e8:	93 81       	ldd	r25, Z+3	; 0x03
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	93 83       	std	Z+3, r25	; 0x03
    23ee:	82 83       	std	Z+2, r24	; 0x02
    23f0:	24 81       	ldd	r18, Z+4	; 0x04
    23f2:	35 81       	ldd	r19, Z+5	; 0x05
    23f4:	46 81       	ldd	r20, Z+6	; 0x06
    23f6:	57 81       	ldd	r21, Z+7	; 0x07
    23f8:	da 01       	movw	r26, r20
    23fa:	c9 01       	movw	r24, r18
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	a1 09       	sbc	r26, r1
    2400:	b1 09       	sbc	r27, r1
    2402:	8f 5f       	subi	r24, 0xFF	; 255
    2404:	9f 4f       	sbci	r25, 0xFF	; 255
    2406:	af 4f       	sbci	r26, 0xFF	; 255
    2408:	bf 43       	sbci	r27, 0x3F	; 63
    240a:	28 f3       	brcs	.-54     	; 0x23d6 <__stack+0x1d7>
    240c:	0b c0       	rjmp	.+22     	; 0x2424 <__stack+0x225>
    240e:	91 83       	std	Z+1, r25	; 0x01
    2410:	33 82       	std	Z+3, r3	; 0x03
    2412:	22 82       	std	Z+2, r2	; 0x02
    2414:	ea 0c       	add	r14, r10
    2416:	fb 1c       	adc	r15, r11
    2418:	0c 1d       	adc	r16, r12
    241a:	1d 1d       	adc	r17, r13
    241c:	e4 82       	std	Z+4, r14	; 0x04
    241e:	f5 82       	std	Z+5, r15	; 0x05
    2420:	06 83       	std	Z+6, r16	; 0x06
    2422:	17 83       	std	Z+7, r17	; 0x07
    2424:	83 e0       	ldi	r24, 0x03	; 3
    2426:	80 83       	st	Z, r24
    2428:	24 81       	ldd	r18, Z+4	; 0x04
    242a:	35 81       	ldd	r19, Z+5	; 0x05
    242c:	46 81       	ldd	r20, Z+6	; 0x06
    242e:	57 81       	ldd	r21, Z+7	; 0x07
    2430:	57 ff       	sbrs	r21, 7
    2432:	1a c0       	rjmp	.+52     	; 0x2468 <__stack+0x269>
    2434:	c9 01       	movw	r24, r18
    2436:	aa 27       	eor	r26, r26
    2438:	97 fd       	sbrc	r25, 7
    243a:	a0 95       	com	r26
    243c:	ba 2f       	mov	r27, r26
    243e:	81 70       	andi	r24, 0x01	; 1
    2440:	90 70       	andi	r25, 0x00	; 0
    2442:	a0 70       	andi	r26, 0x00	; 0
    2444:	b0 70       	andi	r27, 0x00	; 0
    2446:	56 95       	lsr	r21
    2448:	47 95       	ror	r20
    244a:	37 95       	ror	r19
    244c:	27 95       	ror	r18
    244e:	82 2b       	or	r24, r18
    2450:	93 2b       	or	r25, r19
    2452:	a4 2b       	or	r26, r20
    2454:	b5 2b       	or	r27, r21
    2456:	84 83       	std	Z+4, r24	; 0x04
    2458:	95 83       	std	Z+5, r25	; 0x05
    245a:	a6 83       	std	Z+6, r26	; 0x06
    245c:	b7 83       	std	Z+7, r27	; 0x07
    245e:	82 81       	ldd	r24, Z+2	; 0x02
    2460:	93 81       	ldd	r25, Z+3	; 0x03
    2462:	01 96       	adiw	r24, 0x01	; 1
    2464:	93 83       	std	Z+3, r25	; 0x03
    2466:	82 83       	std	Z+2, r24	; 0x02
    2468:	df 01       	movw	r26, r30
    246a:	01 c0       	rjmp	.+2      	; 0x246e <__stack+0x26f>
    246c:	d2 01       	movw	r26, r4
    246e:	cd 01       	movw	r24, r26
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	e2 e1       	ldi	r30, 0x12	; 18
    2476:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <__epilogue_restores__>

0000247a <__subsf3>:
    247a:	a0 e2       	ldi	r26, 0x20	; 32
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e3 e4       	ldi	r30, 0x43	; 67
    2480:	f2 e1       	ldi	r31, 0x12	; 18
    2482:	0c 94 5e 17 	jmp	0x2ebc	; 0x2ebc <__prologue_saves__+0x18>
    2486:	69 83       	std	Y+1, r22	; 0x01
    2488:	7a 83       	std	Y+2, r23	; 0x02
    248a:	8b 83       	std	Y+3, r24	; 0x03
    248c:	9c 83       	std	Y+4, r25	; 0x04
    248e:	2d 83       	std	Y+5, r18	; 0x05
    2490:	3e 83       	std	Y+6, r19	; 0x06
    2492:	4f 83       	std	Y+7, r20	; 0x07
    2494:	58 87       	std	Y+8, r21	; 0x08
    2496:	e9 e0       	ldi	r30, 0x09	; 9
    2498:	ee 2e       	mov	r14, r30
    249a:	f1 2c       	mov	r15, r1
    249c:	ec 0e       	add	r14, r28
    249e:	fd 1e       	adc	r15, r29
    24a0:	ce 01       	movw	r24, r28
    24a2:	01 96       	adiw	r24, 0x01	; 1
    24a4:	b7 01       	movw	r22, r14
    24a6:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <__unpack_f>
    24aa:	8e 01       	movw	r16, r28
    24ac:	0f 5e       	subi	r16, 0xEF	; 239
    24ae:	1f 4f       	sbci	r17, 0xFF	; 255
    24b0:	ce 01       	movw	r24, r28
    24b2:	05 96       	adiw	r24, 0x05	; 5
    24b4:	b8 01       	movw	r22, r16
    24b6:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <__unpack_f>
    24ba:	8a 89       	ldd	r24, Y+18	; 0x12
    24bc:	91 e0       	ldi	r25, 0x01	; 1
    24be:	89 27       	eor	r24, r25
    24c0:	8a 8b       	std	Y+18, r24	; 0x12
    24c2:	c7 01       	movw	r24, r14
    24c4:	b8 01       	movw	r22, r16
    24c6:	ae 01       	movw	r20, r28
    24c8:	47 5e       	subi	r20, 0xE7	; 231
    24ca:	5f 4f       	sbci	r21, 0xFF	; 255
    24cc:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <_fpadd_parts>
    24d0:	0e 94 93 14 	call	0x2926	; 0x2926 <__pack_f>
    24d4:	a0 96       	adiw	r28, 0x20	; 32
    24d6:	e6 e0       	ldi	r30, 0x06	; 6
    24d8:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__epilogue_restores__+0x18>

000024dc <__addsf3>:
    24dc:	a0 e2       	ldi	r26, 0x20	; 32
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	e4 e7       	ldi	r30, 0x74	; 116
    24e2:	f2 e1       	ldi	r31, 0x12	; 18
    24e4:	0c 94 5e 17 	jmp	0x2ebc	; 0x2ebc <__prologue_saves__+0x18>
    24e8:	69 83       	std	Y+1, r22	; 0x01
    24ea:	7a 83       	std	Y+2, r23	; 0x02
    24ec:	8b 83       	std	Y+3, r24	; 0x03
    24ee:	9c 83       	std	Y+4, r25	; 0x04
    24f0:	2d 83       	std	Y+5, r18	; 0x05
    24f2:	3e 83       	std	Y+6, r19	; 0x06
    24f4:	4f 83       	std	Y+7, r20	; 0x07
    24f6:	58 87       	std	Y+8, r21	; 0x08
    24f8:	f9 e0       	ldi	r31, 0x09	; 9
    24fa:	ef 2e       	mov	r14, r31
    24fc:	f1 2c       	mov	r15, r1
    24fe:	ec 0e       	add	r14, r28
    2500:	fd 1e       	adc	r15, r29
    2502:	ce 01       	movw	r24, r28
    2504:	01 96       	adiw	r24, 0x01	; 1
    2506:	b7 01       	movw	r22, r14
    2508:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <__unpack_f>
    250c:	8e 01       	movw	r16, r28
    250e:	0f 5e       	subi	r16, 0xEF	; 239
    2510:	1f 4f       	sbci	r17, 0xFF	; 255
    2512:	ce 01       	movw	r24, r28
    2514:	05 96       	adiw	r24, 0x05	; 5
    2516:	b8 01       	movw	r22, r16
    2518:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <__unpack_f>
    251c:	c7 01       	movw	r24, r14
    251e:	b8 01       	movw	r22, r16
    2520:	ae 01       	movw	r20, r28
    2522:	47 5e       	subi	r20, 0xE7	; 231
    2524:	5f 4f       	sbci	r21, 0xFF	; 255
    2526:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <_fpadd_parts>
    252a:	0e 94 93 14 	call	0x2926	; 0x2926 <__pack_f>
    252e:	a0 96       	adiw	r28, 0x20	; 32
    2530:	e6 e0       	ldi	r30, 0x06	; 6
    2532:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__epilogue_restores__+0x18>

00002536 <__divsf3>:
    2536:	a8 e1       	ldi	r26, 0x18	; 24
    2538:	b0 e0       	ldi	r27, 0x00	; 0
    253a:	e1 ea       	ldi	r30, 0xA1	; 161
    253c:	f2 e1       	ldi	r31, 0x12	; 18
    253e:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__prologue_saves__+0x10>
    2542:	69 83       	std	Y+1, r22	; 0x01
    2544:	7a 83       	std	Y+2, r23	; 0x02
    2546:	8b 83       	std	Y+3, r24	; 0x03
    2548:	9c 83       	std	Y+4, r25	; 0x04
    254a:	2d 83       	std	Y+5, r18	; 0x05
    254c:	3e 83       	std	Y+6, r19	; 0x06
    254e:	4f 83       	std	Y+7, r20	; 0x07
    2550:	58 87       	std	Y+8, r21	; 0x08
    2552:	b9 e0       	ldi	r27, 0x09	; 9
    2554:	eb 2e       	mov	r14, r27
    2556:	f1 2c       	mov	r15, r1
    2558:	ec 0e       	add	r14, r28
    255a:	fd 1e       	adc	r15, r29
    255c:	ce 01       	movw	r24, r28
    255e:	01 96       	adiw	r24, 0x01	; 1
    2560:	b7 01       	movw	r22, r14
    2562:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <__unpack_f>
    2566:	8e 01       	movw	r16, r28
    2568:	0f 5e       	subi	r16, 0xEF	; 239
    256a:	1f 4f       	sbci	r17, 0xFF	; 255
    256c:	ce 01       	movw	r24, r28
    256e:	05 96       	adiw	r24, 0x05	; 5
    2570:	b8 01       	movw	r22, r16
    2572:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <__unpack_f>
    2576:	29 85       	ldd	r18, Y+9	; 0x09
    2578:	22 30       	cpi	r18, 0x02	; 2
    257a:	08 f4       	brcc	.+2      	; 0x257e <__divsf3+0x48>
    257c:	7e c0       	rjmp	.+252    	; 0x267a <__divsf3+0x144>
    257e:	39 89       	ldd	r19, Y+17	; 0x11
    2580:	32 30       	cpi	r19, 0x02	; 2
    2582:	10 f4       	brcc	.+4      	; 0x2588 <__divsf3+0x52>
    2584:	b8 01       	movw	r22, r16
    2586:	7c c0       	rjmp	.+248    	; 0x2680 <__divsf3+0x14a>
    2588:	8a 85       	ldd	r24, Y+10	; 0x0a
    258a:	9a 89       	ldd	r25, Y+18	; 0x12
    258c:	89 27       	eor	r24, r25
    258e:	8a 87       	std	Y+10, r24	; 0x0a
    2590:	24 30       	cpi	r18, 0x04	; 4
    2592:	11 f0       	breq	.+4      	; 0x2598 <__divsf3+0x62>
    2594:	22 30       	cpi	r18, 0x02	; 2
    2596:	31 f4       	brne	.+12     	; 0x25a4 <__divsf3+0x6e>
    2598:	23 17       	cp	r18, r19
    259a:	09 f0       	breq	.+2      	; 0x259e <__divsf3+0x68>
    259c:	6e c0       	rjmp	.+220    	; 0x267a <__divsf3+0x144>
    259e:	61 e6       	ldi	r22, 0x61	; 97
    25a0:	74 e0       	ldi	r23, 0x04	; 4
    25a2:	6e c0       	rjmp	.+220    	; 0x2680 <__divsf3+0x14a>
    25a4:	34 30       	cpi	r19, 0x04	; 4
    25a6:	39 f4       	brne	.+14     	; 0x25b6 <__divsf3+0x80>
    25a8:	1d 86       	std	Y+13, r1	; 0x0d
    25aa:	1e 86       	std	Y+14, r1	; 0x0e
    25ac:	1f 86       	std	Y+15, r1	; 0x0f
    25ae:	18 8a       	std	Y+16, r1	; 0x10
    25b0:	1c 86       	std	Y+12, r1	; 0x0c
    25b2:	1b 86       	std	Y+11, r1	; 0x0b
    25b4:	04 c0       	rjmp	.+8      	; 0x25be <__divsf3+0x88>
    25b6:	32 30       	cpi	r19, 0x02	; 2
    25b8:	21 f4       	brne	.+8      	; 0x25c2 <__divsf3+0x8c>
    25ba:	84 e0       	ldi	r24, 0x04	; 4
    25bc:	89 87       	std	Y+9, r24	; 0x09
    25be:	b7 01       	movw	r22, r14
    25c0:	5f c0       	rjmp	.+190    	; 0x2680 <__divsf3+0x14a>
    25c2:	2b 85       	ldd	r18, Y+11	; 0x0b
    25c4:	3c 85       	ldd	r19, Y+12	; 0x0c
    25c6:	8b 89       	ldd	r24, Y+19	; 0x13
    25c8:	9c 89       	ldd	r25, Y+20	; 0x14
    25ca:	28 1b       	sub	r18, r24
    25cc:	39 0b       	sbc	r19, r25
    25ce:	3c 87       	std	Y+12, r19	; 0x0c
    25d0:	2b 87       	std	Y+11, r18	; 0x0b
    25d2:	ed 84       	ldd	r14, Y+13	; 0x0d
    25d4:	fe 84       	ldd	r15, Y+14	; 0x0e
    25d6:	0f 85       	ldd	r16, Y+15	; 0x0f
    25d8:	18 89       	ldd	r17, Y+16	; 0x10
    25da:	ad 88       	ldd	r10, Y+21	; 0x15
    25dc:	be 88       	ldd	r11, Y+22	; 0x16
    25de:	cf 88       	ldd	r12, Y+23	; 0x17
    25e0:	d8 8c       	ldd	r13, Y+24	; 0x18
    25e2:	ea 14       	cp	r14, r10
    25e4:	fb 04       	cpc	r15, r11
    25e6:	0c 05       	cpc	r16, r12
    25e8:	1d 05       	cpc	r17, r13
    25ea:	40 f4       	brcc	.+16     	; 0x25fc <__divsf3+0xc6>
    25ec:	ee 0c       	add	r14, r14
    25ee:	ff 1c       	adc	r15, r15
    25f0:	00 1f       	adc	r16, r16
    25f2:	11 1f       	adc	r17, r17
    25f4:	21 50       	subi	r18, 0x01	; 1
    25f6:	30 40       	sbci	r19, 0x00	; 0
    25f8:	3c 87       	std	Y+12, r19	; 0x0c
    25fa:	2b 87       	std	Y+11, r18	; 0x0b
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e0       	ldi	r20, 0x00	; 0
    2602:	50 e0       	ldi	r21, 0x00	; 0
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	a0 e0       	ldi	r26, 0x00	; 0
    260a:	b0 e4       	ldi	r27, 0x40	; 64
    260c:	60 e0       	ldi	r22, 0x00	; 0
    260e:	70 e0       	ldi	r23, 0x00	; 0
    2610:	ea 14       	cp	r14, r10
    2612:	fb 04       	cpc	r15, r11
    2614:	0c 05       	cpc	r16, r12
    2616:	1d 05       	cpc	r17, r13
    2618:	40 f0       	brcs	.+16     	; 0x262a <__divsf3+0xf4>
    261a:	28 2b       	or	r18, r24
    261c:	39 2b       	or	r19, r25
    261e:	4a 2b       	or	r20, r26
    2620:	5b 2b       	or	r21, r27
    2622:	ea 18       	sub	r14, r10
    2624:	fb 08       	sbc	r15, r11
    2626:	0c 09       	sbc	r16, r12
    2628:	1d 09       	sbc	r17, r13
    262a:	b6 95       	lsr	r27
    262c:	a7 95       	ror	r26
    262e:	97 95       	ror	r25
    2630:	87 95       	ror	r24
    2632:	ee 0c       	add	r14, r14
    2634:	ff 1c       	adc	r15, r15
    2636:	00 1f       	adc	r16, r16
    2638:	11 1f       	adc	r17, r17
    263a:	6f 5f       	subi	r22, 0xFF	; 255
    263c:	7f 4f       	sbci	r23, 0xFF	; 255
    263e:	6f 31       	cpi	r22, 0x1F	; 31
    2640:	71 05       	cpc	r23, r1
    2642:	31 f7       	brne	.-52     	; 0x2610 <__divsf3+0xda>
    2644:	da 01       	movw	r26, r20
    2646:	c9 01       	movw	r24, r18
    2648:	8f 77       	andi	r24, 0x7F	; 127
    264a:	90 70       	andi	r25, 0x00	; 0
    264c:	a0 70       	andi	r26, 0x00	; 0
    264e:	b0 70       	andi	r27, 0x00	; 0
    2650:	80 34       	cpi	r24, 0x40	; 64
    2652:	91 05       	cpc	r25, r1
    2654:	a1 05       	cpc	r26, r1
    2656:	b1 05       	cpc	r27, r1
    2658:	61 f4       	brne	.+24     	; 0x2672 <__divsf3+0x13c>
    265a:	27 fd       	sbrc	r18, 7
    265c:	0a c0       	rjmp	.+20     	; 0x2672 <__divsf3+0x13c>
    265e:	e1 14       	cp	r14, r1
    2660:	f1 04       	cpc	r15, r1
    2662:	01 05       	cpc	r16, r1
    2664:	11 05       	cpc	r17, r1
    2666:	29 f0       	breq	.+10     	; 0x2672 <__divsf3+0x13c>
    2668:	20 5c       	subi	r18, 0xC0	; 192
    266a:	3f 4f       	sbci	r19, 0xFF	; 255
    266c:	4f 4f       	sbci	r20, 0xFF	; 255
    266e:	5f 4f       	sbci	r21, 0xFF	; 255
    2670:	20 78       	andi	r18, 0x80	; 128
    2672:	2d 87       	std	Y+13, r18	; 0x0d
    2674:	3e 87       	std	Y+14, r19	; 0x0e
    2676:	4f 87       	std	Y+15, r20	; 0x0f
    2678:	58 8b       	std	Y+16, r21	; 0x10
    267a:	be 01       	movw	r22, r28
    267c:	67 5f       	subi	r22, 0xF7	; 247
    267e:	7f 4f       	sbci	r23, 0xFF	; 255
    2680:	cb 01       	movw	r24, r22
    2682:	0e 94 93 14 	call	0x2926	; 0x2926 <__pack_f>
    2686:	68 96       	adiw	r28, 0x18	; 24
    2688:	ea e0       	ldi	r30, 0x0A	; 10
    268a:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__epilogue_restores__+0x10>

0000268e <__gesf2>:
    268e:	a8 e1       	ldi	r26, 0x18	; 24
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	ed e4       	ldi	r30, 0x4D	; 77
    2694:	f3 e1       	ldi	r31, 0x13	; 19
    2696:	0c 94 5e 17 	jmp	0x2ebc	; 0x2ebc <__prologue_saves__+0x18>
    269a:	69 83       	std	Y+1, r22	; 0x01
    269c:	7a 83       	std	Y+2, r23	; 0x02
    269e:	8b 83       	std	Y+3, r24	; 0x03
    26a0:	9c 83       	std	Y+4, r25	; 0x04
    26a2:	2d 83       	std	Y+5, r18	; 0x05
    26a4:	3e 83       	std	Y+6, r19	; 0x06
    26a6:	4f 83       	std	Y+7, r20	; 0x07
    26a8:	58 87       	std	Y+8, r21	; 0x08
    26aa:	89 e0       	ldi	r24, 0x09	; 9
    26ac:	e8 2e       	mov	r14, r24
    26ae:	f1 2c       	mov	r15, r1
    26b0:	ec 0e       	add	r14, r28
    26b2:	fd 1e       	adc	r15, r29
    26b4:	ce 01       	movw	r24, r28
    26b6:	01 96       	adiw	r24, 0x01	; 1
    26b8:	b7 01       	movw	r22, r14
    26ba:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <__unpack_f>
    26be:	8e 01       	movw	r16, r28
    26c0:	0f 5e       	subi	r16, 0xEF	; 239
    26c2:	1f 4f       	sbci	r17, 0xFF	; 255
    26c4:	ce 01       	movw	r24, r28
    26c6:	05 96       	adiw	r24, 0x05	; 5
    26c8:	b8 01       	movw	r22, r16
    26ca:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <__unpack_f>
    26ce:	89 85       	ldd	r24, Y+9	; 0x09
    26d0:	82 30       	cpi	r24, 0x02	; 2
    26d2:	40 f0       	brcs	.+16     	; 0x26e4 <__gesf2+0x56>
    26d4:	89 89       	ldd	r24, Y+17	; 0x11
    26d6:	82 30       	cpi	r24, 0x02	; 2
    26d8:	28 f0       	brcs	.+10     	; 0x26e4 <__gesf2+0x56>
    26da:	c7 01       	movw	r24, r14
    26dc:	b8 01       	movw	r22, r16
    26de:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <__fpcmp_parts_f>
    26e2:	01 c0       	rjmp	.+2      	; 0x26e6 <__gesf2+0x58>
    26e4:	8f ef       	ldi	r24, 0xFF	; 255
    26e6:	68 96       	adiw	r28, 0x18	; 24
    26e8:	e6 e0       	ldi	r30, 0x06	; 6
    26ea:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__epilogue_restores__+0x18>

000026ee <__fixsfsi>:
    26ee:	ac e0       	ldi	r26, 0x0C	; 12
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	ed e7       	ldi	r30, 0x7D	; 125
    26f4:	f3 e1       	ldi	r31, 0x13	; 19
    26f6:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <__prologue_saves__+0x20>
    26fa:	69 83       	std	Y+1, r22	; 0x01
    26fc:	7a 83       	std	Y+2, r23	; 0x02
    26fe:	8b 83       	std	Y+3, r24	; 0x03
    2700:	9c 83       	std	Y+4, r25	; 0x04
    2702:	ce 01       	movw	r24, r28
    2704:	01 96       	adiw	r24, 0x01	; 1
    2706:	be 01       	movw	r22, r28
    2708:	6b 5f       	subi	r22, 0xFB	; 251
    270a:	7f 4f       	sbci	r23, 0xFF	; 255
    270c:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <__unpack_f>
    2710:	8d 81       	ldd	r24, Y+5	; 0x05
    2712:	82 30       	cpi	r24, 0x02	; 2
    2714:	61 f1       	breq	.+88     	; 0x276e <__fixsfsi+0x80>
    2716:	82 30       	cpi	r24, 0x02	; 2
    2718:	50 f1       	brcs	.+84     	; 0x276e <__fixsfsi+0x80>
    271a:	84 30       	cpi	r24, 0x04	; 4
    271c:	21 f4       	brne	.+8      	; 0x2726 <__fixsfsi+0x38>
    271e:	8e 81       	ldd	r24, Y+6	; 0x06
    2720:	88 23       	and	r24, r24
    2722:	51 f1       	breq	.+84     	; 0x2778 <__fixsfsi+0x8a>
    2724:	2e c0       	rjmp	.+92     	; 0x2782 <__fixsfsi+0x94>
    2726:	2f 81       	ldd	r18, Y+7	; 0x07
    2728:	38 85       	ldd	r19, Y+8	; 0x08
    272a:	37 fd       	sbrc	r19, 7
    272c:	20 c0       	rjmp	.+64     	; 0x276e <__fixsfsi+0x80>
    272e:	6e 81       	ldd	r22, Y+6	; 0x06
    2730:	2f 31       	cpi	r18, 0x1F	; 31
    2732:	31 05       	cpc	r19, r1
    2734:	1c f0       	brlt	.+6      	; 0x273c <__fixsfsi+0x4e>
    2736:	66 23       	and	r22, r22
    2738:	f9 f0       	breq	.+62     	; 0x2778 <__fixsfsi+0x8a>
    273a:	23 c0       	rjmp	.+70     	; 0x2782 <__fixsfsi+0x94>
    273c:	8e e1       	ldi	r24, 0x1E	; 30
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	82 1b       	sub	r24, r18
    2742:	93 0b       	sbc	r25, r19
    2744:	29 85       	ldd	r18, Y+9	; 0x09
    2746:	3a 85       	ldd	r19, Y+10	; 0x0a
    2748:	4b 85       	ldd	r20, Y+11	; 0x0b
    274a:	5c 85       	ldd	r21, Y+12	; 0x0c
    274c:	04 c0       	rjmp	.+8      	; 0x2756 <__fixsfsi+0x68>
    274e:	56 95       	lsr	r21
    2750:	47 95       	ror	r20
    2752:	37 95       	ror	r19
    2754:	27 95       	ror	r18
    2756:	8a 95       	dec	r24
    2758:	d2 f7       	brpl	.-12     	; 0x274e <__fixsfsi+0x60>
    275a:	66 23       	and	r22, r22
    275c:	b1 f0       	breq	.+44     	; 0x278a <__fixsfsi+0x9c>
    275e:	50 95       	com	r21
    2760:	40 95       	com	r20
    2762:	30 95       	com	r19
    2764:	21 95       	neg	r18
    2766:	3f 4f       	sbci	r19, 0xFF	; 255
    2768:	4f 4f       	sbci	r20, 0xFF	; 255
    276a:	5f 4f       	sbci	r21, 0xFF	; 255
    276c:	0e c0       	rjmp	.+28     	; 0x278a <__fixsfsi+0x9c>
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e0       	ldi	r20, 0x00	; 0
    2774:	50 e0       	ldi	r21, 0x00	; 0
    2776:	09 c0       	rjmp	.+18     	; 0x278a <__fixsfsi+0x9c>
    2778:	2f ef       	ldi	r18, 0xFF	; 255
    277a:	3f ef       	ldi	r19, 0xFF	; 255
    277c:	4f ef       	ldi	r20, 0xFF	; 255
    277e:	5f e7       	ldi	r21, 0x7F	; 127
    2780:	04 c0       	rjmp	.+8      	; 0x278a <__fixsfsi+0x9c>
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e0       	ldi	r20, 0x00	; 0
    2788:	50 e8       	ldi	r21, 0x80	; 128
    278a:	b9 01       	movw	r22, r18
    278c:	ca 01       	movw	r24, r20
    278e:	2c 96       	adiw	r28, 0x0c	; 12
    2790:	e2 e0       	ldi	r30, 0x02	; 2
    2792:	0c 94 7e 17 	jmp	0x2efc	; 0x2efc <__epilogue_restores__+0x20>

00002796 <__floatunsisf>:
    2796:	a8 e0       	ldi	r26, 0x08	; 8
    2798:	b0 e0       	ldi	r27, 0x00	; 0
    279a:	e1 ed       	ldi	r30, 0xD1	; 209
    279c:	f3 e1       	ldi	r31, 0x13	; 19
    279e:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__prologue_saves__+0x10>
    27a2:	7b 01       	movw	r14, r22
    27a4:	8c 01       	movw	r16, r24
    27a6:	61 15       	cp	r22, r1
    27a8:	71 05       	cpc	r23, r1
    27aa:	81 05       	cpc	r24, r1
    27ac:	91 05       	cpc	r25, r1
    27ae:	19 f4       	brne	.+6      	; 0x27b6 <__floatunsisf+0x20>
    27b0:	82 e0       	ldi	r24, 0x02	; 2
    27b2:	89 83       	std	Y+1, r24	; 0x01
    27b4:	60 c0       	rjmp	.+192    	; 0x2876 <__floatunsisf+0xe0>
    27b6:	83 e0       	ldi	r24, 0x03	; 3
    27b8:	89 83       	std	Y+1, r24	; 0x01
    27ba:	8e e1       	ldi	r24, 0x1E	; 30
    27bc:	c8 2e       	mov	r12, r24
    27be:	d1 2c       	mov	r13, r1
    27c0:	dc 82       	std	Y+4, r13	; 0x04
    27c2:	cb 82       	std	Y+3, r12	; 0x03
    27c4:	ed 82       	std	Y+5, r14	; 0x05
    27c6:	fe 82       	std	Y+6, r15	; 0x06
    27c8:	0f 83       	std	Y+7, r16	; 0x07
    27ca:	18 87       	std	Y+8, r17	; 0x08
    27cc:	c8 01       	movw	r24, r16
    27ce:	b7 01       	movw	r22, r14
    27d0:	0e 94 44 14 	call	0x2888	; 0x2888 <__clzsi2>
    27d4:	fc 01       	movw	r30, r24
    27d6:	31 97       	sbiw	r30, 0x01	; 1
    27d8:	f7 ff       	sbrs	r31, 7
    27da:	3b c0       	rjmp	.+118    	; 0x2852 <__floatunsisf+0xbc>
    27dc:	22 27       	eor	r18, r18
    27de:	33 27       	eor	r19, r19
    27e0:	2e 1b       	sub	r18, r30
    27e2:	3f 0b       	sbc	r19, r31
    27e4:	57 01       	movw	r10, r14
    27e6:	68 01       	movw	r12, r16
    27e8:	02 2e       	mov	r0, r18
    27ea:	04 c0       	rjmp	.+8      	; 0x27f4 <__floatunsisf+0x5e>
    27ec:	d6 94       	lsr	r13
    27ee:	c7 94       	ror	r12
    27f0:	b7 94       	ror	r11
    27f2:	a7 94       	ror	r10
    27f4:	0a 94       	dec	r0
    27f6:	d2 f7       	brpl	.-12     	; 0x27ec <__floatunsisf+0x56>
    27f8:	40 e0       	ldi	r20, 0x00	; 0
    27fa:	50 e0       	ldi	r21, 0x00	; 0
    27fc:	60 e0       	ldi	r22, 0x00	; 0
    27fe:	70 e0       	ldi	r23, 0x00	; 0
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	a0 e0       	ldi	r26, 0x00	; 0
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	04 c0       	rjmp	.+8      	; 0x2812 <__floatunsisf+0x7c>
    280a:	88 0f       	add	r24, r24
    280c:	99 1f       	adc	r25, r25
    280e:	aa 1f       	adc	r26, r26
    2810:	bb 1f       	adc	r27, r27
    2812:	2a 95       	dec	r18
    2814:	d2 f7       	brpl	.-12     	; 0x280a <__floatunsisf+0x74>
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	a1 09       	sbc	r26, r1
    281a:	b1 09       	sbc	r27, r1
    281c:	8e 21       	and	r24, r14
    281e:	9f 21       	and	r25, r15
    2820:	a0 23       	and	r26, r16
    2822:	b1 23       	and	r27, r17
    2824:	00 97       	sbiw	r24, 0x00	; 0
    2826:	a1 05       	cpc	r26, r1
    2828:	b1 05       	cpc	r27, r1
    282a:	21 f0       	breq	.+8      	; 0x2834 <__floatunsisf+0x9e>
    282c:	41 e0       	ldi	r20, 0x01	; 1
    282e:	50 e0       	ldi	r21, 0x00	; 0
    2830:	60 e0       	ldi	r22, 0x00	; 0
    2832:	70 e0       	ldi	r23, 0x00	; 0
    2834:	4a 29       	or	r20, r10
    2836:	5b 29       	or	r21, r11
    2838:	6c 29       	or	r22, r12
    283a:	7d 29       	or	r23, r13
    283c:	4d 83       	std	Y+5, r20	; 0x05
    283e:	5e 83       	std	Y+6, r21	; 0x06
    2840:	6f 83       	std	Y+7, r22	; 0x07
    2842:	78 87       	std	Y+8, r23	; 0x08
    2844:	8e e1       	ldi	r24, 0x1E	; 30
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	8e 1b       	sub	r24, r30
    284a:	9f 0b       	sbc	r25, r31
    284c:	9c 83       	std	Y+4, r25	; 0x04
    284e:	8b 83       	std	Y+3, r24	; 0x03
    2850:	12 c0       	rjmp	.+36     	; 0x2876 <__floatunsisf+0xe0>
    2852:	30 97       	sbiw	r30, 0x00	; 0
    2854:	81 f0       	breq	.+32     	; 0x2876 <__floatunsisf+0xe0>
    2856:	0e 2e       	mov	r0, r30
    2858:	04 c0       	rjmp	.+8      	; 0x2862 <__floatunsisf+0xcc>
    285a:	ee 0c       	add	r14, r14
    285c:	ff 1c       	adc	r15, r15
    285e:	00 1f       	adc	r16, r16
    2860:	11 1f       	adc	r17, r17
    2862:	0a 94       	dec	r0
    2864:	d2 f7       	brpl	.-12     	; 0x285a <__floatunsisf+0xc4>
    2866:	ed 82       	std	Y+5, r14	; 0x05
    2868:	fe 82       	std	Y+6, r15	; 0x06
    286a:	0f 83       	std	Y+7, r16	; 0x07
    286c:	18 87       	std	Y+8, r17	; 0x08
    286e:	ce 1a       	sub	r12, r30
    2870:	df 0a       	sbc	r13, r31
    2872:	dc 82       	std	Y+4, r13	; 0x04
    2874:	cb 82       	std	Y+3, r12	; 0x03
    2876:	1a 82       	std	Y+2, r1	; 0x02
    2878:	ce 01       	movw	r24, r28
    287a:	01 96       	adiw	r24, 0x01	; 1
    287c:	0e 94 93 14 	call	0x2926	; 0x2926 <__pack_f>
    2880:	28 96       	adiw	r28, 0x08	; 8
    2882:	ea e0       	ldi	r30, 0x0A	; 10
    2884:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__epilogue_restores__+0x10>

00002888 <__clzsi2>:
    2888:	ef 92       	push	r14
    288a:	ff 92       	push	r15
    288c:	0f 93       	push	r16
    288e:	1f 93       	push	r17
    2890:	7b 01       	movw	r14, r22
    2892:	8c 01       	movw	r16, r24
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	e8 16       	cp	r14, r24
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	f8 06       	cpc	r15, r24
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	08 07       	cpc	r16, r24
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	18 07       	cpc	r17, r24
    28a4:	88 f4       	brcc	.+34     	; 0x28c8 <__clzsi2+0x40>
    28a6:	8f ef       	ldi	r24, 0xFF	; 255
    28a8:	e8 16       	cp	r14, r24
    28aa:	f1 04       	cpc	r15, r1
    28ac:	01 05       	cpc	r16, r1
    28ae:	11 05       	cpc	r17, r1
    28b0:	31 f0       	breq	.+12     	; 0x28be <__clzsi2+0x36>
    28b2:	28 f0       	brcs	.+10     	; 0x28be <__clzsi2+0x36>
    28b4:	88 e0       	ldi	r24, 0x08	; 8
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	a0 e0       	ldi	r26, 0x00	; 0
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	17 c0       	rjmp	.+46     	; 0x28ec <__clzsi2+0x64>
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	a0 e0       	ldi	r26, 0x00	; 0
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	12 c0       	rjmp	.+36     	; 0x28ec <__clzsi2+0x64>
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	e8 16       	cp	r14, r24
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	f8 06       	cpc	r15, r24
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	08 07       	cpc	r16, r24
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	18 07       	cpc	r17, r24
    28d8:	28 f0       	brcs	.+10     	; 0x28e4 <__clzsi2+0x5c>
    28da:	88 e1       	ldi	r24, 0x18	; 24
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	a0 e0       	ldi	r26, 0x00	; 0
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	04 c0       	rjmp	.+8      	; 0x28ec <__clzsi2+0x64>
    28e4:	80 e1       	ldi	r24, 0x10	; 16
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	a0 e0       	ldi	r26, 0x00	; 0
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	20 e2       	ldi	r18, 0x20	; 32
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	40 e0       	ldi	r20, 0x00	; 0
    28f2:	50 e0       	ldi	r21, 0x00	; 0
    28f4:	28 1b       	sub	r18, r24
    28f6:	39 0b       	sbc	r19, r25
    28f8:	4a 0b       	sbc	r20, r26
    28fa:	5b 0b       	sbc	r21, r27
    28fc:	04 c0       	rjmp	.+8      	; 0x2906 <__clzsi2+0x7e>
    28fe:	16 95       	lsr	r17
    2900:	07 95       	ror	r16
    2902:	f7 94       	ror	r15
    2904:	e7 94       	ror	r14
    2906:	8a 95       	dec	r24
    2908:	d2 f7       	brpl	.-12     	; 0x28fe <__clzsi2+0x76>
    290a:	f7 01       	movw	r30, r14
    290c:	e7 59       	subi	r30, 0x97	; 151
    290e:	fb 4f       	sbci	r31, 0xFB	; 251
    2910:	80 81       	ld	r24, Z
    2912:	28 1b       	sub	r18, r24
    2914:	31 09       	sbc	r19, r1
    2916:	41 09       	sbc	r20, r1
    2918:	51 09       	sbc	r21, r1
    291a:	c9 01       	movw	r24, r18
    291c:	1f 91       	pop	r17
    291e:	0f 91       	pop	r16
    2920:	ff 90       	pop	r15
    2922:	ef 90       	pop	r14
    2924:	08 95       	ret

00002926 <__pack_f>:
    2926:	df 92       	push	r13
    2928:	ef 92       	push	r14
    292a:	ff 92       	push	r15
    292c:	0f 93       	push	r16
    292e:	1f 93       	push	r17
    2930:	fc 01       	movw	r30, r24
    2932:	e4 80       	ldd	r14, Z+4	; 0x04
    2934:	f5 80       	ldd	r15, Z+5	; 0x05
    2936:	06 81       	ldd	r16, Z+6	; 0x06
    2938:	17 81       	ldd	r17, Z+7	; 0x07
    293a:	d1 80       	ldd	r13, Z+1	; 0x01
    293c:	80 81       	ld	r24, Z
    293e:	82 30       	cpi	r24, 0x02	; 2
    2940:	48 f4       	brcc	.+18     	; 0x2954 <__pack_f+0x2e>
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	a0 e1       	ldi	r26, 0x10	; 16
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	e8 2a       	or	r14, r24
    294c:	f9 2a       	or	r15, r25
    294e:	0a 2b       	or	r16, r26
    2950:	1b 2b       	or	r17, r27
    2952:	a5 c0       	rjmp	.+330    	; 0x2a9e <__pack_f+0x178>
    2954:	84 30       	cpi	r24, 0x04	; 4
    2956:	09 f4       	brne	.+2      	; 0x295a <__pack_f+0x34>
    2958:	9f c0       	rjmp	.+318    	; 0x2a98 <__pack_f+0x172>
    295a:	82 30       	cpi	r24, 0x02	; 2
    295c:	21 f4       	brne	.+8      	; 0x2966 <__pack_f+0x40>
    295e:	ee 24       	eor	r14, r14
    2960:	ff 24       	eor	r15, r15
    2962:	87 01       	movw	r16, r14
    2964:	05 c0       	rjmp	.+10     	; 0x2970 <__pack_f+0x4a>
    2966:	e1 14       	cp	r14, r1
    2968:	f1 04       	cpc	r15, r1
    296a:	01 05       	cpc	r16, r1
    296c:	11 05       	cpc	r17, r1
    296e:	19 f4       	brne	.+6      	; 0x2976 <__pack_f+0x50>
    2970:	e0 e0       	ldi	r30, 0x00	; 0
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	96 c0       	rjmp	.+300    	; 0x2aa2 <__pack_f+0x17c>
    2976:	62 81       	ldd	r22, Z+2	; 0x02
    2978:	73 81       	ldd	r23, Z+3	; 0x03
    297a:	9f ef       	ldi	r25, 0xFF	; 255
    297c:	62 38       	cpi	r22, 0x82	; 130
    297e:	79 07       	cpc	r23, r25
    2980:	0c f0       	brlt	.+2      	; 0x2984 <__pack_f+0x5e>
    2982:	5b c0       	rjmp	.+182    	; 0x2a3a <__pack_f+0x114>
    2984:	22 e8       	ldi	r18, 0x82	; 130
    2986:	3f ef       	ldi	r19, 0xFF	; 255
    2988:	26 1b       	sub	r18, r22
    298a:	37 0b       	sbc	r19, r23
    298c:	2a 31       	cpi	r18, 0x1A	; 26
    298e:	31 05       	cpc	r19, r1
    2990:	2c f0       	brlt	.+10     	; 0x299c <__pack_f+0x76>
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	40 e0       	ldi	r20, 0x00	; 0
    2998:	50 e0       	ldi	r21, 0x00	; 0
    299a:	2a c0       	rjmp	.+84     	; 0x29f0 <__pack_f+0xca>
    299c:	b8 01       	movw	r22, r16
    299e:	a7 01       	movw	r20, r14
    29a0:	02 2e       	mov	r0, r18
    29a2:	04 c0       	rjmp	.+8      	; 0x29ac <__pack_f+0x86>
    29a4:	76 95       	lsr	r23
    29a6:	67 95       	ror	r22
    29a8:	57 95       	ror	r21
    29aa:	47 95       	ror	r20
    29ac:	0a 94       	dec	r0
    29ae:	d2 f7       	brpl	.-12     	; 0x29a4 <__pack_f+0x7e>
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	a0 e0       	ldi	r26, 0x00	; 0
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	04 c0       	rjmp	.+8      	; 0x29c2 <__pack_f+0x9c>
    29ba:	88 0f       	add	r24, r24
    29bc:	99 1f       	adc	r25, r25
    29be:	aa 1f       	adc	r26, r26
    29c0:	bb 1f       	adc	r27, r27
    29c2:	2a 95       	dec	r18
    29c4:	d2 f7       	brpl	.-12     	; 0x29ba <__pack_f+0x94>
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	a1 09       	sbc	r26, r1
    29ca:	b1 09       	sbc	r27, r1
    29cc:	8e 21       	and	r24, r14
    29ce:	9f 21       	and	r25, r15
    29d0:	a0 23       	and	r26, r16
    29d2:	b1 23       	and	r27, r17
    29d4:	00 97       	sbiw	r24, 0x00	; 0
    29d6:	a1 05       	cpc	r26, r1
    29d8:	b1 05       	cpc	r27, r1
    29da:	21 f0       	breq	.+8      	; 0x29e4 <__pack_f+0xbe>
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	a0 e0       	ldi	r26, 0x00	; 0
    29e2:	b0 e0       	ldi	r27, 0x00	; 0
    29e4:	9a 01       	movw	r18, r20
    29e6:	ab 01       	movw	r20, r22
    29e8:	28 2b       	or	r18, r24
    29ea:	39 2b       	or	r19, r25
    29ec:	4a 2b       	or	r20, r26
    29ee:	5b 2b       	or	r21, r27
    29f0:	da 01       	movw	r26, r20
    29f2:	c9 01       	movw	r24, r18
    29f4:	8f 77       	andi	r24, 0x7F	; 127
    29f6:	90 70       	andi	r25, 0x00	; 0
    29f8:	a0 70       	andi	r26, 0x00	; 0
    29fa:	b0 70       	andi	r27, 0x00	; 0
    29fc:	80 34       	cpi	r24, 0x40	; 64
    29fe:	91 05       	cpc	r25, r1
    2a00:	a1 05       	cpc	r26, r1
    2a02:	b1 05       	cpc	r27, r1
    2a04:	39 f4       	brne	.+14     	; 0x2a14 <__pack_f+0xee>
    2a06:	27 ff       	sbrs	r18, 7
    2a08:	09 c0       	rjmp	.+18     	; 0x2a1c <__pack_f+0xf6>
    2a0a:	20 5c       	subi	r18, 0xC0	; 192
    2a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0e:	4f 4f       	sbci	r20, 0xFF	; 255
    2a10:	5f 4f       	sbci	r21, 0xFF	; 255
    2a12:	04 c0       	rjmp	.+8      	; 0x2a1c <__pack_f+0xf6>
    2a14:	21 5c       	subi	r18, 0xC1	; 193
    2a16:	3f 4f       	sbci	r19, 0xFF	; 255
    2a18:	4f 4f       	sbci	r20, 0xFF	; 255
    2a1a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a1c:	e0 e0       	ldi	r30, 0x00	; 0
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	20 30       	cpi	r18, 0x00	; 0
    2a22:	a0 e0       	ldi	r26, 0x00	; 0
    2a24:	3a 07       	cpc	r19, r26
    2a26:	a0 e0       	ldi	r26, 0x00	; 0
    2a28:	4a 07       	cpc	r20, r26
    2a2a:	a0 e4       	ldi	r26, 0x40	; 64
    2a2c:	5a 07       	cpc	r21, r26
    2a2e:	10 f0       	brcs	.+4      	; 0x2a34 <__pack_f+0x10e>
    2a30:	e1 e0       	ldi	r30, 0x01	; 1
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	79 01       	movw	r14, r18
    2a36:	8a 01       	movw	r16, r20
    2a38:	27 c0       	rjmp	.+78     	; 0x2a88 <__pack_f+0x162>
    2a3a:	60 38       	cpi	r22, 0x80	; 128
    2a3c:	71 05       	cpc	r23, r1
    2a3e:	64 f5       	brge	.+88     	; 0x2a98 <__pack_f+0x172>
    2a40:	fb 01       	movw	r30, r22
    2a42:	e1 58       	subi	r30, 0x81	; 129
    2a44:	ff 4f       	sbci	r31, 0xFF	; 255
    2a46:	d8 01       	movw	r26, r16
    2a48:	c7 01       	movw	r24, r14
    2a4a:	8f 77       	andi	r24, 0x7F	; 127
    2a4c:	90 70       	andi	r25, 0x00	; 0
    2a4e:	a0 70       	andi	r26, 0x00	; 0
    2a50:	b0 70       	andi	r27, 0x00	; 0
    2a52:	80 34       	cpi	r24, 0x40	; 64
    2a54:	91 05       	cpc	r25, r1
    2a56:	a1 05       	cpc	r26, r1
    2a58:	b1 05       	cpc	r27, r1
    2a5a:	39 f4       	brne	.+14     	; 0x2a6a <__pack_f+0x144>
    2a5c:	e7 fe       	sbrs	r14, 7
    2a5e:	0d c0       	rjmp	.+26     	; 0x2a7a <__pack_f+0x154>
    2a60:	80 e4       	ldi	r24, 0x40	; 64
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	a0 e0       	ldi	r26, 0x00	; 0
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	04 c0       	rjmp	.+8      	; 0x2a72 <__pack_f+0x14c>
    2a6a:	8f e3       	ldi	r24, 0x3F	; 63
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	a0 e0       	ldi	r26, 0x00	; 0
    2a70:	b0 e0       	ldi	r27, 0x00	; 0
    2a72:	e8 0e       	add	r14, r24
    2a74:	f9 1e       	adc	r15, r25
    2a76:	0a 1f       	adc	r16, r26
    2a78:	1b 1f       	adc	r17, r27
    2a7a:	17 ff       	sbrs	r17, 7
    2a7c:	05 c0       	rjmp	.+10     	; 0x2a88 <__pack_f+0x162>
    2a7e:	16 95       	lsr	r17
    2a80:	07 95       	ror	r16
    2a82:	f7 94       	ror	r15
    2a84:	e7 94       	ror	r14
    2a86:	31 96       	adiw	r30, 0x01	; 1
    2a88:	87 e0       	ldi	r24, 0x07	; 7
    2a8a:	16 95       	lsr	r17
    2a8c:	07 95       	ror	r16
    2a8e:	f7 94       	ror	r15
    2a90:	e7 94       	ror	r14
    2a92:	8a 95       	dec	r24
    2a94:	d1 f7       	brne	.-12     	; 0x2a8a <__pack_f+0x164>
    2a96:	05 c0       	rjmp	.+10     	; 0x2aa2 <__pack_f+0x17c>
    2a98:	ee 24       	eor	r14, r14
    2a9a:	ff 24       	eor	r15, r15
    2a9c:	87 01       	movw	r16, r14
    2a9e:	ef ef       	ldi	r30, 0xFF	; 255
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	6e 2f       	mov	r22, r30
    2aa4:	67 95       	ror	r22
    2aa6:	66 27       	eor	r22, r22
    2aa8:	67 95       	ror	r22
    2aaa:	90 2f       	mov	r25, r16
    2aac:	9f 77       	andi	r25, 0x7F	; 127
    2aae:	d7 94       	ror	r13
    2ab0:	dd 24       	eor	r13, r13
    2ab2:	d7 94       	ror	r13
    2ab4:	8e 2f       	mov	r24, r30
    2ab6:	86 95       	lsr	r24
    2ab8:	49 2f       	mov	r20, r25
    2aba:	46 2b       	or	r20, r22
    2abc:	58 2f       	mov	r21, r24
    2abe:	5d 29       	or	r21, r13
    2ac0:	b7 01       	movw	r22, r14
    2ac2:	ca 01       	movw	r24, r20
    2ac4:	1f 91       	pop	r17
    2ac6:	0f 91       	pop	r16
    2ac8:	ff 90       	pop	r15
    2aca:	ef 90       	pop	r14
    2acc:	df 90       	pop	r13
    2ace:	08 95       	ret

00002ad0 <__unpack_f>:
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	db 01       	movw	r26, r22
    2ad4:	40 81       	ld	r20, Z
    2ad6:	51 81       	ldd	r21, Z+1	; 0x01
    2ad8:	22 81       	ldd	r18, Z+2	; 0x02
    2ada:	62 2f       	mov	r22, r18
    2adc:	6f 77       	andi	r22, 0x7F	; 127
    2ade:	70 e0       	ldi	r23, 0x00	; 0
    2ae0:	22 1f       	adc	r18, r18
    2ae2:	22 27       	eor	r18, r18
    2ae4:	22 1f       	adc	r18, r18
    2ae6:	93 81       	ldd	r25, Z+3	; 0x03
    2ae8:	89 2f       	mov	r24, r25
    2aea:	88 0f       	add	r24, r24
    2aec:	82 2b       	or	r24, r18
    2aee:	28 2f       	mov	r18, r24
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	99 1f       	adc	r25, r25
    2af4:	99 27       	eor	r25, r25
    2af6:	99 1f       	adc	r25, r25
    2af8:	11 96       	adiw	r26, 0x01	; 1
    2afa:	9c 93       	st	X, r25
    2afc:	11 97       	sbiw	r26, 0x01	; 1
    2afe:	21 15       	cp	r18, r1
    2b00:	31 05       	cpc	r19, r1
    2b02:	a9 f5       	brne	.+106    	; 0x2b6e <__unpack_f+0x9e>
    2b04:	41 15       	cp	r20, r1
    2b06:	51 05       	cpc	r21, r1
    2b08:	61 05       	cpc	r22, r1
    2b0a:	71 05       	cpc	r23, r1
    2b0c:	11 f4       	brne	.+4      	; 0x2b12 <__unpack_f+0x42>
    2b0e:	82 e0       	ldi	r24, 0x02	; 2
    2b10:	37 c0       	rjmp	.+110    	; 0x2b80 <__unpack_f+0xb0>
    2b12:	82 e8       	ldi	r24, 0x82	; 130
    2b14:	9f ef       	ldi	r25, 0xFF	; 255
    2b16:	13 96       	adiw	r26, 0x03	; 3
    2b18:	9c 93       	st	X, r25
    2b1a:	8e 93       	st	-X, r24
    2b1c:	12 97       	sbiw	r26, 0x02	; 2
    2b1e:	9a 01       	movw	r18, r20
    2b20:	ab 01       	movw	r20, r22
    2b22:	67 e0       	ldi	r22, 0x07	; 7
    2b24:	22 0f       	add	r18, r18
    2b26:	33 1f       	adc	r19, r19
    2b28:	44 1f       	adc	r20, r20
    2b2a:	55 1f       	adc	r21, r21
    2b2c:	6a 95       	dec	r22
    2b2e:	d1 f7       	brne	.-12     	; 0x2b24 <__unpack_f+0x54>
    2b30:	83 e0       	ldi	r24, 0x03	; 3
    2b32:	8c 93       	st	X, r24
    2b34:	0d c0       	rjmp	.+26     	; 0x2b50 <__unpack_f+0x80>
    2b36:	22 0f       	add	r18, r18
    2b38:	33 1f       	adc	r19, r19
    2b3a:	44 1f       	adc	r20, r20
    2b3c:	55 1f       	adc	r21, r21
    2b3e:	12 96       	adiw	r26, 0x02	; 2
    2b40:	8d 91       	ld	r24, X+
    2b42:	9c 91       	ld	r25, X
    2b44:	13 97       	sbiw	r26, 0x03	; 3
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	13 96       	adiw	r26, 0x03	; 3
    2b4a:	9c 93       	st	X, r25
    2b4c:	8e 93       	st	-X, r24
    2b4e:	12 97       	sbiw	r26, 0x02	; 2
    2b50:	20 30       	cpi	r18, 0x00	; 0
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	38 07       	cpc	r19, r24
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	48 07       	cpc	r20, r24
    2b5a:	80 e4       	ldi	r24, 0x40	; 64
    2b5c:	58 07       	cpc	r21, r24
    2b5e:	58 f3       	brcs	.-42     	; 0x2b36 <__unpack_f+0x66>
    2b60:	14 96       	adiw	r26, 0x04	; 4
    2b62:	2d 93       	st	X+, r18
    2b64:	3d 93       	st	X+, r19
    2b66:	4d 93       	st	X+, r20
    2b68:	5c 93       	st	X, r21
    2b6a:	17 97       	sbiw	r26, 0x07	; 7
    2b6c:	08 95       	ret
    2b6e:	2f 3f       	cpi	r18, 0xFF	; 255
    2b70:	31 05       	cpc	r19, r1
    2b72:	79 f4       	brne	.+30     	; 0x2b92 <__unpack_f+0xc2>
    2b74:	41 15       	cp	r20, r1
    2b76:	51 05       	cpc	r21, r1
    2b78:	61 05       	cpc	r22, r1
    2b7a:	71 05       	cpc	r23, r1
    2b7c:	19 f4       	brne	.+6      	; 0x2b84 <__unpack_f+0xb4>
    2b7e:	84 e0       	ldi	r24, 0x04	; 4
    2b80:	8c 93       	st	X, r24
    2b82:	08 95       	ret
    2b84:	64 ff       	sbrs	r22, 4
    2b86:	03 c0       	rjmp	.+6      	; 0x2b8e <__unpack_f+0xbe>
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	8c 93       	st	X, r24
    2b8c:	12 c0       	rjmp	.+36     	; 0x2bb2 <__unpack_f+0xe2>
    2b8e:	1c 92       	st	X, r1
    2b90:	10 c0       	rjmp	.+32     	; 0x2bb2 <__unpack_f+0xe2>
    2b92:	2f 57       	subi	r18, 0x7F	; 127
    2b94:	30 40       	sbci	r19, 0x00	; 0
    2b96:	13 96       	adiw	r26, 0x03	; 3
    2b98:	3c 93       	st	X, r19
    2b9a:	2e 93       	st	-X, r18
    2b9c:	12 97       	sbiw	r26, 0x02	; 2
    2b9e:	83 e0       	ldi	r24, 0x03	; 3
    2ba0:	8c 93       	st	X, r24
    2ba2:	87 e0       	ldi	r24, 0x07	; 7
    2ba4:	44 0f       	add	r20, r20
    2ba6:	55 1f       	adc	r21, r21
    2ba8:	66 1f       	adc	r22, r22
    2baa:	77 1f       	adc	r23, r23
    2bac:	8a 95       	dec	r24
    2bae:	d1 f7       	brne	.-12     	; 0x2ba4 <__unpack_f+0xd4>
    2bb0:	70 64       	ori	r23, 0x40	; 64
    2bb2:	14 96       	adiw	r26, 0x04	; 4
    2bb4:	4d 93       	st	X+, r20
    2bb6:	5d 93       	st	X+, r21
    2bb8:	6d 93       	st	X+, r22
    2bba:	7c 93       	st	X, r23
    2bbc:	17 97       	sbiw	r26, 0x07	; 7
    2bbe:	08 95       	ret

00002bc0 <__fpcmp_parts_f>:
    2bc0:	1f 93       	push	r17
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	fb 01       	movw	r30, r22
    2bc6:	9c 91       	ld	r25, X
    2bc8:	92 30       	cpi	r25, 0x02	; 2
    2bca:	08 f4       	brcc	.+2      	; 0x2bce <__fpcmp_parts_f+0xe>
    2bcc:	47 c0       	rjmp	.+142    	; 0x2c5c <__fpcmp_parts_f+0x9c>
    2bce:	80 81       	ld	r24, Z
    2bd0:	82 30       	cpi	r24, 0x02	; 2
    2bd2:	08 f4       	brcc	.+2      	; 0x2bd6 <__fpcmp_parts_f+0x16>
    2bd4:	43 c0       	rjmp	.+134    	; 0x2c5c <__fpcmp_parts_f+0x9c>
    2bd6:	94 30       	cpi	r25, 0x04	; 4
    2bd8:	51 f4       	brne	.+20     	; 0x2bee <__fpcmp_parts_f+0x2e>
    2bda:	11 96       	adiw	r26, 0x01	; 1
    2bdc:	1c 91       	ld	r17, X
    2bde:	84 30       	cpi	r24, 0x04	; 4
    2be0:	99 f5       	brne	.+102    	; 0x2c48 <__fpcmp_parts_f+0x88>
    2be2:	81 81       	ldd	r24, Z+1	; 0x01
    2be4:	68 2f       	mov	r22, r24
    2be6:	70 e0       	ldi	r23, 0x00	; 0
    2be8:	61 1b       	sub	r22, r17
    2bea:	71 09       	sbc	r23, r1
    2bec:	3f c0       	rjmp	.+126    	; 0x2c6c <__fpcmp_parts_f+0xac>
    2bee:	84 30       	cpi	r24, 0x04	; 4
    2bf0:	21 f0       	breq	.+8      	; 0x2bfa <__fpcmp_parts_f+0x3a>
    2bf2:	92 30       	cpi	r25, 0x02	; 2
    2bf4:	31 f4       	brne	.+12     	; 0x2c02 <__fpcmp_parts_f+0x42>
    2bf6:	82 30       	cpi	r24, 0x02	; 2
    2bf8:	b9 f1       	breq	.+110    	; 0x2c68 <__fpcmp_parts_f+0xa8>
    2bfa:	81 81       	ldd	r24, Z+1	; 0x01
    2bfc:	88 23       	and	r24, r24
    2bfe:	89 f1       	breq	.+98     	; 0x2c62 <__fpcmp_parts_f+0xa2>
    2c00:	2d c0       	rjmp	.+90     	; 0x2c5c <__fpcmp_parts_f+0x9c>
    2c02:	11 96       	adiw	r26, 0x01	; 1
    2c04:	1c 91       	ld	r17, X
    2c06:	11 97       	sbiw	r26, 0x01	; 1
    2c08:	82 30       	cpi	r24, 0x02	; 2
    2c0a:	f1 f0       	breq	.+60     	; 0x2c48 <__fpcmp_parts_f+0x88>
    2c0c:	81 81       	ldd	r24, Z+1	; 0x01
    2c0e:	18 17       	cp	r17, r24
    2c10:	d9 f4       	brne	.+54     	; 0x2c48 <__fpcmp_parts_f+0x88>
    2c12:	12 96       	adiw	r26, 0x02	; 2
    2c14:	2d 91       	ld	r18, X+
    2c16:	3c 91       	ld	r19, X
    2c18:	13 97       	sbiw	r26, 0x03	; 3
    2c1a:	82 81       	ldd	r24, Z+2	; 0x02
    2c1c:	93 81       	ldd	r25, Z+3	; 0x03
    2c1e:	82 17       	cp	r24, r18
    2c20:	93 07       	cpc	r25, r19
    2c22:	94 f0       	brlt	.+36     	; 0x2c48 <__fpcmp_parts_f+0x88>
    2c24:	28 17       	cp	r18, r24
    2c26:	39 07       	cpc	r19, r25
    2c28:	bc f0       	brlt	.+46     	; 0x2c58 <__fpcmp_parts_f+0x98>
    2c2a:	14 96       	adiw	r26, 0x04	; 4
    2c2c:	8d 91       	ld	r24, X+
    2c2e:	9d 91       	ld	r25, X+
    2c30:	0d 90       	ld	r0, X+
    2c32:	bc 91       	ld	r27, X
    2c34:	a0 2d       	mov	r26, r0
    2c36:	24 81       	ldd	r18, Z+4	; 0x04
    2c38:	35 81       	ldd	r19, Z+5	; 0x05
    2c3a:	46 81       	ldd	r20, Z+6	; 0x06
    2c3c:	57 81       	ldd	r21, Z+7	; 0x07
    2c3e:	28 17       	cp	r18, r24
    2c40:	39 07       	cpc	r19, r25
    2c42:	4a 07       	cpc	r20, r26
    2c44:	5b 07       	cpc	r21, r27
    2c46:	18 f4       	brcc	.+6      	; 0x2c4e <__fpcmp_parts_f+0x8e>
    2c48:	11 23       	and	r17, r17
    2c4a:	41 f0       	breq	.+16     	; 0x2c5c <__fpcmp_parts_f+0x9c>
    2c4c:	0a c0       	rjmp	.+20     	; 0x2c62 <__fpcmp_parts_f+0xa2>
    2c4e:	82 17       	cp	r24, r18
    2c50:	93 07       	cpc	r25, r19
    2c52:	a4 07       	cpc	r26, r20
    2c54:	b5 07       	cpc	r27, r21
    2c56:	40 f4       	brcc	.+16     	; 0x2c68 <__fpcmp_parts_f+0xa8>
    2c58:	11 23       	and	r17, r17
    2c5a:	19 f0       	breq	.+6      	; 0x2c62 <__fpcmp_parts_f+0xa2>
    2c5c:	61 e0       	ldi	r22, 0x01	; 1
    2c5e:	70 e0       	ldi	r23, 0x00	; 0
    2c60:	05 c0       	rjmp	.+10     	; 0x2c6c <__fpcmp_parts_f+0xac>
    2c62:	6f ef       	ldi	r22, 0xFF	; 255
    2c64:	7f ef       	ldi	r23, 0xFF	; 255
    2c66:	02 c0       	rjmp	.+4      	; 0x2c6c <__fpcmp_parts_f+0xac>
    2c68:	60 e0       	ldi	r22, 0x00	; 0
    2c6a:	70 e0       	ldi	r23, 0x00	; 0
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	1f 91       	pop	r17
    2c70:	08 95       	ret

00002c72 <malloc>:
    2c72:	cf 93       	push	r28
    2c74:	df 93       	push	r29
    2c76:	bc 01       	movw	r22, r24
    2c78:	82 30       	cpi	r24, 0x02	; 2
    2c7a:	91 05       	cpc	r25, r1
    2c7c:	10 f4       	brcc	.+4      	; 0x2c82 <malloc+0x10>
    2c7e:	62 e0       	ldi	r22, 0x02	; 2
    2c80:	70 e0       	ldi	r23, 0x00	; 0
    2c82:	a0 91 20 10 	lds	r26, 0x1020
    2c86:	b0 91 21 10 	lds	r27, 0x1021
    2c8a:	ed 01       	movw	r28, r26
    2c8c:	e0 e0       	ldi	r30, 0x00	; 0
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	40 e0       	ldi	r20, 0x00	; 0
    2c92:	50 e0       	ldi	r21, 0x00	; 0
    2c94:	21 c0       	rjmp	.+66     	; 0x2cd8 <malloc+0x66>
    2c96:	88 81       	ld	r24, Y
    2c98:	99 81       	ldd	r25, Y+1	; 0x01
    2c9a:	86 17       	cp	r24, r22
    2c9c:	97 07       	cpc	r25, r23
    2c9e:	69 f4       	brne	.+26     	; 0x2cba <malloc+0x48>
    2ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca4:	30 97       	sbiw	r30, 0x00	; 0
    2ca6:	19 f0       	breq	.+6      	; 0x2cae <malloc+0x3c>
    2ca8:	93 83       	std	Z+3, r25	; 0x03
    2caa:	82 83       	std	Z+2, r24	; 0x02
    2cac:	04 c0       	rjmp	.+8      	; 0x2cb6 <malloc+0x44>
    2cae:	90 93 21 10 	sts	0x1021, r25
    2cb2:	80 93 20 10 	sts	0x1020, r24
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	34 c0       	rjmp	.+104    	; 0x2d22 <malloc+0xb0>
    2cba:	68 17       	cp	r22, r24
    2cbc:	79 07       	cpc	r23, r25
    2cbe:	38 f4       	brcc	.+14     	; 0x2cce <malloc+0x5c>
    2cc0:	41 15       	cp	r20, r1
    2cc2:	51 05       	cpc	r21, r1
    2cc4:	19 f0       	breq	.+6      	; 0x2ccc <malloc+0x5a>
    2cc6:	84 17       	cp	r24, r20
    2cc8:	95 07       	cpc	r25, r21
    2cca:	08 f4       	brcc	.+2      	; 0x2cce <malloc+0x5c>
    2ccc:	ac 01       	movw	r20, r24
    2cce:	fe 01       	movw	r30, r28
    2cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd4:	9c 01       	movw	r18, r24
    2cd6:	e9 01       	movw	r28, r18
    2cd8:	20 97       	sbiw	r28, 0x00	; 0
    2cda:	e9 f6       	brne	.-70     	; 0x2c96 <malloc+0x24>
    2cdc:	41 15       	cp	r20, r1
    2cde:	51 05       	cpc	r21, r1
    2ce0:	a9 f1       	breq	.+106    	; 0x2d4c <malloc+0xda>
    2ce2:	ca 01       	movw	r24, r20
    2ce4:	86 1b       	sub	r24, r22
    2ce6:	97 0b       	sbc	r25, r23
    2ce8:	04 97       	sbiw	r24, 0x04	; 4
    2cea:	08 f4       	brcc	.+2      	; 0x2cee <malloc+0x7c>
    2cec:	ba 01       	movw	r22, r20
    2cee:	e0 e0       	ldi	r30, 0x00	; 0
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	2a c0       	rjmp	.+84     	; 0x2d48 <malloc+0xd6>
    2cf4:	8d 91       	ld	r24, X+
    2cf6:	9c 91       	ld	r25, X
    2cf8:	11 97       	sbiw	r26, 0x01	; 1
    2cfa:	84 17       	cp	r24, r20
    2cfc:	95 07       	cpc	r25, r21
    2cfe:	f9 f4       	brne	.+62     	; 0x2d3e <malloc+0xcc>
    2d00:	64 17       	cp	r22, r20
    2d02:	75 07       	cpc	r23, r21
    2d04:	81 f4       	brne	.+32     	; 0x2d26 <malloc+0xb4>
    2d06:	12 96       	adiw	r26, 0x02	; 2
    2d08:	8d 91       	ld	r24, X+
    2d0a:	9c 91       	ld	r25, X
    2d0c:	13 97       	sbiw	r26, 0x03	; 3
    2d0e:	30 97       	sbiw	r30, 0x00	; 0
    2d10:	19 f0       	breq	.+6      	; 0x2d18 <malloc+0xa6>
    2d12:	93 83       	std	Z+3, r25	; 0x03
    2d14:	82 83       	std	Z+2, r24	; 0x02
    2d16:	04 c0       	rjmp	.+8      	; 0x2d20 <malloc+0xae>
    2d18:	90 93 21 10 	sts	0x1021, r25
    2d1c:	80 93 20 10 	sts	0x1020, r24
    2d20:	fd 01       	movw	r30, r26
    2d22:	32 96       	adiw	r30, 0x02	; 2
    2d24:	4f c0       	rjmp	.+158    	; 0x2dc4 <malloc+0x152>
    2d26:	ca 01       	movw	r24, r20
    2d28:	86 1b       	sub	r24, r22
    2d2a:	97 0b       	sbc	r25, r23
    2d2c:	fd 01       	movw	r30, r26
    2d2e:	e8 0f       	add	r30, r24
    2d30:	f9 1f       	adc	r31, r25
    2d32:	61 93       	st	Z+, r22
    2d34:	71 93       	st	Z+, r23
    2d36:	02 97       	sbiw	r24, 0x02	; 2
    2d38:	8d 93       	st	X+, r24
    2d3a:	9c 93       	st	X, r25
    2d3c:	43 c0       	rjmp	.+134    	; 0x2dc4 <malloc+0x152>
    2d3e:	fd 01       	movw	r30, r26
    2d40:	82 81       	ldd	r24, Z+2	; 0x02
    2d42:	93 81       	ldd	r25, Z+3	; 0x03
    2d44:	9c 01       	movw	r18, r24
    2d46:	d9 01       	movw	r26, r18
    2d48:	10 97       	sbiw	r26, 0x00	; 0
    2d4a:	a1 f6       	brne	.-88     	; 0x2cf4 <malloc+0x82>
    2d4c:	80 91 1e 10 	lds	r24, 0x101E
    2d50:	90 91 1f 10 	lds	r25, 0x101F
    2d54:	89 2b       	or	r24, r25
    2d56:	41 f4       	brne	.+16     	; 0x2d68 <malloc+0xf6>
    2d58:	80 91 6b 05 	lds	r24, 0x056B
    2d5c:	90 91 6c 05 	lds	r25, 0x056C
    2d60:	90 93 1f 10 	sts	0x101F, r25
    2d64:	80 93 1e 10 	sts	0x101E, r24
    2d68:	40 91 6d 05 	lds	r20, 0x056D
    2d6c:	50 91 6e 05 	lds	r21, 0x056E
    2d70:	41 15       	cp	r20, r1
    2d72:	51 05       	cpc	r21, r1
    2d74:	41 f4       	brne	.+16     	; 0x2d86 <malloc+0x114>
    2d76:	4d b7       	in	r20, 0x3d	; 61
    2d78:	5e b7       	in	r21, 0x3e	; 62
    2d7a:	80 91 69 05 	lds	r24, 0x0569
    2d7e:	90 91 6a 05 	lds	r25, 0x056A
    2d82:	48 1b       	sub	r20, r24
    2d84:	59 0b       	sbc	r21, r25
    2d86:	20 91 1e 10 	lds	r18, 0x101E
    2d8a:	30 91 1f 10 	lds	r19, 0x101F
    2d8e:	24 17       	cp	r18, r20
    2d90:	35 07       	cpc	r19, r21
    2d92:	b0 f4       	brcc	.+44     	; 0x2dc0 <malloc+0x14e>
    2d94:	ca 01       	movw	r24, r20
    2d96:	82 1b       	sub	r24, r18
    2d98:	93 0b       	sbc	r25, r19
    2d9a:	86 17       	cp	r24, r22
    2d9c:	97 07       	cpc	r25, r23
    2d9e:	80 f0       	brcs	.+32     	; 0x2dc0 <malloc+0x14e>
    2da0:	ab 01       	movw	r20, r22
    2da2:	4e 5f       	subi	r20, 0xFE	; 254
    2da4:	5f 4f       	sbci	r21, 0xFF	; 255
    2da6:	84 17       	cp	r24, r20
    2da8:	95 07       	cpc	r25, r21
    2daa:	50 f0       	brcs	.+20     	; 0x2dc0 <malloc+0x14e>
    2dac:	42 0f       	add	r20, r18
    2dae:	53 1f       	adc	r21, r19
    2db0:	50 93 1f 10 	sts	0x101F, r21
    2db4:	40 93 1e 10 	sts	0x101E, r20
    2db8:	f9 01       	movw	r30, r18
    2dba:	61 93       	st	Z+, r22
    2dbc:	71 93       	st	Z+, r23
    2dbe:	02 c0       	rjmp	.+4      	; 0x2dc4 <malloc+0x152>
    2dc0:	e0 e0       	ldi	r30, 0x00	; 0
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	cf 01       	movw	r24, r30
    2dc6:	df 91       	pop	r29
    2dc8:	cf 91       	pop	r28
    2dca:	08 95       	ret

00002dcc <free>:
    2dcc:	cf 93       	push	r28
    2dce:	df 93       	push	r29
    2dd0:	00 97       	sbiw	r24, 0x00	; 0
    2dd2:	09 f4       	brne	.+2      	; 0x2dd6 <free+0xa>
    2dd4:	50 c0       	rjmp	.+160    	; 0x2e76 <free+0xaa>
    2dd6:	ec 01       	movw	r28, r24
    2dd8:	22 97       	sbiw	r28, 0x02	; 2
    2dda:	1b 82       	std	Y+3, r1	; 0x03
    2ddc:	1a 82       	std	Y+2, r1	; 0x02
    2dde:	a0 91 20 10 	lds	r26, 0x1020
    2de2:	b0 91 21 10 	lds	r27, 0x1021
    2de6:	10 97       	sbiw	r26, 0x00	; 0
    2de8:	09 f1       	breq	.+66     	; 0x2e2c <free+0x60>
    2dea:	40 e0       	ldi	r20, 0x00	; 0
    2dec:	50 e0       	ldi	r21, 0x00	; 0
    2dee:	ac 17       	cp	r26, r28
    2df0:	bd 07       	cpc	r27, r29
    2df2:	08 f1       	brcs	.+66     	; 0x2e36 <free+0x6a>
    2df4:	bb 83       	std	Y+3, r27	; 0x03
    2df6:	aa 83       	std	Y+2, r26	; 0x02
    2df8:	fe 01       	movw	r30, r28
    2dfa:	21 91       	ld	r18, Z+
    2dfc:	31 91       	ld	r19, Z+
    2dfe:	e2 0f       	add	r30, r18
    2e00:	f3 1f       	adc	r31, r19
    2e02:	ae 17       	cp	r26, r30
    2e04:	bf 07       	cpc	r27, r31
    2e06:	79 f4       	brne	.+30     	; 0x2e26 <free+0x5a>
    2e08:	8d 91       	ld	r24, X+
    2e0a:	9c 91       	ld	r25, X
    2e0c:	11 97       	sbiw	r26, 0x01	; 1
    2e0e:	28 0f       	add	r18, r24
    2e10:	39 1f       	adc	r19, r25
    2e12:	2e 5f       	subi	r18, 0xFE	; 254
    2e14:	3f 4f       	sbci	r19, 0xFF	; 255
    2e16:	39 83       	std	Y+1, r19	; 0x01
    2e18:	28 83       	st	Y, r18
    2e1a:	12 96       	adiw	r26, 0x02	; 2
    2e1c:	8d 91       	ld	r24, X+
    2e1e:	9c 91       	ld	r25, X
    2e20:	13 97       	sbiw	r26, 0x03	; 3
    2e22:	9b 83       	std	Y+3, r25	; 0x03
    2e24:	8a 83       	std	Y+2, r24	; 0x02
    2e26:	41 15       	cp	r20, r1
    2e28:	51 05       	cpc	r21, r1
    2e2a:	71 f4       	brne	.+28     	; 0x2e48 <free+0x7c>
    2e2c:	d0 93 21 10 	sts	0x1021, r29
    2e30:	c0 93 20 10 	sts	0x1020, r28
    2e34:	20 c0       	rjmp	.+64     	; 0x2e76 <free+0xaa>
    2e36:	12 96       	adiw	r26, 0x02	; 2
    2e38:	8d 91       	ld	r24, X+
    2e3a:	9c 91       	ld	r25, X
    2e3c:	13 97       	sbiw	r26, 0x03	; 3
    2e3e:	ad 01       	movw	r20, r26
    2e40:	00 97       	sbiw	r24, 0x00	; 0
    2e42:	11 f0       	breq	.+4      	; 0x2e48 <free+0x7c>
    2e44:	dc 01       	movw	r26, r24
    2e46:	d3 cf       	rjmp	.-90     	; 0x2dee <free+0x22>
    2e48:	fa 01       	movw	r30, r20
    2e4a:	d3 83       	std	Z+3, r29	; 0x03
    2e4c:	c2 83       	std	Z+2, r28	; 0x02
    2e4e:	21 91       	ld	r18, Z+
    2e50:	31 91       	ld	r19, Z+
    2e52:	e2 0f       	add	r30, r18
    2e54:	f3 1f       	adc	r31, r19
    2e56:	ce 17       	cp	r28, r30
    2e58:	df 07       	cpc	r29, r31
    2e5a:	69 f4       	brne	.+26     	; 0x2e76 <free+0xaa>
    2e5c:	88 81       	ld	r24, Y
    2e5e:	99 81       	ldd	r25, Y+1	; 0x01
    2e60:	28 0f       	add	r18, r24
    2e62:	39 1f       	adc	r19, r25
    2e64:	2e 5f       	subi	r18, 0xFE	; 254
    2e66:	3f 4f       	sbci	r19, 0xFF	; 255
    2e68:	fa 01       	movw	r30, r20
    2e6a:	31 83       	std	Z+1, r19	; 0x01
    2e6c:	20 83       	st	Z, r18
    2e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e70:	9b 81       	ldd	r25, Y+3	; 0x03
    2e72:	93 83       	std	Z+3, r25	; 0x03
    2e74:	82 83       	std	Z+2, r24	; 0x02
    2e76:	df 91       	pop	r29
    2e78:	cf 91       	pop	r28
    2e7a:	08 95       	ret

00002e7c <__udivmodhi4>:
    2e7c:	aa 1b       	sub	r26, r26
    2e7e:	bb 1b       	sub	r27, r27
    2e80:	51 e1       	ldi	r21, 0x11	; 17
    2e82:	07 c0       	rjmp	.+14     	; 0x2e92 <__udivmodhi4_ep>

00002e84 <__udivmodhi4_loop>:
    2e84:	aa 1f       	adc	r26, r26
    2e86:	bb 1f       	adc	r27, r27
    2e88:	a6 17       	cp	r26, r22
    2e8a:	b7 07       	cpc	r27, r23
    2e8c:	10 f0       	brcs	.+4      	; 0x2e92 <__udivmodhi4_ep>
    2e8e:	a6 1b       	sub	r26, r22
    2e90:	b7 0b       	sbc	r27, r23

00002e92 <__udivmodhi4_ep>:
    2e92:	88 1f       	adc	r24, r24
    2e94:	99 1f       	adc	r25, r25
    2e96:	5a 95       	dec	r21
    2e98:	a9 f7       	brne	.-22     	; 0x2e84 <__udivmodhi4_loop>
    2e9a:	80 95       	com	r24
    2e9c:	90 95       	com	r25
    2e9e:	bc 01       	movw	r22, r24
    2ea0:	cd 01       	movw	r24, r26
    2ea2:	08 95       	ret

00002ea4 <__prologue_saves__>:
    2ea4:	2f 92       	push	r2
    2ea6:	3f 92       	push	r3
    2ea8:	4f 92       	push	r4
    2eaa:	5f 92       	push	r5
    2eac:	6f 92       	push	r6
    2eae:	7f 92       	push	r7
    2eb0:	8f 92       	push	r8
    2eb2:	9f 92       	push	r9
    2eb4:	af 92       	push	r10
    2eb6:	bf 92       	push	r11
    2eb8:	cf 92       	push	r12
    2eba:	df 92       	push	r13
    2ebc:	ef 92       	push	r14
    2ebe:	ff 92       	push	r15
    2ec0:	0f 93       	push	r16
    2ec2:	1f 93       	push	r17
    2ec4:	cf 93       	push	r28
    2ec6:	df 93       	push	r29
    2ec8:	cd b7       	in	r28, 0x3d	; 61
    2eca:	de b7       	in	r29, 0x3e	; 62
    2ecc:	ca 1b       	sub	r28, r26
    2ece:	db 0b       	sbc	r29, r27
    2ed0:	0f b6       	in	r0, 0x3f	; 63
    2ed2:	f8 94       	cli
    2ed4:	de bf       	out	0x3e, r29	; 62
    2ed6:	0f be       	out	0x3f, r0	; 63
    2ed8:	cd bf       	out	0x3d, r28	; 61
    2eda:	19 94       	eijmp

00002edc <__epilogue_restores__>:
    2edc:	2a 88       	ldd	r2, Y+18	; 0x12
    2ede:	39 88       	ldd	r3, Y+17	; 0x11
    2ee0:	48 88       	ldd	r4, Y+16	; 0x10
    2ee2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ee4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ee6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ee8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2eea:	9b 84       	ldd	r9, Y+11	; 0x0b
    2eec:	aa 84       	ldd	r10, Y+10	; 0x0a
    2eee:	b9 84       	ldd	r11, Y+9	; 0x09
    2ef0:	c8 84       	ldd	r12, Y+8	; 0x08
    2ef2:	df 80       	ldd	r13, Y+7	; 0x07
    2ef4:	ee 80       	ldd	r14, Y+6	; 0x06
    2ef6:	fd 80       	ldd	r15, Y+5	; 0x05
    2ef8:	0c 81       	ldd	r16, Y+4	; 0x04
    2efa:	1b 81       	ldd	r17, Y+3	; 0x03
    2efc:	aa 81       	ldd	r26, Y+2	; 0x02
    2efe:	b9 81       	ldd	r27, Y+1	; 0x01
    2f00:	ce 0f       	add	r28, r30
    2f02:	d1 1d       	adc	r29, r1
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	f8 94       	cli
    2f08:	de bf       	out	0x3e, r29	; 62
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	cd bf       	out	0x3d, r28	; 61
    2f0e:	ed 01       	movw	r28, r26
    2f10:	08 95       	ret

00002f12 <_exit>:
    2f12:	f8 94       	cli

00002f14 <__stop_program>:
    2f14:	ff cf       	rjmp	.-2      	; 0x2f14 <__stop_program>
