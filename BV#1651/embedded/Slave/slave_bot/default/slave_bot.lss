
slave_bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000230  00800200  00002f70  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000266e  00800430  00800430  00003234  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00003234  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006c4  00000000  00000000  00003254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b2c  00000000  00000000  00003918  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003f3  00000000  00000000  00006444  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002639  00000000  00000000  00006837  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004d0  00000000  00000000  00008e70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006e3  00000000  00000000  00009340  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000132c  00000000  00000000  00009a23  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000248  00000000  00000000  0000ad4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__vector_5>
      18:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 e7       	ldi	r30, 0x70	; 112
      fc:	ff e2       	ldi	r31, 0x2F	; 47
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 33       	cpi	r26, 0x30	; 48
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	1a e2       	ldi	r17, 0x2A	; 42
     110:	a0 e3       	ldi	r26, 0x30	; 48
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ae 39       	cpi	r26, 0x9E	; 158
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 59 10 	call	0x20b2	; 0x20b2 <main>
     122:	0c 94 b6 17 	jmp	0x2f6c	; 0x2f6c <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <IsEmpty>:
void EmptyQueue(struct Queue *Q) {
	while(Q->head!=NULL)
		DeQueue(Q);
}

int IsEmpty(struct Queue *Q){
     12a:	fc 01       	movw	r30, r24
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	91 81       	ldd	r25, Z+1	; 0x01
     134:	89 2b       	or	r24, r25
     136:	11 f4       	brne	.+4      	; 0x13c <IsEmpty+0x12>
     138:	21 e0       	ldi	r18, 0x01	; 1
     13a:	30 e0       	ldi	r19, 0x00	; 0
	return (Q->head==NULL) ? 1 : 0 ;
}
     13c:	c9 01       	movw	r24, r18
     13e:	08 95       	ret

00000140 <initMap>:
	*Output: integer-> 0 if everything was successful
	*Logic: Initializes the map with the know map.
	*		Required only at the begining.
	*Example Call: initMap();
*/
int initMap () {
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
	//Initializes each nodes as unconnected
	for (int i = 0; i < size; i++)
     148:	62 e6       	ldi	r22, 0x62	; 98
     14a:	70 e0       	ldi	r23, 0x00	; 0
		for (int j = 0; j < size; j++)
			map [i][j] = INF;
     14c:	40 ec       	ldi	r20, 0xC0	; 192
     14e:	57 e2       	ldi	r21, 0x27	; 39
     150:	10 c0       	rjmp	.+32     	; 0x172 <initMap+0x32>
     152:	41 93       	st	Z+, r20
     154:	51 93       	st	Z+, r21
	*Example Call: initMap();
*/
int initMap () {
	//Initializes each nodes as unconnected
	for (int i = 0; i < size; i++)
		for (int j = 0; j < size; j++)
     156:	01 96       	adiw	r24, 0x01	; 1
     158:	81 33       	cpi	r24, 0x31	; 49
     15a:	91 05       	cpc	r25, r1
     15c:	d1 f7       	brne	.-12     	; 0x152 <initMap+0x12>
	*		Required only at the begining.
	*Example Call: initMap();
*/
int initMap () {
	//Initializes each nodes as unconnected
	for (int i = 0; i < size; i++)
     15e:	2f 5f       	subi	r18, 0xFF	; 255
     160:	3f 4f       	sbci	r19, 0xFF	; 255
     162:	21 33       	cpi	r18, 0x31	; 49
     164:	31 05       	cpc	r19, r1
     166:	29 f4       	brne	.+10     	; 0x172 <initMap+0x32>
     168:	41 e0       	ldi	r20, 0x01	; 1
     16a:	50 e0       	ldi	r21, 0x00	; 0
		for (int j = 0; j < size; j++)
			map [i][j] = INF;
	//Connects nodes 1 through 24 in sequential order
	for (int i = 1; i < 25; i++)
     16c:	62 e6       	ldi	r22, 0x62	; 98
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	29 c0       	rjmp	.+82     	; 0x1c4 <initMap+0x84>
	*		Required only at the begining.
	*Example Call: initMap();
*/
int initMap () {
	//Initializes each nodes as unconnected
	for (int i = 0; i < size; i++)
     172:	26 9f       	mul	r18, r22
     174:	f0 01       	movw	r30, r0
     176:	27 9f       	mul	r18, r23
     178:	f0 0d       	add	r31, r0
     17a:	36 9f       	mul	r19, r22
     17c:	f0 0d       	add	r31, r0
     17e:	11 24       	eor	r1, r1
     180:	e6 5b       	subi	r30, 0xB6	; 182
     182:	fb 4f       	sbci	r31, 0xFB	; 251
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	e4 cf       	rjmp	.-56     	; 0x152 <initMap+0x12>
		for (int j = 0; j < size; j++)
			map [i][j] = INF;
	//Connects nodes 1 through 24 in sequential order
	for (int i = 1; i < 25; i++)
		for (int j = 1; j < 25; j++)
			if (abs(i-j) == 1)
     18a:	ca 01       	movw	r24, r20
     18c:	82 1b       	sub	r24, r18
     18e:	93 0b       	sbc	r25, r19
     190:	97 ff       	sbrs	r25, 7
     192:	03 c0       	rjmp	.+6      	; 0x19a <initMap+0x5a>
     194:	90 95       	com	r25
     196:	81 95       	neg	r24
     198:	9f 4f       	sbci	r25, 0xFF	; 255
     19a:	81 30       	cpi	r24, 0x01	; 1
     19c:	91 05       	cpc	r25, r1
     19e:	11 f4       	brne	.+4      	; 0x1a4 <initMap+0x64>
				map[i][j] = 1;
     1a0:	91 83       	std	Z+1, r25	; 0x01
     1a2:	80 83       	st	Z, r24
	for (int i = 0; i < size; i++)
		for (int j = 0; j < size; j++)
			map [i][j] = INF;
	//Connects nodes 1 through 24 in sequential order
	for (int i = 1; i < 25; i++)
		for (int j = 1; j < 25; j++)
     1a4:	2f 5f       	subi	r18, 0xFF	; 255
     1a6:	3f 4f       	sbci	r19, 0xFF	; 255
     1a8:	32 96       	adiw	r30, 0x02	; 2
     1aa:	29 31       	cpi	r18, 0x19	; 25
     1ac:	31 05       	cpc	r19, r1
     1ae:	69 f7       	brne	.-38     	; 0x18a <initMap+0x4a>
	//Initializes each nodes as unconnected
	for (int i = 0; i < size; i++)
		for (int j = 0; j < size; j++)
			map [i][j] = INF;
	//Connects nodes 1 through 24 in sequential order
	for (int i = 1; i < 25; i++)
     1b0:	4f 5f       	subi	r20, 0xFF	; 255
     1b2:	5f 4f       	sbci	r21, 0xFF	; 255
     1b4:	49 31       	cpi	r20, 0x19	; 25
     1b6:	51 05       	cpc	r21, r1
     1b8:	29 f4       	brne	.+10     	; 0x1c4 <initMap+0x84>
     1ba:	49 e1       	ldi	r20, 0x19	; 25
     1bc:	50 e0       	ldi	r21, 0x00	; 0
		for (int j = 1; j < 25; j++)
			if (abs(i-j) == 1)
				map[i][j] = 1;
	//Connects nodes 25 through 38 in sequential order
	for (int i = 25; i < 39; i++)
     1be:	62 e6       	ldi	r22, 0x62	; 98
     1c0:	70 e0       	ldi	r23, 0x00	; 0
     1c2:	24 c0       	rjmp	.+72     	; 0x20c <initMap+0xcc>
	//Initializes each nodes as unconnected
	for (int i = 0; i < size; i++)
		for (int j = 0; j < size; j++)
			map [i][j] = INF;
	//Connects nodes 1 through 24 in sequential order
	for (int i = 1; i < 25; i++)
     1c4:	46 9f       	mul	r20, r22
     1c6:	f0 01       	movw	r30, r0
     1c8:	47 9f       	mul	r20, r23
     1ca:	f0 0d       	add	r31, r0
     1cc:	56 9f       	mul	r21, r22
     1ce:	f0 0d       	add	r31, r0
     1d0:	11 24       	eor	r1, r1
     1d2:	e4 5b       	subi	r30, 0xB4	; 180
     1d4:	fb 4f       	sbci	r31, 0xFB	; 251
     1d6:	21 e0       	ldi	r18, 0x01	; 1
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	d7 cf       	rjmp	.-82     	; 0x18a <initMap+0x4a>
			if (abs(i-j) == 1)
				map[i][j] = 1;
	//Connects nodes 25 through 38 in sequential order
	for (int i = 25; i < 39; i++)
		for (int j = 25; j < 39; j++)
			if (abs(i-j) == 1)
     1dc:	ca 01       	movw	r24, r20
     1de:	82 1b       	sub	r24, r18
     1e0:	93 0b       	sbc	r25, r19
     1e2:	97 ff       	sbrs	r25, 7
     1e4:	03 c0       	rjmp	.+6      	; 0x1ec <initMap+0xac>
     1e6:	90 95       	com	r25
     1e8:	81 95       	neg	r24
     1ea:	9f 4f       	sbci	r25, 0xFF	; 255
     1ec:	81 30       	cpi	r24, 0x01	; 1
     1ee:	91 05       	cpc	r25, r1
     1f0:	11 f4       	brne	.+4      	; 0x1f6 <initMap+0xb6>
				map[i][j] = 1;
     1f2:	91 83       	std	Z+1, r25	; 0x01
     1f4:	80 83       	st	Z, r24
		for (int j = 1; j < 25; j++)
			if (abs(i-j) == 1)
				map[i][j] = 1;
	//Connects nodes 25 through 38 in sequential order
	for (int i = 25; i < 39; i++)
		for (int j = 25; j < 39; j++)
     1f6:	2f 5f       	subi	r18, 0xFF	; 255
     1f8:	3f 4f       	sbci	r19, 0xFF	; 255
     1fa:	32 96       	adiw	r30, 0x02	; 2
     1fc:	27 32       	cpi	r18, 0x27	; 39
     1fe:	31 05       	cpc	r19, r1
     200:	69 f7       	brne	.-38     	; 0x1dc <initMap+0x9c>
	for (int i = 1; i < 25; i++)
		for (int j = 1; j < 25; j++)
			if (abs(i-j) == 1)
				map[i][j] = 1;
	//Connects nodes 25 through 38 in sequential order
	for (int i = 25; i < 39; i++)
     202:	4f 5f       	subi	r20, 0xFF	; 255
     204:	5f 4f       	sbci	r21, 0xFF	; 255
     206:	47 32       	cpi	r20, 0x27	; 39
     208:	51 05       	cpc	r21, r1
     20a:	61 f0       	breq	.+24     	; 0x224 <initMap+0xe4>
     20c:	46 9f       	mul	r20, r22
     20e:	f0 01       	movw	r30, r0
     210:	47 9f       	mul	r20, r23
     212:	f0 0d       	add	r31, r0
     214:	56 9f       	mul	r21, r22
     216:	f0 0d       	add	r31, r0
     218:	11 24       	eor	r1, r1
     21a:	e4 58       	subi	r30, 0x84	; 132
     21c:	fb 4f       	sbci	r31, 0xFB	; 251
     21e:	29 e1       	ldi	r18, 0x19	; 25
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	dc cf       	rjmp	.-72     	; 0x1dc <initMap+0x9c>
		for (int j = 25; j < 39; j++)
			if (abs(i-j) == 1)
				map[i][j] = 1;
	//Manually connecting nodes that are connected in the map
	//Replace it with soft code if you ever find a method
	map[35][42] = map[42][35] = 1;
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	90 93 a5 14 	sts	0x14A5, r25
     22c:	80 93 a4 14 	sts	0x14A4, r24
     230:	90 93 05 12 	sts	0x1205, r25
     234:	80 93 04 12 	sts	0x1204, r24
	map[42][41] = map[41][42] = 1;
     238:	90 93 51 14 	sts	0x1451, r25
     23c:	80 93 50 14 	sts	0x1450, r24
     240:	90 93 b1 14 	sts	0x14B1, r25
     244:	80 93 b0 14 	sts	0x14B0, r24
	map[41][32] = map[32][41] = 1;
     248:	90 93 dd 10 	sts	0x10DD, r25
     24c:	80 93 dc 10 	sts	0x10DC, r24
     250:	90 93 3d 14 	sts	0x143D, r25
     254:	80 93 3c 14 	sts	0x143C, r24
	map[32][48] = map[48][32] = 1;
     258:	90 93 eb 16 	sts	0x16EB, r25
     25c:	80 93 ea 16 	sts	0x16EA, r24
     260:	90 93 eb 10 	sts	0x10EB, r25
     264:	80 93 ea 10 	sts	0x10EA, r24
	map[47][31] = map[31][47] = 1;
     268:	90 93 87 10 	sts	0x1087, r25
     26c:	80 93 86 10 	sts	0x1086, r24
     270:	90 93 87 16 	sts	0x1687, r25
     274:	80 93 86 16 	sts	0x1686, r24
	map[31][40] = map[40][31] = 1;
     278:	90 93 d9 13 	sts	0x13D9, r25
     27c:	80 93 d8 13 	sts	0x13D8, r24
     280:	90 93 79 10 	sts	0x1079, r25
     284:	80 93 78 10 	sts	0x1078, r24
	map[40][39] = map[39][40] = 1;
     288:	90 93 89 13 	sts	0x1389, r25
     28c:	80 93 88 13 	sts	0x1388, r24
     290:	90 93 e9 13 	sts	0x13E9, r25
     294:	80 93 e8 13 	sts	0x13E8, r24
	map[39][28] = map[28][39] = 1;
     298:	90 93 51 0f 	sts	0x0F51, r25
     29c:	80 93 50 0f 	sts	0x0F50, r24
     2a0:	90 93 71 13 	sts	0x1371, r25
     2a4:	80 93 70 13 	sts	0x1370, r24
	map[28][46] = map[46][28] = 1;
     2a8:	90 93 1f 16 	sts	0x161F, r25
     2ac:	80 93 1e 16 	sts	0x161E, r24
     2b0:	90 93 5f 0f 	sts	0x0F5F, r25
     2b4:	80 93 5e 0f 	sts	0x0F5E, r24
	map[45][27] = map[27][45] = 1;
     2b8:	90 93 fb 0e 	sts	0x0EFB, r25
     2bc:	80 93 fa 0e 	sts	0x0EFA, r24
     2c0:	90 93 bb 15 	sts	0x15BB, r25
     2c4:	80 93 ba 15 	sts	0x15BA, r24
	map[27][38] = map[38][27] = 1;
     2c8:	90 93 0d 13 	sts	0x130D, r25
     2cc:	80 93 0c 13 	sts	0x130C, r24
     2d0:	90 93 ed 0e 	sts	0x0EED, r25
     2d4:	80 93 ec 0e 	sts	0x0EEC, r24
	map[36][25] = map[25][36] = 1;
     2d8:	90 93 25 0e 	sts	0x0E25, r25
     2dc:	80 93 24 0e 	sts	0x0E24, r24
     2e0:	90 93 45 12 	sts	0x1245, r25
     2e4:	80 93 44 12 	sts	0x1244, r24
	map[36][44] = map[44][36] = 1;
     2e8:	90 93 6b 15 	sts	0x156B, r25
     2ec:	80 93 6a 15 	sts	0x156A, r24
     2f0:	90 93 6b 12 	sts	0x126B, r25
     2f4:	80 93 6a 12 	sts	0x126A, r24
	map[43][35] = map[35][43] = 1;
     2f8:	90 93 07 12 	sts	0x1207, r25
     2fc:	80 93 06 12 	sts	0x1206, r24
     300:	90 93 07 15 	sts	0x1507, r25
     304:	80 93 06 15 	sts	0x1506, r24
	map[24][1]  = map[1][24]  = 1;
     308:	90 93 dd 04 	sts	0x04DD, r25
     30c:	80 93 dc 04 	sts	0x04DC, r24
     310:	90 93 7d 0d 	sts	0x0D7D, r25
     314:	80 93 7c 0d 	sts	0x0D7C, r24
	map[23][44] = map[44][23] = 1;
     318:	90 93 51 15 	sts	0x1551, r25
     31c:	80 93 50 15 	sts	0x1550, r24
     320:	90 93 71 0d 	sts	0x0D71, r25
     324:	80 93 70 0d 	sts	0x0D70, r24
	map[23][43] = map[43][23] = 1;
     328:	90 93 ef 14 	sts	0x14EF, r25
     32c:	80 93 ee 14 	sts	0x14EE, r24
     330:	90 93 6f 0d 	sts	0x0D6F, r25
     334:	80 93 6e 0d 	sts	0x0D6E, r24
	map[19][34] = map[34][19] = 1;
     338:	90 93 75 11 	sts	0x1175, r25
     33c:	80 93 74 11 	sts	0x1174, r24
     340:	90 93 d5 0b 	sts	0x0BD5, r25
     344:	80 93 d4 0b 	sts	0x0BD4, r24
	map[19][33] = map[33][19] = 1;
     348:	90 93 13 11 	sts	0x1113, r25
     34c:	80 93 12 11 	sts	0x1112, r24
     350:	90 93 d3 0b 	sts	0x0BD3, r25
     354:	80 93 d2 0b 	sts	0x0BD2, r24
	map[15][48] = map[48][15] = 1;
     358:	90 93 c9 16 	sts	0x16C9, r25
     35c:	80 93 c8 16 	sts	0x16C8, r24
     360:	90 93 69 0a 	sts	0x0A69, r25
     364:	80 93 68 0a 	sts	0x0A68, r24
	map[15][47] = map[47][15] = 1;
     368:	90 93 67 16 	sts	0x1667, r25
     36c:	80 93 66 16 	sts	0x1666, r24
     370:	90 93 67 0a 	sts	0x0A67, r25
     374:	80 93 66 0a 	sts	0x0A66, r24
	map[11][30] = map[30][11] = 1;
     378:	90 93 dd 0f 	sts	0x0FDD, r25
     37c:	80 93 dc 0f 	sts	0x0FDC, r24
     380:	90 93 bd 08 	sts	0x08BD, r25
     384:	80 93 bc 08 	sts	0x08BC, r24
	map[11][29] = map[29][11] = 1;
     388:	90 93 7b 0f 	sts	0x0F7B, r25
     38c:	80 93 7a 0f 	sts	0x0F7A, r24
     390:	90 93 bb 08 	sts	0x08BB, r25
     394:	80 93 ba 08 	sts	0x08BA, r24
	map[7][46]  = map[46][7]  = 1;
     398:	90 93 f5 15 	sts	0x15F5, r25
     39c:	80 93 f4 15 	sts	0x15F4, r24
     3a0:	90 93 55 07 	sts	0x0755, r25
     3a4:	80 93 54 07 	sts	0x0754, r24
	map[7][45]  = map[45][7]  = 1;
     3a8:	90 93 93 15 	sts	0x1593, r25
     3ac:	80 93 92 15 	sts	0x1592, r24
     3b0:	90 93 53 07 	sts	0x0753, r25
     3b4:	80 93 52 07 	sts	0x0752, r24
	map[3][26]  = map[26][3]  = 1;
     3b8:	90 93 45 0e 	sts	0x0E45, r25
     3bc:	80 93 44 0e 	sts	0x0E44, r24
     3c0:	90 93 a5 05 	sts	0x05A5, r25
     3c4:	80 93 a4 05 	sts	0x05A4, r24
	map[3][25]  = map[25][3]  = 1;
     3c8:	90 93 e3 0d 	sts	0x0DE3, r25
     3cc:	80 93 e2 0d 	sts	0x0DE2, r24
     3d0:	90 93 a3 05 	sts	0x05A3, r25
     3d4:	80 93 a2 05 	sts	0x05A2, r24
	map[35][36] = map[36][35] = 1;
     3d8:	90 93 59 12 	sts	0x1259, r25
     3dc:	80 93 58 12 	sts	0x1258, r24
     3e0:	90 93 f9 11 	sts	0x11F9, r25
     3e4:	80 93 f8 11 	sts	0x11F8, r24
	map[11][12] = map[12][11] = 1;
     3e8:	90 93 f9 08 	sts	0x08F9, r25
     3ec:	80 93 f8 08 	sts	0x08F8, r24
     3f0:	90 93 99 08 	sts	0x0899, r25
     3f4:	80 93 98 08 	sts	0x0898, r24
     3f8:	e2 e1       	ldi	r30, 0x12	; 18
     3fa:	f7 e1       	ldi	r31, 0x17	; 23
	for (int i = 1; i < 25; i++)
		for (int j = 0; j < 2; j++)
			map_link[i][j] = (j == 0 ? i : -1);
     3fc:	2f ef       	ldi	r18, 0xFF	; 255
     3fe:	3f ef       	ldi	r19, 0xFF	; 255
     400:	91 83       	std	Z+1, r25	; 0x01
     402:	80 83       	st	Z, r24
     404:	33 83       	std	Z+3, r19	; 0x03
     406:	22 83       	std	Z+2, r18	; 0x02
	map[7][45]  = map[45][7]  = 1;
	map[3][26]  = map[26][3]  = 1;
	map[3][25]  = map[25][3]  = 1;
	map[35][36] = map[36][35] = 1;
	map[11][12] = map[12][11] = 1;
	for (int i = 1; i < 25; i++)
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	34 96       	adiw	r30, 0x04	; 4
     40c:	89 31       	cpi	r24, 0x19	; 25
     40e:	91 05       	cpc	r25, r1
     410:	b9 f7       	brne	.-18     	; 0x400 <initMap+0x2c0>
		for (int j = 0; j < 2; j++)
			map_link[i][j] = (j == 0 ? i : -1);
	//Manually linking nodes to notes
	//Replace hard code with a better method if and when available
	map_link[25][0] = 1;
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	90 93 73 17 	sts	0x1773, r25
     41a:	80 93 72 17 	sts	0x1772, r24
	map_link[27][0] = 5;
     41e:	85 e0       	ldi	r24, 0x05	; 5
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	90 93 7b 17 	sts	0x177B, r25
     426:	80 93 7a 17 	sts	0x177A, r24
	map_link[28][0] = 9;
     42a:	89 e0       	ldi	r24, 0x09	; 9
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	90 93 7f 17 	sts	0x177F, r25
     432:	80 93 7e 17 	sts	0x177E, r24
	map_link[30][0] = 13;
     436:	8d e0       	ldi	r24, 0x0D	; 13
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	90 93 87 17 	sts	0x1787, r25
     43e:	80 93 86 17 	sts	0x1786, r24
	map_link[31][0] = 17;
     442:	81 e1       	ldi	r24, 0x11	; 17
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	90 93 8b 17 	sts	0x178B, r25
     44a:	80 93 8a 17 	sts	0x178A, r24
	map_link[33][0] = 21;
     44e:	85 e1       	ldi	r24, 0x15	; 21
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	90 93 93 17 	sts	0x1793, r25
     456:	80 93 92 17 	sts	0x1792, r24
	map_link[26][0] = 37;
     45a:	85 e2       	ldi	r24, 0x25	; 37
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	90 93 77 17 	sts	0x1777, r25
     462:	80 93 76 17 	sts	0x1776, r24
	map_link[26][1] = 38;
     466:	86 e2       	ldi	r24, 0x26	; 38
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	90 93 79 17 	sts	0x1779, r25
     46e:	80 93 78 17 	sts	0x1778, r24
	map_link[29][0] = 39;
     472:	87 e2       	ldi	r24, 0x27	; 39
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	90 93 83 17 	sts	0x1783, r25
     47a:	80 93 82 17 	sts	0x1782, r24
	map_link[29][1] = 40;
     47e:	88 e2       	ldi	r24, 0x28	; 40
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	90 93 85 17 	sts	0x1785, r25
     486:	80 93 84 17 	sts	0x1784, r24
	map_link[32][0] = 41;
     48a:	89 e2       	ldi	r24, 0x29	; 41
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	90 93 8f 17 	sts	0x178F, r25
     492:	80 93 8e 17 	sts	0x178E, r24
	map_link[32][1] = 42;
     496:	8a e2       	ldi	r24, 0x2A	; 42
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	90 93 91 17 	sts	0x1791, r25
     49e:	80 93 90 17 	sts	0x1790, r24
     4a2:	c2 e0       	ldi	r28, 0x02	; 2
     4a4:	d9 e1       	ldi	r29, 0x19	; 25
     4a6:	e6 e6       	ldi	r30, 0x66	; 102
     4a8:	f9 e1       	ldi	r31, 0x19	; 25
     4aa:	22 ee       	ldi	r18, 0xE2	; 226
     4ac:	3f ef       	ldi	r19, 0xFF	; 255
	
	//Storing absolute angle of every point.
	int sangle = -30;
	for (int i = 2; i < 23; i=i+2)
	{
		map_angle[i][i+1] = sangle;
     4ae:	c0 56       	subi	r28, 0x60	; 96
     4b0:	d0 40       	sbci	r29, 0x00	; 0
     4b2:	39 83       	std	Y+1, r19	; 0x01
     4b4:	28 83       	st	Y, r18
     4b6:	c0 5a       	subi	r28, 0xA0	; 160
     4b8:	df 4f       	sbci	r29, 0xFF	; 255
		map_angle[i+1][i+2] = sangle;
     4ba:	3d 83       	std	Y+5, r19	; 0x05
     4bc:	2c 83       	std	Y+4, r18	; 0x04
		if (sangle < 0)
     4be:	37 ff       	sbrs	r19, 7
     4c0:	04 c0       	rjmp	.+8      	; 0x4ca <initMap+0x38a>
		{
			map_angle[i+1][i] = sangle + 180;
     4c2:	c9 01       	movw	r24, r18
     4c4:	8c 54       	subi	r24, 0x4C	; 76
     4c6:	9f 4f       	sbci	r25, 0xFF	; 255
     4c8:	06 c0       	rjmp	.+12     	; 0x4d6 <initMap+0x396>
			map_angle[i+2][i+1] = sangle + 180;
		}
		if (sangle > 0)
     4ca:	12 16       	cp	r1, r18
     4cc:	13 06       	cpc	r1, r19
     4ce:	3c f4       	brge	.+14     	; 0x4de <initMap+0x39e>
		{
			map_angle[i+1][i] = sangle - 180;
     4d0:	c9 01       	movw	r24, r18
     4d2:	84 5b       	subi	r24, 0xB4	; 180
     4d4:	90 40       	sbci	r25, 0x00	; 0
     4d6:	99 83       	std	Y+1, r25	; 0x01
     4d8:	88 83       	st	Y, r24
			map_angle[i+2][i+1] = sangle - 180;
     4da:	91 83       	std	Z+1, r25	; 0x01
     4dc:	80 83       	st	Z, r24
		}
		sangle -= 30;
     4de:	2e 51       	subi	r18, 0x1E	; 30
     4e0:	30 40       	sbci	r19, 0x00	; 0
		if (sangle < -180)
     4e2:	8f ef       	ldi	r24, 0xFF	; 255
     4e4:	2c 34       	cpi	r18, 0x4C	; 76
     4e6:	38 07       	cpc	r19, r24
     4e8:	14 f4       	brge	.+4      	; 0x4ee <initMap+0x3ae>
     4ea:	26 e9       	ldi	r18, 0x96	; 150
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	c8 53       	subi	r28, 0x38	; 56
     4f0:	df 4f       	sbci	r29, 0xFF	; 255
     4f2:	e8 53       	subi	r30, 0x38	; 56
     4f4:	ff 4f       	sbci	r31, 0xFF	; 255
	map_link[32][0] = 41;
	map_link[32][1] = 42;
	
	//Storing absolute angle of every point.
	int sangle = -30;
	for (int i = 2; i < 23; i=i+2)
     4f6:	81 e2       	ldi	r24, 0x21	; 33
     4f8:	ca 39       	cpi	r28, 0x9A	; 154
     4fa:	d8 07       	cpc	r29, r24
     4fc:	c1 f6       	brne	.-80     	; 0x4ae <initMap+0x36e>
		if (sangle < -180)
		{
			sangle = 150;
		}
	}
	map_angle[1][2] = 0;
     4fe:	10 92 3f 18 	sts	0x183F, r1
     502:	10 92 3e 18 	sts	0x183E, r1
	map_angle[2][1] = 180;
     506:	84 eb       	ldi	r24, 0xB4	; 180
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	90 93 9f 18 	sts	0x189F, r25
     50e:	80 93 9e 18 	sts	0x189E, r24
	map_angle[1][24] = 180;
     512:	90 93 6b 18 	sts	0x186B, r25
     516:	80 93 6a 18 	sts	0x186A, r24
	map_angle[24][1] = 0;
     51a:	10 92 0b 21 	sts	0x210B, r1
     51e:	10 92 0a 21 	sts	0x210A, r1

	map_angle[3][25]  = -150;
     522:	6a e6       	ldi	r22, 0x6A	; 106
     524:	7f ef       	ldi	r23, 0xFF	; 255
     526:	70 93 31 19 	sts	0x1931, r23
     52a:	60 93 30 19 	sts	0x1930, r22
    map_angle[25][3]  = 30;
     52e:	4e e1       	ldi	r20, 0x1E	; 30
     530:	50 e0       	ldi	r21, 0x00	; 0
     532:	50 93 71 21 	sts	0x2171, r21
     536:	40 93 70 21 	sts	0x2170, r20
	map_angle[3][26]  = -90;
     53a:	a6 ea       	ldi	r26, 0xA6	; 166
     53c:	bf ef       	ldi	r27, 0xFF	; 255
     53e:	b0 93 33 19 	sts	0x1933, r27
     542:	a0 93 32 19 	sts	0x1932, r26
	map_angle[26][3]  = 90;
     546:	ea e5       	ldi	r30, 0x5A	; 90
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	f9 af       	std	Y+57, r31	; 0x39
     54c:	e8 af       	std	Y+56, r30	; 0x38
	map_angle[7][45]  = 150;
     54e:	26 e9       	ldi	r18, 0x96	; 150
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	30 93 e1 1a 	sts	0x1AE1, r19
     556:	20 93 e0 1a 	sts	0x1AE0, r18
	map_angle[45][7]  = -30;
     55a:	82 ee       	ldi	r24, 0xE2	; 226
     55c:	9f ef       	ldi	r25, 0xFF	; 255
     55e:	90 93 21 29 	sts	0x2921, r25
     562:	80 93 20 29 	sts	0x2920, r24
	map_angle[7][46]  = -150;
     566:	70 93 e3 1a 	sts	0x1AE3, r23
     56a:	60 93 e2 1a 	sts	0x1AE2, r22
	map_angle[46][7]  = 30;
     56e:	50 93 83 29 	sts	0x2983, r21
     572:	40 93 82 29 	sts	0x2982, r20
	map_angle[11][29] = 90;
     576:	f0 93 49 1c 	sts	0x1C49, r31
     57a:	e0 93 48 1c 	sts	0x1C48, r30
	map_angle[29][11] = -90;
     57e:	b0 93 09 23 	sts	0x2309, r27
     582:	a0 93 08 23 	sts	0x2308, r26
	map_angle[11][30] = 150;
     586:	30 93 4b 1c 	sts	0x1C4B, r19
     58a:	20 93 4a 1c 	sts	0x1C4A, r18
	map_angle[30][11] = -30;
     58e:	90 93 6b 23 	sts	0x236B, r25
     592:	80 93 6a 23 	sts	0x236A, r24
	map_angle[15][47] = 30;
     596:	50 93 f5 1d 	sts	0x1DF5, r21
     59a:	40 93 f4 1d 	sts	0x1DF4, r20
	map_angle[47][15] = -150;
     59e:	70 93 f5 29 	sts	0x29F5, r23
     5a2:	60 93 f4 29 	sts	0x29F4, r22
	map_angle[15][48] = 90;
     5a6:	f0 93 f7 1d 	sts	0x1DF7, r31
     5aa:	e0 93 f6 1d 	sts	0x1DF6, r30
	map_angle[48][15] = -90;
     5ae:	b0 93 57 2a 	sts	0x2A57, r27
     5b2:	a0 93 56 2a 	sts	0x2A56, r26
	map_angle[19][33] = -30;
     5b6:	90 93 61 1f 	sts	0x1F61, r25
     5ba:	80 93 60 1f 	sts	0x1F60, r24
	map_angle[33][19] = 150;
     5be:	30 93 a1 24 	sts	0x24A1, r19
     5c2:	20 93 a0 24 	sts	0x24A0, r18
	map_angle[19][34] = 30;
     5c6:	50 93 63 1f 	sts	0x1F63, r21
     5ca:	40 93 62 1f 	sts	0x1F62, r20
	map_angle[34][19] = -150;
     5ce:	70 93 03 25 	sts	0x2503, r23
     5d2:	60 93 02 25 	sts	0x2502, r22
	map_angle[23][43] = -90;
     5d6:	b0 93 fd 20 	sts	0x20FD, r27
     5da:	a0 93 fc 20 	sts	0x20FC, r26
	map_angle[43][23] = 90;
     5de:	f0 93 7d 28 	sts	0x287D, r31
     5e2:	e0 93 7c 28 	sts	0x287C, r30
	map_angle[23][44] = -30;
     5e6:	90 93 ff 20 	sts	0x20FF, r25
     5ea:	80 93 fe 20 	sts	0x20FE, r24
	map_angle[44][23] = 150;
     5ee:	30 93 df 28 	sts	0x28DF, r19
     5f2:	20 93 de 28 	sts	0x28DE, r18
	map_angle[25][26] = -30;
     5f6:	9d 83       	std	Y+5, r25	; 0x05
     5f8:	8c 83       	std	Y+4, r24	; 0x04
	map_angle[26][25] = 150;
     5fa:	30 93 ff 21 	sts	0x21FF, r19
     5fe:	20 93 fe 21 	sts	0x21FE, r18
	map_angle[29][30] = -150;
     602:	70 93 2f 23 	sts	0x232F, r23
     606:	60 93 2e 23 	sts	0x232E, r22
	map_angle[30][29] = 30;
     60a:	50 93 8f 23 	sts	0x238F, r21
     60e:	40 93 8e 23 	sts	0x238E, r20
	map_angle[35][43] = 90;
     612:	f0 93 95 25 	sts	0x2595, r31
     616:	e0 93 94 25 	sts	0x2594, r30
	map_angle[43][35] = -90;
     61a:	b0 93 95 28 	sts	0x2895, r27
     61e:	a0 93 94 28 	sts	0x2894, r26
	map_angle[36][44] = 150;
     622:	30 93 f9 25 	sts	0x25F9, r19
     626:	20 93 f8 25 	sts	0x25F8, r18
	map_angle[44][36] = -30;
     62a:	90 93 f9 28 	sts	0x28F9, r25
     62e:	80 93 f8 28 	sts	0x28F8, r24
	map_angle[27][45] = -30;
     632:	90 93 89 22 	sts	0x2289, r25
     636:	80 93 88 22 	sts	0x2288, r24
	map_angle[45][27] = 150;
     63a:	30 93 49 29 	sts	0x2949, r19
     63e:	20 93 48 29 	sts	0x2948, r18
	map_angle[28][46] = 30;
     642:	50 93 ed 22 	sts	0x22ED, r21
     646:	40 93 ec 22 	sts	0x22EC, r20
	map_angle[46][28] = -150;
     64a:	70 93 ad 29 	sts	0x29AD, r23
     64e:	60 93 ac 29 	sts	0x29AC, r22
	map_angle[31][47] = -150;
     652:	70 93 15 24 	sts	0x2415, r23
     656:	60 93 14 24 	sts	0x2414, r22
	map_angle[47][31] = 30;
     65a:	50 93 15 2a 	sts	0x2A15, r21
     65e:	40 93 14 2a 	sts	0x2A14, r20
	map_angle[32][48] = -90;
     662:	b0 93 79 24 	sts	0x2479, r27
     666:	a0 93 78 24 	sts	0x2478, r26
	map_angle[48][32] = 90;
     66a:	f0 93 79 2a 	sts	0x2A79, r31
     66e:	e0 93 78 2a 	sts	0x2A78, r30
	map_angle[27][38] = -150;
     672:	70 93 7b 22 	sts	0x227B, r23
     676:	60 93 7a 22 	sts	0x227A, r22
	map_angle[38][27] = 30;
     67a:	50 93 9b 26 	sts	0x269B, r21
     67e:	40 93 9a 26 	sts	0x269A, r20
	map_angle[28][39] = 150;
     682:	30 93 df 22 	sts	0x22DF, r19
     686:	20 93 de 22 	sts	0x22DE, r18
	map_angle[39][28] = -30;
     68a:	90 93 ff 26 	sts	0x26FF, r25
     68e:	80 93 fe 26 	sts	0x26FE, r24
	map_angle[31][40] = 90;
     692:	f0 93 07 24 	sts	0x2407, r31
     696:	e0 93 06 24 	sts	0x2406, r30
	map_angle[40][31] = -90;
     69a:	b0 93 67 27 	sts	0x2767, r27
     69e:	a0 93 66 27 	sts	0x2766, r26
	map_angle[32][41] = 30;
     6a2:	50 93 6b 24 	sts	0x246B, r21
     6a6:	40 93 6a 24 	sts	0x246A, r20
	map_angle[41][32] = -150;
     6aa:	70 93 cb 27 	sts	0x27CB, r23
     6ae:	60 93 ca 27 	sts	0x27CA, r22
	map_angle[35][42] = -30;
     6b2:	90 93 93 25 	sts	0x2593, r25
     6b6:	80 93 92 25 	sts	0x2592, r24
	map_angle[42][35] = 150;
     6ba:	30 93 33 28 	sts	0x2833, r19
     6be:	20 93 32 28 	sts	0x2832, r18
	map_angle[36][37] = -90;
     6c2:	b0 93 eb 25 	sts	0x25EB, r27
     6c6:	a0 93 ea 25 	sts	0x25EA, r26
	map_angle[37][36] = 90;
     6ca:	f0 93 4b 26 	sts	0x264B, r31
     6ce:	e0 93 4a 26 	sts	0x264A, r30
	map_angle[39][40] = -150;
     6d2:	70 93 17 27 	sts	0x2717, r23
     6d6:	60 93 16 27 	sts	0x2716, r22
	map_angle[40][39] = 30;
     6da:	50 93 77 27 	sts	0x2777, r21
     6de:	40 93 76 27 	sts	0x2776, r20
	map_angle[37][38] = 150;
     6e2:	30 93 4f 26 	sts	0x264F, r19
     6e6:	20 93 4e 26 	sts	0x264E, r18
	map_angle[38][37] = -30;
     6ea:	90 93 af 26 	sts	0x26AF, r25
     6ee:	80 93 ae 26 	sts	0x26AE, r24
	map_angle[41][42] = 90;
     6f2:	f0 93 df 27 	sts	0x27DF, r31
     6f6:	e0 93 de 27 	sts	0x27DE, r30
	map_angle[42][41] = -90;
     6fa:	b0 93 3f 28 	sts	0x283F, r27
     6fe:	a0 93 3e 28 	sts	0x283E, r26
	return 0;
}
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <fCostCalc>:
	*Input: gCost and hCost (heuristic)
	*Output: Single integer which is the fCost
	*Logic: Adds gCost and hCost to return the fCost.
	*Example Call: int fCost = fCostCalc (gCost, hCost);
*/
int fCostCalc (int gCost, int heuristic) {
     70c:	68 0f       	add	r22, r24
     70e:	79 1f       	adc	r23, r25
	return gCost + heuristic;
}
     710:	cb 01       	movw	r24, r22
     712:	08 95       	ret

00000714 <extractMin>:
	*Logic: Starts index of min at -1. It then checks for all the elements in
			the open list in one scan while also checking their cost and
			updating min in the process.
	*Example Call: int min = extractMin (openList, fCost, size);
*/
int extractMin (int list[], int cost[], int Size) {
     714:	ef 92       	push	r14
     716:	ff 92       	push	r15
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	8b 01       	movw	r16, r22
     722:	7a 01       	movw	r14, r20
     724:	bc 01       	movw	r22, r24
     726:	e8 01       	movw	r28, r16
     728:	af ef       	ldi	r26, 0xFF	; 255
     72a:	bf ef       	ldi	r27, 0xFF	; 255
     72c:	40 e0       	ldi	r20, 0x00	; 0
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	1b c0       	rjmp	.+54     	; 0x768 <extractMin+0x54>
	//Think of initializing min
	int min = -1;	
	for (int i = 0; i < Size; i++) {
		if (list[i] != 0) {
     732:	fb 01       	movw	r30, r22
     734:	80 81       	ld	r24, Z
     736:	91 81       	ldd	r25, Z+1	; 0x01
     738:	89 2b       	or	r24, r25
     73a:	89 f0       	breq	.+34     	; 0x75e <extractMin+0x4a>
			if (min == -1) {
     73c:	ff ef       	ldi	r31, 0xFF	; 255
     73e:	af 3f       	cpi	r26, 0xFF	; 255
     740:	bf 07       	cpc	r27, r31
     742:	61 f0       	breq	.+24     	; 0x75c <extractMin+0x48>
				min = i;
				continue;
			}
			min = ((cost[min] < cost[i]) ? min : i);
     744:	fd 01       	movw	r30, r26
     746:	ee 0f       	add	r30, r30
     748:	ff 1f       	adc	r31, r31
     74a:	e0 0f       	add	r30, r16
     74c:	f1 1f       	adc	r31, r17
     74e:	20 81       	ld	r18, Z
     750:	31 81       	ldd	r19, Z+1	; 0x01
     752:	88 81       	ld	r24, Y
     754:	99 81       	ldd	r25, Y+1	; 0x01
     756:	28 17       	cp	r18, r24
     758:	39 07       	cpc	r19, r25
     75a:	0c f0       	brlt	.+2      	; 0x75e <extractMin+0x4a>
     75c:	da 01       	movw	r26, r20
	*Example Call: int min = extractMin (openList, fCost, size);
*/
int extractMin (int list[], int cost[], int Size) {
	//Think of initializing min
	int min = -1;	
	for (int i = 0; i < Size; i++) {
     75e:	4f 5f       	subi	r20, 0xFF	; 255
     760:	5f 4f       	sbci	r21, 0xFF	; 255
     762:	6e 5f       	subi	r22, 0xFE	; 254
     764:	7f 4f       	sbci	r23, 0xFF	; 255
     766:	22 96       	adiw	r28, 0x02	; 2
     768:	4e 15       	cp	r20, r14
     76a:	5f 05       	cpc	r21, r15
     76c:	14 f3       	brlt	.-60     	; 0x732 <extractMin+0x1e>
			}
			min = ((cost[min] < cost[i]) ? min : i);
		}
	}
	return min;
}
     76e:	cd 01       	movw	r24, r26
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	ff 90       	pop	r15
     77a:	ef 90       	pop	r14
     77c:	08 95       	ret

0000077e <reverse>:
			index is strictly less than the right one, it swaps those. It then
			increases the left pointer while decreasing the right one.
	*Example Call: reverse (arr, size);
*/
void reverse (int *Rev, int Size) {
	int j = Size-1, i = 0, temp;
     77e:	61 50       	subi	r22, 0x01	; 1
     780:	70 40       	sbci	r23, 0x00	; 0
     782:	dc 01       	movw	r26, r24
     784:	fb 01       	movw	r30, r22
     786:	ee 0f       	add	r30, r30
     788:	ff 1f       	adc	r31, r31
     78a:	ea 0f       	add	r30, r26
     78c:	fb 1f       	adc	r31, r27
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	0e c0       	rjmp	.+28     	; 0x7b0 <reverse+0x32>
	while(i < j) {
		temp = Rev[i];
     794:	2d 91       	ld	r18, X+
     796:	3c 91       	ld	r19, X
     798:	11 97       	sbiw	r26, 0x01	; 1
		Rev[i] = Rev[j];
     79a:	80 81       	ld	r24, Z
     79c:	91 81       	ldd	r25, Z+1	; 0x01
     79e:	8d 93       	st	X+, r24
     7a0:	9d 93       	st	X+, r25
		Rev[j] = temp;
     7a2:	31 83       	std	Z+1, r19	; 0x01
     7a4:	20 83       	st	Z, r18
		i++;
     7a6:	4f 5f       	subi	r20, 0xFF	; 255
     7a8:	5f 4f       	sbci	r21, 0xFF	; 255
		j--;
     7aa:	61 50       	subi	r22, 0x01	; 1
     7ac:	70 40       	sbci	r23, 0x00	; 0
     7ae:	32 97       	sbiw	r30, 0x02	; 2
			increases the left pointer while decreasing the right one.
	*Example Call: reverse (arr, size);
*/
void reverse (int *Rev, int Size) {
	int j = Size-1, i = 0, temp;
	while(i < j) {
     7b0:	46 17       	cp	r20, r22
     7b2:	57 07       	cpc	r21, r23
     7b4:	7c f3       	brlt	.-34     	; 0x794 <reverse+0x16>
		Rev[i] = Rev[j];
		Rev[j] = temp;
		i++;
		j--;
	}
}
     7b6:	08 95       	ret

000007b8 <adc_pin_config>:
*/

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     7b8:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     7ba:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     7bc:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     7c0:	10 92 08 01 	sts	0x0108, r1
}
     7c4:	08 95       	ret

000007c6 <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     7c6:	81 b1       	in	r24, 0x01	; 1
     7c8:	8f 60       	ori	r24, 0x0F	; 15
     7ca:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     7cc:	82 b1       	in	r24, 0x02	; 2
     7ce:	80 7f       	andi	r24, 0xF0	; 240
     7d0:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     7d2:	ea e0       	ldi	r30, 0x0A	; 10
     7d4:	f1 e0       	ldi	r31, 0x01	; 1
     7d6:	80 81       	ld	r24, Z
     7d8:	88 61       	ori	r24, 0x18	; 24
     7da:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     7dc:	eb e0       	ldi	r30, 0x0B	; 11
     7de:	f1 e0       	ldi	r31, 0x01	; 1
     7e0:	80 81       	ld	r24, Z
     7e2:	88 61       	ori	r24, 0x18	; 24
     7e4:	80 83       	st	Z, r24
}
     7e6:	08 95       	ret

000007e8 <left_encoder_pin_config>:

void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     7e8:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     7ea:	74 9a       	sbi	0x0e, 4	; 14
}
     7ec:	08 95       	ret

000007ee <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     7ee:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     7f0:	75 9a       	sbi	0x0e, 5	; 14
}
     7f2:	08 95       	ret

000007f4 <port_init>:
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
}
//Function to configure LCD port
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     7f4:	87 b1       	in	r24, 0x07	; 7
     7f6:	87 6f       	ori	r24, 0xF7	; 247
     7f8:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     7fa:	88 b1       	in	r24, 0x08	; 8
     7fc:	80 78       	andi	r24, 0x80	; 128
     7fe:	88 b9       	out	0x08, r24	; 8
*/

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     800:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     802:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     804:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     808:	10 92 08 01 	sts	0x0108, r1
}

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     80c:	81 b1       	in	r24, 0x01	; 1
     80e:	8f 60       	ori	r24, 0x0F	; 15
     810:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     812:	82 b1       	in	r24, 0x02	; 2
     814:	80 7f       	andi	r24, 0xF0	; 240
     816:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     818:	ea e0       	ldi	r30, 0x0A	; 10
     81a:	f1 e0       	ldi	r31, 0x01	; 1
     81c:	80 81       	ld	r24, Z
     81e:	88 61       	ori	r24, 0x18	; 24
     820:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     822:	eb e0       	ldi	r30, 0x0B	; 11
     824:	f1 e0       	ldi	r31, 0x01	; 1
     826:	80 81       	ld	r24, Z
     828:	88 61       	ori	r24, 0x18	; 24
     82a:	80 83       	st	Z, r24
	*Example Call: int *cost = BFS(source);
*/

void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     82c:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     82e:	43 98       	cbi	0x08, 3	; 8
}

void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     830:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     832:	74 9a       	sbi	0x0e, 4	; 14
}

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     834:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     836:	75 9a       	sbi	0x0e, 5	; 14
	adc_pin_config();
	motion_pin_config();	
	buzzer_pin_config();
	left_encoder_pin_config(); //left encoder pin config
	right_encoder_pin_config(); //right encoder pin config
}
     838:	08 95       	ret

0000083a <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
     83a:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     83c:	ea e6       	ldi	r30, 0x6A	; 106
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	80 81       	ld	r24, Z
     842:	82 60       	ori	r24, 0x02	; 2
     844:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     846:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
     848:	78 94       	sei
}
     84a:	08 95       	ret

0000084c <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
     84c:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     84e:	ea e6       	ldi	r30, 0x6A	; 106
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	80 81       	ld	r24, Z
     854:	88 60       	ori	r24, 0x08	; 8
     856:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     858:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
     85a:	78 94       	sei
}
     85c:	08 95       	ret

0000085e <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
     85e:	1f 92       	push	r1
     860:	0f 92       	push	r0
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	0f 92       	push	r0
     866:	11 24       	eor	r1, r1
     868:	8f 93       	push	r24
     86a:	9f 93       	push	r25
     86c:	af 93       	push	r26
     86e:	bf 93       	push	r27
	ShaftCountRight++;  //increment right shaft position count
     870:	80 91 34 04 	lds	r24, 0x0434
     874:	90 91 35 04 	lds	r25, 0x0435
     878:	a0 91 36 04 	lds	r26, 0x0436
     87c:	b0 91 37 04 	lds	r27, 0x0437
     880:	01 96       	adiw	r24, 0x01	; 1
     882:	a1 1d       	adc	r26, r1
     884:	b1 1d       	adc	r27, r1
     886:	80 93 34 04 	sts	0x0434, r24
     88a:	90 93 35 04 	sts	0x0435, r25
     88e:	a0 93 36 04 	sts	0x0436, r26
     892:	b0 93 37 04 	sts	0x0437, r27
}
     896:	bf 91       	pop	r27
     898:	af 91       	pop	r26
     89a:	9f 91       	pop	r25
     89c:	8f 91       	pop	r24
     89e:	0f 90       	pop	r0
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	0f 90       	pop	r0
     8a4:	1f 90       	pop	r1
     8a6:	18 95       	reti

000008a8 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     8a8:	1f 92       	push	r1
     8aa:	0f 92       	push	r0
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	0f 92       	push	r0
     8b0:	11 24       	eor	r1, r1
     8b2:	8f 93       	push	r24
     8b4:	9f 93       	push	r25
     8b6:	af 93       	push	r26
     8b8:	bf 93       	push	r27
	ShaftCountLeft++;  //increment left shaft position count
     8ba:	80 91 30 04 	lds	r24, 0x0430
     8be:	90 91 31 04 	lds	r25, 0x0431
     8c2:	a0 91 32 04 	lds	r26, 0x0432
     8c6:	b0 91 33 04 	lds	r27, 0x0433
     8ca:	01 96       	adiw	r24, 0x01	; 1
     8cc:	a1 1d       	adc	r26, r1
     8ce:	b1 1d       	adc	r27, r1
     8d0:	80 93 30 04 	sts	0x0430, r24
     8d4:	90 93 31 04 	sts	0x0431, r25
     8d8:	a0 93 32 04 	sts	0x0432, r26
     8dc:	b0 93 33 04 	sts	0x0433, r27
}
     8e0:	bf 91       	pop	r27
     8e2:	af 91       	pop	r26
     8e4:	9f 91       	pop	r25
     8e6:	8f 91       	pop	r24
     8e8:	0f 90       	pop	r0
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	0f 90       	pop	r0
     8ee:	1f 90       	pop	r1
     8f0:	18 95       	reti

000008f2 <timer1_init>:

void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     8f2:	e1 e8       	ldi	r30, 0x81	; 129
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     8f8:	8c ef       	ldi	r24, 0xFC	; 252
     8fa:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
     904:	93 e0       	ldi	r25, 0x03	; 3
     906:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
     910:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     914:	80 93 8a 00 	sts	0x008A, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
     918:	90 93 8d 00 	sts	0x008D, r25
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
     91c:	80 93 8c 00 	sts	0x008C, r24
 ICR1H  = 0x03;	
     920:	90 93 87 00 	sts	0x0087, r25
 ICR1L  = 0xFF;
     924:	80 93 86 00 	sts	0x0086, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     928:	8b ea       	ldi	r24, 0xAB	; 171
     92a:	80 93 80 00 	sts	0x0080, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     92e:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     932:	8c e0       	ldi	r24, 0x0C	; 12
     934:	80 83       	st	Z, r24
}
     936:	08 95       	ret

00000938 <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     938:	e1 e2       	ldi	r30, 0x21	; 33
     93a:	f1 e0       	ldi	r31, 0x01	; 1
     93c:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     93e:	9f ef       	ldi	r25, 0xFF	; 255
     940:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     94a:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     94e:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     952:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     956:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     95a:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     95e:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     962:	89 ea       	ldi	r24, 0xA9	; 169
     964:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     968:	8b e0       	ldi	r24, 0x0B	; 11
     96a:	80 83       	st	Z, r24
}
     96c:	08 95       	ret

0000096e <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
     96e:	ea e7       	ldi	r30, 0x7A	; 122
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     974:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     978:	80 e2       	ldi	r24, 0x20	; 32
     97a:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     97e:	80 e8       	ldi	r24, 0x80	; 128
     980:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     982:	86 e8       	ldi	r24, 0x86	; 134
     984:	80 83       	st	Z, r24
}
     986:	08 95       	ret

00000988 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
     988:	98 2f       	mov	r25, r24
	unsigned char a;
	if(Ch>7)
     98a:	88 30       	cpi	r24, 0x08	; 8
     98c:	18 f0       	brcs	.+6      	; 0x994 <ADC_Conversion+0xc>
	{
		ADCSRB = 0x08;
     98e:	88 e0       	ldi	r24, 0x08	; 8
     990:	80 93 7b 00 	sts	0x007B, r24
	}
	Ch = Ch & 0x07;  			
	ADMUX= 0x20| Ch;	   		
     994:	97 70       	andi	r25, 0x07	; 7
     996:	90 62       	ori	r25, 0x20	; 32
     998:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     99c:	80 91 7a 00 	lds	r24, 0x007A
     9a0:	80 64       	ori	r24, 0x40	; 64
     9a2:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     9a6:	80 91 7a 00 	lds	r24, 0x007A
     9aa:	84 ff       	sbrs	r24, 4
     9ac:	fc cf       	rjmp	.-8      	; 0x9a6 <ADC_Conversion+0x1e>
	a=ADCH;
     9ae:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     9b2:	90 91 7a 00 	lds	r25, 0x007A
     9b6:	90 61       	ori	r25, 0x10	; 16
     9b8:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB = 0x00;
     9bc:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     9c0:	08 95       	ret

000009c2 <velocity>:
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     9c2:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     9c6:	60 93 2a 01 	sts	0x012A, r22
}
     9ca:	08 95       	ret

000009cc <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9cc:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9ce:	90 7f       	andi	r25, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9d0:	8f 70       	andi	r24, 0x0F	; 15
     9d2:	89 2b       	or	r24, r25
 PORTA = PortARestore; 		// executing the command
     9d4:	82 b9       	out	0x02, r24	; 2
}
     9d6:	08 95       	ret

000009d8 <forward>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9d8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9da:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9dc:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     9de:	82 b9       	out	0x02, r24	; 2
}

void forward (void) 
{
  motion_set (0x06);
}
     9e0:	08 95       	ret

000009e2 <back>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9e2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9e4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9e6:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     9e8:	82 b9       	out	0x02, r24	; 2
}

void back (void) //both wheels backward
{
  motion_set(0x09);
}
     9ea:	08 95       	ret

000009ec <left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9ec:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9ee:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9f0:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     9f2:	82 b9       	out	0x02, r24	; 2
}

void left (void) //Left wheel backward, Right wheel forward
{
  motion_set(0x05);
}
     9f4:	08 95       	ret

000009f6 <right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9f6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9f8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9fa:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     9fc:	82 b9       	out	0x02, r24	; 2
}

void right (void) //Left wheel forward, Right wheel backward
{
  motion_set(0x0A);
}
     9fe:	08 95       	ret

00000a00 <soft_left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a00:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a02:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a04:	84 60       	ori	r24, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     a06:	82 b9       	out	0x02, r24	; 2
}

void soft_left (void) //Left wheel stationary, Right wheel forward
{
 motion_set(0x04);
}
     a08:	08 95       	ret

00000a0a <soft_right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a0a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a0c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a0e:	82 60       	ori	r24, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     a10:	82 b9       	out	0x02, r24	; 2
}

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
 motion_set(0x02);
}
     a12:	08 95       	ret

00000a14 <soft_left_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a14:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a16:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a18:	81 60       	ori	r24, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     a1a:	82 b9       	out	0x02, r24	; 2
}

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
 motion_set(0x01);
}
     a1c:	08 95       	ret

00000a1e <soft_right_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a1e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a20:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a22:	88 60       	ori	r24, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     a24:	82 b9       	out	0x02, r24	; 2
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
 motion_set(0x08);
}
     a26:	08 95       	ret

00000a28 <stop>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a28:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a2a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     a2c:	82 b9       	out	0x02, r24	; 2
}

void stop (void)
{
  motion_set (0x00);
}
     a2e:	08 95       	ret

00000a30 <angle_rotate>:

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	bc 01       	movw	r22, r24
     a3e:	cd 01       	movw	r24, r26
     a40:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <__floatunsisf>
     a44:	28 e4       	ldi	r18, 0x48	; 72
     a46:	31 ee       	ldi	r19, 0xE1	; 225
     a48:	42 e8       	ldi	r20, 0x82	; 130
     a4a:	50 e4       	ldi	r21, 0x40	; 64
     a4c:	0e 94 c8 12 	call	0x2590	; 0x2590 <__divsf3>
     a50:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__fixunssfsi>
     a54:	7b 01       	movw	r14, r22
     a56:	00 e0       	ldi	r16, 0x00	; 0
     a58:	10 e0       	ldi	r17, 0x00	; 0
	ShaftCountRight = 0;
     a5a:	10 92 34 04 	sts	0x0434, r1
     a5e:	10 92 35 04 	sts	0x0435, r1
     a62:	10 92 36 04 	sts	0x0436, r1
     a66:	10 92 37 04 	sts	0x0437, r1
	ShaftCountLeft = 0;
     a6a:	10 92 30 04 	sts	0x0430, r1
     a6e:	10 92 31 04 	sts	0x0431, r1
     a72:	10 92 32 04 	sts	0x0432, r1
     a76:	10 92 33 04 	sts	0x0433, r1

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     a7a:	80 91 34 04 	lds	r24, 0x0434
     a7e:	90 91 35 04 	lds	r25, 0x0435
     a82:	a0 91 36 04 	lds	r26, 0x0436
     a86:	b0 91 37 04 	lds	r27, 0x0437
     a8a:	20 91 30 04 	lds	r18, 0x0430
     a8e:	30 91 31 04 	lds	r19, 0x0431
     a92:	40 91 32 04 	lds	r20, 0x0432
     a96:	50 91 33 04 	lds	r21, 0x0433
     a9a:	8e 15       	cp	r24, r14
     a9c:	9f 05       	cpc	r25, r15
     a9e:	a0 07       	cpc	r26, r16
     aa0:	b1 07       	cpc	r27, r17
     aa2:	28 f4       	brcc	.+10     	; 0xaae <angle_rotate+0x7e>
     aa4:	2e 15       	cp	r18, r14
     aa6:	3f 05       	cpc	r19, r15
     aa8:	40 07       	cpc	r20, r16
     aaa:	51 07       	cpc	r21, r17
     aac:	30 f3       	brcs	.-52     	; 0xa7a <angle_rotate+0x4a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     aae:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     ab0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     ab2:	82 b9       	out	0x02, r24	; 2
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
		break;
	}
	stop(); //Stop robot
}
     ab4:	1f 91       	pop	r17
     ab6:	0f 91       	pop	r16
     ab8:	ff 90       	pop	r15
     aba:	ef 90       	pop	r14
     abc:	08 95       	ret

00000abe <left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     abe:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     ac0:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     ac2:	25 60       	ori	r18, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     ac4:	22 b9       	out	0x02, r18	; 2

void left_degrees(unsigned int Degrees)
{
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
	angle_rotate(Degrees);
     ac6:	0e 94 18 05 	call	0xa30	; 0xa30 <angle_rotate>
}
     aca:	08 95       	ret

00000acc <right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     acc:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     ace:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     ad0:	2a 60       	ori	r18, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     ad2:	22 b9       	out	0x02, r18	; 2

void right_degrees(unsigned int Degrees)
{
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
	angle_rotate(Degrees);
     ad4:	0e 94 18 05 	call	0xa30	; 0xa30 <angle_rotate>
}
     ad8:	08 95       	ret

00000ada <soft_left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     ada:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     adc:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     ade:	24 60       	ori	r18, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     ae0:	22 b9       	out	0x02, r18	; 2
void soft_left_degrees(unsigned int Degrees)
{
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left(); //Turn soft left
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	0e 94 18 05 	call	0xa30	; 0xa30 <angle_rotate>
}
     aea:	08 95       	ret

00000aec <soft_right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     aec:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     aee:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     af0:	22 60       	ori	r18, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     af2:	22 b9       	out	0x02, r18	; 2
void soft_right_degrees(unsigned int Degrees)
{
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right();  //Turn soft right
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     af4:	88 0f       	add	r24, r24
     af6:	99 1f       	adc	r25, r25
     af8:	0e 94 18 05 	call	0xa30	; 0xa30 <angle_rotate>
}
     afc:	08 95       	ret

00000afe <soft_left_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     afe:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b00:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     b02:	21 60       	ori	r18, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     b04:	22 b9       	out	0x02, r18	; 2
void soft_left_2_degrees(unsigned int Degrees)
{
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left_2(); //Turn reverse soft left
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     b06:	88 0f       	add	r24, r24
     b08:	99 1f       	adc	r25, r25
     b0a:	0e 94 18 05 	call	0xa30	; 0xa30 <angle_rotate>
}
     b0e:	08 95       	ret

00000b10 <soft_right_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     b10:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b12:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     b14:	28 60       	ori	r18, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     b16:	22 b9       	out	0x02, r18	; 2
void soft_right_2_degrees(unsigned int Degrees)
{
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right_2();  //Turn reverse soft right
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	0e 94 18 05 	call	0xa30	; 0xa30 <angle_rotate>
}
     b20:	08 95       	ret

00000b22 <init_devices>:

void init_devices (void)
{
 	cli(); //Clears the global interrupts
     b22:	f8 94       	cli
	port_init();
     b24:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <port_init>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void adc_init()
{
	ADCSRA = 0x00;
     b28:	ea e7       	ldi	r30, 0x7A	; 122
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     b2e:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     b32:	80 e2       	ldi	r24, 0x20	; 32
     b34:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     b38:	80 e8       	ldi	r24, 0x80	; 128
     b3a:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     b3c:	86 e8       	ldi	r24, 0x86	; 134
     b3e:	80 83       	st	Z, r24
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     b40:	e1 e2       	ldi	r30, 0x21	; 33
     b42:	f1 e0       	ldi	r31, 0x01	; 1
     b44:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     b46:	9f ef       	ldi	r25, 0xFF	; 255
     b48:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     b52:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     b56:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     b5a:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     b5e:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     b62:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     b66:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     b6a:	89 ea       	ldi	r24, 0xA9	; 169
     b6c:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     b70:	8b e0       	ldi	r24, 0x0B	; 11
     b72:	80 83       	st	Z, r24
	right_encoder_pin_config(); //right encoder pin config
}

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
     b74:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     b76:	ea e6       	ldi	r30, 0x6A	; 106
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	82 60       	ori	r24, 0x02	; 2
     b7e:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     b80:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
     b82:	78 94       	sei
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
     b84:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     b86:	ea e6       	ldi	r30, 0x6A	; 106
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	88 60       	ori	r24, 0x08	; 8
     b8e:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     b90:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
     b92:	78 94       	sei
	port_init();
	adc_init();
	timer5_init();
	left_position_encoder_interrupt_init();
	right_position_encoder_interrupt_init();
	sei();   //Enables the global interrupts
     b94:	78 94       	sei
}
     b96:	08 95       	ret

00000b98 <move>:
	*Example Call: move();
*/

void move()
{
	senser_value_L = ADC_Conversion(3);	//Getting data of Left WL Sensor
     b98:	83 e0       	ldi	r24, 0x03	; 3
     b9a:	0e 94 c4 04 	call	0x988	; 0x988 <ADC_Conversion>
     b9e:	80 93 9f 17 	sts	0x179F, r24
     ba2:	10 92 a0 17 	sts	0x17A0, r1
	senser_value_C = ADC_Conversion(2);	//Getting data of Center WL Sensor
     ba6:	82 e0       	ldi	r24, 0x02	; 2
     ba8:	0e 94 c4 04 	call	0x988	; 0x988 <ADC_Conversion>
     bac:	80 93 0c 17 	sts	0x170C, r24
     bb0:	10 92 0d 17 	sts	0x170D, r1
	senser_value_R = ADC_Conversion(1);	//Getting data of Right WL Sensor
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	0e 94 c4 04 	call	0x988	; 0x988 <ADC_Conversion>
     bba:	28 2f       	mov	r18, r24
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	30 93 d1 17 	sts	0x17D1, r19
     bc2:	20 93 d0 17 	sts	0x17D0, r18

	// If black line is at left sensor and center sensor is not decting a black line
	// Speed up right motor a bit to get a left turn
	// Further set the flag to be equal to '1' suggesting that bot has taken left turn this time
	if ((senser_value_L > Threshold) && (senser_value_C < Threshold))
     bc6:	40 91 9f 17 	lds	r20, 0x179F
     bca:	50 91 a0 17 	lds	r21, 0x17A0
     bce:	49 32       	cpi	r20, 0x29	; 41
     bd0:	51 05       	cpc	r21, r1
     bd2:	f4 f0       	brlt	.+60     	; 0xc10 <move+0x78>
     bd4:	80 91 0c 17 	lds	r24, 0x170C
     bd8:	90 91 0d 17 	lds	r25, 0x170D
     bdc:	88 97       	sbiw	r24, 0x28	; 40
     bde:	c4 f4       	brge	.+48     	; 0xc10 <move+0x78>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     be0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     be2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     be4:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     be6:	82 b9       	out	0x02, r24	; 2
	// Speed up right motor a bit to get a left turn
	// Further set the flag to be equal to '1' suggesting that bot has taken left turn this time
	if ((senser_value_L > Threshold) && (senser_value_C < Threshold))
	{
		forward();
		left_motor = 125;
     be8:	8d e7       	ldi	r24, 0x7D	; 125
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	90 93 3f 04 	sts	0x043F, r25
     bf0:	80 93 3e 04 	sts	0x043E, r24
		right_motor = 250;
     bf4:	8a ef       	ldi	r24, 0xFA	; 250
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	90 93 41 04 	sts	0x0441, r25
     bfc:	80 93 40 04 	sts	0x0440, r24
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c00:	8d e7       	ldi	r24, 0x7D	; 125
     c02:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     c06:	8a ef       	ldi	r24, 0xFA	; 250
     c08:	80 93 2a 01 	sts	0x012A, r24
	{
		forward();
		left_motor = 125;
		right_motor = 250;
		velocity(left_motor,right_motor);
		flag = 1;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	20 c0       	rjmp	.+64     	; 0xc50 <move+0xb8>
	}
	// If black line is at right sensor and center sensor is not decting a black line
	// Speed up left motor a bit to get a right turn
	// Further set the flag to be equal to '2' suggesting that bot has taken right turn this time
	else if ((senser_value_R > Threshold) && (senser_value_C < Threshold))
     c10:	29 32       	cpi	r18, 0x29	; 41
     c12:	31 05       	cpc	r19, r1
     c14:	04 f1       	brlt	.+64     	; 0xc56 <move+0xbe>
     c16:	80 91 0c 17 	lds	r24, 0x170C
     c1a:	90 91 0d 17 	lds	r25, 0x170D
     c1e:	88 97       	sbiw	r24, 0x28	; 40
     c20:	d4 f4       	brge	.+52     	; 0xc56 <move+0xbe>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     c22:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     c24:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     c26:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     c28:	82 b9       	out	0x02, r24	; 2
	// Speed up left motor a bit to get a right turn
	// Further set the flag to be equal to '2' suggesting that bot has taken right turn this time
	else if ((senser_value_R > Threshold) && (senser_value_C < Threshold))
	{
		forward();
		left_motor = 250;
     c2a:	8a ef       	ldi	r24, 0xFA	; 250
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	90 93 3f 04 	sts	0x043F, r25
     c32:	80 93 3e 04 	sts	0x043E, r24
		right_motor = 125;
     c36:	8d e7       	ldi	r24, 0x7D	; 125
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	90 93 41 04 	sts	0x0441, r25
     c3e:	80 93 40 04 	sts	0x0440, r24
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c42:	8a ef       	ldi	r24, 0xFA	; 250
     c44:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     c48:	8d e7       	ldi	r24, 0x7D	; 125
     c4a:	80 93 2a 01 	sts	0x012A, r24
	{
		forward();
		left_motor = 250;
		right_motor = 125;
		velocity(left_motor,right_motor);
		flag = 2;
     c4e:	82 e0       	ldi	r24, 0x02	; 2
     c50:	80 93 38 04 	sts	0x0438, r24
     c54:	08 95       	ret
	}
	// If black line is at center sensor and left & right sensors are not decting a black line
	// Speed up both motors equally to get a straight movement
	else if ((senser_value_C > Threshold) && (senser_value_L < Threshold) && (senser_value_R < Threshold))
     c56:	80 91 0c 17 	lds	r24, 0x170C
     c5a:	90 91 0d 17 	lds	r25, 0x170D
     c5e:	89 32       	cpi	r24, 0x29	; 41
     c60:	91 05       	cpc	r25, r1
     c62:	c4 f0       	brlt	.+48     	; 0xc94 <move+0xfc>
     c64:	48 32       	cpi	r20, 0x28	; 40
     c66:	51 05       	cpc	r21, r1
     c68:	ac f4       	brge	.+42     	; 0xc94 <move+0xfc>
     c6a:	28 32       	cpi	r18, 0x28	; 40
     c6c:	31 05       	cpc	r19, r1
     c6e:	dc f5       	brge	.+118    	; 0xce6 <move+0x14e>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     c70:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     c72:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     c74:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     c76:	82 b9       	out	0x02, r24	; 2
	// If black line is at center sensor and left & right sensors are not decting a black line
	// Speed up both motors equally to get a straight movement
	else if ((senser_value_C > Threshold) && (senser_value_L < Threshold) && (senser_value_R < Threshold))
	{
		forward();
		left_motor = 250;
     c78:	8a ef       	ldi	r24, 0xFA	; 250
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	90 93 3f 04 	sts	0x043F, r25
     c80:	80 93 3e 04 	sts	0x043E, r24
		right_motor = 250;
     c84:	90 93 41 04 	sts	0x0441, r25
     c88:	80 93 40 04 	sts	0x0440, r24
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c8c:	8a ef       	ldi	r24, 0xFA	; 250
     c8e:	80 93 28 01 	sts	0x0128, r24
     c92:	20 c0       	rjmp	.+64     	; 0xcd4 <move+0x13c>
		right_motor = 250;
		velocity(left_motor, right_motor);
	}
	// If black line is nowhere to be found
	// Speed up right or left motor according to the flag set
	else if ((senser_value_R < Threshold) && (senser_value_C < Threshold) && (senser_value_L < Threshold))
     c94:	28 32       	cpi	r18, 0x28	; 40
     c96:	31 05       	cpc	r19, r1
     c98:	34 f5       	brge	.+76     	; 0xce6 <move+0x14e>
     c9a:	88 97       	sbiw	r24, 0x28	; 40
     c9c:	24 f5       	brge	.+72     	; 0xce6 <move+0x14e>
     c9e:	48 32       	cpi	r20, 0x28	; 40
     ca0:	51 05       	cpc	r21, r1
     ca2:	0c f5       	brge	.+66     	; 0xce6 <move+0x14e>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     ca4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     ca6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     ca8:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     caa:	82 b9       	out	0x02, r24	; 2
	// If black line is nowhere to be found
	// Speed up right or left motor according to the flag set
	else if ((senser_value_R < Threshold) && (senser_value_C < Threshold) && (senser_value_L < Threshold))
	{
		forward();
		left_motor = 100;
     cac:	84 e6       	ldi	r24, 0x64	; 100
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	90 93 3f 04 	sts	0x043F, r25
     cb4:	80 93 3e 04 	sts	0x043E, r24
		right_motor = 250;
     cb8:	8a ef       	ldi	r24, 0xFA	; 250
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	90 93 41 04 	sts	0x0441, r25
     cc0:	80 93 40 04 	sts	0x0440, r24
		if (flag == 1) {
     cc4:	80 91 38 04 	lds	r24, 0x0438
     cc8:	81 30       	cpi	r24, 0x01	; 1
     cca:	39 f4       	brne	.+14     	; 0xcda <move+0x142>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     ccc:	84 e6       	ldi	r24, 0x64	; 100
     cce:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     cd2:	8a ef       	ldi	r24, 0xFA	; 250
     cd4:	80 93 2a 01 	sts	0x012A, r24
     cd8:	08 95       	ret
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     cda:	8a ef       	ldi	r24, 0xFA	; 250
     cdc:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     ce0:	84 e6       	ldi	r24, 0x64	; 100
     ce2:	80 93 2a 01 	sts	0x012A, r24
     ce6:	08 95       	ret

00000ce8 <linear_distance_mm>:
}

//Function used for moving robot forward by specified distance

void linear_distance_mm(unsigned int DistanceInMM)
{
     ce8:	ef 92       	push	r14
     cea:	ff 92       	push	r15
     cec:	0f 93       	push	r16
     cee:	1f 93       	push	r17
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     cf0:	a0 e0       	ldi	r26, 0x00	; 0
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	bc 01       	movw	r22, r24
     cf6:	cd 01       	movw	r24, r26
     cf8:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <__floatunsisf>
     cfc:	25 ee       	ldi	r18, 0xE5	; 229
     cfe:	30 ed       	ldi	r19, 0xD0	; 208
     d00:	4a ea       	ldi	r20, 0xAA	; 170
     d02:	50 e4       	ldi	r21, 0x40	; 64
     d04:	0e 94 c8 12 	call	0x2590	; 0x2590 <__divsf3>
     d08:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__fixunssfsi>
     d0c:	7b 01       	movw	r14, r22
     d0e:	8c 01       	movw	r16, r24
	
	ShaftCountRight = 0;
     d10:	10 92 34 04 	sts	0x0434, r1
     d14:	10 92 35 04 	sts	0x0435, r1
     d18:	10 92 36 04 	sts	0x0436, r1
     d1c:	10 92 37 04 	sts	0x0437, r1
	while(1)
	{
		move();
     d20:	0e 94 cc 05 	call	0xb98	; 0xb98 <move>
		if(ShaftCountRight > ReqdShaftCountInt)
     d24:	80 91 34 04 	lds	r24, 0x0434
     d28:	90 91 35 04 	lds	r25, 0x0435
     d2c:	a0 91 36 04 	lds	r26, 0x0436
     d30:	b0 91 37 04 	lds	r27, 0x0437
     d34:	e8 16       	cp	r14, r24
     d36:	f9 06       	cpc	r15, r25
     d38:	0a 07       	cpc	r16, r26
     d3a:	1b 07       	cpc	r17, r27
     d3c:	88 f7       	brcc	.-30     	; 0xd20 <linear_distance_mm+0x38>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     d3e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     d40:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     d42:	82 b9       	out	0x02, r24	; 2
		{
			break;
		}
	}
	stop(); //Stop robot
}
     d44:	1f 91       	pop	r17
     d46:	0f 91       	pop	r16
     d48:	ff 90       	pop	r15
     d4a:	ef 90       	pop	r14
     d4c:	08 95       	ret

00000d4e <back_mm>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     d4e:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     d50:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     d52:	29 60       	ori	r18, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     d54:	22 b9       	out	0x02, r18	; 2
}

void back_mm(unsigned int DistanceInMM)
{
	back();
	linear_distance_mm(DistanceInMM);
     d56:	0e 94 74 06 	call	0xce8	; 0xce8 <linear_distance_mm>
}
     d5a:	08 95       	ret

00000d5c <forward_mm>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     d5c:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     d5e:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     d60:	26 60       	ori	r18, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     d62:	22 b9       	out	0x02, r18	; 2
}

void forward_mm(unsigned int DistanceInMM)
{
	forward();
	linear_distance_mm(DistanceInMM);
     d64:	0e 94 74 06 	call	0xce8	; 0xce8 <linear_distance_mm>
}
     d68:	08 95       	ret

00000d6a <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d6a:	86 e6       	ldi	r24, 0x66	; 102
     d6c:	9e e0       	ldi	r25, 0x0E	; 14
     d6e:	fc 01       	movw	r30, r24
     d70:	31 97       	sbiw	r30, 0x01	; 1
     d72:	f1 f7       	brne	.-4      	; 0xd70 <lcd_set_4bit+0x6>
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     d74:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     d76:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     d78:	40 e3       	ldi	r20, 0x30	; 48
     d7a:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     d7c:	42 9a       	sbi	0x08, 2	; 8
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	38 e4       	ldi	r19, 0x48	; 72
     d82:	f9 01       	movw	r30, r18
     d84:	31 97       	sbiw	r30, 0x01	; 1
     d86:	f1 f7       	brne	.-4      	; 0xd84 <lcd_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     d88:	42 98       	cbi	0x08, 2	; 8
     d8a:	fc 01       	movw	r30, r24
     d8c:	31 97       	sbiw	r30, 0x01	; 1
     d8e:	f1 f7       	brne	.-4      	; 0xd8c <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     d90:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     d92:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     d94:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     d96:	42 9a       	sbi	0x08, 2	; 8
     d98:	f9 01       	movw	r30, r18
     d9a:	31 97       	sbiw	r30, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <lcd_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     d9e:	42 98       	cbi	0x08, 2	; 8
     da0:	fc 01       	movw	r30, r24
     da2:	31 97       	sbiw	r30, 0x01	; 1
     da4:	f1 f7       	brne	.-4      	; 0xda2 <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     da6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     da8:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     daa:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     dac:	42 9a       	sbi	0x08, 2	; 8
     dae:	f9 01       	movw	r30, r18
     db0:	31 97       	sbiw	r30, 0x01	; 1
     db2:	f1 f7       	brne	.-4      	; 0xdb0 <lcd_set_4bit+0x46>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     db4:	42 98       	cbi	0x08, 2	; 8
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     dba:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     dbc:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     dbe:	80 e2       	ldi	r24, 0x20	; 32
     dc0:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     dc2:	42 9a       	sbi	0x08, 2	; 8
     dc4:	c9 01       	movw	r24, r18
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	f1 f7       	brne	.-4      	; 0xdc6 <lcd_set_4bit+0x5c>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     dca:	42 98       	cbi	0x08, 2	; 8

	
}
     dcc:	08 95       	ret

00000dce <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     dce:	98 b1       	in	r25, 0x08	; 8
     dd0:	9f 70       	andi	r25, 0x0F	; 15
     dd2:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     dd4:	28 b1       	in	r18, 0x08	; 8
     dd6:	98 2f       	mov	r25, r24
     dd8:	90 7f       	andi	r25, 0xF0	; 240
     dda:	92 2b       	or	r25, r18
     ddc:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     dde:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     de0:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     de2:	42 9a       	sbi	0x08, 2	; 8
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	38 e4       	ldi	r19, 0x48	; 72
     de8:	f9 01       	movw	r30, r18
     dea:	31 97       	sbiw	r30, 0x01	; 1
     dec:	f1 f7       	brne	.-4      	; 0xdea <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     dee:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     df0:	98 b1       	in	r25, 0x08	; 8
     df2:	9f 70       	andi	r25, 0x0F	; 15
     df4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     df6:	98 b1       	in	r25, 0x08	; 8
     df8:	82 95       	swap	r24
     dfa:	80 7f       	andi	r24, 0xF0	; 240
     dfc:	98 2b       	or	r25, r24
     dfe:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     e00:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     e02:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     e04:	42 9a       	sbi	0x08, 2	; 8
     e06:	c9 01       	movw	r24, r18
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	f1 f7       	brne	.-4      	; 0xe08 <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     e0c:	42 98       	cbi	0x08, 2	; 8
}
     e0e:	08 95       	ret

00000e10 <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     e10:	0e 94 b5 06 	call	0xd6a	; 0xd6a <lcd_set_4bit>
     e14:	86 e6       	ldi	r24, 0x66	; 102
     e16:	9e e0       	ldi	r25, 0x0E	; 14
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	f1 f7       	brne	.-4      	; 0xe18 <lcd_init+0x8>
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     e1c:	88 e2       	ldi	r24, 0x28	; 40
     e1e:	0e 94 e7 06 	call	0xdce	; 0xdce <lcd_wr_command>
	lcd_wr_command(0x01);
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	0e 94 e7 06 	call	0xdce	; 0xdce <lcd_wr_command>
	lcd_wr_command(0x06);
     e28:	86 e0       	ldi	r24, 0x06	; 6
     e2a:	0e 94 e7 06 	call	0xdce	; 0xdce <lcd_wr_command>
	lcd_wr_command(0x0E);
     e2e:	8e e0       	ldi	r24, 0x0E	; 14
     e30:	0e 94 e7 06 	call	0xdce	; 0xdce <lcd_wr_command>
	lcd_wr_command(0x80);
     e34:	80 e8       	ldi	r24, 0x80	; 128
     e36:	0e 94 e7 06 	call	0xdce	; 0xdce <lcd_wr_command>
		
}
     e3a:	08 95       	ret

00000e3c <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     e3c:	98 b1       	in	r25, 0x08	; 8
     e3e:	9f 70       	andi	r25, 0x0F	; 15
     e40:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     e42:	28 b1       	in	r18, 0x08	; 8
     e44:	98 2f       	mov	r25, r24
     e46:	90 7f       	andi	r25, 0xF0	; 240
     e48:	92 2b       	or	r25, r18
     e4a:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     e4c:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     e4e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     e50:	42 9a       	sbi	0x08, 2	; 8
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	38 e4       	ldi	r19, 0x48	; 72
     e56:	f9 01       	movw	r30, r18
     e58:	31 97       	sbiw	r30, 0x01	; 1
     e5a:	f1 f7       	brne	.-4      	; 0xe58 <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     e5c:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     e5e:	98 b1       	in	r25, 0x08	; 8
     e60:	9f 70       	andi	r25, 0x0F	; 15
     e62:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     e64:	98 b1       	in	r25, 0x08	; 8
     e66:	82 95       	swap	r24
     e68:	80 7f       	andi	r24, 0xF0	; 240
     e6a:	98 2b       	or	r25, r24
     e6c:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     e6e:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     e70:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     e72:	42 9a       	sbi	0x08, 2	; 8
     e74:	c9 01       	movw	r24, r18
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	f1 f7       	brne	.-4      	; 0xe76 <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     e7a:	42 98       	cbi	0x08, 2	; 8
}
     e7c:	08 95       	ret

00000e7e <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     e7e:	80 e8       	ldi	r24, 0x80	; 128
     e80:	0e 94 e7 06 	call	0xdce	; 0xdce <lcd_wr_command>
}
     e84:	08 95       	ret

00000e86 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	ec 01       	movw	r28, r24
     e8c:	03 c0       	rjmp	.+6      	; 0xe94 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     e8e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <lcd_wr_char>
		str++;
     e92:	21 96       	adiw	r28, 0x01	; 1


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     e94:	88 81       	ld	r24, Y
     e96:	88 23       	and	r24, r24
     e98:	d1 f7       	brne	.-12     	; 0xe8e <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	08 95       	ret

00000ea0 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     ea0:	82 30       	cpi	r24, 0x02	; 2
     ea2:	69 f0       	breq	.+26     	; 0xebe <lcd_cursor+0x1e>
     ea4:	83 30       	cpi	r24, 0x03	; 3
     ea6:	18 f4       	brcc	.+6      	; 0xeae <lcd_cursor+0xe>
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	a9 f4       	brne	.+42     	; 0xed6 <lcd_cursor+0x36>
     eac:	05 c0       	rjmp	.+10     	; 0xeb8 <lcd_cursor+0x18>
     eae:	83 30       	cpi	r24, 0x03	; 3
     eb0:	49 f0       	breq	.+18     	; 0xec4 <lcd_cursor+0x24>
     eb2:	84 30       	cpi	r24, 0x04	; 4
     eb4:	81 f4       	brne	.+32     	; 0xed6 <lcd_cursor+0x36>
     eb6:	0b c0       	rjmp	.+22     	; 0xece <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     eb8:	86 2f       	mov	r24, r22
     eba:	81 58       	subi	r24, 0x81	; 129
     ebc:	05 c0       	rjmp	.+10     	; 0xec8 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     ebe:	86 2f       	mov	r24, r22
     ec0:	81 54       	subi	r24, 0x41	; 65
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     ec4:	86 2f       	mov	r24, r22
     ec6:	8d 56       	subi	r24, 0x6D	; 109
     ec8:	0e 94 e7 06 	call	0xdce	; 0xdce <lcd_wr_command>
     ecc:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     ece:	86 2f       	mov	r24, r22
     ed0:	8d 52       	subi	r24, 0x2D	; 45
     ed2:	0e 94 e7 06 	call	0xdce	; 0xdce <lcd_wr_command>
     ed6:	08 95       	ret

00000ed8 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     ed8:	0f 93       	push	r16
     eda:	1f 93       	push	r17
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	8a 01       	movw	r16, r20
     ee2:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     ee4:	88 23       	and	r24, r24
     ee6:	11 f0       	breq	.+4      	; 0xeec <lcd_print+0x14>
     ee8:	66 23       	and	r22, r22
     eea:	19 f4       	brne	.+6      	; 0xef2 <lcd_print+0x1a>
	{
		lcd_home();
     eec:	0e 94 3f 07 	call	0xe7e	; 0xe7e <lcd_home>
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     ef2:	0e 94 50 07 	call	0xea0	; 0xea0 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     ef6:	c5 30       	cpi	r28, 0x05	; 5
     ef8:	d1 05       	cpc	r29, r1
     efa:	71 f4       	brne	.+28     	; 0xf18 <lcd_print+0x40>
	{
		million=value/10000+48;
     efc:	c8 01       	movw	r24, r16
     efe:	60 e1       	ldi	r22, 0x10	; 16
     f00:	77 e2       	ldi	r23, 0x27	; 39
     f02:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__udivmodhi4>
     f06:	cb 01       	movw	r24, r22
     f08:	c0 96       	adiw	r24, 0x30	; 48
     f0a:	90 93 99 17 	sts	0x1799, r25
     f0e:	80 93 98 17 	sts	0x1798, r24
		lcd_wr_char(million);
     f12:	0e 94 1e 07 	call	0xe3c	; 0xe3c <lcd_wr_char>
     f16:	05 c0       	rjmp	.+10     	; 0xf22 <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     f18:	c4 30       	cpi	r28, 0x04	; 4
     f1a:	d1 05       	cpc	r29, r1
     f1c:	11 f0       	breq	.+4      	; 0xf22 <lcd_print+0x4a>
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	16 c0       	rjmp	.+44     	; 0xf4e <lcd_print+0x76>
	{
		temp = value/1000;
     f22:	c8 01       	movw	r24, r16
     f24:	68 ee       	ldi	r22, 0xE8	; 232
     f26:	73 e0       	ldi	r23, 0x03	; 3
     f28:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__udivmodhi4>
     f2c:	cb 01       	movw	r24, r22
     f2e:	60 93 9a 17 	sts	0x179A, r22
     f32:	90 93 9b 17 	sts	0x179B, r25
		thousand = temp%10 + 48;
     f36:	6a e0       	ldi	r22, 0x0A	; 10
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__udivmodhi4>
     f3e:	c0 96       	adiw	r24, 0x30	; 48
     f40:	90 93 d7 17 	sts	0x17D7, r25
     f44:	80 93 d6 17 	sts	0x17D6, r24
		lcd_wr_char(thousand);
     f48:	0e 94 1e 07 	call	0xe3c	; 0xe3c <lcd_wr_char>
     f4c:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     f4e:	c3 30       	cpi	r28, 0x03	; 3
     f50:	d1 05       	cpc	r29, r1
     f52:	21 f0       	breq	.+8      	; 0xf5c <lcd_print+0x84>
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	11 f0       	breq	.+4      	; 0xf5c <lcd_print+0x84>
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	16 c0       	rjmp	.+44     	; 0xf88 <lcd_print+0xb0>
	{
		temp = value/100;
     f5c:	c8 01       	movw	r24, r16
     f5e:	64 e6       	ldi	r22, 0x64	; 100
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__udivmodhi4>
     f66:	cb 01       	movw	r24, r22
     f68:	60 93 9a 17 	sts	0x179A, r22
     f6c:	90 93 9b 17 	sts	0x179B, r25
		hundred = temp%10 + 48;
     f70:	6a e0       	ldi	r22, 0x0A	; 10
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__udivmodhi4>
     f78:	c0 96       	adiw	r24, 0x30	; 48
     f7a:	90 93 cf 17 	sts	0x17CF, r25
     f7e:	80 93 ce 17 	sts	0x17CE, r24
		lcd_wr_char(hundred);
     f82:	0e 94 1e 07 	call	0xe3c	; 0xe3c <lcd_wr_char>
     f86:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     f88:	c2 30       	cpi	r28, 0x02	; 2
     f8a:	d1 05       	cpc	r29, r1
     f8c:	21 f0       	breq	.+8      	; 0xf96 <lcd_print+0xbe>
     f8e:	81 30       	cpi	r24, 0x01	; 1
     f90:	11 f0       	breq	.+4      	; 0xf96 <lcd_print+0xbe>
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	16 c0       	rjmp	.+44     	; 0xfc2 <lcd_print+0xea>
	{
		temp = value/10;
     f96:	c8 01       	movw	r24, r16
     f98:	6a e0       	ldi	r22, 0x0A	; 10
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__udivmodhi4>
     fa0:	cb 01       	movw	r24, r22
     fa2:	60 93 9a 17 	sts	0x179A, r22
     fa6:	90 93 9b 17 	sts	0x179B, r25
		tens = temp%10 + 48;
     faa:	6a e0       	ldi	r22, 0x0A	; 10
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__udivmodhi4>
     fb2:	c0 96       	adiw	r24, 0x30	; 48
     fb4:	90 93 9e 17 	sts	0x179E, r25
     fb8:	80 93 9d 17 	sts	0x179D, r24
		lcd_wr_char(tens);
     fbc:	0e 94 1e 07 	call	0xe3c	; 0xe3c <lcd_wr_char>
     fc0:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     fc2:	c1 30       	cpi	r28, 0x01	; 1
     fc4:	d1 05       	cpc	r29, r1
     fc6:	11 f0       	breq	.+4      	; 0xfcc <lcd_print+0xf4>
     fc8:	81 30       	cpi	r24, 0x01	; 1
     fca:	61 f4       	brne	.+24     	; 0xfe4 <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     fcc:	c8 01       	movw	r24, r16
     fce:	6a e0       	ldi	r22, 0x0A	; 10
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__udivmodhi4>
     fd6:	c0 96       	adiw	r24, 0x30	; 48
     fd8:	90 93 d5 17 	sts	0x17D5, r25
     fdc:	80 93 d4 17 	sts	0x17D4, r24
		lcd_wr_char(unit);
     fe0:	0e 94 1e 07 	call	0xe3c	; 0xe3c <lcd_wr_char>
	}
	if(digits>5)
     fe4:	26 97       	sbiw	r28, 0x06	; 6
     fe6:	1c f0       	brlt	.+6      	; 0xfee <lcd_print+0x116>
	{
		lcd_wr_char('E');
     fe8:	85 e4       	ldi	r24, 0x45	; 69
     fea:	0e 94 1e 07 	call	0xe3c	; 0xe3c <lcd_wr_char>
	}
	
}
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	08 95       	ret

00000ff8 <print_sensor>:
	return a;
}

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	18 2f       	mov	r17, r24
     ffe:	06 2f       	mov	r16, r22
    1000:	84 2f       	mov	r24, r20
	
	ADC_Value = ADC_Conversion(channel);
    1002:	0e 94 c4 04 	call	0x988	; 0x988 <ADC_Conversion>
    1006:	48 2f       	mov	r20, r24
    1008:	80 93 9c 17 	sts	0x179C, r24
	lcd_print(row, coloumn, ADC_Value, 3);
    100c:	81 2f       	mov	r24, r17
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	60 2f       	mov	r22, r16
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	23 e0       	ldi	r18, 0x03	; 3
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	0e 94 6c 07 	call	0xed8	; 0xed8 <lcd_print>

	return ADC_Value;
}
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	08 95       	ret

00001024 <servo3_pin_config>:
	**********************************END**************************************
*/

void servo3_pin_config (void)
{
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
    1024:	27 9a       	sbi	0x04, 7	; 4
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
    1026:	2f 9a       	sbi	0x05, 7	; 5
}
    1028:	08 95       	ret

0000102a <buzzer_pin_config>:
	*Example Call: int *cost = BFS(source);
*/

void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
    102a:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    102c:	43 98       	cbi	0x08, 3	; 8
}
    102e:	08 95       	ret

00001030 <lcd_port_config>:
//Function to configure LCD port
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    1030:	87 b1       	in	r24, 0x07	; 7
    1032:	87 6f       	ori	r24, 0xF7	; 247
    1034:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    1036:	88 b1       	in	r24, 0x08	; 8
    1038:	80 78       	andi	r24, 0x80	; 128
    103a:	88 b9       	out	0x08, r24	; 8
}
    103c:	08 95       	ret

0000103e <port_initial>:
	**********************************END**************************************
*/

void servo3_pin_config (void)
{
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
    103e:	27 9a       	sbi	0x04, 7	; 4
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
    1040:	2f 9a       	sbi	0x05, 7	; 5
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
}
//Function to configure LCD port
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    1042:	87 b1       	in	r24, 0x07	; 7
    1044:	87 6f       	ori	r24, 0xF7	; 247
    1046:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    1048:	88 b1       	in	r24, 0x08	; 8
    104a:	80 78       	andi	r24, 0x80	; 128
    104c:	88 b9       	out	0x08, r24	; 8
*/

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
    104e:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
    1050:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
    1052:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
    1056:	10 92 08 01 	sts	0x0108, r1
}

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
    105a:	81 b1       	in	r24, 0x01	; 1
    105c:	8f 60       	ori	r24, 0x0F	; 15
    105e:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
    1060:	82 b1       	in	r24, 0x02	; 2
    1062:	80 7f       	andi	r24, 0xF0	; 240
    1064:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    1066:	ea e0       	ldi	r30, 0x0A	; 10
    1068:	f1 e0       	ldi	r31, 0x01	; 1
    106a:	80 81       	ld	r24, Z
    106c:	88 61       	ori	r24, 0x18	; 24
    106e:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    1070:	eb e0       	ldi	r30, 0x0B	; 11
    1072:	f1 e0       	ldi	r31, 0x01	; 1
    1074:	80 81       	ld	r24, Z
    1076:	88 61       	ori	r24, 0x18	; 24
    1078:	80 83       	st	Z, r24
	*Example Call: int *cost = BFS(source);
*/

void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
    107a:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    107c:	43 98       	cbi	0x08, 3	; 8
}

void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    107e:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    1080:	74 9a       	sbi	0x0e, 4	; 14
}

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    1082:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    1084:	75 9a       	sbi	0x0e, 5	; 14
	adc_pin_config();
	motion_pin_config();	
	buzzer_pin_config();
	left_encoder_pin_config(); //left encoder pin config
	right_encoder_pin_config(); //right encoder pin config
}
    1086:	08 95       	ret

00001088 <uart0_init>:
// actual baud rate:9600 (error 0.0%)
// char arr_size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
    1088:	e1 ec       	ldi	r30, 0xC1	; 193
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	10 82       	st	Z, r1
 UCSR0A = 0x00;
    108e:	10 92 c0 00 	sts	0x00C0, r1
 UCSR0C = 0x06;
    1092:	86 e0       	ldi	r24, 0x06	; 6
    1094:	80 93 c2 00 	sts	0x00C2, r24
 UBRR0L = 0x5F; //set baud rate lo
    1098:	8f e5       	ldi	r24, 0x5F	; 95
    109a:	80 93 c4 00 	sts	0x00C4, r24
 UBRR0H = 0x00; //set baud rate hi
    109e:	10 92 c5 00 	sts	0x00C5, r1
 UCSR0B = 0x98;
    10a2:	88 e9       	ldi	r24, 0x98	; 152
    10a4:	80 83       	st	Z, r24
}
    10a6:	08 95       	ret

000010a8 <uart2_init>:
// actual baud rate:9600 (error 0.0%)
// char arr_size: 8 bit
// parity: Disabled
void uart2_init(void)
{
 UCSR2B = 0x00; //disable while setting baud rate
    10a8:	e1 ed       	ldi	r30, 0xD1	; 209
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	10 82       	st	Z, r1
 UCSR2A = 0x00;
    10ae:	10 92 d0 00 	sts	0x00D0, r1
 UCSR2C = 0x06;
    10b2:	86 e0       	ldi	r24, 0x06	; 6
    10b4:	80 93 d2 00 	sts	0x00D2, r24
 UBRR2L = 0x5F; //set baud rate lo
    10b8:	8f e5       	ldi	r24, 0x5F	; 95
    10ba:	80 93 d4 00 	sts	0x00D4, r24
 UBRR2H = 0x00; //set baud rate hi
    10be:	10 92 d5 00 	sts	0x00D5, r1
 UCSR2B = 0x98;
    10c2:	88 e9       	ldi	r24, 0x98	; 152
    10c4:	80 83       	st	Z, r24
}
    10c6:	08 95       	ret

000010c8 <buzzer_on>:

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    10c8:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    10ca:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    10cc:	88 b9       	out	0x08, r24	; 8
}
    10ce:	08 95       	ret

000010d0 <buzzer_off>:

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    10d0:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    10d2:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    10d4:	88 b9       	out	0x08, r24	; 8
}
    10d6:	08 95       	ret

000010d8 <servo_3>:

void servo_3(unsigned char degrees)
{
 float PositionServo = 0;
 PositionServo = ((float)degrees / 1.86) + 35.0;
 OCR1CH = 0x00;
    10d8:	10 92 8d 00 	sts	0x008D, r1
 OCR1CL = (unsigned char) PositionServo;
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a0 e0       	ldi	r26, 0x00	; 0
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	bc 01       	movw	r22, r24
    10e4:	cd 01       	movw	r24, r26
    10e6:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <__floatunsisf>
    10ea:	2b e7       	ldi	r18, 0x7B	; 123
    10ec:	34 e1       	ldi	r19, 0x14	; 20
    10ee:	4e ee       	ldi	r20, 0xEE	; 238
    10f0:	5f e3       	ldi	r21, 0x3F	; 63
    10f2:	0e 94 c8 12 	call	0x2590	; 0x2590 <__divsf3>
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	4c e0       	ldi	r20, 0x0C	; 12
    10fc:	52 e4       	ldi	r21, 0x42	; 66
    10fe:	0e 94 9b 12 	call	0x2536	; 0x2536 <__addsf3>
    1102:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__fixunssfsi>
    1106:	60 93 8c 00 	sts	0x008C, r22
}
    110a:	08 95       	ret

0000110c <remove_zero>:
	*Logic: Removes the zeros from the seqence_arr which were inserted by seperate
	*example-call: remove_zero();
*/
void remove_zero() {
	int i = 0, j = 1;
    arr_slave[0] = 13;
    110c:	8d e0       	ldi	r24, 0x0D	; 13
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	90 93 a7 17 	sts	0x17A7, r25
    1114:	80 93 a6 17 	sts	0x17A6, r24
	while (i < arr_size)
    1118:	60 91 44 04 	lds	r22, 0x0444
    111c:	70 91 45 04 	lds	r23, 0x0445
    1120:	a0 91 a4 17 	lds	r26, 0x17A4
    1124:	b0 91 a5 17 	lds	r27, 0x17A5
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	11 c0       	rjmp	.+34     	; 0x1154 <remove_zero+0x48>
	{
		if(sequence_arr[i]!=0)
    1132:	4d 91       	ld	r20, X+
    1134:	5c 91       	ld	r21, X
    1136:	11 97       	sbiw	r26, 0x01	; 1
    1138:	41 15       	cp	r20, r1
    113a:	51 05       	cpc	r21, r1
    113c:	41 f0       	breq	.+16     	; 0x114e <remove_zero+0x42>
		{
			arr_slave[j] = sequence_arr[i];
    113e:	fc 01       	movw	r30, r24
    1140:	ee 0f       	add	r30, r30
    1142:	ff 1f       	adc	r31, r31
    1144:	ea 55       	subi	r30, 0x5A	; 90
    1146:	f8 4e       	sbci	r31, 0xE8	; 232
    1148:	51 83       	std	Z+1, r21	; 0x01
    114a:	40 83       	st	Z, r20
			j++;
    114c:	01 96       	adiw	r24, 0x01	; 1
		}
		i++;
    114e:	2f 5f       	subi	r18, 0xFF	; 255
    1150:	3f 4f       	sbci	r19, 0xFF	; 255
    1152:	12 96       	adiw	r26, 0x02	; 2
	*example-call: remove_zero();
*/
void remove_zero() {
	int i = 0, j = 1;
    arr_slave[0] = 13;
	while (i < arr_size)
    1154:	26 17       	cp	r18, r22
    1156:	37 07       	cpc	r19, r23
    1158:	64 f3       	brlt	.-40     	; 0x1132 <remove_zero+0x26>
			arr_slave[j] = sequence_arr[i];
			j++;
		}
		i++;
	}
	slave_size = j;
    115a:	90 93 47 04 	sts	0x0447, r25
    115e:	80 93 46 04 	sts	0x0446, r24
}
    1162:	08 95       	ret

00001164 <strike>:
	*Output: NIL
	*Logic: rotates the servo motor to right, wait for 50 millisecond, rotate to left,
			wait for another 50 millisecond and finally comes at center position
	*example-call: strike();
*/
void strike() {
    1164:	1f 93       	push	r17
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
	lcd_cursor(1,1);
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	61 e0       	ldi	r22, 0x01	; 1
    116e:	0e 94 50 07 	call	0xea0	; 0xea0 <lcd_cursor>
	lcd_string("MNP DETECTED ");
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	92 e0       	ldi	r25, 0x02	; 2
    1176:	0e 94 43 07 	call	0xe86	; 0xe86 <lcd_string>
	lcd_print(1,14,sequence_arr[Counter],2);
    117a:	80 91 48 04 	lds	r24, 0x0448
    117e:	90 91 49 04 	lds	r25, 0x0449
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	e0 91 a4 17 	lds	r30, 0x17A4
    118a:	f0 91 a5 17 	lds	r31, 0x17A5
    118e:	e8 0f       	add	r30, r24
    1190:	f9 1f       	adc	r31, r25
    1192:	40 81       	ld	r20, Z
    1194:	51 81       	ldd	r21, Z+1	; 0x01
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	6e e0       	ldi	r22, 0x0E	; 14
    119a:	22 e0       	ldi	r18, 0x02	; 2
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	0e 94 6c 07 	call	0xed8	; 0xed8 <lcd_print>
	lcd_cursor(2,1);
    11a2:	82 e0       	ldi	r24, 0x02	; 2
    11a4:	61 e0       	ldi	r22, 0x01	; 1
    11a6:	0e 94 50 07 	call	0xea0	; 0xea0 <lcd_cursor>
	lcd_string("Strinking Node!!");
    11aa:	8e e0       	ldi	r24, 0x0E	; 14
    11ac:	92 e0       	ldi	r25, 0x02	; 2
    11ae:	0e 94 43 07 	call	0xe86	; 0xe86 <lcd_string>
    11b2:	19 e6       	ldi	r17, 0x69	; 105
    11b4:	c0 e0       	ldi	r28, 0x00	; 0
    11b6:	d8 e4       	ldi	r29, 0x48	; 72
	
	unsigned char i = 0;

	for (i = 105; i <210; i++)
		{
			servo_3(i);
    11b8:	81 2f       	mov	r24, r17
    11ba:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <servo_3>
    11be:	ce 01       	movw	r24, r28
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	f1 f7       	brne	.-4      	; 0x11c0 <strike+0x5c>
	lcd_cursor(2,1);
	lcd_string("Strinking Node!!");
	
	unsigned char i = 0;

	for (i = 105; i <210; i++)
    11c4:	1f 5f       	subi	r17, 0xFF	; 255
    11c6:	12 3d       	cpi	r17, 0xD2	; 210
    11c8:	b9 f7       	brne	.-18     	; 0x11b8 <strike+0x54>
    11ca:	84 ef       	ldi	r24, 0xF4	; 244
    11cc:	91 e0       	ldi	r25, 0x01	; 1
    11ce:	20 e7       	ldi	r18, 0x70	; 112
    11d0:	31 e0       	ldi	r19, 0x01	; 1
    11d2:	f9 01       	movw	r30, r18
    11d4:	31 97       	sbiw	r30, 0x01	; 1
    11d6:	f1 f7       	brne	.-4      	; 0x11d4 <strike+0x70>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11da:	d9 f7       	brne	.-10     	; 0x11d2 <strike+0x6e>
    11dc:	c0 e0       	ldi	r28, 0x00	; 0
    11de:	d8 e4       	ldi	r29, 0x48	; 72
			 _delay_ms(5);
		}
	_delay_ms(50);
	for (i = 210; i >0; i--)
		{
			 servo_3(i);
    11e0:	81 2f       	mov	r24, r17
    11e2:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <servo_3>
    11e6:	ce 01       	movw	r24, r28
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <strike+0x84>
		{
			servo_3(i);
			 _delay_ms(5);
		}
	_delay_ms(50);
	for (i = 210; i >0; i--)
    11ec:	11 50       	subi	r17, 0x01	; 1
    11ee:	c1 f7       	brne	.-16     	; 0x11e0 <strike+0x7c>
    11f0:	84 ef       	ldi	r24, 0xF4	; 244
    11f2:	91 e0       	ldi	r25, 0x01	; 1
    11f4:	20 e7       	ldi	r18, 0x70	; 112
    11f6:	31 e0       	ldi	r19, 0x01	; 1
    11f8:	f9 01       	movw	r30, r18
    11fa:	31 97       	sbiw	r30, 0x01	; 1
    11fc:	f1 f7       	brne	.-4      	; 0x11fa <strike+0x96>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1200:	d9 f7       	brne	.-10     	; 0x11f8 <strike+0x94>
    1202:	c0 e0       	ldi	r28, 0x00	; 0
    1204:	d0 e9       	ldi	r29, 0x90	; 144
		}
 	 _delay_ms(50);

	for (i = 0; i <105; i++)
		{
			servo_3(i);
    1206:	81 2f       	mov	r24, r17
    1208:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <servo_3>
    120c:	ce 01       	movw	r24, r28
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	f1 f7       	brne	.-4      	; 0x120e <strike+0xaa>
			 servo_3(i);
			 _delay_ms(5);
		}
 	 _delay_ms(50);

	for (i = 0; i <105; i++)
    1212:	1f 5f       	subi	r17, 0xFF	; 255
    1214:	19 36       	cpi	r17, 0x69	; 105
    1216:	b9 f7       	brne	.-18     	; 0x1206 <strike+0xa2>
		{
			servo_3(i);
			_delay_ms(10);
		}
}
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
    121e:	08 95       	ret

00001220 <initial_devices>:
}*/

//Function To Initialize all The Devices
void initial_devices()
{
 	cli(); //Clears the global interrupts
    1220:	f8 94       	cli
 	port_initial();  //Initializes all the ports
    1222:	0e 94 1f 08 	call	0x103e	; 0x103e <port_initial>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void adc_init()
{
	ADCSRA = 0x00;
    1226:	ea e7       	ldi	r30, 0x7A	; 122
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    122c:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    1230:	80 e2       	ldi	r24, 0x20	; 32
    1232:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
    1236:	80 e8       	ldi	r24, 0x80	; 128
    1238:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    123a:	86 e8       	ldi	r24, 0x86	; 134
    123c:	80 83       	st	Z, r24
 	adc_init();
 	timer1_init();
    123e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <timer1_init>
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
    1242:	e1 e2       	ldi	r30, 0x21	; 33
    1244:	f1 e0       	ldi	r31, 0x01	; 1
    1246:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    1248:	9f ef       	ldi	r25, 0xFF	; 255
    124a:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    1254:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    1258:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    125c:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    1260:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    1264:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    1268:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    126c:	89 ea       	ldi	r24, 0xA9	; 169
    126e:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    1272:	8b e0       	ldi	r24, 0x0B	; 11
    1274:	80 83       	st	Z, r24
	right_encoder_pin_config(); //right encoder pin config
}

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
    1276:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    1278:	ea e6       	ldi	r30, 0x6A	; 106
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	82 60       	ori	r24, 0x02	; 2
    1280:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    1282:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
    1284:	78 94       	sei
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
    1286:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    1288:	ea e6       	ldi	r30, 0x6A	; 106
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	88 60       	ori	r24, 0x08	; 8
    1290:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    1292:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
    1294:	78 94       	sei
// actual baud rate:9600 (error 0.0%)
// char arr_size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
    1296:	e1 ec       	ldi	r30, 0xC1	; 193
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	10 82       	st	Z, r1
 UCSR0A = 0x00;
    129c:	10 92 c0 00 	sts	0x00C0, r1
 UCSR0C = 0x06;
    12a0:	26 e0       	ldi	r18, 0x06	; 6
    12a2:	20 93 c2 00 	sts	0x00C2, r18
 UBRR0L = 0x5F; //set baud rate lo
    12a6:	9f e5       	ldi	r25, 0x5F	; 95
    12a8:	90 93 c4 00 	sts	0x00C4, r25
 UBRR0H = 0x00; //set baud rate hi
    12ac:	10 92 c5 00 	sts	0x00C5, r1
 UCSR0B = 0x98;
    12b0:	88 e9       	ldi	r24, 0x98	; 152
    12b2:	80 83       	st	Z, r24
// actual baud rate:9600 (error 0.0%)
// char arr_size: 8 bit
// parity: Disabled
void uart2_init(void)
{
 UCSR2B = 0x00; //disable while setting baud rate
    12b4:	e1 ed       	ldi	r30, 0xD1	; 209
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	10 82       	st	Z, r1
 UCSR2A = 0x00;
    12ba:	10 92 d0 00 	sts	0x00D0, r1
 UCSR2C = 0x06;
    12be:	20 93 d2 00 	sts	0x00D2, r18
 UBRR2L = 0x5F; //set baud rate lo
    12c2:	90 93 d4 00 	sts	0x00D4, r25
 UBRR2H = 0x00; //set baud rate hi
    12c6:	10 92 d5 00 	sts	0x00D5, r1
 UCSR2B = 0x98;
    12ca:	80 83       	st	Z, r24
	timer5_init();
	left_position_encoder_interrupt_init();
	right_position_encoder_interrupt_init();
	uart0_init(); //Initailize UART0 for serial communiaction
	uart2_init(); //Initailize UART1 for serial communiaction
 	sei();   //Enables the global interrupts
    12cc:	78 94       	sei
}
    12ce:	08 95       	ret

000012d0 <__vector_25>:
		arr_slave[index] = success;
	}
}

SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
    12d0:	1f 92       	push	r1
    12d2:	0f 92       	push	r0
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	0f 92       	push	r0
    12d8:	0b b6       	in	r0, 0x3b	; 59
    12da:	0f 92       	push	r0
    12dc:	11 24       	eor	r1, r1
    12de:	2f 93       	push	r18
    12e0:	3f 93       	push	r19
    12e2:	4f 93       	push	r20
    12e4:	5f 93       	push	r21
    12e6:	6f 93       	push	r22
    12e8:	7f 93       	push	r23
    12ea:	8f 93       	push	r24
    12ec:	9f 93       	push	r25
    12ee:	af 93       	push	r26
    12f0:	bf 93       	push	r27
    12f2:	ef 93       	push	r30
    12f4:	ff 93       	push	r31
	data = UDR0; 				//making copy of data from UDR0 in 'data' variable
    12f6:	80 91 c6 00 	lds	r24, 0x00C6
    12fa:	80 93 a3 17 	sts	0x17A3, r24
	UDR2 = data; 				//echo data back to PC
    12fe:	80 93 d6 00 	sts	0x00D6, r24

	update = (signed int) data;
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	90 93 d3 17 	sts	0x17D3, r25
    1308:	80 93 d2 17 	sts	0x17D2, r24

	if (count == -1)
    130c:	40 91 1f 03 	lds	r20, 0x031F
    1310:	50 91 20 03 	lds	r21, 0x0320
    1314:	2f ef       	ldi	r18, 0xFF	; 255
    1316:	4f 3f       	cpi	r20, 0xFF	; 255
    1318:	52 07       	cpc	r21, r18
    131a:	d9 f4       	brne	.+54     	; 0x1352 <__vector_25+0x82>
    131c:	28 ee       	ldi	r18, 0xE8	; 232
    131e:	33 e0       	ldi	r19, 0x03	; 3
    1320:	40 e7       	ldi	r20, 0x70	; 112
    1322:	51 e0       	ldi	r21, 0x01	; 1
    1324:	fa 01       	movw	r30, r20
    1326:	31 97       	sbiw	r30, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <__vector_25+0x56>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132a:	21 50       	subi	r18, 0x01	; 1
    132c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132e:	d1 f7       	brne	.-12     	; 0x1324 <__vector_25+0x54>
	{
		_delay_ms(100);
		arr_size = (signed int) data;
    1330:	90 93 45 04 	sts	0x0445, r25
    1334:	80 93 44 04 	sts	0x0444, r24
		count++;
    1338:	10 92 20 03 	sts	0x0320, r1
    133c:	10 92 1f 03 	sts	0x031F, r1
		sequence_arr = (signed int*) malloc(arr_size*sizeof(signed int));
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <malloc>
    1348:	80 93 a4 17 	sts	0x17A4, r24
    134c:	90 93 a5 17 	sts	0x17A5, r25
    1350:	2e c0       	rjmp	.+92     	; 0x13ae <__vector_25+0xde>
	}

	else if (count < arr_size) {
    1352:	20 91 44 04 	lds	r18, 0x0444
    1356:	30 91 45 04 	lds	r19, 0x0445
    135a:	42 17       	cp	r20, r18
    135c:	53 07       	cpc	r21, r19
    135e:	f4 f4       	brge	.+60     	; 0x139c <__vector_25+0xcc>
    1360:	28 ee       	ldi	r18, 0xE8	; 232
    1362:	33 e0       	ldi	r19, 0x03	; 3
    1364:	60 e7       	ldi	r22, 0x70	; 112
    1366:	71 e0       	ldi	r23, 0x01	; 1
    1368:	fb 01       	movw	r30, r22
    136a:	31 97       	sbiw	r30, 0x01	; 1
    136c:	f1 f7       	brne	.-4      	; 0x136a <__vector_25+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    136e:	21 50       	subi	r18, 0x01	; 1
    1370:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1372:	d1 f7       	brne	.-12     	; 0x1368 <__vector_25+0x98>
		_delay_ms(100);
		sequence_arr[count] = (signed int) data;
    1374:	44 0f       	add	r20, r20
    1376:	55 1f       	adc	r21, r21
    1378:	e0 91 a4 17 	lds	r30, 0x17A4
    137c:	f0 91 a5 17 	lds	r31, 0x17A5
    1380:	e4 0f       	add	r30, r20
    1382:	f5 1f       	adc	r31, r21
    1384:	91 83       	std	Z+1, r25	; 0x01
    1386:	80 83       	st	Z, r24
		count++;
    1388:	80 91 1f 03 	lds	r24, 0x031F
    138c:	90 91 20 03 	lds	r25, 0x0320
    1390:	01 96       	adiw	r24, 0x01	; 1
    1392:	90 93 20 03 	sts	0x0320, r25
    1396:	80 93 1f 03 	sts	0x031F, r24
    139a:	09 c0       	rjmp	.+18     	; 0x13ae <__vector_25+0xde>
	}

	else if (count > arr_size && update > 0){
    139c:	24 17       	cp	r18, r20
    139e:	35 07       	cpc	r19, r21
    13a0:	34 f4       	brge	.+12     	; 0x13ae <__vector_25+0xde>
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	21 f0       	breq	.+8      	; 0x13ae <__vector_25+0xde>
		Counter = update;
    13a6:	90 93 49 04 	sts	0x0449, r25
    13aa:	80 93 48 04 	sts	0x0448, r24
	}
}
    13ae:	ff 91       	pop	r31
    13b0:	ef 91       	pop	r30
    13b2:	bf 91       	pop	r27
    13b4:	af 91       	pop	r26
    13b6:	9f 91       	pop	r25
    13b8:	8f 91       	pop	r24
    13ba:	7f 91       	pop	r23
    13bc:	6f 91       	pop	r22
    13be:	5f 91       	pop	r21
    13c0:	4f 91       	pop	r20
    13c2:	3f 91       	pop	r19
    13c4:	2f 91       	pop	r18
    13c6:	0f 90       	pop	r0
    13c8:	0b be       	out	0x3b, r0	; 59
    13ca:	0f 90       	pop	r0
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	0f 90       	pop	r0
    13d0:	1f 90       	pop	r1
    13d2:	18 95       	reti

000013d4 <mapRun>:
	*Output: 0 on successful completion
	*Logic: Given a array of nodes, executes dStar to find the best path
			to touch all the nodes and follows it.
*/
int* mapRun(signed int angle[], int Size_)
{
    13d4:	8f 92       	push	r8
    13d6:	9f 92       	push	r9
    13d8:	af 92       	push	r10
    13da:	bf 92       	push	r11
    13dc:	df 92       	push	r13
    13de:	ef 92       	push	r14
    13e0:	ff 92       	push	r15
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	4c 01       	movw	r8, r24
    13ec:	5b 01       	movw	r10, r22
	// after dectecting the note bot will turn angle[i] angle
	signed int count = -1;

	int *res = (int*) malloc (3*sizeof(int));		//Holds result
    13ee:	86 e0       	ldi	r24, 0x06	; 6
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <malloc>
    13f6:	ec 01       	movw	r28, r24
	for (int i = 0; i < 3; i++)
		res[i] = 0;
    13f8:	19 82       	std	Y+1, r1	; 0x01
    13fa:	18 82       	st	Y, r1
    13fc:	1b 82       	std	Y+3, r1	; 0x03
    13fe:	1a 82       	std	Y+2, r1	; 0x02
    1400:	1d 82       	std	Y+5, r1	; 0x05
    1402:	1c 82       	std	Y+4, r1	; 0x04
    1404:	ee 24       	eor	r14, r14
    1406:	ea 94       	dec	r14
    1408:	fe 2c       	mov	r15, r14
    140a:	00 e7       	ldi	r16, 0x70	; 112
    140c:	11 e0       	ldi	r17, 0x01	; 1
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    140e:	6a ef       	ldi	r22, 0xFA	; 250
    1410:	d6 2e       	mov	r13, r22
    1412:	9f c1       	rjmp	.+830    	; 0x1752 <mapRun+0x37e>

	while(count < Size_)
	{
		int flag = 0;

		Front_IR_Sensor = ADC_Conversion(11);    //Getting data of Center IR Proximity Sensor Sensor
    1414:	8b e0       	ldi	r24, 0x0B	; 11
    1416:	0e 94 c4 04 	call	0x988	; 0x988 <ADC_Conversion>
    141a:	80 93 43 04 	sts	0x0443, r24

		// If their an object with in 9 cm range of IR sensor
		// LCD will print "OBSTRACLE DETECTED !"
		// Bot will take an initial right turn to shift from the black line
		// Then bot will take right turn until the center whiteline sensor is on top of black line
		if (Front_IR_Sensor < 90)
    141e:	8a 35       	cpi	r24, 0x5A	; 90
    1420:	08 f0       	brcs	.+2      	; 0x1424 <mapRun+0x50>
    1422:	3f c0       	rjmp	.+126    	; 0x14a2 <mapRun+0xce>
		{
			lcd_cursor(1,1);
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	61 e0       	ldi	r22, 0x01	; 1
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	0e 94 50 07 	call	0xea0	; 0xea0 <lcd_cursor>
			lcd_string("    OBSTRACLE   ");
    1430:	8f e1       	ldi	r24, 0x1F	; 31
    1432:	92 e0       	ldi	r25, 0x02	; 2
    1434:	0e 94 43 07 	call	0xe86	; 0xe86 <lcd_string>
			lcd_cursor(2,1);
    1438:	82 e0       	ldi	r24, 0x02	; 2
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	61 e0       	ldi	r22, 0x01	; 1
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	0e 94 50 07 	call	0xea0	; 0xea0 <lcd_cursor>
			lcd_string("    DETECTED !  ");
    1444:	80 e3       	ldi	r24, 0x30	; 48
    1446:	92 e0       	ldi	r25, 0x02	; 2
    1448:	0e 94 43 07 	call	0xe86	; 0xe86 <lcd_string>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    144c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    144e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1450:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    1452:	82 b9       	out	0x02, r24	; 2
    1454:	88 eb       	ldi	r24, 0xB8	; 184
    1456:	9b e0       	ldi	r25, 0x0B	; 11
    1458:	f8 01       	movw	r30, r16
    145a:	31 97       	sbiw	r30, 0x01	; 1
    145c:	f1 f7       	brne	.-4      	; 0x145a <mapRun+0x86>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1460:	d9 f7       	brne	.-10     	; 0x1458 <mapRun+0x84>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1462:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1464:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1466:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
    1468:	82 b9       	out	0x02, r24	; 2
    146a:	80 ed       	ldi	r24, 0xD0	; 208
    146c:	97 e0       	ldi	r25, 0x07	; 7
    146e:	f8 01       	movw	r30, r16
    1470:	31 97       	sbiw	r30, 0x01	; 1
    1472:	f1 f7       	brne	.-4      	; 0x1470 <mapRun+0x9c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1474:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1476:	d9 f7       	brne	.-10     	; 0x146e <mapRun+0x9a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1478:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    147a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    147c:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    147e:	82 b9       	out	0x02, r24	; 2
	        back();
	        _delay_ms(200);
	        do
	        {
	          right();
	          Center_white_line = ADC_Conversion(2);
    1480:	82 e0       	ldi	r24, 0x02	; 2
    1482:	0e 94 c4 04 	call	0x988	; 0x988 <ADC_Conversion>
    1486:	80 93 3a 04 	sts	0x043A, r24
	        }
	        while (Center_white_line < 110);
    148a:	8e 36       	cpi	r24, 0x6E	; 110
    148c:	a8 f3       	brcs	.-22     	; 0x1478 <mapRun+0xa4>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    148e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1490:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1492:	82 b9       	out	0x02, r24	; 2
    1494:	88 ee       	ldi	r24, 0xE8	; 232
    1496:	93 e0       	ldi	r25, 0x03	; 3
    1498:	f8 01       	movw	r30, r16
    149a:	31 97       	sbiw	r30, 0x01	; 1
    149c:	f1 f7       	brne	.-4      	; 0x149a <mapRun+0xc6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    149e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a0:	d9 f7       	brne	.-10     	; 0x1498 <mapRun+0xc4>
			//return res;
		}

		// If center center plus left or right sensor detects the black line
		// The bot is over a node
		if ((senser_value_C > 50) && (senser_value_L > 50) || (senser_value_C > 50) && (senser_value_R > 50))
    14a2:	80 91 0c 17 	lds	r24, 0x170C
    14a6:	90 91 0d 17 	lds	r25, 0x170D
    14aa:	c3 97       	sbiw	r24, 0x33	; 51
    14ac:	0c f4       	brge	.+2      	; 0x14b0 <mapRun+0xdc>
    14ae:	4f c1       	rjmp	.+670    	; 0x174e <mapRun+0x37a>
    14b0:	80 91 9f 17 	lds	r24, 0x179F
    14b4:	90 91 a0 17 	lds	r25, 0x17A0
    14b8:	c3 97       	sbiw	r24, 0x33	; 51
    14ba:	3c f4       	brge	.+14     	; 0x14ca <mapRun+0xf6>
    14bc:	80 91 d0 17 	lds	r24, 0x17D0
    14c0:	90 91 d1 17 	lds	r25, 0x17D1
    14c4:	c3 97       	sbiw	r24, 0x33	; 51
    14c6:	0c f4       	brge	.+2      	; 0x14ca <mapRun+0xf6>
    14c8:	42 c1       	rjmp	.+644    	; 0x174e <mapRun+0x37a>
		{
			lcd_cursor(2,1);
    14ca:	82 e0       	ldi	r24, 0x02	; 2
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	61 e0       	ldi	r22, 0x01	; 1
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	0e 94 50 07 	call	0xea0	; 0xea0 <lcd_cursor>
			lcd_string("NOTE DETECTED!!!");
    14d6:	81 e4       	ldi	r24, 0x41	; 65
    14d8:	92 e0       	ldi	r25, 0x02	; 2
    14da:	0e 94 43 07 	call	0xe86	; 0xe86 <lcd_string>
			
			count++;
    14de:	08 94       	sec
    14e0:	e1 1c       	adc	r14, r1
    14e2:	f1 1c       	adc	r15, r1
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    14e4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    14e6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    14e8:	82 b9       	out	0x02, r24	; 2

			//if angle[i] is 60 the bot has to take a 60 degree turn
			// bot will move 6 cm ahead and 30 degree left to skip the current black line
			// then it will rotate left until it finds another black line
			// lcd will print "60 degree success"
			if (angle[count] == 60 || angle[count] == -300)
    14ea:	f7 01       	movw	r30, r14
    14ec:	ee 0f       	add	r30, r30
    14ee:	ff 1f       	adc	r31, r31
    14f0:	e8 0d       	add	r30, r8
    14f2:	f9 1d       	adc	r31, r9
    14f4:	01 90       	ld	r0, Z+
    14f6:	f0 81       	ld	r31, Z
    14f8:	e0 2d       	mov	r30, r0
    14fa:	ec 33       	cpi	r30, 0x3C	; 60
    14fc:	f1 05       	cpc	r31, r1
    14fe:	21 f0       	breq	.+8      	; 0x1508 <mapRun+0x134>
    1500:	8e ef       	ldi	r24, 0xFE	; 254
    1502:	e4 3d       	cpi	r30, 0xD4	; 212
    1504:	f8 07       	cpc	r31, r24
    1506:	71 f5       	brne	.+92     	; 0x1564 <mapRun+0x190>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1508:	d0 92 28 01 	sts	0x0128, r13
	OCR5BL = (unsigned char)right_motor;
    150c:	d0 92 2a 01 	sts	0x012A, r13
			// then it will rotate left until it finds another black line
			// lcd will print "60 degree success"
			if (angle[count] == 60 || angle[count] == -300)
			{
				velocity(250,250);
				forward_mm(60);
    1510:	8c e3       	ldi	r24, 0x3C	; 60
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	0e 94 ae 06 	call	0xd5c	; 0xd5c <forward_mm>
    1518:	88 ee       	ldi	r24, 0xE8	; 232
    151a:	93 e0       	ldi	r25, 0x03	; 3
    151c:	f8 01       	movw	r30, r16
    151e:	31 97       	sbiw	r30, 0x01	; 1
    1520:	f1 f7       	brne	.-4      	; 0x151e <mapRun+0x14a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1522:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1524:	d9 f7       	brne	.-10     	; 0x151c <mapRun+0x148>
		        _delay_ms(100);

		        left_degrees(30);
    1526:	8e e1       	ldi	r24, 0x1E	; 30
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	0e 94 5f 05 	call	0xabe	; 0xabe <left_degrees>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    152e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1530:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1532:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
    1534:	82 b9       	out	0x02, r24	; 2

		        left_degrees(30);
		        do
		        {
		          left();
		          senser_value_C = ADC_Conversion(2);
    1536:	82 e0       	ldi	r24, 0x02	; 2
    1538:	0e 94 c4 04 	call	0x988	; 0x988 <ADC_Conversion>
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	90 93 0d 17 	sts	0x170D, r25
    1542:	80 93 0c 17 	sts	0x170C, r24
		        }
		        while (senser_value_C < 110);
    1546:	8e 36       	cpi	r24, 0x6E	; 110
    1548:	91 05       	cpc	r25, r1
    154a:	8c f3       	brlt	.-30     	; 0x152e <mapRun+0x15a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    154c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    154e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1550:	82 b9       	out	0x02, r24	; 2
		          left();
		          senser_value_C = ADC_Conversion(2);
		        }
		        while (senser_value_C < 110);
		        stop();
		        lcd_cursor(1,1);
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	61 e0       	ldi	r22, 0x01	; 1
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	0e 94 50 07 	call	0xea0	; 0xea0 <lcd_cursor>
		        lcd_string("60 degree succes");
    155e:	82 e5       	ldi	r24, 0x52	; 82
    1560:	92 e0       	ldi	r25, 0x02	; 2
    1562:	3b c0       	rjmp	.+118    	; 0x15da <mapRun+0x206>
			}
			//if angle[i] is 120 the bot has to take a 120 degree turn
			// bot will move 1.5 cm ahead and 30 degree back left to skip the current black line
			// then it will rotate soft left until it finds another black line
			// lcd will print "120 degree success"
			else if (angle[count] == 120 || angle[count] == -240)
    1564:	e8 37       	cpi	r30, 0x78	; 120
    1566:	f1 05       	cpc	r31, r1
    1568:	21 f0       	breq	.+8      	; 0x1572 <mapRun+0x19e>
    156a:	8f ef       	ldi	r24, 0xFF	; 255
    156c:	e0 31       	cpi	r30, 0x10	; 16
    156e:	f8 07       	cpc	r31, r24
    1570:	b9 f5       	brne	.+110    	; 0x15e0 <mapRun+0x20c>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1572:	d0 92 28 01 	sts	0x0128, r13
	OCR5BL = (unsigned char)right_motor;
    1576:	d0 92 2a 01 	sts	0x012A, r13
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    157a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    157c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    157e:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1580:	82 b9       	out	0x02, r24	; 2
    1582:	8c ea       	ldi	r24, 0xAC	; 172
    1584:	9d e0       	ldi	r25, 0x0D	; 13
    1586:	f8 01       	movw	r30, r16
    1588:	31 97       	sbiw	r30, 0x01	; 1
    158a:	f1 f7       	brne	.-4      	; 0x1588 <mapRun+0x1b4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    158c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    158e:	d9 f7       	brne	.-10     	; 0x1586 <mapRun+0x1b2>
			else if (angle[count] == 120 || angle[count] == -240)
			{
				velocity(250,250);
				forward();
		        _delay_ms(350);
		        left_degrees(90);
    1590:	8a e5       	ldi	r24, 0x5A	; 90
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	0e 94 5f 05 	call	0xabe	; 0xabe <left_degrees>
    1598:	88 e8       	ldi	r24, 0x88	; 136
    159a:	93 e1       	ldi	r25, 0x13	; 19
    159c:	f8 01       	movw	r30, r16
    159e:	31 97       	sbiw	r30, 0x01	; 1
    15a0:	f1 f7       	brne	.-4      	; 0x159e <mapRun+0x1ca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a4:	d9 f7       	brne	.-10     	; 0x159c <mapRun+0x1c8>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    15a6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    15a8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    15aa:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
    15ac:	82 b9       	out	0x02, r24	; 2
		        left_degrees(90);
		        _delay_ms(500);
		        do
		        {
		          left();
		          senser_value_C = ADC_Conversion(2);
    15ae:	82 e0       	ldi	r24, 0x02	; 2
    15b0:	0e 94 c4 04 	call	0x988	; 0x988 <ADC_Conversion>
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	90 93 0d 17 	sts	0x170D, r25
    15ba:	80 93 0c 17 	sts	0x170C, r24
		        }
		        while (senser_value_C < 110);
    15be:	8e 36       	cpi	r24, 0x6E	; 110
    15c0:	91 05       	cpc	r25, r1
    15c2:	8c f3       	brlt	.-30     	; 0x15a6 <mapRun+0x1d2>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    15c4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    15c6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    15c8:	82 b9       	out	0x02, r24	; 2
		          left();
		          senser_value_C = ADC_Conversion(2);
		        }
		        while (senser_value_C < 110);
		        stop();
		        lcd_cursor(1,1);
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	61 e0       	ldi	r22, 0x01	; 1
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	0e 94 50 07 	call	0xea0	; 0xea0 <lcd_cursor>
		        lcd_string("120 degree succes");
    15d6:	83 e6       	ldi	r24, 0x63	; 99
    15d8:	92 e0       	ldi	r25, 0x02	; 2
    15da:	0e 94 43 07 	call	0xe86	; 0xe86 <lcd_string>
    15de:	a0 c0       	rjmp	.+320    	; 0x1720 <mapRun+0x34c>
			}
			//if angle[i] is -60 the bot has to take a -60 degree turn
			// bot will move 6 cm ahead and 30 degree right to skip the current black line
			// then it will rotate rihgt until it finds another black line
			// lcd will print "-60 degree success"
			else if (angle[count] == -60 || angle[count] == 300)
    15e0:	8f ef       	ldi	r24, 0xFF	; 255
    15e2:	e4 3c       	cpi	r30, 0xC4	; 196
    15e4:	f8 07       	cpc	r31, r24
    15e6:	21 f0       	breq	.+8      	; 0x15f0 <mapRun+0x21c>
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	ec 32       	cpi	r30, 0x2C	; 44
    15ec:	f8 07       	cpc	r31, r24
    15ee:	71 f5       	brne	.+92     	; 0x164c <mapRun+0x278>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    15f0:	d0 92 28 01 	sts	0x0128, r13
	OCR5BL = (unsigned char)right_motor;
    15f4:	d0 92 2a 01 	sts	0x012A, r13
			// then it will rotate rihgt until it finds another black line
			// lcd will print "-60 degree success"
			else if (angle[count] == -60 || angle[count] == 300)
			{
				velocity(250,250);
				forward_mm(60);
    15f8:	8c e3       	ldi	r24, 0x3C	; 60
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	0e 94 ae 06 	call	0xd5c	; 0xd5c <forward_mm>
    1600:	88 ee       	ldi	r24, 0xE8	; 232
    1602:	93 e0       	ldi	r25, 0x03	; 3
    1604:	f8 01       	movw	r30, r16
    1606:	31 97       	sbiw	r30, 0x01	; 1
    1608:	f1 f7       	brne	.-4      	; 0x1606 <mapRun+0x232>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160c:	d9 f7       	brne	.-10     	; 0x1604 <mapRun+0x230>
		        _delay_ms(100);
		        right_degrees(30);
    160e:	8e e1       	ldi	r24, 0x1E	; 30
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	0e 94 66 05 	call	0xacc	; 0xacc <right_degrees>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1616:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1618:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    161a:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    161c:	82 b9       	out	0x02, r24	; 2
		        _delay_ms(100);
		        right_degrees(30);
		        do
		        {
		          right();
		          senser_value_C = ADC_Conversion(2);
    161e:	82 e0       	ldi	r24, 0x02	; 2
    1620:	0e 94 c4 04 	call	0x988	; 0x988 <ADC_Conversion>
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	90 93 0d 17 	sts	0x170D, r25
    162a:	80 93 0c 17 	sts	0x170C, r24
		        }
		        while (senser_value_C < 110);
    162e:	8e 36       	cpi	r24, 0x6E	; 110
    1630:	91 05       	cpc	r25, r1
    1632:	8c f3       	brlt	.-30     	; 0x1616 <mapRun+0x242>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1634:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1636:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1638:	82 b9       	out	0x02, r24	; 2
		          right();
		          senser_value_C = ADC_Conversion(2);
		        }
		        while (senser_value_C < 110);
		        stop();
		        lcd_cursor(1,1);
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	61 e0       	ldi	r22, 0x01	; 1
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	0e 94 50 07 	call	0xea0	; 0xea0 <lcd_cursor>
		        lcd_string("-60 degree suces");
    1646:	85 e7       	ldi	r24, 0x75	; 117
    1648:	92 e0       	ldi	r25, 0x02	; 2
    164a:	c7 cf       	rjmp	.-114    	; 0x15da <mapRun+0x206>
			}
			//if angle[i] is -120 the bot has to take a -120 degree turn
			// bot will move 1.5 cm ahead and 30 degree back right to skip the current black line
			// then it will rotate soft right until it finds another black line
			// lcd will print "-120 degree success"
			else if (angle[count] == -120 || angle[count] == 240)
    164c:	8f ef       	ldi	r24, 0xFF	; 255
    164e:	e8 38       	cpi	r30, 0x88	; 136
    1650:	f8 07       	cpc	r31, r24
    1652:	19 f0       	breq	.+6      	; 0x165a <mapRun+0x286>
    1654:	e0 3f       	cpi	r30, 0xF0	; 240
    1656:	f1 05       	cpc	r31, r1
    1658:	51 f5       	brne	.+84     	; 0x16ae <mapRun+0x2da>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    165a:	d0 92 28 01 	sts	0x0128, r13
	OCR5BL = (unsigned char)right_motor;
    165e:	d0 92 2a 01 	sts	0x012A, r13
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1662:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1664:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1666:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1668:	82 b9       	out	0x02, r24	; 2
    166a:	8c ea       	ldi	r24, 0xAC	; 172
    166c:	9d e0       	ldi	r25, 0x0D	; 13
    166e:	f8 01       	movw	r30, r16
    1670:	31 97       	sbiw	r30, 0x01	; 1
    1672:	f1 f7       	brne	.-4      	; 0x1670 <mapRun+0x29c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1674:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1676:	d9 f7       	brne	.-10     	; 0x166e <mapRun+0x29a>
			else if (angle[count] == -120 || angle[count] == 240)
			{
				velocity(250,250);
				forward();
		        _delay_ms(350);
		        right_degrees(90);
    1678:	8a e5       	ldi	r24, 0x5A	; 90
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	0e 94 66 05 	call	0xacc	; 0xacc <right_degrees>
    1680:	88 e8       	ldi	r24, 0x88	; 136
    1682:	93 e1       	ldi	r25, 0x13	; 19
    1684:	f8 01       	movw	r30, r16
    1686:	31 97       	sbiw	r30, 0x01	; 1
    1688:	f1 f7       	brne	.-4      	; 0x1686 <mapRun+0x2b2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    168c:	d9 f7       	brne	.-10     	; 0x1684 <mapRun+0x2b0>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    168e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1690:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1692:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    1694:	82 b9       	out	0x02, r24	; 2
		        right_degrees(90);
		        _delay_ms(500);
		        do
		        {
		          right();
		          senser_value_C = ADC_Conversion(2);
    1696:	82 e0       	ldi	r24, 0x02	; 2
    1698:	0e 94 c4 04 	call	0x988	; 0x988 <ADC_Conversion>
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	90 93 0d 17 	sts	0x170D, r25
    16a2:	80 93 0c 17 	sts	0x170C, r24
		        }
		        while (senser_value_C < 110);
    16a6:	8e 36       	cpi	r24, 0x6E	; 110
    16a8:	91 05       	cpc	r25, r1
    16aa:	8c f3       	brlt	.-30     	; 0x168e <mapRun+0x2ba>
    16ac:	8b cf       	rjmp	.-234    	; 0x15c4 <mapRun+0x1f0>
		        lcd_string("120 degree succes");
			}
			//if angle[i] is 180 the bot has to take a 190 degree turn
			// bot will move left for 500 milliseconds to skip the current black line
			// then it will rotate left until it finds another black line
			else if (angle[count] == 180 || angle[count] == -180)
    16ae:	e4 3b       	cpi	r30, 0xB4	; 180
    16b0:	f1 05       	cpc	r31, r1
    16b2:	19 f0       	breq	.+6      	; 0x16ba <mapRun+0x2e6>
    16b4:	ec 54       	subi	r30, 0x4C	; 76
    16b6:	ff 4f       	sbci	r31, 0xFF	; 255
    16b8:	99 f5       	brne	.+102    	; 0x1720 <mapRun+0x34c>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    16ba:	d0 92 28 01 	sts	0x0128, r13
	OCR5BL = (unsigned char)right_motor;
    16be:	d0 92 2a 01 	sts	0x012A, r13
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    16c2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    16c4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    16c6:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    16c8:	82 b9       	out	0x02, r24	; 2
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    16ca:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    16cc:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    16ce:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    16d0:	82 b9       	out	0x02, r24	; 2
    16d2:	88 eb       	ldi	r24, 0xB8	; 184
    16d4:	9b e0       	ldi	r25, 0x0B	; 11
    16d6:	f8 01       	movw	r30, r16
    16d8:	31 97       	sbiw	r30, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <mapRun+0x304>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16dc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16de:	d9 f7       	brne	.-10     	; 0x16d6 <mapRun+0x302>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    16e0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    16e2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    16e4:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
    16e6:	82 b9       	out	0x02, r24	; 2
    16e8:	80 ed       	ldi	r24, 0xD0	; 208
    16ea:	97 e0       	ldi	r25, 0x07	; 7
    16ec:	f8 01       	movw	r30, r16
    16ee:	31 97       	sbiw	r30, 0x01	; 1
    16f0:	f1 f7       	brne	.-4      	; 0x16ee <mapRun+0x31a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f4:	d9 f7       	brne	.-10     	; 0x16ec <mapRun+0x318>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    16f6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    16f8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    16fa:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    16fc:	82 b9       	out	0x02, r24	; 2
		        back();
		        _delay_ms(200);
		        do
		        {
		          right();
		          Center_white_line = ADC_Conversion(2);
    16fe:	82 e0       	ldi	r24, 0x02	; 2
    1700:	0e 94 c4 04 	call	0x988	; 0x988 <ADC_Conversion>
    1704:	80 93 3a 04 	sts	0x043A, r24
		        }
		        while (Center_white_line < 110);
    1708:	8e 36       	cpi	r24, 0x6E	; 110
    170a:	a8 f3       	brcs	.-22     	; 0x16f6 <mapRun+0x322>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    170c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    170e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1710:	82 b9       	out	0x02, r24	; 2
    1712:	88 ee       	ldi	r24, 0xE8	; 232
    1714:	93 e0       	ldi	r25, 0x03	; 3
    1716:	f8 01       	movw	r30, r16
    1718:	31 97       	sbiw	r30, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <mapRun+0x344>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171e:	d9 f7       	brne	.-10     	; 0x1716 <mapRun+0x342>
		        stop();
		        _delay_ms(100);
			}

			// by default lcd will be print "MOVING ON FLEX"
			lcd_cursor(1,1);
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	61 e0       	ldi	r22, 0x01	; 1
    1726:	70 e0       	ldi	r23, 0x00	; 0
    1728:	0e 94 50 07 	call	0xea0	; 0xea0 <lcd_cursor>
			lcd_string("                ");
    172c:	86 e8       	ldi	r24, 0x86	; 134
    172e:	92 e0       	ldi	r25, 0x02	; 2
    1730:	0e 94 43 07 	call	0xe86	; 0xe86 <lcd_string>
			lcd_cursor(2,1);
    1734:	82 e0       	ldi	r24, 0x02	; 2
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	61 e0       	ldi	r22, 0x01	; 1
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	0e 94 50 07 	call	0xea0	; 0xea0 <lcd_cursor>
			lcd_string("MOVING ON FLEX!!");
    1740:	87 e9       	ldi	r24, 0x97	; 151
    1742:	92 e0       	ldi	r25, 0x02	; 2
    1744:	0e 94 43 07 	call	0xe86	; 0xe86 <lcd_string>
		}
		if (count < Size_)
    1748:	ea 14       	cp	r14, r10
    174a:	fb 04       	cpc	r15, r11
    174c:	14 f4       	brge	.+4      	; 0x1752 <mapRun+0x37e>
		{
			move();// calling the move function
    174e:	0e 94 cc 05 	call	0xb98	; 0xb98 <move>

	int *res = (int*) malloc (3*sizeof(int));		//Holds result
	for (int i = 0; i < 3; i++)
		res[i] = 0;

	while(count < Size_)
    1752:	ea 14       	cp	r14, r10
    1754:	fb 04       	cpc	r15, r11
    1756:	0c f4       	brge	.+2      	; 0x175a <mapRun+0x386>
    1758:	5d ce       	rjmp	.-838    	; 0x1414 <mapRun+0x40>
			move();// calling the move function
		}
		
	}
	return res;
}
    175a:	ce 01       	movw	r24, r28
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	1f 91       	pop	r17
    1762:	0f 91       	pop	r16
    1764:	ff 90       	pop	r15
    1766:	ef 90       	pop	r14
    1768:	df 90       	pop	r13
    176a:	bf 90       	pop	r11
    176c:	af 90       	pop	r10
    176e:	9f 90       	pop	r9
    1770:	8f 90       	pop	r8
    1772:	08 95       	ret

00001774 <pathFind>:
			the source (where the index of the parent is -1.) In the process,
			it also keeps updating the number of nodes in the path from source
			to the destination.	
	*Example Call: int *path = pathFind (parent, destination, &pathSize);
*/
int* pathFind (int *parent, int destination, int *pathSize) {
    1774:	cf 92       	push	r12
    1776:	df 92       	push	r13
    1778:	ef 92       	push	r14
    177a:	ff 92       	push	r15
    177c:	0f 93       	push	r16
    177e:	1f 93       	push	r17
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	6c 01       	movw	r12, r24
    1786:	16 2f       	mov	r17, r22
    1788:	07 2f       	mov	r16, r23
    178a:	7a 01       	movw	r14, r20
	int *path = (int*) malloc (size*sizeof(int));
    178c:	82 e6       	ldi	r24, 0x62	; 98
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <malloc>
    1794:	ec 01       	movw	r28, r24
	*pathSize = 1;			//There is at least one element (destination)
    1796:	21 e0       	ldi	r18, 0x01	; 1
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	d7 01       	movw	r26, r14
    179c:	2d 93       	st	X+, r18
    179e:	3c 93       	st	X, r19
	int i = destination, j = 1;
	path[0] = destination;
    17a0:	18 83       	st	Y, r17
    17a2:	09 83       	std	Y+1, r16	; 0x01
    17a4:	ac 01       	movw	r20, r24
    17a6:	21 2f       	mov	r18, r17
    17a8:	30 2f       	mov	r19, r16
    17aa:	c9 01       	movw	r24, r18
    17ac:	e1 e0       	ldi	r30, 0x01	; 1
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	0e c0       	rjmp	.+28     	; 0x17ce <pathFind+0x5a>
	//Creates a path 
	while (parent[i] != -1) {
		(*pathSize)++;
    17b2:	d7 01       	movw	r26, r14
    17b4:	8d 91       	ld	r24, X+
    17b6:	9c 91       	ld	r25, X
    17b8:	11 97       	sbiw	r26, 0x01	; 1
    17ba:	01 96       	adiw	r24, 0x01	; 1
    17bc:	8d 93       	st	X+, r24
    17be:	9c 93       	st	X, r25
		path[j++] = parent[i];
    17c0:	db 01       	movw	r26, r22
    17c2:	8d 91       	ld	r24, X+
    17c4:	9c 91       	ld	r25, X
    17c6:	da 01       	movw	r26, r20
    17c8:	8d 93       	st	X+, r24
    17ca:	9c 93       	st	X, r25
    17cc:	31 96       	adiw	r30, 0x01	; 1
	int *path = (int*) malloc (size*sizeof(int));
	*pathSize = 1;			//There is at least one element (destination)
	int i = destination, j = 1;
	path[0] = destination;
	//Creates a path 
	while (parent[i] != -1) {
    17ce:	bc 01       	movw	r22, r24
    17d0:	66 0f       	add	r22, r22
    17d2:	77 1f       	adc	r23, r23
    17d4:	6c 0d       	add	r22, r12
    17d6:	7d 1d       	adc	r23, r13
    17d8:	4e 5f       	subi	r20, 0xFE	; 254
    17da:	5f 4f       	sbci	r21, 0xFF	; 255
    17dc:	db 01       	movw	r26, r22
    17de:	8d 91       	ld	r24, X+
    17e0:	9c 91       	ld	r25, X
    17e2:	bf ef       	ldi	r27, 0xFF	; 255
    17e4:	8f 3f       	cpi	r24, 0xFF	; 255
    17e6:	9b 07       	cpc	r25, r27
    17e8:	21 f7       	brne	.-56     	; 0x17b2 <pathFind+0x3e>
		(*pathSize)++;
		path[j++] = parent[i];
		i = parent[i];
	}
	path[j] = -1;
    17ea:	ee 0f       	add	r30, r30
    17ec:	ff 1f       	adc	r31, r31
    17ee:	ec 0f       	add	r30, r28
    17f0:	fd 1f       	adc	r31, r29
    17f2:	91 83       	std	Z+1, r25	; 0x01
    17f4:	80 83       	st	Z, r24
	//Corrects the order of the path
	reverse (path, *pathSize);
    17f6:	f7 01       	movw	r30, r14
    17f8:	60 81       	ld	r22, Z
    17fa:	71 81       	ldd	r23, Z+1	; 0x01
    17fc:	ce 01       	movw	r24, r28
    17fe:	0e 94 bf 03 	call	0x77e	; 0x77e <reverse>
	/*for (int i = 0; i < *pathSize; i++)
		cout << path[i] << "\t";
	cout << endl;
	*/
	return path;
}
    1802:	ce 01       	movw	r24, r28
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	1f 91       	pop	r17
    180a:	0f 91       	pop	r16
    180c:	ff 90       	pop	r15
    180e:	ef 90       	pop	r14
    1810:	df 90       	pop	r13
    1812:	cf 90       	pop	r12
    1814:	08 95       	ret

00001816 <NewQueue>:
	struct Node *temp = (struct Node*) malloc (sizeof(struct Node));
	temp->next=NULL;
	return temp;
}
struct Queue * NewQueue() {
	struct Queue *Q = (struct Queue*) malloc (sizeof(struct Queue));
    1816:	84 e0       	ldi	r24, 0x04	; 4
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <malloc>
    181e:	fc 01       	movw	r30, r24
	Q->head=NULL;
    1820:	11 82       	std	Z+1, r1	; 0x01
    1822:	10 82       	st	Z, r1
	Q->tail=NULL;
    1824:	13 82       	std	Z+3, r1	; 0x03
    1826:	12 82       	std	Z+2, r1	; 0x02
	return Q;
}
    1828:	08 95       	ret

0000182a <NewNode>:
int DeQueue(struct Queue *Q);
void EmptyQueue(struct Queue *Q);
int IsEmpty(struct Queue *Q);

struct Node * NewNode() {
	struct Node *temp = (struct Node*) malloc (sizeof(struct Node));
    182a:	84 e0       	ldi	r24, 0x04	; 4
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <malloc>
    1832:	fc 01       	movw	r30, r24
	temp->next=NULL;
    1834:	13 82       	std	Z+3, r1	; 0x03
    1836:	12 82       	std	Z+2, r1	; 0x02
	return temp;
}
    1838:	08 95       	ret

0000183a <EnQueue>:
	Q->head=NULL;
	Q->tail=NULL;
	return Q;
}

void EnQueue(struct Queue *Q, int data) {
    183a:	0f 93       	push	r16
    183c:	1f 93       	push	r17
    183e:	cf 93       	push	r28
    1840:	df 93       	push	r29
    1842:	ec 01       	movw	r28, r24
    1844:	8b 01       	movw	r16, r22
	struct Node * temp= NewNode();
    1846:	0e 94 15 0c 	call	0x182a	; 0x182a <NewNode>
    184a:	dc 01       	movw	r26, r24
	temp->data=data;
    184c:	11 96       	adiw	r26, 0x01	; 1
    184e:	1c 93       	st	X, r17
    1850:	0e 93       	st	-X, r16
	if(Q->head==NULL && Q->tail==NULL) {
    1852:	88 81       	ld	r24, Y
    1854:	99 81       	ldd	r25, Y+1	; 0x01
    1856:	89 2b       	or	r24, r25
    1858:	39 f4       	brne	.+14     	; 0x1868 <EnQueue+0x2e>
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	9b 81       	ldd	r25, Y+3	; 0x03
    185e:	89 2b       	or	r24, r25
    1860:	19 f4       	brne	.+6      	; 0x1868 <EnQueue+0x2e>
		Q->head=temp;
    1862:	b9 83       	std	Y+1, r27	; 0x01
    1864:	a8 83       	st	Y, r26
    1866:	04 c0       	rjmp	.+8      	; 0x1870 <EnQueue+0x36>
		Q->tail=temp;
		return;
	}
	Q->tail->next=temp;
    1868:	ea 81       	ldd	r30, Y+2	; 0x02
    186a:	fb 81       	ldd	r31, Y+3	; 0x03
    186c:	b3 83       	std	Z+3, r27	; 0x03
    186e:	a2 83       	std	Z+2, r26	; 0x02
	Q->tail=temp;
    1870:	bb 83       	std	Y+3, r27	; 0x03
    1872:	aa 83       	std	Y+2, r26	; 0x02
}
    1874:	df 91       	pop	r29
    1876:	cf 91       	pop	r28
    1878:	1f 91       	pop	r17
    187a:	0f 91       	pop	r16
    187c:	08 95       	ret

0000187e <Move>:
				3rd tells the node it was supposed to go to.
	*Logic: Converts nodes to an array of angle and calls the run function
			Returns the result by changing index to actual nodes
	*Example Call: int *res = Move (path, pathSize);
*/
int* Move (int path[], int pathSize) {
    187e:	8f 92       	push	r8
    1880:	9f 92       	push	r9
    1882:	af 92       	push	r10
    1884:	bf 92       	push	r11
    1886:	cf 92       	push	r12
    1888:	df 92       	push	r13
    188a:	ef 92       	push	r14
    188c:	ff 92       	push	r15
    188e:	0f 93       	push	r16
    1890:	1f 93       	push	r17
    1892:	cf 93       	push	r28
    1894:	df 93       	push	r29
    1896:	6c 01       	movw	r12, r24
    1898:	7b 01       	movw	r14, r22
	signed int *angle = (signed int*) malloc(pathSize*sizeof(int));
    189a:	cb 01       	movw	r24, r22
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <malloc>
    18a4:	8c 01       	movw	r16, r24
    18a6:	e6 01       	movw	r28, r12
    18a8:	bc 01       	movw	r22, r24
    18aa:	41 e0       	ldi	r20, 0x01	; 1
    18ac:	50 e0       	ldi	r21, 0x00	; 0
	for (int j = 0, i = 1; i < pathSize-1; i++, j++) {
    18ae:	57 01       	movw	r10, r14
    18b0:	08 94       	sec
    18b2:	a1 08       	sbc	r10, r1
    18b4:	b1 08       	sbc	r11, r1
		//This could be buggy
		angle[j] = map_angle[path[i]][path[i+1]] - 
    18b6:	f1 e3       	ldi	r31, 0x31	; 49
    18b8:	8f 2e       	mov	r8, r31
    18ba:	91 2c       	mov	r9, r1
    18bc:	2c c0       	rjmp	.+88     	; 0x1916 <Move+0x98>
    18be:	2a 81       	ldd	r18, Y+2	; 0x02
    18c0:	3b 81       	ldd	r19, Y+3	; 0x03
    18c2:	28 9d       	mul	r18, r8
    18c4:	d0 01       	movw	r26, r0
    18c6:	29 9d       	mul	r18, r9
    18c8:	b0 0d       	add	r27, r0
    18ca:	38 9d       	mul	r19, r8
    18cc:	b0 0d       	add	r27, r0
    18ce:	11 24       	eor	r1, r1
    18d0:	8c 81       	ldd	r24, Y+4	; 0x04
    18d2:	9d 81       	ldd	r25, Y+5	; 0x05
    18d4:	a8 0f       	add	r26, r24
    18d6:	b9 1f       	adc	r27, r25
    18d8:	aa 0f       	add	r26, r26
    18da:	bb 1f       	adc	r27, r27
    18dc:	a8 52       	subi	r26, 0x28	; 40
    18de:	b8 4e       	sbci	r27, 0xE8	; 232
    18e0:	89 91       	ld	r24, Y+
    18e2:	99 91       	ld	r25, Y+
    18e4:	88 9d       	mul	r24, r8
    18e6:	f0 01       	movw	r30, r0
    18e8:	89 9d       	mul	r24, r9
    18ea:	f0 0d       	add	r31, r0
    18ec:	98 9d       	mul	r25, r8
    18ee:	f0 0d       	add	r31, r0
    18f0:	11 24       	eor	r1, r1
    18f2:	e2 0f       	add	r30, r18
    18f4:	f3 1f       	adc	r31, r19
    18f6:	ee 0f       	add	r30, r30
    18f8:	ff 1f       	adc	r31, r31
    18fa:	e8 52       	subi	r30, 0x28	; 40
    18fc:	f8 4e       	sbci	r31, 0xE8	; 232
    18fe:	8d 91       	ld	r24, X+
    1900:	9c 91       	ld	r25, X
    1902:	20 81       	ld	r18, Z
    1904:	31 81       	ldd	r19, Z+1	; 0x01
    1906:	82 1b       	sub	r24, r18
    1908:	93 0b       	sbc	r25, r19
    190a:	fb 01       	movw	r30, r22
    190c:	81 93       	st	Z+, r24
    190e:	91 93       	st	Z+, r25
    1910:	bf 01       	movw	r22, r30
			Returns the result by changing index to actual nodes
	*Example Call: int *res = Move (path, pathSize);
*/
int* Move (int path[], int pathSize) {
	signed int *angle = (signed int*) malloc(pathSize*sizeof(int));
	for (int j = 0, i = 1; i < pathSize-1; i++, j++) {
    1912:	4f 5f       	subi	r20, 0xFF	; 255
    1914:	5f 4f       	sbci	r21, 0xFF	; 255
    1916:	4a 15       	cp	r20, r10
    1918:	5b 05       	cpc	r21, r11
    191a:	8c f2       	brlt	.-94     	; 0x18be <Move+0x40>
		//This could be buggy
		angle[j] = map_angle[path[i]][path[i+1]] - 
					map_angle[path[i-1]][path[i]];
	}
	angle[pathSize-1] = -1;
    191c:	f7 01       	movw	r30, r14
    191e:	31 97       	sbiw	r30, 0x01	; 1
    1920:	ee 0f       	add	r30, r30
    1922:	ff 1f       	adc	r31, r31
    1924:	e0 0f       	add	r30, r16
    1926:	f1 1f       	adc	r31, r17
    1928:	8f ef       	ldi	r24, 0xFF	; 255
    192a:	9f ef       	ldi	r25, 0xFF	; 255
    192c:	91 83       	std	Z+1, r25	; 0x01
    192e:	80 83       	st	Z, r24
	int *res = mapRun (angle, pathSize);
    1930:	c8 01       	movw	r24, r16
    1932:	b7 01       	movw	r22, r14
    1934:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <mapRun>
    1938:	ec 01       	movw	r28, r24
	if (res[0] != 0) {
    193a:	88 81       	ld	r24, Y
    193c:	99 81       	ldd	r25, Y+1	; 0x01
    193e:	89 2b       	or	r24, r25
    1940:	a1 f0       	breq	.+40     	; 0x196a <Move+0xec>
		res[1] = path[res[1]];
    1942:	ea 81       	ldd	r30, Y+2	; 0x02
    1944:	fb 81       	ldd	r31, Y+3	; 0x03
    1946:	ee 0f       	add	r30, r30
    1948:	ff 1f       	adc	r31, r31
    194a:	ec 0d       	add	r30, r12
    194c:	fd 1d       	adc	r31, r13
    194e:	80 81       	ld	r24, Z
    1950:	91 81       	ldd	r25, Z+1	; 0x01
    1952:	9b 83       	std	Y+3, r25	; 0x03
    1954:	8a 83       	std	Y+2, r24	; 0x02
		res[2] = path[res[2]];
    1956:	ec 81       	ldd	r30, Y+4	; 0x04
    1958:	fd 81       	ldd	r31, Y+5	; 0x05
    195a:	ee 0f       	add	r30, r30
    195c:	ff 1f       	adc	r31, r31
    195e:	ec 0d       	add	r30, r12
    1960:	fd 1d       	adc	r31, r13
    1962:	80 81       	ld	r24, Z
    1964:	91 81       	ldd	r25, Z+1	; 0x01
    1966:	9d 83       	std	Y+5, r25	; 0x05
    1968:	8c 83       	std	Y+4, r24	; 0x04
	}
	free(angle);
    196a:	c8 01       	movw	r24, r16
    196c:	0e 94 13 17 	call	0x2e26	; 0x2e26 <free>
	return res;}
    1970:	ce 01       	movw	r24, r28
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	1f 91       	pop	r17
    1978:	0f 91       	pop	r16
    197a:	ff 90       	pop	r15
    197c:	ef 90       	pop	r14
    197e:	df 90       	pop	r13
    1980:	cf 90       	pop	r12
    1982:	bf 90       	pop	r11
    1984:	af 90       	pop	r10
    1986:	9f 90       	pop	r9
    1988:	8f 90       	pop	r8
    198a:	08 95       	ret

0000198c <DeQueue>:

int DeQueue(struct Queue *Q) {
    198c:	cf 93       	push	r28
    198e:	df 93       	push	r29
    1990:	dc 01       	movw	r26, r24
	if(Q->head==NULL && Q->tail==NULL) {
    1992:	ed 91       	ld	r30, X+
    1994:	fc 91       	ld	r31, X
    1996:	11 97       	sbiw	r26, 0x01	; 1
    1998:	30 97       	sbiw	r30, 0x00	; 0
    199a:	49 f4       	brne	.+18     	; 0x19ae <DeQueue+0x22>
    199c:	12 96       	adiw	r26, 0x02	; 2
    199e:	8d 91       	ld	r24, X+
    19a0:	9c 91       	ld	r25, X
    19a2:	13 97       	sbiw	r26, 0x03	; 3
    19a4:	89 2b       	or	r24, r25
    19a6:	19 f4       	brne	.+6      	; 0x19ae <DeQueue+0x22>
    19a8:	cf ef       	ldi	r28, 0xFF	; 255
    19aa:	df ef       	ldi	r29, 0xFF	; 255
    19ac:	10 c0       	rjmp	.+32     	; 0x19ce <DeQueue+0x42>
		return -1;
	}
	struct Node *temp = Q->head;
	int data = temp->data;
    19ae:	c0 81       	ld	r28, Z
    19b0:	d1 81       	ldd	r29, Z+1	; 0x01
	Q->head=Q->head->next;
    19b2:	82 81       	ldd	r24, Z+2	; 0x02
    19b4:	93 81       	ldd	r25, Z+3	; 0x03
    19b6:	11 96       	adiw	r26, 0x01	; 1
    19b8:	9c 93       	st	X, r25
    19ba:	8e 93       	st	-X, r24
	if(Q->head==NULL)
    19bc:	89 2b       	or	r24, r25
    19be:	21 f4       	brne	.+8      	; 0x19c8 <DeQueue+0x3c>
		Q->tail=NULL;
    19c0:	13 96       	adiw	r26, 0x03	; 3
    19c2:	1c 92       	st	X, r1
    19c4:	1e 92       	st	-X, r1
    19c6:	12 97       	sbiw	r26, 0x02	; 2
	free (temp);	
    19c8:	cf 01       	movw	r24, r30
    19ca:	0e 94 13 17 	call	0x2e26	; 0x2e26 <free>
	return data;
}
    19ce:	ce 01       	movw	r24, r28
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	08 95       	ret

000019d6 <BFS>:
			It puts the source to a queue. Then as long as the queue is not
			empty, it dequeues the first element, enqueues all the neighbours
			which were not already explored and updates the cost.
	*Example Call: int *cost = BFS(source);
*/
int* BFS (int search) {
    19d6:	2f 92       	push	r2
    19d8:	3f 92       	push	r3
    19da:	4f 92       	push	r4
    19dc:	5f 92       	push	r5
    19de:	6f 92       	push	r6
    19e0:	7f 92       	push	r7
    19e2:	8f 92       	push	r8
    19e4:	9f 92       	push	r9
    19e6:	af 92       	push	r10
    19e8:	bf 92       	push	r11
    19ea:	cf 92       	push	r12
    19ec:	df 92       	push	r13
    19ee:	ef 92       	push	r14
    19f0:	ff 92       	push	r15
    19f2:	0f 93       	push	r16
    19f4:	1f 93       	push	r17
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	c2 56       	subi	r28, 0x62	; 98
    1a00:	d0 40       	sbci	r29, 0x00	; 0
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	de bf       	out	0x3e, r29	; 62
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	cd bf       	out	0x3d, r28	; 61
    1a0c:	8c 01       	movw	r16, r24
	struct Queue *Q = NewQueue();	//Initializing the queue required to 
    1a0e:	0e 94 0b 0c 	call	0x1816	; 0x1816 <NewQueue>
    1a12:	2c 01       	movw	r4, r24
									//maintan nodes to be visited
	int *bfs, source = search;
	bfs = (int *) malloc (size*sizeof (int));
    1a14:	82 e6       	ldi	r24, 0x62	; 98
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <malloc>
    1a1c:	1c 01       	movw	r2, r24
    1a1e:	5c 01       	movw	r10, r24
    1a20:	dc 01       	movw	r26, r24
    1a22:	fe 01       	movw	r30, r28
    1a24:	33 96       	adiw	r30, 0x03	; 3
	int visited[size];				//Maintains if the node is visited
	for (int i = 1; i < size; i++) {
    1a26:	ce 01       	movw	r24, r28
    1a28:	8d 59       	subi	r24, 0x9D	; 157
    1a2a:	9f 4f       	sbci	r25, 0xFF	; 255
		bfs[i] = 0;
    1a2c:	13 96       	adiw	r26, 0x03	; 3
    1a2e:	1c 92       	st	X, r1
    1a30:	1e 92       	st	-X, r1
    1a32:	12 97       	sbiw	r26, 0x02	; 2
		visited[i] = 0;
    1a34:	11 92       	st	Z+, r1
    1a36:	11 92       	st	Z+, r1
    1a38:	12 96       	adiw	r26, 0x02	; 2
	struct Queue *Q = NewQueue();	//Initializing the queue required to 
									//maintan nodes to be visited
	int *bfs, source = search;
	bfs = (int *) malloc (size*sizeof (int));
	int visited[size];				//Maintains if the node is visited
	for (int i = 1; i < size; i++) {
    1a3a:	e8 17       	cp	r30, r24
    1a3c:	f9 07       	cpc	r31, r25
    1a3e:	b1 f7       	brne	.-20     	; 0x1a2c <BFS+0x56>
		bfs[i] = 0;
		visited[i] = 0;
	}
	EnQueue (Q, search);
    1a40:	c2 01       	movw	r24, r4
    1a42:	b8 01       	movw	r22, r16
    1a44:	0e 94 1d 0c 	call	0x183a	; 0x183a <EnQueue>
    1a48:	43 c0       	rjmp	.+134    	; 0x1ad0 <BFS+0xfa>
	while (!IsEmpty (Q)) {
		//Accessing the first node in the queue and marking it's neighbours to
		//be searched
		search = DeQueue (Q);
    1a4a:	c2 01       	movw	r24, r4
    1a4c:	0e 94 c6 0c 	call	0x198c	; 0x198c <DeQueue>
		for (int i = 1; i < size; i++) {
			if (visited[i] == 0) {
				if (map[search][i] != INF) {
					//Adding weight to bfs if the node is connected
					bfs[i] = map[search][i] + bfs[search];
    1a50:	3c 01       	movw	r6, r24
    1a52:	66 0c       	add	r6, r6
    1a54:	77 1c       	adc	r7, r7
    1a56:	6a 0c       	add	r6, r10
    1a58:	7b 1c       	adc	r7, r11
    1a5a:	22 e6       	ldi	r18, 0x62	; 98
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	82 9f       	mul	r24, r18
    1a60:	60 01       	movw	r12, r0
    1a62:	83 9f       	mul	r24, r19
    1a64:	d0 0c       	add	r13, r0
    1a66:	92 9f       	mul	r25, r18
    1a68:	d0 0c       	add	r13, r0
    1a6a:	11 24       	eor	r1, r1
    1a6c:	8c e4       	ldi	r24, 0x4C	; 76
    1a6e:	94 e0       	ldi	r25, 0x04	; 4
    1a70:	c8 0e       	add	r12, r24
    1a72:	d9 1e       	adc	r13, r25
    1a74:	b3 e0       	ldi	r27, 0x03	; 3
    1a76:	8b 2e       	mov	r8, r27
    1a78:	91 2c       	mov	r9, r1
    1a7a:	8c 0e       	add	r8, r28
    1a7c:	9d 1e       	adc	r9, r29
    1a7e:	71 01       	movw	r14, r2
    1a80:	01 e0       	ldi	r16, 0x01	; 1
    1a82:	10 e0       	ldi	r17, 0x00	; 0
	while (!IsEmpty (Q)) {
		//Accessing the first node in the queue and marking it's neighbours to
		//be searched
		search = DeQueue (Q);
		for (int i = 1; i < size; i++) {
			if (visited[i] == 0) {
    1a84:	f4 01       	movw	r30, r8
    1a86:	80 81       	ld	r24, Z
    1a88:	91 81       	ldd	r25, Z+1	; 0x01
    1a8a:	89 2b       	or	r24, r25
    1a8c:	a1 f4       	brne	.+40     	; 0x1ab6 <BFS+0xe0>
				if (map[search][i] != INF) {
					//Adding weight to bfs if the node is connected
					bfs[i] = map[search][i] + bfs[search];
    1a8e:	f3 01       	movw	r30, r6
    1a90:	80 81       	ld	r24, Z
    1a92:	91 81       	ldd	r25, Z+1	; 0x01
    1a94:	f6 01       	movw	r30, r12
    1a96:	20 81       	ld	r18, Z
    1a98:	31 81       	ldd	r19, Z+1	; 0x01
    1a9a:	82 0f       	add	r24, r18
    1a9c:	93 1f       	adc	r25, r19
    1a9e:	f7 01       	movw	r30, r14
    1aa0:	93 83       	std	Z+3, r25	; 0x03
    1aa2:	82 83       	std	Z+2, r24	; 0x02
					//In that case, neighbours of this node needs to be scanned
					//too
					EnQueue (Q, i);
    1aa4:	c2 01       	movw	r24, r4
    1aa6:	b8 01       	movw	r22, r16
    1aa8:	0e 94 1d 0c 	call	0x183a	; 0x183a <EnQueue>
					visited [i] = 1;
    1aac:	21 e0       	ldi	r18, 0x01	; 1
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	f4 01       	movw	r30, r8
    1ab2:	31 83       	std	Z+1, r19	; 0x01
    1ab4:	20 83       	st	Z, r18
	EnQueue (Q, search);
	while (!IsEmpty (Q)) {
		//Accessing the first node in the queue and marking it's neighbours to
		//be searched
		search = DeQueue (Q);
		for (int i = 1; i < size; i++) {
    1ab6:	0f 5f       	subi	r16, 0xFF	; 255
    1ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aba:	82 e0       	ldi	r24, 0x02	; 2
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	88 0e       	add	r8, r24
    1ac0:	99 1e       	adc	r9, r25
    1ac2:	c8 0e       	add	r12, r24
    1ac4:	d9 1e       	adc	r13, r25
    1ac6:	e8 0e       	add	r14, r24
    1ac8:	f9 1e       	adc	r15, r25
    1aca:	01 33       	cpi	r16, 0x31	; 49
    1acc:	11 05       	cpc	r17, r1
    1ace:	d1 f6       	brne	.-76     	; 0x1a84 <BFS+0xae>
	for (int i = 1; i < size; i++) {
		bfs[i] = 0;
		visited[i] = 0;
	}
	EnQueue (Q, search);
	while (!IsEmpty (Q)) {
    1ad0:	f2 01       	movw	r30, r4
    1ad2:	80 81       	ld	r24, Z
    1ad4:	91 81       	ldd	r25, Z+1	; 0x01
    1ad6:	89 2b       	or	r24, r25
    1ad8:	09 f0       	breq	.+2      	; 0x1adc <BFS+0x106>
    1ada:	b7 cf       	rjmp	.-146    	; 0x1a4a <BFS+0x74>
				}
			}
		}
	}
	return bfs; 
}
    1adc:	c5 01       	movw	r24, r10
    1ade:	ce 59       	subi	r28, 0x9E	; 158
    1ae0:	df 4f       	sbci	r29, 0xFF	; 255
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	cd bf       	out	0x3d, r28	; 61
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	ff 90       	pop	r15
    1af6:	ef 90       	pop	r14
    1af8:	df 90       	pop	r13
    1afa:	cf 90       	pop	r12
    1afc:	bf 90       	pop	r11
    1afe:	af 90       	pop	r10
    1b00:	9f 90       	pop	r9
    1b02:	8f 90       	pop	r8
    1b04:	7f 90       	pop	r7
    1b06:	6f 90       	pop	r6
    1b08:	5f 90       	pop	r5
    1b0a:	4f 90       	pop	r4
    1b0c:	3f 90       	pop	r3
    1b0e:	2f 90       	pop	r2
    1b10:	08 95       	ret

00001b12 <heuristic>:
	*Output: An array with cost (heuristic) of traversing all nodes from the source
	*Logic: Calls BFS to calculate the heuristic
	*Example Call: int *cost = heuristic(source);
*/
int* heuristic (int destination) {
	int *heuris = BFS (destination);	//Calculates heuristics of the node
    1b12:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <BFS>
	return heuris;
}
    1b16:	08 95       	ret

00001b18 <EmptyQueue>:

void EmptyQueue(struct Queue *Q) {
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	ec 01       	movw	r28, r24
    1b1e:	03 c0       	rjmp	.+6      	; 0x1b26 <EmptyQueue+0xe>
	while(Q->head!=NULL)
		DeQueue(Q);
    1b20:	ce 01       	movw	r24, r28
    1b22:	0e 94 c6 0c 	call	0x198c	; 0x198c <DeQueue>
	free (temp);	
	return data;
}

void EmptyQueue(struct Queue *Q) {
	while(Q->head!=NULL)
    1b26:	88 81       	ld	r24, Y
    1b28:	99 81       	ldd	r25, Y+1	; 0x01
    1b2a:	89 2b       	or	r24, r25
    1b2c:	c9 f7       	brne	.-14     	; 0x1b20 <EmptyQueue+0x8>
		DeQueue(Q);
}
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	08 95       	ret

00001b34 <dStar>:
			Applies A* search to find the path with least cost.
			If obstacle is encountered, updates the cost and re-evaluates the
			fastest route.
	*Example Call: dStar (1, 5);
*/
int dStar (int source, int dest) {
    1b34:	2f 92       	push	r2
    1b36:	3f 92       	push	r3
    1b38:	4f 92       	push	r4
    1b3a:	5f 92       	push	r5
    1b3c:	6f 92       	push	r6
    1b3e:	7f 92       	push	r7
    1b40:	8f 92       	push	r8
    1b42:	9f 92       	push	r9
    1b44:	af 92       	push	r10
    1b46:	bf 92       	push	r11
    1b48:	cf 92       	push	r12
    1b4a:	df 92       	push	r13
    1b4c:	ef 92       	push	r14
    1b4e:	ff 92       	push	r15
    1b50:	0f 93       	push	r16
    1b52:	1f 93       	push	r17
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	c4 5f       	subi	r28, 0xF4	; 244
    1b5e:	d1 40       	sbci	r29, 0x01	; 1
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	3c 01       	movw	r6, r24
    1b6c:	c3 51       	subi	r28, 0x13	; 19
    1b6e:	de 4f       	sbci	r29, 0xFE	; 254
    1b70:	79 83       	std	Y+1, r23	; 0x01
    1b72:	68 83       	st	Y, r22
    1b74:	cd 5e       	subi	r28, 0xED	; 237
    1b76:	d1 40       	sbci	r29, 0x01	; 1
		int parent[size], open[size], closed[size], current;	
		int gCost[size], fCost[size];	
		int openSize = 0, closedSize = 0;				//Maintains the size of
		//open list.
		//This speeds up the scanning process.
		gCost[source] = 0;
    1b78:	9e 01       	movw	r18, r28
    1b7a:	29 5d       	subi	r18, 0xD9	; 217
    1b7c:	3e 4f       	sbci	r19, 0xFE	; 254
    1b7e:	cf 50       	subi	r28, 0x0F	; 15
    1b80:	de 4f       	sbci	r29, 0xFE	; 254
    1b82:	39 83       	std	Y+1, r19	; 0x01
    1b84:	28 83       	st	Y, r18
    1b86:	c1 5f       	subi	r28, 0xF1	; 241
    1b88:	d1 40       	sbci	r29, 0x01	; 1
						}
					}
				}
			}
		}
		if (parent[dest] == -1) {
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	e1 e0       	ldi	r30, 0x01	; 1
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	ec 0f       	add	r30, r28
    1b96:	fd 1f       	adc	r31, r29
    1b98:	e8 0f       	add	r30, r24
    1b9a:	f9 1f       	adc	r31, r25
    1b9c:	c1 51       	subi	r28, 0x11	; 17
    1b9e:	de 4f       	sbci	r29, 0xFE	; 254
    1ba0:	f9 83       	std	Y+1, r31	; 0x01
    1ba2:	e8 83       	st	Y, r30
    1ba4:	cf 5e       	subi	r28, 0xEF	; 239
    1ba6:	d1 40       	sbci	r29, 0x01	; 1
	*Output: An array with cost (heuristic) of traversing all nodes from the source
	*Logic: Calls BFS to calculate the heuristic
	*Example Call: int *cost = heuristic(source);
*/
int* heuristic (int destination) {
	int *heuris = BFS (destination);	//Calculates heuristics of the node
    1ba8:	c3 51       	subi	r28, 0x13	; 19
    1baa:	de 4f       	sbci	r29, 0xFE	; 254
    1bac:	88 81       	ld	r24, Y
    1bae:	99 81       	ldd	r25, Y+1	; 0x01
    1bb0:	cd 5e       	subi	r28, 0xED	; 237
    1bb2:	d1 40       	sbci	r29, 0x01	; 1
    1bb4:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <BFS>
    1bb8:	c5 51       	subi	r28, 0x15	; 21
    1bba:	de 4f       	sbci	r29, 0xFE	; 254
    1bbc:	99 83       	std	Y+1, r25	; 0x01
    1bbe:	88 83       	st	Y, r24
    1bc0:	cb 5e       	subi	r28, 0xEB	; 235
    1bc2:	d1 40       	sbci	r29, 0x01	; 1
		int parent[size], open[size], closed[size], current;	
		int gCost[size], fCost[size];	
		int openSize = 0, closedSize = 0;				//Maintains the size of
		//open list.
		//This speeds up the scanning process.
		gCost[source] = 0;
    1bc4:	f3 01       	movw	r30, r6
    1bc6:	ee 0f       	add	r30, r30
    1bc8:	ff 1f       	adc	r31, r31
    1bca:	a7 e2       	ldi	r26, 0x27	; 39
    1bcc:	b1 e0       	ldi	r27, 0x01	; 1
    1bce:	ac 0f       	add	r26, r28
    1bd0:	bd 1f       	adc	r27, r29
    1bd2:	ae 0f       	add	r26, r30
    1bd4:	bf 1f       	adc	r27, r31
    1bd6:	1d 92       	st	X+, r1
    1bd8:	1c 92       	st	X, r1
		fCost[source] = fCostCalc (gCost[source], heuris[source]);
    1bda:	a9 e8       	ldi	r26, 0x89	; 137
    1bdc:	b1 e0       	ldi	r27, 0x01	; 1
    1bde:	ac 0f       	add	r26, r28
    1be0:	bd 1f       	adc	r27, r29
    1be2:	ae 0f       	add	r26, r30
    1be4:	bf 1f       	adc	r27, r31
    1be6:	e8 0f       	add	r30, r24
    1be8:	f9 1f       	adc	r31, r25
    1bea:	80 81       	ld	r24, Z
    1bec:	91 81       	ldd	r25, Z+1	; 0x01
    1bee:	8d 93       	st	X+, r24
    1bf0:	9c 93       	st	X, r25
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
		for (int i = 0; i < size; i++) {
			//Initialising open and closed list to be empty
			open[i] = closed[i] = 0;
    1bf6:	e5 ec       	ldi	r30, 0xC5	; 197
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	ec 0f       	add	r30, r28
    1bfc:	fd 1f       	adc	r31, r29
    1bfe:	e8 0f       	add	r30, r24
    1c00:	f9 1f       	adc	r31, r25
    1c02:	11 82       	std	Z+1, r1	; 0x01
    1c04:	10 82       	st	Z, r1
    1c06:	e3 e6       	ldi	r30, 0x63	; 99
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	ec 0f       	add	r30, r28
    1c0c:	fd 1f       	adc	r31, r29
    1c0e:	e8 0f       	add	r30, r24
    1c10:	f9 1f       	adc	r31, r25
    1c12:	11 82       	std	Z+1, r1	; 0x01
    1c14:	10 82       	st	Z, r1
			parent[i] = -1;
    1c16:	e1 e0       	ldi	r30, 0x01	; 1
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	ec 0f       	add	r30, r28
    1c1c:	fd 1f       	adc	r31, r29
    1c1e:	e8 0f       	add	r30, r24
    1c20:	f9 1f       	adc	r31, r25
    1c22:	2f ef       	ldi	r18, 0xFF	; 255
    1c24:	3f ef       	ldi	r19, 0xFF	; 255
    1c26:	31 83       	std	Z+1, r19	; 0x01
    1c28:	20 83       	st	Z, r18
			gCost[i] = fCost[i] = INF;
    1c2a:	e9 e8       	ldi	r30, 0x89	; 137
    1c2c:	f1 e0       	ldi	r31, 0x01	; 1
    1c2e:	ec 0f       	add	r30, r28
    1c30:	fd 1f       	adc	r31, r29
    1c32:	e8 0f       	add	r30, r24
    1c34:	f9 1f       	adc	r31, r25
    1c36:	20 ec       	ldi	r18, 0xC0	; 192
    1c38:	37 e2       	ldi	r19, 0x27	; 39
    1c3a:	31 83       	std	Z+1, r19	; 0x01
    1c3c:	20 83       	st	Z, r18
    1c3e:	e7 e2       	ldi	r30, 0x27	; 39
    1c40:	f1 e0       	ldi	r31, 0x01	; 1
    1c42:	ec 0f       	add	r30, r28
    1c44:	fd 1f       	adc	r31, r29
    1c46:	e8 0f       	add	r30, r24
    1c48:	f9 1f       	adc	r31, r25
    1c4a:	31 83       	std	Z+1, r19	; 0x01
    1c4c:	20 83       	st	Z, r18
    1c4e:	02 96       	adiw	r24, 0x02	; 2
		int openSize = 0, closedSize = 0;				//Maintains the size of
		//open list.
		//This speeds up the scanning process.
		gCost[source] = 0;
		fCost[source] = fCostCalc (gCost[source], heuris[source]);
		for (int i = 0; i < size; i++) {
    1c50:	82 36       	cpi	r24, 0x62	; 98
    1c52:	91 05       	cpc	r25, r1
    1c54:	81 f6       	brne	.-96     	; 0x1bf6 <dStar+0xc2>
			//Initialising open and closed list to be empty
			open[i] = closed[i] = 0;
			parent[i] = -1;
			gCost[i] = fCost[i] = INF;
		}
		open[source] = 1, openSize++;
    1c56:	f3 01       	movw	r30, r6
    1c58:	ee 0f       	add	r30, r30
    1c5a:	ff 1f       	adc	r31, r31
    1c5c:	83 e6       	ldi	r24, 0x63	; 99
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	8c 0f       	add	r24, r28
    1c62:	9d 1f       	adc	r25, r29
    1c64:	e8 0f       	add	r30, r24
    1c66:	f9 1f       	adc	r31, r25
    1c68:	21 e0       	ldi	r18, 0x01	; 1
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	31 83       	std	Z+1, r19	; 0x01
    1c6e:	20 83       	st	Z, r18
    1c70:	01 e0       	ldi	r16, 0x01	; 1
    1c72:	40 2e       	mov	r4, r16
    1c74:	51 2c       	mov	r5, r1
    1c76:	e4 c0       	rjmp	.+456    	; 0x1e40 <dStar+0x30c>
*/
int extractMin (int list[], int cost[], int Size) {
	//Think of initializing min
	int min = -1;	
	for (int i = 0; i < Size; i++) {
		if (list[i] != 0) {
    1c78:	f7 01       	movw	r30, r14
    1c7a:	80 81       	ld	r24, Z
    1c7c:	91 81       	ldd	r25, Z+1	; 0x01
    1c7e:	89 2b       	or	r24, r25
    1c80:	b1 f0       	breq	.+44     	; 0x1cae <dStar+0x17a>
			if (min == -1) {
    1c82:	ff ef       	ldi	r31, 0xFF	; 255
    1c84:	6f 3f       	cpi	r22, 0xFF	; 255
    1c86:	7f 07       	cpc	r23, r31
    1c88:	89 f0       	breq	.+34     	; 0x1cac <dStar+0x178>
				min = i;
				continue;
			}
			min = ((cost[min] < cost[i]) ? min : i);
    1c8a:	fb 01       	movw	r30, r22
    1c8c:	ee 0f       	add	r30, r30
    1c8e:	ff 1f       	adc	r31, r31
    1c90:	29 e8       	ldi	r18, 0x89	; 137
    1c92:	31 e0       	ldi	r19, 0x01	; 1
    1c94:	2c 0f       	add	r18, r28
    1c96:	3d 1f       	adc	r19, r29
    1c98:	e2 0f       	add	r30, r18
    1c9a:	f3 1f       	adc	r31, r19
    1c9c:	20 81       	ld	r18, Z
    1c9e:	31 81       	ldd	r19, Z+1	; 0x01
    1ca0:	8d 91       	ld	r24, X+
    1ca2:	9c 91       	ld	r25, X
    1ca4:	11 97       	sbiw	r26, 0x01	; 1
    1ca6:	28 17       	cp	r18, r24
    1ca8:	39 07       	cpc	r19, r25
    1caa:	0c f0       	brlt	.+2      	; 0x1cae <dStar+0x17a>
    1cac:	ba 01       	movw	r22, r20
	*Example Call: int min = extractMin (openList, fCost, size);
*/
int extractMin (int list[], int cost[], int Size) {
	//Think of initializing min
	int min = -1;	
	for (int i = 0; i < Size; i++) {
    1cae:	4f 5f       	subi	r20, 0xFF	; 255
    1cb0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb2:	82 e0       	ldi	r24, 0x02	; 2
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	e8 0e       	add	r14, r24
    1cb8:	f9 1e       	adc	r15, r25
    1cba:	12 96       	adiw	r26, 0x02	; 2
    1cbc:	41 33       	cpi	r20, 0x31	; 49
    1cbe:	51 05       	cpc	r21, r1
    1cc0:	d9 f6       	brne	.-74     	; 0x1c78 <dStar+0x144>
		//Scan as long as the open list is not empty
		while (openSize > 0) {
			current = extractMin (open, fCost, size);
			open[current] = 0, openSize--;
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	e3 e6       	ldi	r30, 0x63	; 99
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	ec 0f       	add	r30, r28
    1cce:	fd 1f       	adc	r31, r29
    1cd0:	e8 0f       	add	r30, r24
    1cd2:	f9 1f       	adc	r31, r25
    1cd4:	11 82       	std	Z+1, r1	; 0x01
    1cd6:	10 82       	st	Z, r1
			closed[current] = 1, closedSize++;
    1cd8:	e5 ec       	ldi	r30, 0xC5	; 197
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	ec 0f       	add	r30, r28
    1cde:	fd 1f       	adc	r31, r29
    1ce0:	e8 0f       	add	r30, r24
    1ce2:	f9 1f       	adc	r31, r25
    1ce4:	21 e0       	ldi	r18, 0x01	; 1
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	31 83       	std	Z+1, r19	; 0x01
    1cea:	20 83       	st	Z, r18
			if (current == dest) break;		//Path to destination is available
    1cec:	c3 51       	subi	r28, 0x13	; 19
    1cee:	de 4f       	sbci	r29, 0xFE	; 254
    1cf0:	e8 81       	ld	r30, Y
    1cf2:	f9 81       	ldd	r31, Y+1	; 0x01
    1cf4:	cd 5e       	subi	r28, 0xED	; 237
    1cf6:	d1 40       	sbci	r29, 0x01	; 1
    1cf8:	6e 17       	cp	r22, r30
    1cfa:	7f 07       	cpc	r23, r31
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <dStar+0x1cc>
    1cfe:	ad c0       	rjmp	.+346    	; 0x1e5a <dStar+0x326>
		}
		open[source] = 1, openSize++;
		//Scan as long as the open list is not empty
		while (openSize > 0) {
			current = extractMin (open, fCost, size);
			open[current] = 0, openSize--;
    1d00:	08 94       	sec
    1d02:	41 08       	sbc	r4, r1
    1d04:	51 08       	sbc	r5, r1
    1d06:	55 ec       	ldi	r21, 0xC5	; 197
    1d08:	85 2e       	mov	r8, r21
    1d0a:	91 2c       	mov	r9, r1
    1d0c:	8c 0e       	add	r8, r28
    1d0e:	9d 1e       	adc	r9, r29
    1d10:	43 e6       	ldi	r20, 0x63	; 99
    1d12:	a4 2e       	mov	r10, r20
    1d14:	b1 2c       	mov	r11, r1
    1d16:	ac 0e       	add	r10, r28
    1d18:	bd 1e       	adc	r11, r29
    1d1a:	22 e6       	ldi	r18, 0x62	; 98
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	62 9f       	mul	r22, r18
    1d20:	d0 01       	movw	r26, r0
    1d22:	63 9f       	mul	r22, r19
    1d24:	b0 0d       	add	r27, r0
    1d26:	72 9f       	mul	r23, r18
    1d28:	b0 0d       	add	r27, r0
    1d2a:	11 24       	eor	r1, r1
    1d2c:	a6 5b       	subi	r26, 0xB6	; 182
    1d2e:	bb 4f       	sbci	r27, 0xFB	; 251
    1d30:	fe 01       	movw	r30, r28
    1d32:	e9 5d       	subi	r30, 0xD9	; 217
    1d34:	fe 4f       	sbci	r31, 0xFE	; 254
    1d36:	cd 50       	subi	r28, 0x0D	; 13
    1d38:	de 4f       	sbci	r29, 0xFE	; 254
    1d3a:	f9 83       	std	Y+1, r31	; 0x01
    1d3c:	e8 83       	st	Y, r30
    1d3e:	c3 5f       	subi	r28, 0xF3	; 243
    1d40:	d1 40       	sbci	r29, 0x01	; 1
    1d42:	c5 51       	subi	r28, 0x15	; 21
    1d44:	de 4f       	sbci	r29, 0xFE	; 254
    1d46:	c8 80       	ld	r12, Y
    1d48:	d9 80       	ldd	r13, Y+1	; 0x01
    1d4a:	cb 5e       	subi	r28, 0xEB	; 235
    1d4c:	d1 40       	sbci	r29, 0x01	; 1
    1d4e:	8e 01       	movw	r16, r28
    1d50:	07 57       	subi	r16, 0x77	; 119
    1d52:	1e 4f       	sbci	r17, 0xFE	; 254
    1d54:	7e 01       	movw	r14, r28
    1d56:	08 94       	sec
    1d58:	e1 1c       	adc	r14, r1
    1d5a:	f1 1c       	adc	r15, r1
							fCost[i] = fCostCalc(gCost[i], heuris[i]);
							parent[i] = current;
						} else {
							//Otherwise update path if the new one is better than
							//the already discovered path.
							if ((gCost[current] + map[current][i]) < gCost[i]) {
    1d5c:	1f 01       	movw	r2, r30
    1d5e:	28 0e       	add	r2, r24
    1d60:	39 1e       	adc	r3, r25
			open[current] = 0, openSize--;
			closed[current] = 1, closedSize++;
			if (current == dest) break;		//Path to destination is available
			for (int i = 0; i < size; i++) {
				if (map[current][i] != INF) {
					if (closed[i] == 0) {	//if point is not on the closed list
    1d62:	f4 01       	movw	r30, r8
    1d64:	80 81       	ld	r24, Z
    1d66:	91 81       	ldd	r25, Z+1	; 0x01
    1d68:	89 2b       	or	r24, r25
    1d6a:	09 f0       	breq	.+2      	; 0x1d6e <dStar+0x23a>
    1d6c:	42 c0       	rjmp	.+132    	; 0x1df2 <dStar+0x2be>
						if (open[i] == 0) {
    1d6e:	f5 01       	movw	r30, r10
    1d70:	80 81       	ld	r24, Z
    1d72:	91 81       	ldd	r25, Z+1	; 0x01
    1d74:	4d 91       	ld	r20, X+
    1d76:	5c 91       	ld	r21, X
    1d78:	11 97       	sbiw	r26, 0x01	; 1
    1d7a:	89 2b       	or	r24, r25
    1d7c:	e9 f4       	brne	.+58     	; 0x1db8 <dStar+0x284>
							//If point is not in the open as well as the closed
							//list, add the point to open list. Also calculate
							//gCost and fCost. Update parent to current for
							//retracing the path.
							open[i] = 1;
    1d7e:	21 e0       	ldi	r18, 0x01	; 1
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	31 83       	std	Z+1, r19	; 0x01
    1d84:	20 83       	st	Z, r18
							openSize++;
    1d86:	08 94       	sec
    1d88:	41 1c       	adc	r4, r1
    1d8a:	51 1c       	adc	r5, r1
							gCost[i] = gCost[current] + map[current][i];
    1d8c:	f1 01       	movw	r30, r2
    1d8e:	80 81       	ld	r24, Z
    1d90:	91 81       	ldd	r25, Z+1	; 0x01
    1d92:	84 0f       	add	r24, r20
    1d94:	95 1f       	adc	r25, r21
    1d96:	cd 50       	subi	r28, 0x0D	; 13
    1d98:	de 4f       	sbci	r29, 0xFE	; 254
    1d9a:	e8 81       	ld	r30, Y
    1d9c:	f9 81       	ldd	r31, Y+1	; 0x01
    1d9e:	c3 5f       	subi	r28, 0xF3	; 243
    1da0:	d1 40       	sbci	r29, 0x01	; 1
    1da2:	91 83       	std	Z+1, r25	; 0x01
    1da4:	80 83       	st	Z, r24
							fCost[i] = fCostCalc(gCost[i], heuris[i]);
    1da6:	f6 01       	movw	r30, r12
    1da8:	20 81       	ld	r18, Z
    1daa:	31 81       	ldd	r19, Z+1	; 0x01
    1dac:	82 0f       	add	r24, r18
    1dae:	93 1f       	adc	r25, r19
    1db0:	f8 01       	movw	r30, r16
    1db2:	91 83       	std	Z+1, r25	; 0x01
    1db4:	80 83       	st	Z, r24
    1db6:	1a c0       	rjmp	.+52     	; 0x1dec <dStar+0x2b8>
							parent[i] = current;
						} else {
							//Otherwise update path if the new one is better than
							//the already discovered path.
							if ((gCost[current] + map[current][i]) < gCost[i]) {
    1db8:	f1 01       	movw	r30, r2
    1dba:	20 81       	ld	r18, Z
    1dbc:	31 81       	ldd	r19, Z+1	; 0x01
    1dbe:	24 0f       	add	r18, r20
    1dc0:	35 1f       	adc	r19, r21
    1dc2:	cd 50       	subi	r28, 0x0D	; 13
    1dc4:	de 4f       	sbci	r29, 0xFE	; 254
    1dc6:	e8 81       	ld	r30, Y
    1dc8:	f9 81       	ldd	r31, Y+1	; 0x01
    1dca:	c3 5f       	subi	r28, 0xF3	; 243
    1dcc:	d1 40       	sbci	r29, 0x01	; 1
    1dce:	80 81       	ld	r24, Z
    1dd0:	91 81       	ldd	r25, Z+1	; 0x01
    1dd2:	28 17       	cp	r18, r24
    1dd4:	39 07       	cpc	r19, r25
    1dd6:	6c f4       	brge	.+26     	; 0x1df2 <dStar+0x2be>
								gCost[i] = gCost[current] + map[current][i];
    1dd8:	31 83       	std	Z+1, r19	; 0x01
    1dda:	20 83       	st	Z, r18
								fCost[i] = fCostCalc(gCost[i], heuris[i]);
    1ddc:	f6 01       	movw	r30, r12
    1dde:	80 81       	ld	r24, Z
    1de0:	91 81       	ldd	r25, Z+1	; 0x01
    1de2:	28 0f       	add	r18, r24
    1de4:	39 1f       	adc	r19, r25
    1de6:	f8 01       	movw	r30, r16
    1de8:	31 83       	std	Z+1, r19	; 0x01
    1dea:	20 83       	st	Z, r18
								parent[i] = current;
    1dec:	f7 01       	movw	r30, r14
    1dee:	71 83       	std	Z+1, r23	; 0x01
    1df0:	60 83       	st	Z, r22
    1df2:	22 e0       	ldi	r18, 0x02	; 2
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	82 0e       	add	r8, r18
    1df8:	93 1e       	adc	r9, r19
    1dfa:	a2 0e       	add	r10, r18
    1dfc:	b3 1e       	adc	r11, r19
    1dfe:	12 96       	adiw	r26, 0x02	; 2
    1e00:	cd 50       	subi	r28, 0x0D	; 13
    1e02:	de 4f       	sbci	r29, 0xFE	; 254
    1e04:	88 81       	ld	r24, Y
    1e06:	99 81       	ldd	r25, Y+1	; 0x01
    1e08:	c3 5f       	subi	r28, 0xF3	; 243
    1e0a:	d1 40       	sbci	r29, 0x01	; 1
    1e0c:	02 96       	adiw	r24, 0x02	; 2
    1e0e:	cd 50       	subi	r28, 0x0D	; 13
    1e10:	de 4f       	sbci	r29, 0xFE	; 254
    1e12:	99 83       	std	Y+1, r25	; 0x01
    1e14:	88 83       	st	Y, r24
    1e16:	c3 5f       	subi	r28, 0xF3	; 243
    1e18:	d1 40       	sbci	r29, 0x01	; 1
    1e1a:	c2 0e       	add	r12, r18
    1e1c:	d3 1e       	adc	r13, r19
    1e1e:	0e 5f       	subi	r16, 0xFE	; 254
    1e20:	1f 4f       	sbci	r17, 0xFF	; 255
    1e22:	e2 0e       	add	r14, r18
    1e24:	f3 1e       	adc	r15, r19
		while (openSize > 0) {
			current = extractMin (open, fCost, size);
			open[current] = 0, openSize--;
			closed[current] = 1, closedSize++;
			if (current == dest) break;		//Path to destination is available
			for (int i = 0; i < size; i++) {
    1e26:	cf 50       	subi	r28, 0x0F	; 15
    1e28:	de 4f       	sbci	r29, 0xFE	; 254
    1e2a:	e8 81       	ld	r30, Y
    1e2c:	f9 81       	ldd	r31, Y+1	; 0x01
    1e2e:	c1 5f       	subi	r28, 0xF1	; 241
    1e30:	d1 40       	sbci	r29, 0x01	; 1
    1e32:	8e 16       	cp	r8, r30
    1e34:	9f 06       	cpc	r9, r31
    1e36:	09 f0       	breq	.+2      	; 0x1e3a <dStar+0x306>
    1e38:	94 cf       	rjmp	.-216    	; 0x1d62 <dStar+0x22e>
			parent[i] = -1;
			gCost[i] = fCost[i] = INF;
		}
		open[source] = 1, openSize++;
		//Scan as long as the open list is not empty
		while (openSize > 0) {
    1e3a:	41 14       	cp	r4, r1
    1e3c:	51 04       	cpc	r5, r1
    1e3e:	69 f0       	breq	.+26     	; 0x1e5a <dStar+0x326>
    1e40:	33 e6       	ldi	r19, 0x63	; 99
    1e42:	e3 2e       	mov	r14, r19
    1e44:	f1 2c       	mov	r15, r1
    1e46:	ec 0e       	add	r14, r28
    1e48:	fd 1e       	adc	r15, r29
    1e4a:	de 01       	movw	r26, r28
    1e4c:	a7 57       	subi	r26, 0x77	; 119
    1e4e:	be 4f       	sbci	r27, 0xFE	; 254
    1e50:	40 e0       	ldi	r20, 0x00	; 0
    1e52:	50 e0       	ldi	r21, 0x00	; 0
    1e54:	6f ef       	ldi	r22, 0xFF	; 255
    1e56:	7f ef       	ldi	r23, 0xFF	; 255
    1e58:	0f cf       	rjmp	.-482    	; 0x1c78 <dStar+0x144>
						}
					}
				}
			}
		}
		if (parent[dest] == -1) {
    1e5a:	c1 51       	subi	r28, 0x11	; 17
    1e5c:	de 4f       	sbci	r29, 0xFE	; 254
    1e5e:	e8 81       	ld	r30, Y
    1e60:	f9 81       	ldd	r31, Y+1	; 0x01
    1e62:	cf 5e       	subi	r28, 0xEF	; 239
    1e64:	d1 40       	sbci	r29, 0x01	; 1
    1e66:	80 81       	ld	r24, Z
    1e68:	91 81       	ldd	r25, Z+1	; 0x01
    1e6a:	8f 5f       	subi	r24, 0xFF	; 255
    1e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6e:	49 f4       	brne	.+18     	; 0x1e82 <dStar+0x34e>
			//Path cannot exist.
			free (heuris);
    1e70:	c5 51       	subi	r28, 0x15	; 21
    1e72:	de 4f       	sbci	r29, 0xFE	; 254
    1e74:	88 81       	ld	r24, Y
    1e76:	99 81       	ldd	r25, Y+1	; 0x01
    1e78:	cb 5e       	subi	r28, 0xEB	; 235
    1e7a:	d1 40       	sbci	r29, 0x01	; 1
    1e7c:	0e 94 13 17 	call	0x2e26	; 0x2e26 <free>
    1e80:	5f c0       	rjmp	.+190    	; 0x1f40 <dStar+0x40c>
			return source;
		}
		int *pathSize = (int*) malloc (sizeof(int));
    1e82:	82 e0       	ldi	r24, 0x02	; 2
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <malloc>
    1e8a:	8c 01       	movw	r16, r24
		*pathSize = 0;
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	11 82       	std	Z+1, r1	; 0x01
    1e90:	10 82       	st	Z, r1
		int *path = pathFind (parent, dest, pathSize);
    1e92:	ce 01       	movw	r24, r28
    1e94:	01 96       	adiw	r24, 0x01	; 1
    1e96:	c3 51       	subi	r28, 0x13	; 19
    1e98:	de 4f       	sbci	r29, 0xFE	; 254
    1e9a:	68 81       	ld	r22, Y
    1e9c:	79 81       	ldd	r23, Y+1	; 0x01
    1e9e:	cd 5e       	subi	r28, 0xED	; 237
    1ea0:	d1 40       	sbci	r29, 0x01	; 1
    1ea2:	a8 01       	movw	r20, r16
    1ea4:	0e 94 ba 0b 	call	0x1774	; 0x1774 <pathFind>
    1ea8:	fc 01       	movw	r30, r24
		int *result = Move (*path, pathSize);
    1eaa:	80 81       	ld	r24, Z
    1eac:	91 81       	ldd	r25, Z+1	; 0x01
    1eae:	b8 01       	movw	r22, r16
    1eb0:	0e 94 3f 0c 	call	0x187e	; 0x187e <Move>
    1eb4:	7c 01       	movw	r14, r24
		free (heuris);
    1eb6:	c5 51       	subi	r28, 0x15	; 21
    1eb8:	de 4f       	sbci	r29, 0xFE	; 254
    1eba:	88 81       	ld	r24, Y
    1ebc:	99 81       	ldd	r25, Y+1	; 0x01
    1ebe:	cb 5e       	subi	r28, 0xEB	; 235
    1ec0:	d1 40       	sbci	r29, 0x01	; 1
    1ec2:	0e 94 13 17 	call	0x2e26	; 0x2e26 <free>
		free (pathSize);
    1ec6:	c8 01       	movw	r24, r16
    1ec8:	0e 94 13 17 	call	0x2e26	; 0x2e26 <free>
		if (result[0] == 0) {
    1ecc:	f7 01       	movw	r30, r14
    1ece:	80 81       	ld	r24, Z
    1ed0:	91 81       	ldd	r25, Z+1	; 0x01
    1ed2:	89 2b       	or	r24, r25
    1ed4:	31 f4       	brne	.+12     	; 0x1ee2 <dStar+0x3ae>
			free (result);
    1ed6:	c7 01       	movw	r24, r14
    1ed8:	0e 94 13 17 	call	0x2e26	; 0x2e26 <free>
    1edc:	66 24       	eor	r6, r6
    1ede:	77 24       	eor	r7, r7
    1ee0:	2f c0       	rjmp	.+94     	; 0x1f40 <dStar+0x40c>
			return 0;		//Movement complete
		}
		source = result[1];
    1ee2:	f7 01       	movw	r30, r14
    1ee4:	62 80       	ldd	r6, Z+2	; 0x02
    1ee6:	73 80       	ldd	r7, Z+3	; 0x03
		//Updates the map
		map[result[1]][result[2]] = map[result[2]][result[1]] = INF;
    1ee8:	84 81       	ldd	r24, Z+4	; 0x04
    1eea:	95 81       	ldd	r25, Z+5	; 0x05
    1eec:	21 e3       	ldi	r18, 0x31	; 49
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	82 9f       	mul	r24, r18
    1ef2:	f0 01       	movw	r30, r0
    1ef4:	83 9f       	mul	r24, r19
    1ef6:	f0 0d       	add	r31, r0
    1ef8:	92 9f       	mul	r25, r18
    1efa:	f0 0d       	add	r31, r0
    1efc:	11 24       	eor	r1, r1
    1efe:	e6 0d       	add	r30, r6
    1f00:	f7 1d       	adc	r31, r7
    1f02:	ee 0f       	add	r30, r30
    1f04:	ff 1f       	adc	r31, r31
    1f06:	e6 5b       	subi	r30, 0xB6	; 182
    1f08:	fb 4f       	sbci	r31, 0xFB	; 251
    1f0a:	20 ec       	ldi	r18, 0xC0	; 192
    1f0c:	37 e2       	ldi	r19, 0x27	; 39
    1f0e:	31 83       	std	Z+1, r19	; 0x01
    1f10:	20 83       	st	Z, r18
    1f12:	21 e3       	ldi	r18, 0x31	; 49
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	62 9e       	mul	r6, r18
    1f18:	f0 01       	movw	r30, r0
    1f1a:	63 9e       	mul	r6, r19
    1f1c:	f0 0d       	add	r31, r0
    1f1e:	72 9e       	mul	r7, r18
    1f20:	f0 0d       	add	r31, r0
    1f22:	11 24       	eor	r1, r1
    1f24:	e8 0f       	add	r30, r24
    1f26:	f9 1f       	adc	r31, r25
    1f28:	ee 0f       	add	r30, r30
    1f2a:	ff 1f       	adc	r31, r31
    1f2c:	e6 5b       	subi	r30, 0xB6	; 182
    1f2e:	fb 4f       	sbci	r31, 0xFB	; 251
    1f30:	80 ec       	ldi	r24, 0xC0	; 192
    1f32:	97 e2       	ldi	r25, 0x27	; 39
    1f34:	91 83       	std	Z+1, r25	; 0x01
    1f36:	80 83       	st	Z, r24
		free (result);
    1f38:	c7 01       	movw	r24, r14
    1f3a:	0e 94 13 17 	call	0x2e26	; 0x2e26 <free>
    1f3e:	34 ce       	rjmp	.-920    	; 0x1ba8 <dStar+0x74>
	}
}
    1f40:	c3 01       	movw	r24, r6
    1f42:	cc 50       	subi	r28, 0x0C	; 12
    1f44:	de 4f       	sbci	r29, 0xFE	; 254
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	1f 91       	pop	r17
    1f56:	0f 91       	pop	r16
    1f58:	ff 90       	pop	r15
    1f5a:	ef 90       	pop	r14
    1f5c:	df 90       	pop	r13
    1f5e:	cf 90       	pop	r12
    1f60:	bf 90       	pop	r11
    1f62:	af 90       	pop	r10
    1f64:	9f 90       	pop	r9
    1f66:	8f 90       	pop	r8
    1f68:	7f 90       	pop	r7
    1f6a:	6f 90       	pop	r6
    1f6c:	5f 90       	pop	r5
    1f6e:	4f 90       	pop	r4
    1f70:	3f 90       	pop	r3
    1f72:	2f 90       	pop	r2
    1f74:	08 95       	ret

00001f76 <simulation>:
	*Output: NIL
	*Logic: simulates (later changed to actually do it)
			the dStar and holding at node detection.
	*Example Call: simulation(1, 8);
*/
void simulation(int from, int to) {
    1f76:	ef 92       	push	r14
    1f78:	ff 92       	push	r15
    1f7a:	0f 93       	push	r16
    1f7c:	1f 93       	push	r17
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
    1f82:	eb 01       	movw	r28, r22

	signed int success = dStar(from,to);
    1f84:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <dStar>
    1f88:	8c 01       	movw	r16, r24
    1f8a:	60 e7       	ldi	r22, 0x70	; 112
    1f8c:	e6 2e       	mov	r14, r22
    1f8e:	61 e0       	ldi	r22, 0x01	; 1
    1f90:	f6 2e       	mov	r15, r22
    1f92:	46 c0       	rjmp	.+140    	; 0x2020 <simulation+0xaa>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1f94:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1f96:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1f98:	82 b9       	out	0x02, r24	; 2
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1f9a:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char)right_motor;
    1f9e:	10 92 2a 01 	sts	0x012A, r1

	while (sequence_arr[Counter] == 0)
	{
		stop();
		velocity(0,0);
		lcd_cursor(1,1);
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	61 e0       	ldi	r22, 0x01	; 1
    1fa6:	0e 94 50 07 	call	0xea0	; 0xea0 <lcd_cursor>
		lcd_string("   Waiting!!!   ");
    1faa:	88 ea       	ldi	r24, 0xA8	; 168
    1fac:	92 e0       	ldi	r25, 0x02	; 2
    1fae:	0e 94 43 07 	call	0xe86	; 0xe86 <lcd_string>
		lcd_cursor(2,1);
    1fb2:	82 e0       	ldi	r24, 0x02	; 2
    1fb4:	61 e0       	ldi	r22, 0x01	; 1
    1fb6:	0e 94 50 07 	call	0xea0	; 0xea0 <lcd_cursor>
		lcd_string(" For Master Bot!");
    1fba:	89 eb       	ldi	r24, 0xB9	; 185
    1fbc:	92 e0       	ldi	r25, 0x02	; 2
    1fbe:	0e 94 43 07 	call	0xe86	; 0xe86 <lcd_string>
    1fc2:	88 ee       	ldi	r24, 0xE8	; 232
    1fc4:	93 e0       	ldi	r25, 0x03	; 3
    1fc6:	f7 01       	movw	r30, r14
    1fc8:	31 97       	sbiw	r30, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <simulation+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fce:	d9 f7       	brne	.-10     	; 0x1fc6 <simulation+0x50>
		_delay_ms(100);
		if(update < 0) {
    1fd0:	80 91 d2 17 	lds	r24, 0x17D2
    1fd4:	90 91 d3 17 	lds	r25, 0x17D3
    1fd8:	97 ff       	sbrs	r25, 7
    1fda:	22 c0       	rjmp	.+68     	; 0x2020 <simulation+0xaa>
			dStar(to, -update);
    1fdc:	66 27       	eor	r22, r22
    1fde:	77 27       	eor	r23, r23
    1fe0:	68 1b       	sub	r22, r24
    1fe2:	79 0b       	sbc	r23, r25
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <dStar>
			strike();
    1fea:	0e 94 b2 08 	call	0x1164	; 0x1164 <strike>
			++Counter;
    1fee:	80 91 48 04 	lds	r24, 0x0448
    1ff2:	90 91 49 04 	lds	r25, 0x0449
    1ff6:	01 96       	adiw	r24, 0x01	; 1
    1ff8:	90 93 49 04 	sts	0x0449, r25
    1ffc:	80 93 48 04 	sts	0x0448, r24
			UDR0 = Counter;
    2000:	80 93 c6 00 	sts	0x00C6, r24
			dStar(-update, to);
    2004:	80 91 d2 17 	lds	r24, 0x17D2
    2008:	90 91 d3 17 	lds	r25, 0x17D3
    200c:	90 95       	com	r25
    200e:	81 95       	neg	r24
    2010:	9f 4f       	sbci	r25, 0xFF	; 255
    2012:	be 01       	movw	r22, r28
    2014:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <dStar>
			update = 0;
    2018:	10 92 d3 17 	sts	0x17D3, r1
    201c:	10 92 d2 17 	sts	0x17D2, r1
*/
void simulation(int from, int to) {

	signed int success = dStar(from,to);

	while (sequence_arr[Counter] == 0)
    2020:	20 91 a4 17 	lds	r18, 0x17A4
    2024:	30 91 a5 17 	lds	r19, 0x17A5
    2028:	e0 91 48 04 	lds	r30, 0x0448
    202c:	f0 91 49 04 	lds	r31, 0x0449
    2030:	ee 0f       	add	r30, r30
    2032:	ff 1f       	adc	r31, r31
    2034:	e2 0f       	add	r30, r18
    2036:	f3 1f       	adc	r31, r19
    2038:	80 81       	ld	r24, Z
    203a:	91 81       	ldd	r25, Z+1	; 0x01
    203c:	89 2b       	or	r24, r25
    203e:	09 f4       	brne	.+2      	; 0x2042 <simulation+0xcc>
    2040:	a9 cf       	rjmp	.-174    	; 0x1f94 <simulation+0x1e>
			dStar(-update, to);
			update = 0;
		}
	}	

	if (success == 0) {
    2042:	01 15       	cp	r16, r1
    2044:	11 05       	cpc	r17, r1
    2046:	41 f0       	breq	.+16     	; 0x2058 <simulation+0xe2>
		++Counter;
		UDR0 = Counter;
	} else {
		signed int update_for_other = 0;
		signed int index;
		for (int i = 0; i < slave_size; ++i) {
    2048:	40 91 46 04 	lds	r20, 0x0446
    204c:	50 91 47 04 	lds	r21, 0x0447
    2050:	f9 01       	movw	r30, r18
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	17 c0       	rjmp	.+46     	; 0x2086 <simulation+0x110>
			update = 0;
		}
	}	

	if (success == 0) {
		strike();
    2058:	0e 94 b2 08 	call	0x1164	; 0x1164 <strike>

		++Counter;
    205c:	80 91 48 04 	lds	r24, 0x0448
    2060:	90 91 49 04 	lds	r25, 0x0449
    2064:	01 96       	adiw	r24, 0x01	; 1
    2066:	90 93 49 04 	sts	0x0449, r25
    206a:	80 93 48 04 	sts	0x0448, r24
		UDR0 = Counter;
    206e:	80 93 c6 00 	sts	0x00C6, r24
    2072:	18 c0       	rjmp	.+48     	; 0x20a4 <simulation+0x12e>
	} else {
		signed int update_for_other = 0;
		signed int index;
		for (int i = 0; i < slave_size; ++i) {
			if (sequence_arr[i] == to) {
    2074:	81 91       	ld	r24, Z+
    2076:	91 91       	ld	r25, Z+
    2078:	8c 17       	cp	r24, r28
    207a:	9d 07       	cpc	r25, r29
    207c:	11 f4       	brne	.+4      	; 0x2082 <simulation+0x10c>
    207e:	f9 01       	movw	r30, r18
    2080:	05 c0       	rjmp	.+10     	; 0x208c <simulation+0x116>
		++Counter;
		UDR0 = Counter;
	} else {
		signed int update_for_other = 0;
		signed int index;
		for (int i = 0; i < slave_size; ++i) {
    2082:	2f 5f       	subi	r18, 0xFF	; 255
    2084:	3f 4f       	sbci	r19, 0xFF	; 255
    2086:	24 17       	cp	r18, r20
    2088:	35 07       	cpc	r19, r21
    208a:	a4 f3       	brlt	.-24     	; 0x2074 <simulation+0xfe>
				index = i;
				break;
			}
		}
		update_for_other = -to;
		UDR0 = update_for_other;
    208c:	88 27       	eor	r24, r24
    208e:	99 27       	eor	r25, r25
    2090:	8c 1b       	sub	r24, r28
    2092:	9d 0b       	sbc	r25, r29
    2094:	80 93 c6 00 	sts	0x00C6, r24

		arr_slave[index] = success;
    2098:	ee 0f       	add	r30, r30
    209a:	ff 1f       	adc	r31, r31
    209c:	ea 55       	subi	r30, 0x5A	; 90
    209e:	f8 4e       	sbci	r31, 0xE8	; 232
    20a0:	11 83       	std	Z+1, r17	; 0x01
    20a2:	00 83       	st	Z, r16
	}
}
    20a4:	df 91       	pop	r29
    20a6:	cf 91       	pop	r28
    20a8:	1f 91       	pop	r17
    20aa:	0f 91       	pop	r16
    20ac:	ff 90       	pop	r15
    20ae:	ef 90       	pop	r14
    20b0:	08 95       	ret

000020b2 <main>:
	*Output: Success or failure as in 0 for success
	*Logic: Runs the entire program.
	*Example Call: Automatic calling
*/
int main(void)
{
    20b2:	0f 93       	push	r16
    20b4:	1f 93       	push	r17
    20b6:	cf 93       	push	r28
    20b8:	df 93       	push	r29
	initial_devices();
    20ba:	0e 94 10 09 	call	0x1220	; 0x1220 <initial_devices>
	lcd_set_4bit();
    20be:	0e 94 b5 06 	call	0xd6a	; 0xd6a <lcd_set_4bit>
	lcd_init();
    20c2:	0e 94 08 07 	call	0xe10	; 0xe10 <lcd_init>
	servo_3(105);
    20c6:	89 e6       	ldi	r24, 0x69	; 105
    20c8:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <servo_3>
	while(1) {
		if (count == arr_size)
    20cc:	20 91 1f 03 	lds	r18, 0x031F
    20d0:	30 91 20 03 	lds	r19, 0x0320
    20d4:	80 91 44 04 	lds	r24, 0x0444
    20d8:	90 91 45 04 	lds	r25, 0x0445
    20dc:	28 17       	cp	r18, r24
    20de:	39 07       	cpc	r19, r25
    20e0:	09 f0       	breq	.+2      	; 0x20e4 <main+0x32>
    20e2:	6f c0       	rjmp	.+222    	; 0x21c2 <main+0x110>
		{
			lcd_cursor(1,1);
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	61 e0       	ldi	r22, 0x01	; 1
    20e8:	0e 94 50 07 	call	0xea0	; 0xea0 <lcd_cursor>
			lcd_string("      Array     ");
    20ec:	8a ec       	ldi	r24, 0xCA	; 202
    20ee:	92 e0       	ldi	r25, 0x02	; 2
    20f0:	0e 94 43 07 	call	0xe86	; 0xe86 <lcd_string>
			lcd_cursor(2,1);
    20f4:	82 e0       	ldi	r24, 0x02	; 2
    20f6:	61 e0       	ldi	r22, 0x01	; 1
    20f8:	0e 94 50 07 	call	0xea0	; 0xea0 <lcd_cursor>
			lcd_string("   Recieved!!!  ");
    20fc:	8b ed       	ldi	r24, 0xDB	; 219
    20fe:	92 e0       	ldi	r25, 0x02	; 2
    2100:	0e 94 43 07 	call	0xe86	; 0xe86 <lcd_string>
    2104:	80 e2       	ldi	r24, 0x20	; 32
    2106:	9e e4       	ldi	r25, 0x4E	; 78
    2108:	20 e7       	ldi	r18, 0x70	; 112
    210a:	31 e0       	ldi	r19, 0x01	; 1
    210c:	f9 01       	movw	r30, r18
    210e:	31 97       	sbiw	r30, 0x01	; 1
    2110:	f1 f7       	brne	.-4      	; 0x210e <main+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2112:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2114:	d9 f7       	brne	.-10     	; 0x210c <main+0x5a>
			_delay_ms(2000);	
			count++;
    2116:	80 91 1f 03 	lds	r24, 0x031F
    211a:	90 91 20 03 	lds	r25, 0x0320
    211e:	01 96       	adiw	r24, 0x01	; 1
    2120:	90 93 20 03 	sts	0x0320, r25
    2124:	80 93 1f 03 	sts	0x031F, r24
			remove_zero();
    2128:	0e 94 86 08 	call	0x110c	; 0x110c <remove_zero>
    212c:	c6 ea       	ldi	r28, 0xA6	; 166
    212e:	d7 e1       	ldi	r29, 0x17	; 23
    2130:	00 e0       	ldi	r16, 0x00	; 0
    2132:	10 e0       	ldi	r17, 0x00	; 0
    2134:	09 c0       	rjmp	.+18     	; 0x2148 <main+0x96>
			for (int i = 0; i < slave_size - 1; i++) {
				simulation (arr_slave[i],arr_slave[i+1]);
    2136:	0f 5f       	subi	r16, 0xFF	; 255
    2138:	1f 4f       	sbci	r17, 0xFF	; 255
    213a:	6a 81       	ldd	r22, Y+2	; 0x02
    213c:	7b 81       	ldd	r23, Y+3	; 0x03
    213e:	88 81       	ld	r24, Y
    2140:	99 81       	ldd	r25, Y+1	; 0x01
    2142:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <simulation>
    2146:	22 96       	adiw	r28, 0x02	; 2
			lcd_cursor(2,1);
			lcd_string("   Recieved!!!  ");
			_delay_ms(2000);	
			count++;
			remove_zero();
			for (int i = 0; i < slave_size - 1; i++) {
    2148:	80 91 46 04 	lds	r24, 0x0446
    214c:	90 91 47 04 	lds	r25, 0x0447
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	08 17       	cp	r16, r24
    2154:	19 07       	cpc	r17, r25
    2156:	7c f3       	brlt	.-34     	; 0x2136 <main+0x84>
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e7       	ldi	r20, 0x70	; 112
    215e:	51 e0       	ldi	r21, 0x01	; 1
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    2160:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    2162:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    2164:	88 b9       	out	0x08, r24	; 8
    2166:	80 ed       	ldi	r24, 0xD0	; 208
    2168:	97 e0       	ldi	r25, 0x07	; 7
    216a:	fa 01       	movw	r30, r20
    216c:	31 97       	sbiw	r30, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <main+0xba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2170:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2172:	d9 f7       	brne	.-10     	; 0x216a <main+0xb8>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    2174:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    2176:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    2178:	88 b9       	out	0x08, r24	; 8
    217a:	84 ef       	ldi	r24, 0xF4	; 244
    217c:	91 e0       	ldi	r25, 0x01	; 1
    217e:	fa 01       	movw	r30, r20
    2180:	31 97       	sbiw	r30, 0x01	; 1
    2182:	f1 f7       	brne	.-4      	; 0x2180 <main+0xce>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2184:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2186:	d9 f7       	brne	.-10     	; 0x217e <main+0xcc>
			count++;
			remove_zero();
			for (int i = 0; i < slave_size - 1; i++) {
				simulation (arr_slave[i],arr_slave[i+1]);
			}
			for ( int i = 0; i < 20; i++) {
    2188:	2f 5f       	subi	r18, 0xFF	; 255
    218a:	3f 4f       	sbci	r19, 0xFF	; 255
    218c:	24 31       	cpi	r18, 0x14	; 20
    218e:	31 05       	cpc	r19, r1
    2190:	39 f7       	brne	.-50     	; 0x2160 <main+0xae>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    2192:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    2194:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    2196:	82 b9       	out	0x02, r24	; 2
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    2198:	10 92 28 01 	sts	0x0128, r1
	OCR5BL = (unsigned char)right_motor;
    219c:	10 92 2a 01 	sts	0x012A, r1
				_delay_ms(50);
			}
			while(1) {
				stop();
				velocity(0,0);
				lcd_cursor(1,1);
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	61 e0       	ldi	r22, 0x01	; 1
    21a4:	0e 94 50 07 	call	0xea0	; 0xea0 <lcd_cursor>
				lcd_string("      Task      ");
    21a8:	8c ee       	ldi	r24, 0xEC	; 236
    21aa:	92 e0       	ldi	r25, 0x02	; 2
    21ac:	0e 94 43 07 	call	0xe86	; 0xe86 <lcd_string>
				lcd_cursor(2,1);
    21b0:	82 e0       	ldi	r24, 0x02	; 2
    21b2:	61 e0       	ldi	r22, 0x01	; 1
    21b4:	0e 94 50 07 	call	0xea0	; 0xea0 <lcd_cursor>
				lcd_string("  Completed!!!  ");
    21b8:	8d ef       	ldi	r24, 0xFD	; 253
    21ba:	92 e0       	ldi	r25, 0x02	; 2
    21bc:	0e 94 43 07 	call	0xe86	; 0xe86 <lcd_string>
    21c0:	e8 cf       	rjmp	.-48     	; 0x2192 <main+0xe0>
			}
		}
		lcd_cursor(1,1);
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	61 e0       	ldi	r22, 0x01	; 1
    21c6:	0e 94 50 07 	call	0xea0	; 0xea0 <lcd_cursor>
		lcd_string("      Task      ");
    21ca:	8c ee       	ldi	r24, 0xEC	; 236
    21cc:	92 e0       	ldi	r25, 0x02	; 2
    21ce:	0e 94 43 07 	call	0xe86	; 0xe86 <lcd_string>
		lcd_cursor(2,1);
    21d2:	82 e0       	ldi	r24, 0x02	; 2
    21d4:	61 e0       	ldi	r22, 0x01	; 1
    21d6:	0e 94 50 07 	call	0xea0	; 0xea0 <lcd_cursor>
		lcd_string("  Initiated!!!  ");
    21da:	8e e0       	ldi	r24, 0x0E	; 14
    21dc:	93 e0       	ldi	r25, 0x03	; 3
    21de:	0e 94 43 07 	call	0xe86	; 0xe86 <lcd_string>
    21e2:	74 cf       	rjmp	.-280    	; 0x20cc <main+0x1a>

000021e4 <__fixunssfsi>:
    21e4:	ef 92       	push	r14
    21e6:	ff 92       	push	r15
    21e8:	0f 93       	push	r16
    21ea:	1f 93       	push	r17
    21ec:	7b 01       	movw	r14, r22
    21ee:	8c 01       	movw	r16, r24
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	40 e0       	ldi	r20, 0x00	; 0
    21f6:	5f e4       	ldi	r21, 0x4F	; 79
    21f8:	0e 94 74 13 	call	0x26e8	; 0x26e8 <__gesf2>
    21fc:	88 23       	and	r24, r24
    21fe:	8c f0       	brlt	.+34     	; 0x2222 <__stack+0x23>
    2200:	c8 01       	movw	r24, r16
    2202:	b7 01       	movw	r22, r14
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	40 e0       	ldi	r20, 0x00	; 0
    220a:	5f e4       	ldi	r21, 0x4F	; 79
    220c:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <__subsf3>
    2210:	0e 94 a4 13 	call	0x2748	; 0x2748 <__fixsfsi>
    2214:	9b 01       	movw	r18, r22
    2216:	ac 01       	movw	r20, r24
    2218:	20 50       	subi	r18, 0x00	; 0
    221a:	30 40       	sbci	r19, 0x00	; 0
    221c:	40 40       	sbci	r20, 0x00	; 0
    221e:	50 48       	sbci	r21, 0x80	; 128
    2220:	06 c0       	rjmp	.+12     	; 0x222e <__stack+0x2f>
    2222:	c8 01       	movw	r24, r16
    2224:	b7 01       	movw	r22, r14
    2226:	0e 94 a4 13 	call	0x2748	; 0x2748 <__fixsfsi>
    222a:	9b 01       	movw	r18, r22
    222c:	ac 01       	movw	r20, r24
    222e:	b9 01       	movw	r22, r18
    2230:	ca 01       	movw	r24, r20
    2232:	1f 91       	pop	r17
    2234:	0f 91       	pop	r16
    2236:	ff 90       	pop	r15
    2238:	ef 90       	pop	r14
    223a:	08 95       	ret

0000223c <_fpadd_parts>:
    223c:	a0 e0       	ldi	r26, 0x00	; 0
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	e4 e2       	ldi	r30, 0x24	; 36
    2242:	f1 e1       	ldi	r31, 0x11	; 17
    2244:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <__prologue_saves__>
    2248:	dc 01       	movw	r26, r24
    224a:	2b 01       	movw	r4, r22
    224c:	fa 01       	movw	r30, r20
    224e:	9c 91       	ld	r25, X
    2250:	92 30       	cpi	r25, 0x02	; 2
    2252:	08 f4       	brcc	.+2      	; 0x2256 <_fpadd_parts+0x1a>
    2254:	39 c1       	rjmp	.+626    	; 0x24c8 <_fpadd_parts+0x28c>
    2256:	eb 01       	movw	r28, r22
    2258:	88 81       	ld	r24, Y
    225a:	82 30       	cpi	r24, 0x02	; 2
    225c:	08 f4       	brcc	.+2      	; 0x2260 <_fpadd_parts+0x24>
    225e:	33 c1       	rjmp	.+614    	; 0x24c6 <_fpadd_parts+0x28a>
    2260:	94 30       	cpi	r25, 0x04	; 4
    2262:	69 f4       	brne	.+26     	; 0x227e <_fpadd_parts+0x42>
    2264:	84 30       	cpi	r24, 0x04	; 4
    2266:	09 f0       	breq	.+2      	; 0x226a <_fpadd_parts+0x2e>
    2268:	2f c1       	rjmp	.+606    	; 0x24c8 <_fpadd_parts+0x28c>
    226a:	11 96       	adiw	r26, 0x01	; 1
    226c:	9c 91       	ld	r25, X
    226e:	11 97       	sbiw	r26, 0x01	; 1
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	98 17       	cp	r25, r24
    2274:	09 f4       	brne	.+2      	; 0x2278 <_fpadd_parts+0x3c>
    2276:	28 c1       	rjmp	.+592    	; 0x24c8 <_fpadd_parts+0x28c>
    2278:	a1 e2       	ldi	r26, 0x21	; 33
    227a:	b3 e0       	ldi	r27, 0x03	; 3
    227c:	25 c1       	rjmp	.+586    	; 0x24c8 <_fpadd_parts+0x28c>
    227e:	84 30       	cpi	r24, 0x04	; 4
    2280:	09 f4       	brne	.+2      	; 0x2284 <_fpadd_parts+0x48>
    2282:	21 c1       	rjmp	.+578    	; 0x24c6 <_fpadd_parts+0x28a>
    2284:	82 30       	cpi	r24, 0x02	; 2
    2286:	a9 f4       	brne	.+42     	; 0x22b2 <_fpadd_parts+0x76>
    2288:	92 30       	cpi	r25, 0x02	; 2
    228a:	09 f0       	breq	.+2      	; 0x228e <_fpadd_parts+0x52>
    228c:	1d c1       	rjmp	.+570    	; 0x24c8 <_fpadd_parts+0x28c>
    228e:	9a 01       	movw	r18, r20
    2290:	ad 01       	movw	r20, r26
    2292:	88 e0       	ldi	r24, 0x08	; 8
    2294:	ea 01       	movw	r28, r20
    2296:	09 90       	ld	r0, Y+
    2298:	ae 01       	movw	r20, r28
    229a:	e9 01       	movw	r28, r18
    229c:	09 92       	st	Y+, r0
    229e:	9e 01       	movw	r18, r28
    22a0:	81 50       	subi	r24, 0x01	; 1
    22a2:	c1 f7       	brne	.-16     	; 0x2294 <_fpadd_parts+0x58>
    22a4:	e2 01       	movw	r28, r4
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	11 96       	adiw	r26, 0x01	; 1
    22aa:	9c 91       	ld	r25, X
    22ac:	89 23       	and	r24, r25
    22ae:	81 83       	std	Z+1, r24	; 0x01
    22b0:	08 c1       	rjmp	.+528    	; 0x24c2 <_fpadd_parts+0x286>
    22b2:	92 30       	cpi	r25, 0x02	; 2
    22b4:	09 f4       	brne	.+2      	; 0x22b8 <_fpadd_parts+0x7c>
    22b6:	07 c1       	rjmp	.+526    	; 0x24c6 <_fpadd_parts+0x28a>
    22b8:	12 96       	adiw	r26, 0x02	; 2
    22ba:	2d 90       	ld	r2, X+
    22bc:	3c 90       	ld	r3, X
    22be:	13 97       	sbiw	r26, 0x03	; 3
    22c0:	eb 01       	movw	r28, r22
    22c2:	8a 81       	ldd	r24, Y+2	; 0x02
    22c4:	9b 81       	ldd	r25, Y+3	; 0x03
    22c6:	14 96       	adiw	r26, 0x04	; 4
    22c8:	ad 90       	ld	r10, X+
    22ca:	bd 90       	ld	r11, X+
    22cc:	cd 90       	ld	r12, X+
    22ce:	dc 90       	ld	r13, X
    22d0:	17 97       	sbiw	r26, 0x07	; 7
    22d2:	ec 80       	ldd	r14, Y+4	; 0x04
    22d4:	fd 80       	ldd	r15, Y+5	; 0x05
    22d6:	0e 81       	ldd	r16, Y+6	; 0x06
    22d8:	1f 81       	ldd	r17, Y+7	; 0x07
    22da:	91 01       	movw	r18, r2
    22dc:	28 1b       	sub	r18, r24
    22de:	39 0b       	sbc	r19, r25
    22e0:	b9 01       	movw	r22, r18
    22e2:	37 ff       	sbrs	r19, 7
    22e4:	04 c0       	rjmp	.+8      	; 0x22ee <_fpadd_parts+0xb2>
    22e6:	66 27       	eor	r22, r22
    22e8:	77 27       	eor	r23, r23
    22ea:	62 1b       	sub	r22, r18
    22ec:	73 0b       	sbc	r23, r19
    22ee:	60 32       	cpi	r22, 0x20	; 32
    22f0:	71 05       	cpc	r23, r1
    22f2:	0c f0       	brlt	.+2      	; 0x22f6 <_fpadd_parts+0xba>
    22f4:	61 c0       	rjmp	.+194    	; 0x23b8 <_fpadd_parts+0x17c>
    22f6:	12 16       	cp	r1, r18
    22f8:	13 06       	cpc	r1, r19
    22fa:	6c f5       	brge	.+90     	; 0x2356 <_fpadd_parts+0x11a>
    22fc:	37 01       	movw	r6, r14
    22fe:	48 01       	movw	r8, r16
    2300:	06 2e       	mov	r0, r22
    2302:	04 c0       	rjmp	.+8      	; 0x230c <_fpadd_parts+0xd0>
    2304:	96 94       	lsr	r9
    2306:	87 94       	ror	r8
    2308:	77 94       	ror	r7
    230a:	67 94       	ror	r6
    230c:	0a 94       	dec	r0
    230e:	d2 f7       	brpl	.-12     	; 0x2304 <_fpadd_parts+0xc8>
    2310:	21 e0       	ldi	r18, 0x01	; 1
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e0       	ldi	r20, 0x00	; 0
    2316:	50 e0       	ldi	r21, 0x00	; 0
    2318:	04 c0       	rjmp	.+8      	; 0x2322 <_fpadd_parts+0xe6>
    231a:	22 0f       	add	r18, r18
    231c:	33 1f       	adc	r19, r19
    231e:	44 1f       	adc	r20, r20
    2320:	55 1f       	adc	r21, r21
    2322:	6a 95       	dec	r22
    2324:	d2 f7       	brpl	.-12     	; 0x231a <_fpadd_parts+0xde>
    2326:	21 50       	subi	r18, 0x01	; 1
    2328:	30 40       	sbci	r19, 0x00	; 0
    232a:	40 40       	sbci	r20, 0x00	; 0
    232c:	50 40       	sbci	r21, 0x00	; 0
    232e:	2e 21       	and	r18, r14
    2330:	3f 21       	and	r19, r15
    2332:	40 23       	and	r20, r16
    2334:	51 23       	and	r21, r17
    2336:	21 15       	cp	r18, r1
    2338:	31 05       	cpc	r19, r1
    233a:	41 05       	cpc	r20, r1
    233c:	51 05       	cpc	r21, r1
    233e:	21 f0       	breq	.+8      	; 0x2348 <_fpadd_parts+0x10c>
    2340:	21 e0       	ldi	r18, 0x01	; 1
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	50 e0       	ldi	r21, 0x00	; 0
    2348:	79 01       	movw	r14, r18
    234a:	8a 01       	movw	r16, r20
    234c:	e6 28       	or	r14, r6
    234e:	f7 28       	or	r15, r7
    2350:	08 29       	or	r16, r8
    2352:	19 29       	or	r17, r9
    2354:	3c c0       	rjmp	.+120    	; 0x23ce <_fpadd_parts+0x192>
    2356:	23 2b       	or	r18, r19
    2358:	d1 f1       	breq	.+116    	; 0x23ce <_fpadd_parts+0x192>
    235a:	26 0e       	add	r2, r22
    235c:	37 1e       	adc	r3, r23
    235e:	35 01       	movw	r6, r10
    2360:	46 01       	movw	r8, r12
    2362:	06 2e       	mov	r0, r22
    2364:	04 c0       	rjmp	.+8      	; 0x236e <_fpadd_parts+0x132>
    2366:	96 94       	lsr	r9
    2368:	87 94       	ror	r8
    236a:	77 94       	ror	r7
    236c:	67 94       	ror	r6
    236e:	0a 94       	dec	r0
    2370:	d2 f7       	brpl	.-12     	; 0x2366 <_fpadd_parts+0x12a>
    2372:	21 e0       	ldi	r18, 0x01	; 1
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e0       	ldi	r20, 0x00	; 0
    2378:	50 e0       	ldi	r21, 0x00	; 0
    237a:	04 c0       	rjmp	.+8      	; 0x2384 <_fpadd_parts+0x148>
    237c:	22 0f       	add	r18, r18
    237e:	33 1f       	adc	r19, r19
    2380:	44 1f       	adc	r20, r20
    2382:	55 1f       	adc	r21, r21
    2384:	6a 95       	dec	r22
    2386:	d2 f7       	brpl	.-12     	; 0x237c <_fpadd_parts+0x140>
    2388:	21 50       	subi	r18, 0x01	; 1
    238a:	30 40       	sbci	r19, 0x00	; 0
    238c:	40 40       	sbci	r20, 0x00	; 0
    238e:	50 40       	sbci	r21, 0x00	; 0
    2390:	2a 21       	and	r18, r10
    2392:	3b 21       	and	r19, r11
    2394:	4c 21       	and	r20, r12
    2396:	5d 21       	and	r21, r13
    2398:	21 15       	cp	r18, r1
    239a:	31 05       	cpc	r19, r1
    239c:	41 05       	cpc	r20, r1
    239e:	51 05       	cpc	r21, r1
    23a0:	21 f0       	breq	.+8      	; 0x23aa <_fpadd_parts+0x16e>
    23a2:	21 e0       	ldi	r18, 0x01	; 1
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	40 e0       	ldi	r20, 0x00	; 0
    23a8:	50 e0       	ldi	r21, 0x00	; 0
    23aa:	59 01       	movw	r10, r18
    23ac:	6a 01       	movw	r12, r20
    23ae:	a6 28       	or	r10, r6
    23b0:	b7 28       	or	r11, r7
    23b2:	c8 28       	or	r12, r8
    23b4:	d9 28       	or	r13, r9
    23b6:	0b c0       	rjmp	.+22     	; 0x23ce <_fpadd_parts+0x192>
    23b8:	82 15       	cp	r24, r2
    23ba:	93 05       	cpc	r25, r3
    23bc:	2c f0       	brlt	.+10     	; 0x23c8 <_fpadd_parts+0x18c>
    23be:	1c 01       	movw	r2, r24
    23c0:	aa 24       	eor	r10, r10
    23c2:	bb 24       	eor	r11, r11
    23c4:	65 01       	movw	r12, r10
    23c6:	03 c0       	rjmp	.+6      	; 0x23ce <_fpadd_parts+0x192>
    23c8:	ee 24       	eor	r14, r14
    23ca:	ff 24       	eor	r15, r15
    23cc:	87 01       	movw	r16, r14
    23ce:	11 96       	adiw	r26, 0x01	; 1
    23d0:	9c 91       	ld	r25, X
    23d2:	d2 01       	movw	r26, r4
    23d4:	11 96       	adiw	r26, 0x01	; 1
    23d6:	8c 91       	ld	r24, X
    23d8:	98 17       	cp	r25, r24
    23da:	09 f4       	brne	.+2      	; 0x23de <_fpadd_parts+0x1a2>
    23dc:	45 c0       	rjmp	.+138    	; 0x2468 <_fpadd_parts+0x22c>
    23de:	99 23       	and	r25, r25
    23e0:	39 f0       	breq	.+14     	; 0x23f0 <_fpadd_parts+0x1b4>
    23e2:	a8 01       	movw	r20, r16
    23e4:	97 01       	movw	r18, r14
    23e6:	2a 19       	sub	r18, r10
    23e8:	3b 09       	sbc	r19, r11
    23ea:	4c 09       	sbc	r20, r12
    23ec:	5d 09       	sbc	r21, r13
    23ee:	06 c0       	rjmp	.+12     	; 0x23fc <_fpadd_parts+0x1c0>
    23f0:	a6 01       	movw	r20, r12
    23f2:	95 01       	movw	r18, r10
    23f4:	2e 19       	sub	r18, r14
    23f6:	3f 09       	sbc	r19, r15
    23f8:	40 0b       	sbc	r20, r16
    23fa:	51 0b       	sbc	r21, r17
    23fc:	57 fd       	sbrc	r21, 7
    23fe:	08 c0       	rjmp	.+16     	; 0x2410 <_fpadd_parts+0x1d4>
    2400:	11 82       	std	Z+1, r1	; 0x01
    2402:	33 82       	std	Z+3, r3	; 0x03
    2404:	22 82       	std	Z+2, r2	; 0x02
    2406:	24 83       	std	Z+4, r18	; 0x04
    2408:	35 83       	std	Z+5, r19	; 0x05
    240a:	46 83       	std	Z+6, r20	; 0x06
    240c:	57 83       	std	Z+7, r21	; 0x07
    240e:	1d c0       	rjmp	.+58     	; 0x244a <_fpadd_parts+0x20e>
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	81 83       	std	Z+1, r24	; 0x01
    2414:	33 82       	std	Z+3, r3	; 0x03
    2416:	22 82       	std	Z+2, r2	; 0x02
    2418:	88 27       	eor	r24, r24
    241a:	99 27       	eor	r25, r25
    241c:	dc 01       	movw	r26, r24
    241e:	82 1b       	sub	r24, r18
    2420:	93 0b       	sbc	r25, r19
    2422:	a4 0b       	sbc	r26, r20
    2424:	b5 0b       	sbc	r27, r21
    2426:	84 83       	std	Z+4, r24	; 0x04
    2428:	95 83       	std	Z+5, r25	; 0x05
    242a:	a6 83       	std	Z+6, r26	; 0x06
    242c:	b7 83       	std	Z+7, r27	; 0x07
    242e:	0d c0       	rjmp	.+26     	; 0x244a <_fpadd_parts+0x20e>
    2430:	22 0f       	add	r18, r18
    2432:	33 1f       	adc	r19, r19
    2434:	44 1f       	adc	r20, r20
    2436:	55 1f       	adc	r21, r21
    2438:	24 83       	std	Z+4, r18	; 0x04
    243a:	35 83       	std	Z+5, r19	; 0x05
    243c:	46 83       	std	Z+6, r20	; 0x06
    243e:	57 83       	std	Z+7, r21	; 0x07
    2440:	82 81       	ldd	r24, Z+2	; 0x02
    2442:	93 81       	ldd	r25, Z+3	; 0x03
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	93 83       	std	Z+3, r25	; 0x03
    2448:	82 83       	std	Z+2, r24	; 0x02
    244a:	24 81       	ldd	r18, Z+4	; 0x04
    244c:	35 81       	ldd	r19, Z+5	; 0x05
    244e:	46 81       	ldd	r20, Z+6	; 0x06
    2450:	57 81       	ldd	r21, Z+7	; 0x07
    2452:	da 01       	movw	r26, r20
    2454:	c9 01       	movw	r24, r18
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	a1 09       	sbc	r26, r1
    245a:	b1 09       	sbc	r27, r1
    245c:	8f 5f       	subi	r24, 0xFF	; 255
    245e:	9f 4f       	sbci	r25, 0xFF	; 255
    2460:	af 4f       	sbci	r26, 0xFF	; 255
    2462:	bf 43       	sbci	r27, 0x3F	; 63
    2464:	28 f3       	brcs	.-54     	; 0x2430 <_fpadd_parts+0x1f4>
    2466:	0b c0       	rjmp	.+22     	; 0x247e <_fpadd_parts+0x242>
    2468:	91 83       	std	Z+1, r25	; 0x01
    246a:	33 82       	std	Z+3, r3	; 0x03
    246c:	22 82       	std	Z+2, r2	; 0x02
    246e:	ea 0c       	add	r14, r10
    2470:	fb 1c       	adc	r15, r11
    2472:	0c 1d       	adc	r16, r12
    2474:	1d 1d       	adc	r17, r13
    2476:	e4 82       	std	Z+4, r14	; 0x04
    2478:	f5 82       	std	Z+5, r15	; 0x05
    247a:	06 83       	std	Z+6, r16	; 0x06
    247c:	17 83       	std	Z+7, r17	; 0x07
    247e:	83 e0       	ldi	r24, 0x03	; 3
    2480:	80 83       	st	Z, r24
    2482:	24 81       	ldd	r18, Z+4	; 0x04
    2484:	35 81       	ldd	r19, Z+5	; 0x05
    2486:	46 81       	ldd	r20, Z+6	; 0x06
    2488:	57 81       	ldd	r21, Z+7	; 0x07
    248a:	57 ff       	sbrs	r21, 7
    248c:	1a c0       	rjmp	.+52     	; 0x24c2 <_fpadd_parts+0x286>
    248e:	c9 01       	movw	r24, r18
    2490:	aa 27       	eor	r26, r26
    2492:	97 fd       	sbrc	r25, 7
    2494:	a0 95       	com	r26
    2496:	ba 2f       	mov	r27, r26
    2498:	81 70       	andi	r24, 0x01	; 1
    249a:	90 70       	andi	r25, 0x00	; 0
    249c:	a0 70       	andi	r26, 0x00	; 0
    249e:	b0 70       	andi	r27, 0x00	; 0
    24a0:	56 95       	lsr	r21
    24a2:	47 95       	ror	r20
    24a4:	37 95       	ror	r19
    24a6:	27 95       	ror	r18
    24a8:	82 2b       	or	r24, r18
    24aa:	93 2b       	or	r25, r19
    24ac:	a4 2b       	or	r26, r20
    24ae:	b5 2b       	or	r27, r21
    24b0:	84 83       	std	Z+4, r24	; 0x04
    24b2:	95 83       	std	Z+5, r25	; 0x05
    24b4:	a6 83       	std	Z+6, r26	; 0x06
    24b6:	b7 83       	std	Z+7, r27	; 0x07
    24b8:	82 81       	ldd	r24, Z+2	; 0x02
    24ba:	93 81       	ldd	r25, Z+3	; 0x03
    24bc:	01 96       	adiw	r24, 0x01	; 1
    24be:	93 83       	std	Z+3, r25	; 0x03
    24c0:	82 83       	std	Z+2, r24	; 0x02
    24c2:	df 01       	movw	r26, r30
    24c4:	01 c0       	rjmp	.+2      	; 0x24c8 <_fpadd_parts+0x28c>
    24c6:	d2 01       	movw	r26, r4
    24c8:	cd 01       	movw	r24, r26
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	e2 e1       	ldi	r30, 0x12	; 18
    24d0:	0c 94 9b 17 	jmp	0x2f36	; 0x2f36 <__epilogue_restores__>

000024d4 <__subsf3>:
    24d4:	a0 e2       	ldi	r26, 0x20	; 32
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	e0 e7       	ldi	r30, 0x70	; 112
    24da:	f2 e1       	ldi	r31, 0x12	; 18
    24dc:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__prologue_saves__+0x18>
    24e0:	69 83       	std	Y+1, r22	; 0x01
    24e2:	7a 83       	std	Y+2, r23	; 0x02
    24e4:	8b 83       	std	Y+3, r24	; 0x03
    24e6:	9c 83       	std	Y+4, r25	; 0x04
    24e8:	2d 83       	std	Y+5, r18	; 0x05
    24ea:	3e 83       	std	Y+6, r19	; 0x06
    24ec:	4f 83       	std	Y+7, r20	; 0x07
    24ee:	58 87       	std	Y+8, r21	; 0x08
    24f0:	e9 e0       	ldi	r30, 0x09	; 9
    24f2:	ee 2e       	mov	r14, r30
    24f4:	f1 2c       	mov	r15, r1
    24f6:	ec 0e       	add	r14, r28
    24f8:	fd 1e       	adc	r15, r29
    24fa:	ce 01       	movw	r24, r28
    24fc:	01 96       	adiw	r24, 0x01	; 1
    24fe:	b7 01       	movw	r22, r14
    2500:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__unpack_f>
    2504:	8e 01       	movw	r16, r28
    2506:	0f 5e       	subi	r16, 0xEF	; 239
    2508:	1f 4f       	sbci	r17, 0xFF	; 255
    250a:	ce 01       	movw	r24, r28
    250c:	05 96       	adiw	r24, 0x05	; 5
    250e:	b8 01       	movw	r22, r16
    2510:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__unpack_f>
    2514:	8a 89       	ldd	r24, Y+18	; 0x12
    2516:	91 e0       	ldi	r25, 0x01	; 1
    2518:	89 27       	eor	r24, r25
    251a:	8a 8b       	std	Y+18, r24	; 0x12
    251c:	c7 01       	movw	r24, r14
    251e:	b8 01       	movw	r22, r16
    2520:	ae 01       	movw	r20, r28
    2522:	47 5e       	subi	r20, 0xE7	; 231
    2524:	5f 4f       	sbci	r21, 0xFF	; 255
    2526:	0e 94 1e 11 	call	0x223c	; 0x223c <_fpadd_parts>
    252a:	0e 94 c0 14 	call	0x2980	; 0x2980 <__pack_f>
    252e:	a0 96       	adiw	r28, 0x20	; 32
    2530:	e6 e0       	ldi	r30, 0x06	; 6
    2532:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__epilogue_restores__+0x18>

00002536 <__addsf3>:
    2536:	a0 e2       	ldi	r26, 0x20	; 32
    2538:	b0 e0       	ldi	r27, 0x00	; 0
    253a:	e1 ea       	ldi	r30, 0xA1	; 161
    253c:	f2 e1       	ldi	r31, 0x12	; 18
    253e:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__prologue_saves__+0x18>
    2542:	69 83       	std	Y+1, r22	; 0x01
    2544:	7a 83       	std	Y+2, r23	; 0x02
    2546:	8b 83       	std	Y+3, r24	; 0x03
    2548:	9c 83       	std	Y+4, r25	; 0x04
    254a:	2d 83       	std	Y+5, r18	; 0x05
    254c:	3e 83       	std	Y+6, r19	; 0x06
    254e:	4f 83       	std	Y+7, r20	; 0x07
    2550:	58 87       	std	Y+8, r21	; 0x08
    2552:	f9 e0       	ldi	r31, 0x09	; 9
    2554:	ef 2e       	mov	r14, r31
    2556:	f1 2c       	mov	r15, r1
    2558:	ec 0e       	add	r14, r28
    255a:	fd 1e       	adc	r15, r29
    255c:	ce 01       	movw	r24, r28
    255e:	01 96       	adiw	r24, 0x01	; 1
    2560:	b7 01       	movw	r22, r14
    2562:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__unpack_f>
    2566:	8e 01       	movw	r16, r28
    2568:	0f 5e       	subi	r16, 0xEF	; 239
    256a:	1f 4f       	sbci	r17, 0xFF	; 255
    256c:	ce 01       	movw	r24, r28
    256e:	05 96       	adiw	r24, 0x05	; 5
    2570:	b8 01       	movw	r22, r16
    2572:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__unpack_f>
    2576:	c7 01       	movw	r24, r14
    2578:	b8 01       	movw	r22, r16
    257a:	ae 01       	movw	r20, r28
    257c:	47 5e       	subi	r20, 0xE7	; 231
    257e:	5f 4f       	sbci	r21, 0xFF	; 255
    2580:	0e 94 1e 11 	call	0x223c	; 0x223c <_fpadd_parts>
    2584:	0e 94 c0 14 	call	0x2980	; 0x2980 <__pack_f>
    2588:	a0 96       	adiw	r28, 0x20	; 32
    258a:	e6 e0       	ldi	r30, 0x06	; 6
    258c:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__epilogue_restores__+0x18>

00002590 <__divsf3>:
    2590:	a8 e1       	ldi	r26, 0x18	; 24
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	ee ec       	ldi	r30, 0xCE	; 206
    2596:	f2 e1       	ldi	r31, 0x12	; 18
    2598:	0c 94 87 17 	jmp	0x2f0e	; 0x2f0e <__prologue_saves__+0x10>
    259c:	69 83       	std	Y+1, r22	; 0x01
    259e:	7a 83       	std	Y+2, r23	; 0x02
    25a0:	8b 83       	std	Y+3, r24	; 0x03
    25a2:	9c 83       	std	Y+4, r25	; 0x04
    25a4:	2d 83       	std	Y+5, r18	; 0x05
    25a6:	3e 83       	std	Y+6, r19	; 0x06
    25a8:	4f 83       	std	Y+7, r20	; 0x07
    25aa:	58 87       	std	Y+8, r21	; 0x08
    25ac:	b9 e0       	ldi	r27, 0x09	; 9
    25ae:	eb 2e       	mov	r14, r27
    25b0:	f1 2c       	mov	r15, r1
    25b2:	ec 0e       	add	r14, r28
    25b4:	fd 1e       	adc	r15, r29
    25b6:	ce 01       	movw	r24, r28
    25b8:	01 96       	adiw	r24, 0x01	; 1
    25ba:	b7 01       	movw	r22, r14
    25bc:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__unpack_f>
    25c0:	8e 01       	movw	r16, r28
    25c2:	0f 5e       	subi	r16, 0xEF	; 239
    25c4:	1f 4f       	sbci	r17, 0xFF	; 255
    25c6:	ce 01       	movw	r24, r28
    25c8:	05 96       	adiw	r24, 0x05	; 5
    25ca:	b8 01       	movw	r22, r16
    25cc:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__unpack_f>
    25d0:	29 85       	ldd	r18, Y+9	; 0x09
    25d2:	22 30       	cpi	r18, 0x02	; 2
    25d4:	08 f4       	brcc	.+2      	; 0x25d8 <__divsf3+0x48>
    25d6:	7e c0       	rjmp	.+252    	; 0x26d4 <__divsf3+0x144>
    25d8:	39 89       	ldd	r19, Y+17	; 0x11
    25da:	32 30       	cpi	r19, 0x02	; 2
    25dc:	10 f4       	brcc	.+4      	; 0x25e2 <__divsf3+0x52>
    25de:	b8 01       	movw	r22, r16
    25e0:	7c c0       	rjmp	.+248    	; 0x26da <__divsf3+0x14a>
    25e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    25e4:	9a 89       	ldd	r25, Y+18	; 0x12
    25e6:	89 27       	eor	r24, r25
    25e8:	8a 87       	std	Y+10, r24	; 0x0a
    25ea:	24 30       	cpi	r18, 0x04	; 4
    25ec:	11 f0       	breq	.+4      	; 0x25f2 <__divsf3+0x62>
    25ee:	22 30       	cpi	r18, 0x02	; 2
    25f0:	31 f4       	brne	.+12     	; 0x25fe <__divsf3+0x6e>
    25f2:	23 17       	cp	r18, r19
    25f4:	09 f0       	breq	.+2      	; 0x25f8 <__divsf3+0x68>
    25f6:	6e c0       	rjmp	.+220    	; 0x26d4 <__divsf3+0x144>
    25f8:	61 e2       	ldi	r22, 0x21	; 33
    25fa:	73 e0       	ldi	r23, 0x03	; 3
    25fc:	6e c0       	rjmp	.+220    	; 0x26da <__divsf3+0x14a>
    25fe:	34 30       	cpi	r19, 0x04	; 4
    2600:	39 f4       	brne	.+14     	; 0x2610 <__divsf3+0x80>
    2602:	1d 86       	std	Y+13, r1	; 0x0d
    2604:	1e 86       	std	Y+14, r1	; 0x0e
    2606:	1f 86       	std	Y+15, r1	; 0x0f
    2608:	18 8a       	std	Y+16, r1	; 0x10
    260a:	1c 86       	std	Y+12, r1	; 0x0c
    260c:	1b 86       	std	Y+11, r1	; 0x0b
    260e:	04 c0       	rjmp	.+8      	; 0x2618 <__divsf3+0x88>
    2610:	32 30       	cpi	r19, 0x02	; 2
    2612:	21 f4       	brne	.+8      	; 0x261c <__divsf3+0x8c>
    2614:	84 e0       	ldi	r24, 0x04	; 4
    2616:	89 87       	std	Y+9, r24	; 0x09
    2618:	b7 01       	movw	r22, r14
    261a:	5f c0       	rjmp	.+190    	; 0x26da <__divsf3+0x14a>
    261c:	2b 85       	ldd	r18, Y+11	; 0x0b
    261e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2620:	8b 89       	ldd	r24, Y+19	; 0x13
    2622:	9c 89       	ldd	r25, Y+20	; 0x14
    2624:	28 1b       	sub	r18, r24
    2626:	39 0b       	sbc	r19, r25
    2628:	3c 87       	std	Y+12, r19	; 0x0c
    262a:	2b 87       	std	Y+11, r18	; 0x0b
    262c:	ed 84       	ldd	r14, Y+13	; 0x0d
    262e:	fe 84       	ldd	r15, Y+14	; 0x0e
    2630:	0f 85       	ldd	r16, Y+15	; 0x0f
    2632:	18 89       	ldd	r17, Y+16	; 0x10
    2634:	ad 88       	ldd	r10, Y+21	; 0x15
    2636:	be 88       	ldd	r11, Y+22	; 0x16
    2638:	cf 88       	ldd	r12, Y+23	; 0x17
    263a:	d8 8c       	ldd	r13, Y+24	; 0x18
    263c:	ea 14       	cp	r14, r10
    263e:	fb 04       	cpc	r15, r11
    2640:	0c 05       	cpc	r16, r12
    2642:	1d 05       	cpc	r17, r13
    2644:	40 f4       	brcc	.+16     	; 0x2656 <__divsf3+0xc6>
    2646:	ee 0c       	add	r14, r14
    2648:	ff 1c       	adc	r15, r15
    264a:	00 1f       	adc	r16, r16
    264c:	11 1f       	adc	r17, r17
    264e:	21 50       	subi	r18, 0x01	; 1
    2650:	30 40       	sbci	r19, 0x00	; 0
    2652:	3c 87       	std	Y+12, r19	; 0x0c
    2654:	2b 87       	std	Y+11, r18	; 0x0b
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	40 e0       	ldi	r20, 0x00	; 0
    265c:	50 e0       	ldi	r21, 0x00	; 0
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	a0 e0       	ldi	r26, 0x00	; 0
    2664:	b0 e4       	ldi	r27, 0x40	; 64
    2666:	60 e0       	ldi	r22, 0x00	; 0
    2668:	70 e0       	ldi	r23, 0x00	; 0
    266a:	ea 14       	cp	r14, r10
    266c:	fb 04       	cpc	r15, r11
    266e:	0c 05       	cpc	r16, r12
    2670:	1d 05       	cpc	r17, r13
    2672:	40 f0       	brcs	.+16     	; 0x2684 <__divsf3+0xf4>
    2674:	28 2b       	or	r18, r24
    2676:	39 2b       	or	r19, r25
    2678:	4a 2b       	or	r20, r26
    267a:	5b 2b       	or	r21, r27
    267c:	ea 18       	sub	r14, r10
    267e:	fb 08       	sbc	r15, r11
    2680:	0c 09       	sbc	r16, r12
    2682:	1d 09       	sbc	r17, r13
    2684:	b6 95       	lsr	r27
    2686:	a7 95       	ror	r26
    2688:	97 95       	ror	r25
    268a:	87 95       	ror	r24
    268c:	ee 0c       	add	r14, r14
    268e:	ff 1c       	adc	r15, r15
    2690:	00 1f       	adc	r16, r16
    2692:	11 1f       	adc	r17, r17
    2694:	6f 5f       	subi	r22, 0xFF	; 255
    2696:	7f 4f       	sbci	r23, 0xFF	; 255
    2698:	6f 31       	cpi	r22, 0x1F	; 31
    269a:	71 05       	cpc	r23, r1
    269c:	31 f7       	brne	.-52     	; 0x266a <__divsf3+0xda>
    269e:	da 01       	movw	r26, r20
    26a0:	c9 01       	movw	r24, r18
    26a2:	8f 77       	andi	r24, 0x7F	; 127
    26a4:	90 70       	andi	r25, 0x00	; 0
    26a6:	a0 70       	andi	r26, 0x00	; 0
    26a8:	b0 70       	andi	r27, 0x00	; 0
    26aa:	80 34       	cpi	r24, 0x40	; 64
    26ac:	91 05       	cpc	r25, r1
    26ae:	a1 05       	cpc	r26, r1
    26b0:	b1 05       	cpc	r27, r1
    26b2:	61 f4       	brne	.+24     	; 0x26cc <__divsf3+0x13c>
    26b4:	27 fd       	sbrc	r18, 7
    26b6:	0a c0       	rjmp	.+20     	; 0x26cc <__divsf3+0x13c>
    26b8:	e1 14       	cp	r14, r1
    26ba:	f1 04       	cpc	r15, r1
    26bc:	01 05       	cpc	r16, r1
    26be:	11 05       	cpc	r17, r1
    26c0:	29 f0       	breq	.+10     	; 0x26cc <__divsf3+0x13c>
    26c2:	20 5c       	subi	r18, 0xC0	; 192
    26c4:	3f 4f       	sbci	r19, 0xFF	; 255
    26c6:	4f 4f       	sbci	r20, 0xFF	; 255
    26c8:	5f 4f       	sbci	r21, 0xFF	; 255
    26ca:	20 78       	andi	r18, 0x80	; 128
    26cc:	2d 87       	std	Y+13, r18	; 0x0d
    26ce:	3e 87       	std	Y+14, r19	; 0x0e
    26d0:	4f 87       	std	Y+15, r20	; 0x0f
    26d2:	58 8b       	std	Y+16, r21	; 0x10
    26d4:	be 01       	movw	r22, r28
    26d6:	67 5f       	subi	r22, 0xF7	; 247
    26d8:	7f 4f       	sbci	r23, 0xFF	; 255
    26da:	cb 01       	movw	r24, r22
    26dc:	0e 94 c0 14 	call	0x2980	; 0x2980 <__pack_f>
    26e0:	68 96       	adiw	r28, 0x18	; 24
    26e2:	ea e0       	ldi	r30, 0x0A	; 10
    26e4:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <__epilogue_restores__+0x10>

000026e8 <__gesf2>:
    26e8:	a8 e1       	ldi	r26, 0x18	; 24
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	ea e7       	ldi	r30, 0x7A	; 122
    26ee:	f3 e1       	ldi	r31, 0x13	; 19
    26f0:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__prologue_saves__+0x18>
    26f4:	69 83       	std	Y+1, r22	; 0x01
    26f6:	7a 83       	std	Y+2, r23	; 0x02
    26f8:	8b 83       	std	Y+3, r24	; 0x03
    26fa:	9c 83       	std	Y+4, r25	; 0x04
    26fc:	2d 83       	std	Y+5, r18	; 0x05
    26fe:	3e 83       	std	Y+6, r19	; 0x06
    2700:	4f 83       	std	Y+7, r20	; 0x07
    2702:	58 87       	std	Y+8, r21	; 0x08
    2704:	89 e0       	ldi	r24, 0x09	; 9
    2706:	e8 2e       	mov	r14, r24
    2708:	f1 2c       	mov	r15, r1
    270a:	ec 0e       	add	r14, r28
    270c:	fd 1e       	adc	r15, r29
    270e:	ce 01       	movw	r24, r28
    2710:	01 96       	adiw	r24, 0x01	; 1
    2712:	b7 01       	movw	r22, r14
    2714:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__unpack_f>
    2718:	8e 01       	movw	r16, r28
    271a:	0f 5e       	subi	r16, 0xEF	; 239
    271c:	1f 4f       	sbci	r17, 0xFF	; 255
    271e:	ce 01       	movw	r24, r28
    2720:	05 96       	adiw	r24, 0x05	; 5
    2722:	b8 01       	movw	r22, r16
    2724:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__unpack_f>
    2728:	89 85       	ldd	r24, Y+9	; 0x09
    272a:	82 30       	cpi	r24, 0x02	; 2
    272c:	40 f0       	brcs	.+16     	; 0x273e <__gesf2+0x56>
    272e:	89 89       	ldd	r24, Y+17	; 0x11
    2730:	82 30       	cpi	r24, 0x02	; 2
    2732:	28 f0       	brcs	.+10     	; 0x273e <__gesf2+0x56>
    2734:	c7 01       	movw	r24, r14
    2736:	b8 01       	movw	r22, r16
    2738:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__fpcmp_parts_f>
    273c:	01 c0       	rjmp	.+2      	; 0x2740 <__gesf2+0x58>
    273e:	8f ef       	ldi	r24, 0xFF	; 255
    2740:	68 96       	adiw	r28, 0x18	; 24
    2742:	e6 e0       	ldi	r30, 0x06	; 6
    2744:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__epilogue_restores__+0x18>

00002748 <__fixsfsi>:
    2748:	ac e0       	ldi	r26, 0x0C	; 12
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	ea ea       	ldi	r30, 0xAA	; 170
    274e:	f3 e1       	ldi	r31, 0x13	; 19
    2750:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <__prologue_saves__+0x20>
    2754:	69 83       	std	Y+1, r22	; 0x01
    2756:	7a 83       	std	Y+2, r23	; 0x02
    2758:	8b 83       	std	Y+3, r24	; 0x03
    275a:	9c 83       	std	Y+4, r25	; 0x04
    275c:	ce 01       	movw	r24, r28
    275e:	01 96       	adiw	r24, 0x01	; 1
    2760:	be 01       	movw	r22, r28
    2762:	6b 5f       	subi	r22, 0xFB	; 251
    2764:	7f 4f       	sbci	r23, 0xFF	; 255
    2766:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__unpack_f>
    276a:	8d 81       	ldd	r24, Y+5	; 0x05
    276c:	82 30       	cpi	r24, 0x02	; 2
    276e:	61 f1       	breq	.+88     	; 0x27c8 <__fixsfsi+0x80>
    2770:	82 30       	cpi	r24, 0x02	; 2
    2772:	50 f1       	brcs	.+84     	; 0x27c8 <__fixsfsi+0x80>
    2774:	84 30       	cpi	r24, 0x04	; 4
    2776:	21 f4       	brne	.+8      	; 0x2780 <__fixsfsi+0x38>
    2778:	8e 81       	ldd	r24, Y+6	; 0x06
    277a:	88 23       	and	r24, r24
    277c:	51 f1       	breq	.+84     	; 0x27d2 <__fixsfsi+0x8a>
    277e:	2e c0       	rjmp	.+92     	; 0x27dc <__fixsfsi+0x94>
    2780:	2f 81       	ldd	r18, Y+7	; 0x07
    2782:	38 85       	ldd	r19, Y+8	; 0x08
    2784:	37 fd       	sbrc	r19, 7
    2786:	20 c0       	rjmp	.+64     	; 0x27c8 <__fixsfsi+0x80>
    2788:	6e 81       	ldd	r22, Y+6	; 0x06
    278a:	2f 31       	cpi	r18, 0x1F	; 31
    278c:	31 05       	cpc	r19, r1
    278e:	1c f0       	brlt	.+6      	; 0x2796 <__fixsfsi+0x4e>
    2790:	66 23       	and	r22, r22
    2792:	f9 f0       	breq	.+62     	; 0x27d2 <__fixsfsi+0x8a>
    2794:	23 c0       	rjmp	.+70     	; 0x27dc <__fixsfsi+0x94>
    2796:	8e e1       	ldi	r24, 0x1E	; 30
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	82 1b       	sub	r24, r18
    279c:	93 0b       	sbc	r25, r19
    279e:	29 85       	ldd	r18, Y+9	; 0x09
    27a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    27a2:	4b 85       	ldd	r20, Y+11	; 0x0b
    27a4:	5c 85       	ldd	r21, Y+12	; 0x0c
    27a6:	04 c0       	rjmp	.+8      	; 0x27b0 <__fixsfsi+0x68>
    27a8:	56 95       	lsr	r21
    27aa:	47 95       	ror	r20
    27ac:	37 95       	ror	r19
    27ae:	27 95       	ror	r18
    27b0:	8a 95       	dec	r24
    27b2:	d2 f7       	brpl	.-12     	; 0x27a8 <__fixsfsi+0x60>
    27b4:	66 23       	and	r22, r22
    27b6:	b1 f0       	breq	.+44     	; 0x27e4 <__fixsfsi+0x9c>
    27b8:	50 95       	com	r21
    27ba:	40 95       	com	r20
    27bc:	30 95       	com	r19
    27be:	21 95       	neg	r18
    27c0:	3f 4f       	sbci	r19, 0xFF	; 255
    27c2:	4f 4f       	sbci	r20, 0xFF	; 255
    27c4:	5f 4f       	sbci	r21, 0xFF	; 255
    27c6:	0e c0       	rjmp	.+28     	; 0x27e4 <__fixsfsi+0x9c>
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	40 e0       	ldi	r20, 0x00	; 0
    27ce:	50 e0       	ldi	r21, 0x00	; 0
    27d0:	09 c0       	rjmp	.+18     	; 0x27e4 <__fixsfsi+0x9c>
    27d2:	2f ef       	ldi	r18, 0xFF	; 255
    27d4:	3f ef       	ldi	r19, 0xFF	; 255
    27d6:	4f ef       	ldi	r20, 0xFF	; 255
    27d8:	5f e7       	ldi	r21, 0x7F	; 127
    27da:	04 c0       	rjmp	.+8      	; 0x27e4 <__fixsfsi+0x9c>
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e0       	ldi	r20, 0x00	; 0
    27e2:	50 e8       	ldi	r21, 0x80	; 128
    27e4:	b9 01       	movw	r22, r18
    27e6:	ca 01       	movw	r24, r20
    27e8:	2c 96       	adiw	r28, 0x0c	; 12
    27ea:	e2 e0       	ldi	r30, 0x02	; 2
    27ec:	0c 94 ab 17 	jmp	0x2f56	; 0x2f56 <__epilogue_restores__+0x20>

000027f0 <__floatunsisf>:
    27f0:	a8 e0       	ldi	r26, 0x08	; 8
    27f2:	b0 e0       	ldi	r27, 0x00	; 0
    27f4:	ee ef       	ldi	r30, 0xFE	; 254
    27f6:	f3 e1       	ldi	r31, 0x13	; 19
    27f8:	0c 94 87 17 	jmp	0x2f0e	; 0x2f0e <__prologue_saves__+0x10>
    27fc:	7b 01       	movw	r14, r22
    27fe:	8c 01       	movw	r16, r24
    2800:	61 15       	cp	r22, r1
    2802:	71 05       	cpc	r23, r1
    2804:	81 05       	cpc	r24, r1
    2806:	91 05       	cpc	r25, r1
    2808:	19 f4       	brne	.+6      	; 0x2810 <__floatunsisf+0x20>
    280a:	82 e0       	ldi	r24, 0x02	; 2
    280c:	89 83       	std	Y+1, r24	; 0x01
    280e:	60 c0       	rjmp	.+192    	; 0x28d0 <__floatunsisf+0xe0>
    2810:	83 e0       	ldi	r24, 0x03	; 3
    2812:	89 83       	std	Y+1, r24	; 0x01
    2814:	8e e1       	ldi	r24, 0x1E	; 30
    2816:	c8 2e       	mov	r12, r24
    2818:	d1 2c       	mov	r13, r1
    281a:	dc 82       	std	Y+4, r13	; 0x04
    281c:	cb 82       	std	Y+3, r12	; 0x03
    281e:	ed 82       	std	Y+5, r14	; 0x05
    2820:	fe 82       	std	Y+6, r15	; 0x06
    2822:	0f 83       	std	Y+7, r16	; 0x07
    2824:	18 87       	std	Y+8, r17	; 0x08
    2826:	c8 01       	movw	r24, r16
    2828:	b7 01       	movw	r22, r14
    282a:	0e 94 71 14 	call	0x28e2	; 0x28e2 <__clzsi2>
    282e:	fc 01       	movw	r30, r24
    2830:	31 97       	sbiw	r30, 0x01	; 1
    2832:	f7 ff       	sbrs	r31, 7
    2834:	3b c0       	rjmp	.+118    	; 0x28ac <__floatunsisf+0xbc>
    2836:	22 27       	eor	r18, r18
    2838:	33 27       	eor	r19, r19
    283a:	2e 1b       	sub	r18, r30
    283c:	3f 0b       	sbc	r19, r31
    283e:	57 01       	movw	r10, r14
    2840:	68 01       	movw	r12, r16
    2842:	02 2e       	mov	r0, r18
    2844:	04 c0       	rjmp	.+8      	; 0x284e <__floatunsisf+0x5e>
    2846:	d6 94       	lsr	r13
    2848:	c7 94       	ror	r12
    284a:	b7 94       	ror	r11
    284c:	a7 94       	ror	r10
    284e:	0a 94       	dec	r0
    2850:	d2 f7       	brpl	.-12     	; 0x2846 <__floatunsisf+0x56>
    2852:	40 e0       	ldi	r20, 0x00	; 0
    2854:	50 e0       	ldi	r21, 0x00	; 0
    2856:	60 e0       	ldi	r22, 0x00	; 0
    2858:	70 e0       	ldi	r23, 0x00	; 0
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	a0 e0       	ldi	r26, 0x00	; 0
    2860:	b0 e0       	ldi	r27, 0x00	; 0
    2862:	04 c0       	rjmp	.+8      	; 0x286c <__floatunsisf+0x7c>
    2864:	88 0f       	add	r24, r24
    2866:	99 1f       	adc	r25, r25
    2868:	aa 1f       	adc	r26, r26
    286a:	bb 1f       	adc	r27, r27
    286c:	2a 95       	dec	r18
    286e:	d2 f7       	brpl	.-12     	; 0x2864 <__floatunsisf+0x74>
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	a1 09       	sbc	r26, r1
    2874:	b1 09       	sbc	r27, r1
    2876:	8e 21       	and	r24, r14
    2878:	9f 21       	and	r25, r15
    287a:	a0 23       	and	r26, r16
    287c:	b1 23       	and	r27, r17
    287e:	00 97       	sbiw	r24, 0x00	; 0
    2880:	a1 05       	cpc	r26, r1
    2882:	b1 05       	cpc	r27, r1
    2884:	21 f0       	breq	.+8      	; 0x288e <__floatunsisf+0x9e>
    2886:	41 e0       	ldi	r20, 0x01	; 1
    2888:	50 e0       	ldi	r21, 0x00	; 0
    288a:	60 e0       	ldi	r22, 0x00	; 0
    288c:	70 e0       	ldi	r23, 0x00	; 0
    288e:	4a 29       	or	r20, r10
    2890:	5b 29       	or	r21, r11
    2892:	6c 29       	or	r22, r12
    2894:	7d 29       	or	r23, r13
    2896:	4d 83       	std	Y+5, r20	; 0x05
    2898:	5e 83       	std	Y+6, r21	; 0x06
    289a:	6f 83       	std	Y+7, r22	; 0x07
    289c:	78 87       	std	Y+8, r23	; 0x08
    289e:	8e e1       	ldi	r24, 0x1E	; 30
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	8e 1b       	sub	r24, r30
    28a4:	9f 0b       	sbc	r25, r31
    28a6:	9c 83       	std	Y+4, r25	; 0x04
    28a8:	8b 83       	std	Y+3, r24	; 0x03
    28aa:	12 c0       	rjmp	.+36     	; 0x28d0 <__floatunsisf+0xe0>
    28ac:	30 97       	sbiw	r30, 0x00	; 0
    28ae:	81 f0       	breq	.+32     	; 0x28d0 <__floatunsisf+0xe0>
    28b0:	0e 2e       	mov	r0, r30
    28b2:	04 c0       	rjmp	.+8      	; 0x28bc <__floatunsisf+0xcc>
    28b4:	ee 0c       	add	r14, r14
    28b6:	ff 1c       	adc	r15, r15
    28b8:	00 1f       	adc	r16, r16
    28ba:	11 1f       	adc	r17, r17
    28bc:	0a 94       	dec	r0
    28be:	d2 f7       	brpl	.-12     	; 0x28b4 <__floatunsisf+0xc4>
    28c0:	ed 82       	std	Y+5, r14	; 0x05
    28c2:	fe 82       	std	Y+6, r15	; 0x06
    28c4:	0f 83       	std	Y+7, r16	; 0x07
    28c6:	18 87       	std	Y+8, r17	; 0x08
    28c8:	ce 1a       	sub	r12, r30
    28ca:	df 0a       	sbc	r13, r31
    28cc:	dc 82       	std	Y+4, r13	; 0x04
    28ce:	cb 82       	std	Y+3, r12	; 0x03
    28d0:	1a 82       	std	Y+2, r1	; 0x02
    28d2:	ce 01       	movw	r24, r28
    28d4:	01 96       	adiw	r24, 0x01	; 1
    28d6:	0e 94 c0 14 	call	0x2980	; 0x2980 <__pack_f>
    28da:	28 96       	adiw	r28, 0x08	; 8
    28dc:	ea e0       	ldi	r30, 0x0A	; 10
    28de:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <__epilogue_restores__+0x10>

000028e2 <__clzsi2>:
    28e2:	ef 92       	push	r14
    28e4:	ff 92       	push	r15
    28e6:	0f 93       	push	r16
    28e8:	1f 93       	push	r17
    28ea:	7b 01       	movw	r14, r22
    28ec:	8c 01       	movw	r16, r24
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	e8 16       	cp	r14, r24
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	f8 06       	cpc	r15, r24
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	08 07       	cpc	r16, r24
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	18 07       	cpc	r17, r24
    28fe:	88 f4       	brcc	.+34     	; 0x2922 <__clzsi2+0x40>
    2900:	8f ef       	ldi	r24, 0xFF	; 255
    2902:	e8 16       	cp	r14, r24
    2904:	f1 04       	cpc	r15, r1
    2906:	01 05       	cpc	r16, r1
    2908:	11 05       	cpc	r17, r1
    290a:	31 f0       	breq	.+12     	; 0x2918 <__clzsi2+0x36>
    290c:	28 f0       	brcs	.+10     	; 0x2918 <__clzsi2+0x36>
    290e:	88 e0       	ldi	r24, 0x08	; 8
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	a0 e0       	ldi	r26, 0x00	; 0
    2914:	b0 e0       	ldi	r27, 0x00	; 0
    2916:	17 c0       	rjmp	.+46     	; 0x2946 <__clzsi2+0x64>
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	a0 e0       	ldi	r26, 0x00	; 0
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	12 c0       	rjmp	.+36     	; 0x2946 <__clzsi2+0x64>
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	e8 16       	cp	r14, r24
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	f8 06       	cpc	r15, r24
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	08 07       	cpc	r16, r24
    292e:	81 e0       	ldi	r24, 0x01	; 1
    2930:	18 07       	cpc	r17, r24
    2932:	28 f0       	brcs	.+10     	; 0x293e <__clzsi2+0x5c>
    2934:	88 e1       	ldi	r24, 0x18	; 24
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	a0 e0       	ldi	r26, 0x00	; 0
    293a:	b0 e0       	ldi	r27, 0x00	; 0
    293c:	04 c0       	rjmp	.+8      	; 0x2946 <__clzsi2+0x64>
    293e:	80 e1       	ldi	r24, 0x10	; 16
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	a0 e0       	ldi	r26, 0x00	; 0
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	20 e2       	ldi	r18, 0x20	; 32
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	40 e0       	ldi	r20, 0x00	; 0
    294c:	50 e0       	ldi	r21, 0x00	; 0
    294e:	28 1b       	sub	r18, r24
    2950:	39 0b       	sbc	r19, r25
    2952:	4a 0b       	sbc	r20, r26
    2954:	5b 0b       	sbc	r21, r27
    2956:	04 c0       	rjmp	.+8      	; 0x2960 <__clzsi2+0x7e>
    2958:	16 95       	lsr	r17
    295a:	07 95       	ror	r16
    295c:	f7 94       	ror	r15
    295e:	e7 94       	ror	r14
    2960:	8a 95       	dec	r24
    2962:	d2 f7       	brpl	.-12     	; 0x2958 <__clzsi2+0x76>
    2964:	f7 01       	movw	r30, r14
    2966:	e7 5d       	subi	r30, 0xD7	; 215
    2968:	fc 4f       	sbci	r31, 0xFC	; 252
    296a:	80 81       	ld	r24, Z
    296c:	28 1b       	sub	r18, r24
    296e:	31 09       	sbc	r19, r1
    2970:	41 09       	sbc	r20, r1
    2972:	51 09       	sbc	r21, r1
    2974:	c9 01       	movw	r24, r18
    2976:	1f 91       	pop	r17
    2978:	0f 91       	pop	r16
    297a:	ff 90       	pop	r15
    297c:	ef 90       	pop	r14
    297e:	08 95       	ret

00002980 <__pack_f>:
    2980:	df 92       	push	r13
    2982:	ef 92       	push	r14
    2984:	ff 92       	push	r15
    2986:	0f 93       	push	r16
    2988:	1f 93       	push	r17
    298a:	fc 01       	movw	r30, r24
    298c:	e4 80       	ldd	r14, Z+4	; 0x04
    298e:	f5 80       	ldd	r15, Z+5	; 0x05
    2990:	06 81       	ldd	r16, Z+6	; 0x06
    2992:	17 81       	ldd	r17, Z+7	; 0x07
    2994:	d1 80       	ldd	r13, Z+1	; 0x01
    2996:	80 81       	ld	r24, Z
    2998:	82 30       	cpi	r24, 0x02	; 2
    299a:	48 f4       	brcc	.+18     	; 0x29ae <__pack_f+0x2e>
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	a0 e1       	ldi	r26, 0x10	; 16
    29a2:	b0 e0       	ldi	r27, 0x00	; 0
    29a4:	e8 2a       	or	r14, r24
    29a6:	f9 2a       	or	r15, r25
    29a8:	0a 2b       	or	r16, r26
    29aa:	1b 2b       	or	r17, r27
    29ac:	a5 c0       	rjmp	.+330    	; 0x2af8 <__pack_f+0x178>
    29ae:	84 30       	cpi	r24, 0x04	; 4
    29b0:	09 f4       	brne	.+2      	; 0x29b4 <__pack_f+0x34>
    29b2:	9f c0       	rjmp	.+318    	; 0x2af2 <__pack_f+0x172>
    29b4:	82 30       	cpi	r24, 0x02	; 2
    29b6:	21 f4       	brne	.+8      	; 0x29c0 <__pack_f+0x40>
    29b8:	ee 24       	eor	r14, r14
    29ba:	ff 24       	eor	r15, r15
    29bc:	87 01       	movw	r16, r14
    29be:	05 c0       	rjmp	.+10     	; 0x29ca <__pack_f+0x4a>
    29c0:	e1 14       	cp	r14, r1
    29c2:	f1 04       	cpc	r15, r1
    29c4:	01 05       	cpc	r16, r1
    29c6:	11 05       	cpc	r17, r1
    29c8:	19 f4       	brne	.+6      	; 0x29d0 <__pack_f+0x50>
    29ca:	e0 e0       	ldi	r30, 0x00	; 0
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	96 c0       	rjmp	.+300    	; 0x2afc <__pack_f+0x17c>
    29d0:	62 81       	ldd	r22, Z+2	; 0x02
    29d2:	73 81       	ldd	r23, Z+3	; 0x03
    29d4:	9f ef       	ldi	r25, 0xFF	; 255
    29d6:	62 38       	cpi	r22, 0x82	; 130
    29d8:	79 07       	cpc	r23, r25
    29da:	0c f0       	brlt	.+2      	; 0x29de <__pack_f+0x5e>
    29dc:	5b c0       	rjmp	.+182    	; 0x2a94 <__pack_f+0x114>
    29de:	22 e8       	ldi	r18, 0x82	; 130
    29e0:	3f ef       	ldi	r19, 0xFF	; 255
    29e2:	26 1b       	sub	r18, r22
    29e4:	37 0b       	sbc	r19, r23
    29e6:	2a 31       	cpi	r18, 0x1A	; 26
    29e8:	31 05       	cpc	r19, r1
    29ea:	2c f0       	brlt	.+10     	; 0x29f6 <__pack_f+0x76>
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	40 e0       	ldi	r20, 0x00	; 0
    29f2:	50 e0       	ldi	r21, 0x00	; 0
    29f4:	2a c0       	rjmp	.+84     	; 0x2a4a <__pack_f+0xca>
    29f6:	b8 01       	movw	r22, r16
    29f8:	a7 01       	movw	r20, r14
    29fa:	02 2e       	mov	r0, r18
    29fc:	04 c0       	rjmp	.+8      	; 0x2a06 <__pack_f+0x86>
    29fe:	76 95       	lsr	r23
    2a00:	67 95       	ror	r22
    2a02:	57 95       	ror	r21
    2a04:	47 95       	ror	r20
    2a06:	0a 94       	dec	r0
    2a08:	d2 f7       	brpl	.-12     	; 0x29fe <__pack_f+0x7e>
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	a0 e0       	ldi	r26, 0x00	; 0
    2a10:	b0 e0       	ldi	r27, 0x00	; 0
    2a12:	04 c0       	rjmp	.+8      	; 0x2a1c <__pack_f+0x9c>
    2a14:	88 0f       	add	r24, r24
    2a16:	99 1f       	adc	r25, r25
    2a18:	aa 1f       	adc	r26, r26
    2a1a:	bb 1f       	adc	r27, r27
    2a1c:	2a 95       	dec	r18
    2a1e:	d2 f7       	brpl	.-12     	; 0x2a14 <__pack_f+0x94>
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	a1 09       	sbc	r26, r1
    2a24:	b1 09       	sbc	r27, r1
    2a26:	8e 21       	and	r24, r14
    2a28:	9f 21       	and	r25, r15
    2a2a:	a0 23       	and	r26, r16
    2a2c:	b1 23       	and	r27, r17
    2a2e:	00 97       	sbiw	r24, 0x00	; 0
    2a30:	a1 05       	cpc	r26, r1
    2a32:	b1 05       	cpc	r27, r1
    2a34:	21 f0       	breq	.+8      	; 0x2a3e <__pack_f+0xbe>
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	a0 e0       	ldi	r26, 0x00	; 0
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	9a 01       	movw	r18, r20
    2a40:	ab 01       	movw	r20, r22
    2a42:	28 2b       	or	r18, r24
    2a44:	39 2b       	or	r19, r25
    2a46:	4a 2b       	or	r20, r26
    2a48:	5b 2b       	or	r21, r27
    2a4a:	da 01       	movw	r26, r20
    2a4c:	c9 01       	movw	r24, r18
    2a4e:	8f 77       	andi	r24, 0x7F	; 127
    2a50:	90 70       	andi	r25, 0x00	; 0
    2a52:	a0 70       	andi	r26, 0x00	; 0
    2a54:	b0 70       	andi	r27, 0x00	; 0
    2a56:	80 34       	cpi	r24, 0x40	; 64
    2a58:	91 05       	cpc	r25, r1
    2a5a:	a1 05       	cpc	r26, r1
    2a5c:	b1 05       	cpc	r27, r1
    2a5e:	39 f4       	brne	.+14     	; 0x2a6e <__pack_f+0xee>
    2a60:	27 ff       	sbrs	r18, 7
    2a62:	09 c0       	rjmp	.+18     	; 0x2a76 <__pack_f+0xf6>
    2a64:	20 5c       	subi	r18, 0xC0	; 192
    2a66:	3f 4f       	sbci	r19, 0xFF	; 255
    2a68:	4f 4f       	sbci	r20, 0xFF	; 255
    2a6a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a6c:	04 c0       	rjmp	.+8      	; 0x2a76 <__pack_f+0xf6>
    2a6e:	21 5c       	subi	r18, 0xC1	; 193
    2a70:	3f 4f       	sbci	r19, 0xFF	; 255
    2a72:	4f 4f       	sbci	r20, 0xFF	; 255
    2a74:	5f 4f       	sbci	r21, 0xFF	; 255
    2a76:	e0 e0       	ldi	r30, 0x00	; 0
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	20 30       	cpi	r18, 0x00	; 0
    2a7c:	a0 e0       	ldi	r26, 0x00	; 0
    2a7e:	3a 07       	cpc	r19, r26
    2a80:	a0 e0       	ldi	r26, 0x00	; 0
    2a82:	4a 07       	cpc	r20, r26
    2a84:	a0 e4       	ldi	r26, 0x40	; 64
    2a86:	5a 07       	cpc	r21, r26
    2a88:	10 f0       	brcs	.+4      	; 0x2a8e <__pack_f+0x10e>
    2a8a:	e1 e0       	ldi	r30, 0x01	; 1
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	79 01       	movw	r14, r18
    2a90:	8a 01       	movw	r16, r20
    2a92:	27 c0       	rjmp	.+78     	; 0x2ae2 <__pack_f+0x162>
    2a94:	60 38       	cpi	r22, 0x80	; 128
    2a96:	71 05       	cpc	r23, r1
    2a98:	64 f5       	brge	.+88     	; 0x2af2 <__pack_f+0x172>
    2a9a:	fb 01       	movw	r30, r22
    2a9c:	e1 58       	subi	r30, 0x81	; 129
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	d8 01       	movw	r26, r16
    2aa2:	c7 01       	movw	r24, r14
    2aa4:	8f 77       	andi	r24, 0x7F	; 127
    2aa6:	90 70       	andi	r25, 0x00	; 0
    2aa8:	a0 70       	andi	r26, 0x00	; 0
    2aaa:	b0 70       	andi	r27, 0x00	; 0
    2aac:	80 34       	cpi	r24, 0x40	; 64
    2aae:	91 05       	cpc	r25, r1
    2ab0:	a1 05       	cpc	r26, r1
    2ab2:	b1 05       	cpc	r27, r1
    2ab4:	39 f4       	brne	.+14     	; 0x2ac4 <__pack_f+0x144>
    2ab6:	e7 fe       	sbrs	r14, 7
    2ab8:	0d c0       	rjmp	.+26     	; 0x2ad4 <__pack_f+0x154>
    2aba:	80 e4       	ldi	r24, 0x40	; 64
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	a0 e0       	ldi	r26, 0x00	; 0
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	04 c0       	rjmp	.+8      	; 0x2acc <__pack_f+0x14c>
    2ac4:	8f e3       	ldi	r24, 0x3F	; 63
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	a0 e0       	ldi	r26, 0x00	; 0
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	e8 0e       	add	r14, r24
    2ace:	f9 1e       	adc	r15, r25
    2ad0:	0a 1f       	adc	r16, r26
    2ad2:	1b 1f       	adc	r17, r27
    2ad4:	17 ff       	sbrs	r17, 7
    2ad6:	05 c0       	rjmp	.+10     	; 0x2ae2 <__pack_f+0x162>
    2ad8:	16 95       	lsr	r17
    2ada:	07 95       	ror	r16
    2adc:	f7 94       	ror	r15
    2ade:	e7 94       	ror	r14
    2ae0:	31 96       	adiw	r30, 0x01	; 1
    2ae2:	87 e0       	ldi	r24, 0x07	; 7
    2ae4:	16 95       	lsr	r17
    2ae6:	07 95       	ror	r16
    2ae8:	f7 94       	ror	r15
    2aea:	e7 94       	ror	r14
    2aec:	8a 95       	dec	r24
    2aee:	d1 f7       	brne	.-12     	; 0x2ae4 <__pack_f+0x164>
    2af0:	05 c0       	rjmp	.+10     	; 0x2afc <__pack_f+0x17c>
    2af2:	ee 24       	eor	r14, r14
    2af4:	ff 24       	eor	r15, r15
    2af6:	87 01       	movw	r16, r14
    2af8:	ef ef       	ldi	r30, 0xFF	; 255
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	6e 2f       	mov	r22, r30
    2afe:	67 95       	ror	r22
    2b00:	66 27       	eor	r22, r22
    2b02:	67 95       	ror	r22
    2b04:	90 2f       	mov	r25, r16
    2b06:	9f 77       	andi	r25, 0x7F	; 127
    2b08:	d7 94       	ror	r13
    2b0a:	dd 24       	eor	r13, r13
    2b0c:	d7 94       	ror	r13
    2b0e:	8e 2f       	mov	r24, r30
    2b10:	86 95       	lsr	r24
    2b12:	49 2f       	mov	r20, r25
    2b14:	46 2b       	or	r20, r22
    2b16:	58 2f       	mov	r21, r24
    2b18:	5d 29       	or	r21, r13
    2b1a:	b7 01       	movw	r22, r14
    2b1c:	ca 01       	movw	r24, r20
    2b1e:	1f 91       	pop	r17
    2b20:	0f 91       	pop	r16
    2b22:	ff 90       	pop	r15
    2b24:	ef 90       	pop	r14
    2b26:	df 90       	pop	r13
    2b28:	08 95       	ret

00002b2a <__unpack_f>:
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	db 01       	movw	r26, r22
    2b2e:	40 81       	ld	r20, Z
    2b30:	51 81       	ldd	r21, Z+1	; 0x01
    2b32:	22 81       	ldd	r18, Z+2	; 0x02
    2b34:	62 2f       	mov	r22, r18
    2b36:	6f 77       	andi	r22, 0x7F	; 127
    2b38:	70 e0       	ldi	r23, 0x00	; 0
    2b3a:	22 1f       	adc	r18, r18
    2b3c:	22 27       	eor	r18, r18
    2b3e:	22 1f       	adc	r18, r18
    2b40:	93 81       	ldd	r25, Z+3	; 0x03
    2b42:	89 2f       	mov	r24, r25
    2b44:	88 0f       	add	r24, r24
    2b46:	82 2b       	or	r24, r18
    2b48:	28 2f       	mov	r18, r24
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	99 1f       	adc	r25, r25
    2b4e:	99 27       	eor	r25, r25
    2b50:	99 1f       	adc	r25, r25
    2b52:	11 96       	adiw	r26, 0x01	; 1
    2b54:	9c 93       	st	X, r25
    2b56:	11 97       	sbiw	r26, 0x01	; 1
    2b58:	21 15       	cp	r18, r1
    2b5a:	31 05       	cpc	r19, r1
    2b5c:	a9 f5       	brne	.+106    	; 0x2bc8 <__unpack_f+0x9e>
    2b5e:	41 15       	cp	r20, r1
    2b60:	51 05       	cpc	r21, r1
    2b62:	61 05       	cpc	r22, r1
    2b64:	71 05       	cpc	r23, r1
    2b66:	11 f4       	brne	.+4      	; 0x2b6c <__unpack_f+0x42>
    2b68:	82 e0       	ldi	r24, 0x02	; 2
    2b6a:	37 c0       	rjmp	.+110    	; 0x2bda <__unpack_f+0xb0>
    2b6c:	82 e8       	ldi	r24, 0x82	; 130
    2b6e:	9f ef       	ldi	r25, 0xFF	; 255
    2b70:	13 96       	adiw	r26, 0x03	; 3
    2b72:	9c 93       	st	X, r25
    2b74:	8e 93       	st	-X, r24
    2b76:	12 97       	sbiw	r26, 0x02	; 2
    2b78:	9a 01       	movw	r18, r20
    2b7a:	ab 01       	movw	r20, r22
    2b7c:	67 e0       	ldi	r22, 0x07	; 7
    2b7e:	22 0f       	add	r18, r18
    2b80:	33 1f       	adc	r19, r19
    2b82:	44 1f       	adc	r20, r20
    2b84:	55 1f       	adc	r21, r21
    2b86:	6a 95       	dec	r22
    2b88:	d1 f7       	brne	.-12     	; 0x2b7e <__unpack_f+0x54>
    2b8a:	83 e0       	ldi	r24, 0x03	; 3
    2b8c:	8c 93       	st	X, r24
    2b8e:	0d c0       	rjmp	.+26     	; 0x2baa <__unpack_f+0x80>
    2b90:	22 0f       	add	r18, r18
    2b92:	33 1f       	adc	r19, r19
    2b94:	44 1f       	adc	r20, r20
    2b96:	55 1f       	adc	r21, r21
    2b98:	12 96       	adiw	r26, 0x02	; 2
    2b9a:	8d 91       	ld	r24, X+
    2b9c:	9c 91       	ld	r25, X
    2b9e:	13 97       	sbiw	r26, 0x03	; 3
    2ba0:	01 97       	sbiw	r24, 0x01	; 1
    2ba2:	13 96       	adiw	r26, 0x03	; 3
    2ba4:	9c 93       	st	X, r25
    2ba6:	8e 93       	st	-X, r24
    2ba8:	12 97       	sbiw	r26, 0x02	; 2
    2baa:	20 30       	cpi	r18, 0x00	; 0
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	38 07       	cpc	r19, r24
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	48 07       	cpc	r20, r24
    2bb4:	80 e4       	ldi	r24, 0x40	; 64
    2bb6:	58 07       	cpc	r21, r24
    2bb8:	58 f3       	brcs	.-42     	; 0x2b90 <__unpack_f+0x66>
    2bba:	14 96       	adiw	r26, 0x04	; 4
    2bbc:	2d 93       	st	X+, r18
    2bbe:	3d 93       	st	X+, r19
    2bc0:	4d 93       	st	X+, r20
    2bc2:	5c 93       	st	X, r21
    2bc4:	17 97       	sbiw	r26, 0x07	; 7
    2bc6:	08 95       	ret
    2bc8:	2f 3f       	cpi	r18, 0xFF	; 255
    2bca:	31 05       	cpc	r19, r1
    2bcc:	79 f4       	brne	.+30     	; 0x2bec <__unpack_f+0xc2>
    2bce:	41 15       	cp	r20, r1
    2bd0:	51 05       	cpc	r21, r1
    2bd2:	61 05       	cpc	r22, r1
    2bd4:	71 05       	cpc	r23, r1
    2bd6:	19 f4       	brne	.+6      	; 0x2bde <__unpack_f+0xb4>
    2bd8:	84 e0       	ldi	r24, 0x04	; 4
    2bda:	8c 93       	st	X, r24
    2bdc:	08 95       	ret
    2bde:	64 ff       	sbrs	r22, 4
    2be0:	03 c0       	rjmp	.+6      	; 0x2be8 <__unpack_f+0xbe>
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	8c 93       	st	X, r24
    2be6:	12 c0       	rjmp	.+36     	; 0x2c0c <__unpack_f+0xe2>
    2be8:	1c 92       	st	X, r1
    2bea:	10 c0       	rjmp	.+32     	; 0x2c0c <__unpack_f+0xe2>
    2bec:	2f 57       	subi	r18, 0x7F	; 127
    2bee:	30 40       	sbci	r19, 0x00	; 0
    2bf0:	13 96       	adiw	r26, 0x03	; 3
    2bf2:	3c 93       	st	X, r19
    2bf4:	2e 93       	st	-X, r18
    2bf6:	12 97       	sbiw	r26, 0x02	; 2
    2bf8:	83 e0       	ldi	r24, 0x03	; 3
    2bfa:	8c 93       	st	X, r24
    2bfc:	87 e0       	ldi	r24, 0x07	; 7
    2bfe:	44 0f       	add	r20, r20
    2c00:	55 1f       	adc	r21, r21
    2c02:	66 1f       	adc	r22, r22
    2c04:	77 1f       	adc	r23, r23
    2c06:	8a 95       	dec	r24
    2c08:	d1 f7       	brne	.-12     	; 0x2bfe <__unpack_f+0xd4>
    2c0a:	70 64       	ori	r23, 0x40	; 64
    2c0c:	14 96       	adiw	r26, 0x04	; 4
    2c0e:	4d 93       	st	X+, r20
    2c10:	5d 93       	st	X+, r21
    2c12:	6d 93       	st	X+, r22
    2c14:	7c 93       	st	X, r23
    2c16:	17 97       	sbiw	r26, 0x07	; 7
    2c18:	08 95       	ret

00002c1a <__fpcmp_parts_f>:
    2c1a:	1f 93       	push	r17
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	fb 01       	movw	r30, r22
    2c20:	9c 91       	ld	r25, X
    2c22:	92 30       	cpi	r25, 0x02	; 2
    2c24:	08 f4       	brcc	.+2      	; 0x2c28 <__fpcmp_parts_f+0xe>
    2c26:	47 c0       	rjmp	.+142    	; 0x2cb6 <__fpcmp_parts_f+0x9c>
    2c28:	80 81       	ld	r24, Z
    2c2a:	82 30       	cpi	r24, 0x02	; 2
    2c2c:	08 f4       	brcc	.+2      	; 0x2c30 <__fpcmp_parts_f+0x16>
    2c2e:	43 c0       	rjmp	.+134    	; 0x2cb6 <__fpcmp_parts_f+0x9c>
    2c30:	94 30       	cpi	r25, 0x04	; 4
    2c32:	51 f4       	brne	.+20     	; 0x2c48 <__fpcmp_parts_f+0x2e>
    2c34:	11 96       	adiw	r26, 0x01	; 1
    2c36:	1c 91       	ld	r17, X
    2c38:	84 30       	cpi	r24, 0x04	; 4
    2c3a:	99 f5       	brne	.+102    	; 0x2ca2 <__fpcmp_parts_f+0x88>
    2c3c:	81 81       	ldd	r24, Z+1	; 0x01
    2c3e:	68 2f       	mov	r22, r24
    2c40:	70 e0       	ldi	r23, 0x00	; 0
    2c42:	61 1b       	sub	r22, r17
    2c44:	71 09       	sbc	r23, r1
    2c46:	3f c0       	rjmp	.+126    	; 0x2cc6 <__fpcmp_parts_f+0xac>
    2c48:	84 30       	cpi	r24, 0x04	; 4
    2c4a:	21 f0       	breq	.+8      	; 0x2c54 <__fpcmp_parts_f+0x3a>
    2c4c:	92 30       	cpi	r25, 0x02	; 2
    2c4e:	31 f4       	brne	.+12     	; 0x2c5c <__fpcmp_parts_f+0x42>
    2c50:	82 30       	cpi	r24, 0x02	; 2
    2c52:	b9 f1       	breq	.+110    	; 0x2cc2 <__fpcmp_parts_f+0xa8>
    2c54:	81 81       	ldd	r24, Z+1	; 0x01
    2c56:	88 23       	and	r24, r24
    2c58:	89 f1       	breq	.+98     	; 0x2cbc <__fpcmp_parts_f+0xa2>
    2c5a:	2d c0       	rjmp	.+90     	; 0x2cb6 <__fpcmp_parts_f+0x9c>
    2c5c:	11 96       	adiw	r26, 0x01	; 1
    2c5e:	1c 91       	ld	r17, X
    2c60:	11 97       	sbiw	r26, 0x01	; 1
    2c62:	82 30       	cpi	r24, 0x02	; 2
    2c64:	f1 f0       	breq	.+60     	; 0x2ca2 <__fpcmp_parts_f+0x88>
    2c66:	81 81       	ldd	r24, Z+1	; 0x01
    2c68:	18 17       	cp	r17, r24
    2c6a:	d9 f4       	brne	.+54     	; 0x2ca2 <__fpcmp_parts_f+0x88>
    2c6c:	12 96       	adiw	r26, 0x02	; 2
    2c6e:	2d 91       	ld	r18, X+
    2c70:	3c 91       	ld	r19, X
    2c72:	13 97       	sbiw	r26, 0x03	; 3
    2c74:	82 81       	ldd	r24, Z+2	; 0x02
    2c76:	93 81       	ldd	r25, Z+3	; 0x03
    2c78:	82 17       	cp	r24, r18
    2c7a:	93 07       	cpc	r25, r19
    2c7c:	94 f0       	brlt	.+36     	; 0x2ca2 <__fpcmp_parts_f+0x88>
    2c7e:	28 17       	cp	r18, r24
    2c80:	39 07       	cpc	r19, r25
    2c82:	bc f0       	brlt	.+46     	; 0x2cb2 <__fpcmp_parts_f+0x98>
    2c84:	14 96       	adiw	r26, 0x04	; 4
    2c86:	8d 91       	ld	r24, X+
    2c88:	9d 91       	ld	r25, X+
    2c8a:	0d 90       	ld	r0, X+
    2c8c:	bc 91       	ld	r27, X
    2c8e:	a0 2d       	mov	r26, r0
    2c90:	24 81       	ldd	r18, Z+4	; 0x04
    2c92:	35 81       	ldd	r19, Z+5	; 0x05
    2c94:	46 81       	ldd	r20, Z+6	; 0x06
    2c96:	57 81       	ldd	r21, Z+7	; 0x07
    2c98:	28 17       	cp	r18, r24
    2c9a:	39 07       	cpc	r19, r25
    2c9c:	4a 07       	cpc	r20, r26
    2c9e:	5b 07       	cpc	r21, r27
    2ca0:	18 f4       	brcc	.+6      	; 0x2ca8 <__fpcmp_parts_f+0x8e>
    2ca2:	11 23       	and	r17, r17
    2ca4:	41 f0       	breq	.+16     	; 0x2cb6 <__fpcmp_parts_f+0x9c>
    2ca6:	0a c0       	rjmp	.+20     	; 0x2cbc <__fpcmp_parts_f+0xa2>
    2ca8:	82 17       	cp	r24, r18
    2caa:	93 07       	cpc	r25, r19
    2cac:	a4 07       	cpc	r26, r20
    2cae:	b5 07       	cpc	r27, r21
    2cb0:	40 f4       	brcc	.+16     	; 0x2cc2 <__fpcmp_parts_f+0xa8>
    2cb2:	11 23       	and	r17, r17
    2cb4:	19 f0       	breq	.+6      	; 0x2cbc <__fpcmp_parts_f+0xa2>
    2cb6:	61 e0       	ldi	r22, 0x01	; 1
    2cb8:	70 e0       	ldi	r23, 0x00	; 0
    2cba:	05 c0       	rjmp	.+10     	; 0x2cc6 <__fpcmp_parts_f+0xac>
    2cbc:	6f ef       	ldi	r22, 0xFF	; 255
    2cbe:	7f ef       	ldi	r23, 0xFF	; 255
    2cc0:	02 c0       	rjmp	.+4      	; 0x2cc6 <__fpcmp_parts_f+0xac>
    2cc2:	60 e0       	ldi	r22, 0x00	; 0
    2cc4:	70 e0       	ldi	r23, 0x00	; 0
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	1f 91       	pop	r17
    2cca:	08 95       	ret

00002ccc <malloc>:
    2ccc:	cf 93       	push	r28
    2cce:	df 93       	push	r29
    2cd0:	bc 01       	movw	r22, r24
    2cd2:	82 30       	cpi	r24, 0x02	; 2
    2cd4:	91 05       	cpc	r25, r1
    2cd6:	10 f4       	brcc	.+4      	; 0x2cdc <malloc+0x10>
    2cd8:	62 e0       	ldi	r22, 0x02	; 2
    2cda:	70 e0       	ldi	r23, 0x00	; 0
    2cdc:	a0 91 9c 2a 	lds	r26, 0x2A9C
    2ce0:	b0 91 9d 2a 	lds	r27, 0x2A9D
    2ce4:	ed 01       	movw	r28, r26
    2ce6:	e0 e0       	ldi	r30, 0x00	; 0
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	40 e0       	ldi	r20, 0x00	; 0
    2cec:	50 e0       	ldi	r21, 0x00	; 0
    2cee:	21 c0       	rjmp	.+66     	; 0x2d32 <malloc+0x66>
    2cf0:	88 81       	ld	r24, Y
    2cf2:	99 81       	ldd	r25, Y+1	; 0x01
    2cf4:	86 17       	cp	r24, r22
    2cf6:	97 07       	cpc	r25, r23
    2cf8:	69 f4       	brne	.+26     	; 0x2d14 <malloc+0x48>
    2cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cfe:	30 97       	sbiw	r30, 0x00	; 0
    2d00:	19 f0       	breq	.+6      	; 0x2d08 <malloc+0x3c>
    2d02:	93 83       	std	Z+3, r25	; 0x03
    2d04:	82 83       	std	Z+2, r24	; 0x02
    2d06:	04 c0       	rjmp	.+8      	; 0x2d10 <malloc+0x44>
    2d08:	90 93 9d 2a 	sts	0x2A9D, r25
    2d0c:	80 93 9c 2a 	sts	0x2A9C, r24
    2d10:	fe 01       	movw	r30, r28
    2d12:	34 c0       	rjmp	.+104    	; 0x2d7c <malloc+0xb0>
    2d14:	68 17       	cp	r22, r24
    2d16:	79 07       	cpc	r23, r25
    2d18:	38 f4       	brcc	.+14     	; 0x2d28 <malloc+0x5c>
    2d1a:	41 15       	cp	r20, r1
    2d1c:	51 05       	cpc	r21, r1
    2d1e:	19 f0       	breq	.+6      	; 0x2d26 <malloc+0x5a>
    2d20:	84 17       	cp	r24, r20
    2d22:	95 07       	cpc	r25, r21
    2d24:	08 f4       	brcc	.+2      	; 0x2d28 <malloc+0x5c>
    2d26:	ac 01       	movw	r20, r24
    2d28:	fe 01       	movw	r30, r28
    2d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2e:	9c 01       	movw	r18, r24
    2d30:	e9 01       	movw	r28, r18
    2d32:	20 97       	sbiw	r28, 0x00	; 0
    2d34:	e9 f6       	brne	.-70     	; 0x2cf0 <malloc+0x24>
    2d36:	41 15       	cp	r20, r1
    2d38:	51 05       	cpc	r21, r1
    2d3a:	a9 f1       	breq	.+106    	; 0x2da6 <malloc+0xda>
    2d3c:	ca 01       	movw	r24, r20
    2d3e:	86 1b       	sub	r24, r22
    2d40:	97 0b       	sbc	r25, r23
    2d42:	04 97       	sbiw	r24, 0x04	; 4
    2d44:	08 f4       	brcc	.+2      	; 0x2d48 <malloc+0x7c>
    2d46:	ba 01       	movw	r22, r20
    2d48:	e0 e0       	ldi	r30, 0x00	; 0
    2d4a:	f0 e0       	ldi	r31, 0x00	; 0
    2d4c:	2a c0       	rjmp	.+84     	; 0x2da2 <malloc+0xd6>
    2d4e:	8d 91       	ld	r24, X+
    2d50:	9c 91       	ld	r25, X
    2d52:	11 97       	sbiw	r26, 0x01	; 1
    2d54:	84 17       	cp	r24, r20
    2d56:	95 07       	cpc	r25, r21
    2d58:	f9 f4       	brne	.+62     	; 0x2d98 <malloc+0xcc>
    2d5a:	64 17       	cp	r22, r20
    2d5c:	75 07       	cpc	r23, r21
    2d5e:	81 f4       	brne	.+32     	; 0x2d80 <malloc+0xb4>
    2d60:	12 96       	adiw	r26, 0x02	; 2
    2d62:	8d 91       	ld	r24, X+
    2d64:	9c 91       	ld	r25, X
    2d66:	13 97       	sbiw	r26, 0x03	; 3
    2d68:	30 97       	sbiw	r30, 0x00	; 0
    2d6a:	19 f0       	breq	.+6      	; 0x2d72 <malloc+0xa6>
    2d6c:	93 83       	std	Z+3, r25	; 0x03
    2d6e:	82 83       	std	Z+2, r24	; 0x02
    2d70:	04 c0       	rjmp	.+8      	; 0x2d7a <malloc+0xae>
    2d72:	90 93 9d 2a 	sts	0x2A9D, r25
    2d76:	80 93 9c 2a 	sts	0x2A9C, r24
    2d7a:	fd 01       	movw	r30, r26
    2d7c:	32 96       	adiw	r30, 0x02	; 2
    2d7e:	4f c0       	rjmp	.+158    	; 0x2e1e <malloc+0x152>
    2d80:	ca 01       	movw	r24, r20
    2d82:	86 1b       	sub	r24, r22
    2d84:	97 0b       	sbc	r25, r23
    2d86:	fd 01       	movw	r30, r26
    2d88:	e8 0f       	add	r30, r24
    2d8a:	f9 1f       	adc	r31, r25
    2d8c:	61 93       	st	Z+, r22
    2d8e:	71 93       	st	Z+, r23
    2d90:	02 97       	sbiw	r24, 0x02	; 2
    2d92:	8d 93       	st	X+, r24
    2d94:	9c 93       	st	X, r25
    2d96:	43 c0       	rjmp	.+134    	; 0x2e1e <malloc+0x152>
    2d98:	fd 01       	movw	r30, r26
    2d9a:	82 81       	ldd	r24, Z+2	; 0x02
    2d9c:	93 81       	ldd	r25, Z+3	; 0x03
    2d9e:	9c 01       	movw	r18, r24
    2da0:	d9 01       	movw	r26, r18
    2da2:	10 97       	sbiw	r26, 0x00	; 0
    2da4:	a1 f6       	brne	.-88     	; 0x2d4e <malloc+0x82>
    2da6:	80 91 9a 2a 	lds	r24, 0x2A9A
    2daa:	90 91 9b 2a 	lds	r25, 0x2A9B
    2dae:	89 2b       	or	r24, r25
    2db0:	41 f4       	brne	.+16     	; 0x2dc2 <malloc+0xf6>
    2db2:	80 91 2b 04 	lds	r24, 0x042B
    2db6:	90 91 2c 04 	lds	r25, 0x042C
    2dba:	90 93 9b 2a 	sts	0x2A9B, r25
    2dbe:	80 93 9a 2a 	sts	0x2A9A, r24
    2dc2:	40 91 2d 04 	lds	r20, 0x042D
    2dc6:	50 91 2e 04 	lds	r21, 0x042E
    2dca:	41 15       	cp	r20, r1
    2dcc:	51 05       	cpc	r21, r1
    2dce:	41 f4       	brne	.+16     	; 0x2de0 <malloc+0x114>
    2dd0:	4d b7       	in	r20, 0x3d	; 61
    2dd2:	5e b7       	in	r21, 0x3e	; 62
    2dd4:	80 91 29 04 	lds	r24, 0x0429
    2dd8:	90 91 2a 04 	lds	r25, 0x042A
    2ddc:	48 1b       	sub	r20, r24
    2dde:	59 0b       	sbc	r21, r25
    2de0:	20 91 9a 2a 	lds	r18, 0x2A9A
    2de4:	30 91 9b 2a 	lds	r19, 0x2A9B
    2de8:	24 17       	cp	r18, r20
    2dea:	35 07       	cpc	r19, r21
    2dec:	b0 f4       	brcc	.+44     	; 0x2e1a <malloc+0x14e>
    2dee:	ca 01       	movw	r24, r20
    2df0:	82 1b       	sub	r24, r18
    2df2:	93 0b       	sbc	r25, r19
    2df4:	86 17       	cp	r24, r22
    2df6:	97 07       	cpc	r25, r23
    2df8:	80 f0       	brcs	.+32     	; 0x2e1a <malloc+0x14e>
    2dfa:	ab 01       	movw	r20, r22
    2dfc:	4e 5f       	subi	r20, 0xFE	; 254
    2dfe:	5f 4f       	sbci	r21, 0xFF	; 255
    2e00:	84 17       	cp	r24, r20
    2e02:	95 07       	cpc	r25, r21
    2e04:	50 f0       	brcs	.+20     	; 0x2e1a <malloc+0x14e>
    2e06:	42 0f       	add	r20, r18
    2e08:	53 1f       	adc	r21, r19
    2e0a:	50 93 9b 2a 	sts	0x2A9B, r21
    2e0e:	40 93 9a 2a 	sts	0x2A9A, r20
    2e12:	f9 01       	movw	r30, r18
    2e14:	61 93       	st	Z+, r22
    2e16:	71 93       	st	Z+, r23
    2e18:	02 c0       	rjmp	.+4      	; 0x2e1e <malloc+0x152>
    2e1a:	e0 e0       	ldi	r30, 0x00	; 0
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	cf 01       	movw	r24, r30
    2e20:	df 91       	pop	r29
    2e22:	cf 91       	pop	r28
    2e24:	08 95       	ret

00002e26 <free>:
    2e26:	cf 93       	push	r28
    2e28:	df 93       	push	r29
    2e2a:	00 97       	sbiw	r24, 0x00	; 0
    2e2c:	09 f4       	brne	.+2      	; 0x2e30 <free+0xa>
    2e2e:	50 c0       	rjmp	.+160    	; 0x2ed0 <free+0xaa>
    2e30:	ec 01       	movw	r28, r24
    2e32:	22 97       	sbiw	r28, 0x02	; 2
    2e34:	1b 82       	std	Y+3, r1	; 0x03
    2e36:	1a 82       	std	Y+2, r1	; 0x02
    2e38:	a0 91 9c 2a 	lds	r26, 0x2A9C
    2e3c:	b0 91 9d 2a 	lds	r27, 0x2A9D
    2e40:	10 97       	sbiw	r26, 0x00	; 0
    2e42:	09 f1       	breq	.+66     	; 0x2e86 <free+0x60>
    2e44:	40 e0       	ldi	r20, 0x00	; 0
    2e46:	50 e0       	ldi	r21, 0x00	; 0
    2e48:	ac 17       	cp	r26, r28
    2e4a:	bd 07       	cpc	r27, r29
    2e4c:	08 f1       	brcs	.+66     	; 0x2e90 <free+0x6a>
    2e4e:	bb 83       	std	Y+3, r27	; 0x03
    2e50:	aa 83       	std	Y+2, r26	; 0x02
    2e52:	fe 01       	movw	r30, r28
    2e54:	21 91       	ld	r18, Z+
    2e56:	31 91       	ld	r19, Z+
    2e58:	e2 0f       	add	r30, r18
    2e5a:	f3 1f       	adc	r31, r19
    2e5c:	ae 17       	cp	r26, r30
    2e5e:	bf 07       	cpc	r27, r31
    2e60:	79 f4       	brne	.+30     	; 0x2e80 <free+0x5a>
    2e62:	8d 91       	ld	r24, X+
    2e64:	9c 91       	ld	r25, X
    2e66:	11 97       	sbiw	r26, 0x01	; 1
    2e68:	28 0f       	add	r18, r24
    2e6a:	39 1f       	adc	r19, r25
    2e6c:	2e 5f       	subi	r18, 0xFE	; 254
    2e6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e70:	39 83       	std	Y+1, r19	; 0x01
    2e72:	28 83       	st	Y, r18
    2e74:	12 96       	adiw	r26, 0x02	; 2
    2e76:	8d 91       	ld	r24, X+
    2e78:	9c 91       	ld	r25, X
    2e7a:	13 97       	sbiw	r26, 0x03	; 3
    2e7c:	9b 83       	std	Y+3, r25	; 0x03
    2e7e:	8a 83       	std	Y+2, r24	; 0x02
    2e80:	41 15       	cp	r20, r1
    2e82:	51 05       	cpc	r21, r1
    2e84:	71 f4       	brne	.+28     	; 0x2ea2 <free+0x7c>
    2e86:	d0 93 9d 2a 	sts	0x2A9D, r29
    2e8a:	c0 93 9c 2a 	sts	0x2A9C, r28
    2e8e:	20 c0       	rjmp	.+64     	; 0x2ed0 <free+0xaa>
    2e90:	12 96       	adiw	r26, 0x02	; 2
    2e92:	8d 91       	ld	r24, X+
    2e94:	9c 91       	ld	r25, X
    2e96:	13 97       	sbiw	r26, 0x03	; 3
    2e98:	ad 01       	movw	r20, r26
    2e9a:	00 97       	sbiw	r24, 0x00	; 0
    2e9c:	11 f0       	breq	.+4      	; 0x2ea2 <free+0x7c>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	d3 cf       	rjmp	.-90     	; 0x2e48 <free+0x22>
    2ea2:	fa 01       	movw	r30, r20
    2ea4:	d3 83       	std	Z+3, r29	; 0x03
    2ea6:	c2 83       	std	Z+2, r28	; 0x02
    2ea8:	21 91       	ld	r18, Z+
    2eaa:	31 91       	ld	r19, Z+
    2eac:	e2 0f       	add	r30, r18
    2eae:	f3 1f       	adc	r31, r19
    2eb0:	ce 17       	cp	r28, r30
    2eb2:	df 07       	cpc	r29, r31
    2eb4:	69 f4       	brne	.+26     	; 0x2ed0 <free+0xaa>
    2eb6:	88 81       	ld	r24, Y
    2eb8:	99 81       	ldd	r25, Y+1	; 0x01
    2eba:	28 0f       	add	r18, r24
    2ebc:	39 1f       	adc	r19, r25
    2ebe:	2e 5f       	subi	r18, 0xFE	; 254
    2ec0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec2:	fa 01       	movw	r30, r20
    2ec4:	31 83       	std	Z+1, r19	; 0x01
    2ec6:	20 83       	st	Z, r18
    2ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eca:	9b 81       	ldd	r25, Y+3	; 0x03
    2ecc:	93 83       	std	Z+3, r25	; 0x03
    2ece:	82 83       	std	Z+2, r24	; 0x02
    2ed0:	df 91       	pop	r29
    2ed2:	cf 91       	pop	r28
    2ed4:	08 95       	ret

00002ed6 <__udivmodhi4>:
    2ed6:	aa 1b       	sub	r26, r26
    2ed8:	bb 1b       	sub	r27, r27
    2eda:	51 e1       	ldi	r21, 0x11	; 17
    2edc:	07 c0       	rjmp	.+14     	; 0x2eec <__udivmodhi4_ep>

00002ede <__udivmodhi4_loop>:
    2ede:	aa 1f       	adc	r26, r26
    2ee0:	bb 1f       	adc	r27, r27
    2ee2:	a6 17       	cp	r26, r22
    2ee4:	b7 07       	cpc	r27, r23
    2ee6:	10 f0       	brcs	.+4      	; 0x2eec <__udivmodhi4_ep>
    2ee8:	a6 1b       	sub	r26, r22
    2eea:	b7 0b       	sbc	r27, r23

00002eec <__udivmodhi4_ep>:
    2eec:	88 1f       	adc	r24, r24
    2eee:	99 1f       	adc	r25, r25
    2ef0:	5a 95       	dec	r21
    2ef2:	a9 f7       	brne	.-22     	; 0x2ede <__udivmodhi4_loop>
    2ef4:	80 95       	com	r24
    2ef6:	90 95       	com	r25
    2ef8:	bc 01       	movw	r22, r24
    2efa:	cd 01       	movw	r24, r26
    2efc:	08 95       	ret

00002efe <__prologue_saves__>:
    2efe:	2f 92       	push	r2
    2f00:	3f 92       	push	r3
    2f02:	4f 92       	push	r4
    2f04:	5f 92       	push	r5
    2f06:	6f 92       	push	r6
    2f08:	7f 92       	push	r7
    2f0a:	8f 92       	push	r8
    2f0c:	9f 92       	push	r9
    2f0e:	af 92       	push	r10
    2f10:	bf 92       	push	r11
    2f12:	cf 92       	push	r12
    2f14:	df 92       	push	r13
    2f16:	ef 92       	push	r14
    2f18:	ff 92       	push	r15
    2f1a:	0f 93       	push	r16
    2f1c:	1f 93       	push	r17
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
    2f26:	ca 1b       	sub	r28, r26
    2f28:	db 0b       	sbc	r29, r27
    2f2a:	0f b6       	in	r0, 0x3f	; 63
    2f2c:	f8 94       	cli
    2f2e:	de bf       	out	0x3e, r29	; 62
    2f30:	0f be       	out	0x3f, r0	; 63
    2f32:	cd bf       	out	0x3d, r28	; 61
    2f34:	19 94       	eijmp

00002f36 <__epilogue_restores__>:
    2f36:	2a 88       	ldd	r2, Y+18	; 0x12
    2f38:	39 88       	ldd	r3, Y+17	; 0x11
    2f3a:	48 88       	ldd	r4, Y+16	; 0x10
    2f3c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f3e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f40:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f42:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f44:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f46:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f48:	b9 84       	ldd	r11, Y+9	; 0x09
    2f4a:	c8 84       	ldd	r12, Y+8	; 0x08
    2f4c:	df 80       	ldd	r13, Y+7	; 0x07
    2f4e:	ee 80       	ldd	r14, Y+6	; 0x06
    2f50:	fd 80       	ldd	r15, Y+5	; 0x05
    2f52:	0c 81       	ldd	r16, Y+4	; 0x04
    2f54:	1b 81       	ldd	r17, Y+3	; 0x03
    2f56:	aa 81       	ldd	r26, Y+2	; 0x02
    2f58:	b9 81       	ldd	r27, Y+1	; 0x01
    2f5a:	ce 0f       	add	r28, r30
    2f5c:	d1 1d       	adc	r29, r1
    2f5e:	0f b6       	in	r0, 0x3f	; 63
    2f60:	f8 94       	cli
    2f62:	de bf       	out	0x3e, r29	; 62
    2f64:	0f be       	out	0x3f, r0	; 63
    2f66:	cd bf       	out	0x3d, r28	; 61
    2f68:	ed 01       	movw	r28, r26
    2f6a:	08 95       	ret

00002f6c <_exit>:
    2f6c:	f8 94       	cli

00002f6e <__stop_program>:
    2f6e:	ff cf       	rjmp	.-2      	; 0x2f6e <__stop_program>
