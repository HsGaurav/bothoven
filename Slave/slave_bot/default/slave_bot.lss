
slave_bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000021e  00800200  00002cfe  00002d92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002cfe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000266c  0080041e  0080041e  00002fb0  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00002fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000686  00000000  00000000  00002fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000025ae  00000000  00000000  00003656  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000040c  00000000  00000000  00005c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000210e  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004a0  00000000  00000000  00008120  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000067f  00000000  00000000  000085c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001053  00000000  00000000  00008c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00009c92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 4c 04 	jmp	0x898	; 0x898 <__vector_5>
      18:	0c 94 27 04 	jmp	0x84e	; 0x84e <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee ef       	ldi	r30, 0xFE	; 254
      fc:	fc e2       	ldi	r31, 0x2C	; 44
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 31       	cpi	r26, 0x1E	; 30
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	1a e2       	ldi	r17, 0x2A	; 42
     110:	ae e1       	ldi	r26, 0x1E	; 30
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 38       	cpi	r26, 0x8A	; 138
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <main>
     122:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <IsEmpty>:
void EmptyQueue(struct Queue *Q) {
	while(Q->head!=NULL)
		DeQueue(Q);
}

int IsEmpty(struct Queue *Q){
     12a:	fc 01       	movw	r30, r24
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	91 81       	ldd	r25, Z+1	; 0x01
     134:	89 2b       	or	r24, r25
     136:	11 f4       	brne	.+4      	; 0x13c <IsEmpty+0x12>
     138:	21 e0       	ldi	r18, 0x01	; 1
     13a:	30 e0       	ldi	r19, 0x00	; 0
	return (Q->head==NULL) ? 1 : 0 ;
}
     13c:	c9 01       	movw	r24, r18
     13e:	08 95       	ret

00000140 <initMap>:
	*Output: integer-> 0 if everything was successful
	*Logic: Initializes the map with the know map.
	*		Required only at the begining.
	*Example Call: initMap();
*/
int initMap () {
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
	//Initializes each nodes as unconnected
	for (int i = 0; i < size; i++)
     148:	62 e6       	ldi	r22, 0x62	; 98
     14a:	70 e0       	ldi	r23, 0x00	; 0
		for (int j = 0; j < size; j++)
			map [i][j] = INF;
     14c:	40 ec       	ldi	r20, 0xC0	; 192
     14e:	57 e2       	ldi	r21, 0x27	; 39
     150:	10 c0       	rjmp	.+32     	; 0x172 <initMap+0x32>
     152:	41 93       	st	Z+, r20
     154:	51 93       	st	Z+, r21
	*Example Call: initMap();
*/
int initMap () {
	//Initializes each nodes as unconnected
	for (int i = 0; i < size; i++)
		for (int j = 0; j < size; j++)
     156:	01 96       	adiw	r24, 0x01	; 1
     158:	81 33       	cpi	r24, 0x31	; 49
     15a:	91 05       	cpc	r25, r1
     15c:	d1 f7       	brne	.-12     	; 0x152 <initMap+0x12>
	*		Required only at the begining.
	*Example Call: initMap();
*/
int initMap () {
	//Initializes each nodes as unconnected
	for (int i = 0; i < size; i++)
     15e:	2f 5f       	subi	r18, 0xFF	; 255
     160:	3f 4f       	sbci	r19, 0xFF	; 255
     162:	21 33       	cpi	r18, 0x31	; 49
     164:	31 05       	cpc	r19, r1
     166:	29 f4       	brne	.+10     	; 0x172 <initMap+0x32>
     168:	41 e0       	ldi	r20, 0x01	; 1
     16a:	50 e0       	ldi	r21, 0x00	; 0
		for (int j = 0; j < size; j++)
			map [i][j] = INF;
	//Connects nodes 1 through 24 in sequential order
	for (int i = 1; i < 25; i++)
     16c:	62 e6       	ldi	r22, 0x62	; 98
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	29 c0       	rjmp	.+82     	; 0x1c4 <initMap+0x84>
	*		Required only at the begining.
	*Example Call: initMap();
*/
int initMap () {
	//Initializes each nodes as unconnected
	for (int i = 0; i < size; i++)
     172:	26 9f       	mul	r18, r22
     174:	f0 01       	movw	r30, r0
     176:	27 9f       	mul	r18, r23
     178:	f0 0d       	add	r31, r0
     17a:	36 9f       	mul	r19, r22
     17c:	f0 0d       	add	r31, r0
     17e:	11 24       	eor	r1, r1
     180:	e8 5c       	subi	r30, 0xC8	; 200
     182:	fb 4f       	sbci	r31, 0xFB	; 251
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	e4 cf       	rjmp	.-56     	; 0x152 <initMap+0x12>
		for (int j = 0; j < size; j++)
			map [i][j] = INF;
	//Connects nodes 1 through 24 in sequential order
	for (int i = 1; i < 25; i++)
		for (int j = 1; j < 25; j++)
			if (abs(i-j) == 1)
     18a:	ca 01       	movw	r24, r20
     18c:	82 1b       	sub	r24, r18
     18e:	93 0b       	sbc	r25, r19
     190:	97 ff       	sbrs	r25, 7
     192:	03 c0       	rjmp	.+6      	; 0x19a <initMap+0x5a>
     194:	90 95       	com	r25
     196:	81 95       	neg	r24
     198:	9f 4f       	sbci	r25, 0xFF	; 255
     19a:	81 30       	cpi	r24, 0x01	; 1
     19c:	91 05       	cpc	r25, r1
     19e:	11 f4       	brne	.+4      	; 0x1a4 <initMap+0x64>
				map[i][j] = 1;
     1a0:	91 83       	std	Z+1, r25	; 0x01
     1a2:	80 83       	st	Z, r24
	for (int i = 0; i < size; i++)
		for (int j = 0; j < size; j++)
			map [i][j] = INF;
	//Connects nodes 1 through 24 in sequential order
	for (int i = 1; i < 25; i++)
		for (int j = 1; j < 25; j++)
     1a4:	2f 5f       	subi	r18, 0xFF	; 255
     1a6:	3f 4f       	sbci	r19, 0xFF	; 255
     1a8:	32 96       	adiw	r30, 0x02	; 2
     1aa:	29 31       	cpi	r18, 0x19	; 25
     1ac:	31 05       	cpc	r19, r1
     1ae:	69 f7       	brne	.-38     	; 0x18a <initMap+0x4a>
	//Initializes each nodes as unconnected
	for (int i = 0; i < size; i++)
		for (int j = 0; j < size; j++)
			map [i][j] = INF;
	//Connects nodes 1 through 24 in sequential order
	for (int i = 1; i < 25; i++)
     1b0:	4f 5f       	subi	r20, 0xFF	; 255
     1b2:	5f 4f       	sbci	r21, 0xFF	; 255
     1b4:	49 31       	cpi	r20, 0x19	; 25
     1b6:	51 05       	cpc	r21, r1
     1b8:	29 f4       	brne	.+10     	; 0x1c4 <initMap+0x84>
     1ba:	49 e1       	ldi	r20, 0x19	; 25
     1bc:	50 e0       	ldi	r21, 0x00	; 0
		for (int j = 1; j < 25; j++)
			if (abs(i-j) == 1)
				map[i][j] = 1;
	//Connects nodes 25 through 38 in sequential order
	for (int i = 25; i < 39; i++)
     1be:	62 e6       	ldi	r22, 0x62	; 98
     1c0:	70 e0       	ldi	r23, 0x00	; 0
     1c2:	24 c0       	rjmp	.+72     	; 0x20c <initMap+0xcc>
	//Initializes each nodes as unconnected
	for (int i = 0; i < size; i++)
		for (int j = 0; j < size; j++)
			map [i][j] = INF;
	//Connects nodes 1 through 24 in sequential order
	for (int i = 1; i < 25; i++)
     1c4:	46 9f       	mul	r20, r22
     1c6:	f0 01       	movw	r30, r0
     1c8:	47 9f       	mul	r20, r23
     1ca:	f0 0d       	add	r31, r0
     1cc:	56 9f       	mul	r21, r22
     1ce:	f0 0d       	add	r31, r0
     1d0:	11 24       	eor	r1, r1
     1d2:	e6 5c       	subi	r30, 0xC6	; 198
     1d4:	fb 4f       	sbci	r31, 0xFB	; 251
     1d6:	21 e0       	ldi	r18, 0x01	; 1
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	d7 cf       	rjmp	.-82     	; 0x18a <initMap+0x4a>
			if (abs(i-j) == 1)
				map[i][j] = 1;
	//Connects nodes 25 through 38 in sequential order
	for (int i = 25; i < 39; i++)
		for (int j = 25; j < 39; j++)
			if (abs(i-j) == 1)
     1dc:	ca 01       	movw	r24, r20
     1de:	82 1b       	sub	r24, r18
     1e0:	93 0b       	sbc	r25, r19
     1e2:	97 ff       	sbrs	r25, 7
     1e4:	03 c0       	rjmp	.+6      	; 0x1ec <initMap+0xac>
     1e6:	90 95       	com	r25
     1e8:	81 95       	neg	r24
     1ea:	9f 4f       	sbci	r25, 0xFF	; 255
     1ec:	81 30       	cpi	r24, 0x01	; 1
     1ee:	91 05       	cpc	r25, r1
     1f0:	11 f4       	brne	.+4      	; 0x1f6 <initMap+0xb6>
				map[i][j] = 1;
     1f2:	91 83       	std	Z+1, r25	; 0x01
     1f4:	80 83       	st	Z, r24
		for (int j = 1; j < 25; j++)
			if (abs(i-j) == 1)
				map[i][j] = 1;
	//Connects nodes 25 through 38 in sequential order
	for (int i = 25; i < 39; i++)
		for (int j = 25; j < 39; j++)
     1f6:	2f 5f       	subi	r18, 0xFF	; 255
     1f8:	3f 4f       	sbci	r19, 0xFF	; 255
     1fa:	32 96       	adiw	r30, 0x02	; 2
     1fc:	27 32       	cpi	r18, 0x27	; 39
     1fe:	31 05       	cpc	r19, r1
     200:	69 f7       	brne	.-38     	; 0x1dc <initMap+0x9c>
	for (int i = 1; i < 25; i++)
		for (int j = 1; j < 25; j++)
			if (abs(i-j) == 1)
				map[i][j] = 1;
	//Connects nodes 25 through 38 in sequential order
	for (int i = 25; i < 39; i++)
     202:	4f 5f       	subi	r20, 0xFF	; 255
     204:	5f 4f       	sbci	r21, 0xFF	; 255
     206:	47 32       	cpi	r20, 0x27	; 39
     208:	51 05       	cpc	r21, r1
     20a:	61 f0       	breq	.+24     	; 0x224 <initMap+0xe4>
     20c:	46 9f       	mul	r20, r22
     20e:	f0 01       	movw	r30, r0
     210:	47 9f       	mul	r20, r23
     212:	f0 0d       	add	r31, r0
     214:	56 9f       	mul	r21, r22
     216:	f0 0d       	add	r31, r0
     218:	11 24       	eor	r1, r1
     21a:	e6 59       	subi	r30, 0x96	; 150
     21c:	fb 4f       	sbci	r31, 0xFB	; 251
     21e:	29 e1       	ldi	r18, 0x19	; 25
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	dc cf       	rjmp	.-72     	; 0x1dc <initMap+0x9c>
		for (int j = 25; j < 39; j++)
			if (abs(i-j) == 1)
				map[i][j] = 1;
	//Manually connecting nodes that are connected in the map
	//Replace it with soft code if you ever find a method
	map[35][42] = map[42][35] = 1;
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	90 93 93 14 	sts	0x1493, r25
     22c:	80 93 92 14 	sts	0x1492, r24
     230:	90 93 f3 11 	sts	0x11F3, r25
     234:	80 93 f2 11 	sts	0x11F2, r24
	map[42][41] = map[41][42] = 1;
     238:	90 93 3f 14 	sts	0x143F, r25
     23c:	80 93 3e 14 	sts	0x143E, r24
     240:	90 93 9f 14 	sts	0x149F, r25
     244:	80 93 9e 14 	sts	0x149E, r24
	map[41][32] = map[32][41] = 1;
     248:	90 93 cb 10 	sts	0x10CB, r25
     24c:	80 93 ca 10 	sts	0x10CA, r24
     250:	90 93 2b 14 	sts	0x142B, r25
     254:	80 93 2a 14 	sts	0x142A, r24
	map[32][48] = map[48][32] = 1;
     258:	90 93 d9 16 	sts	0x16D9, r25
     25c:	80 93 d8 16 	sts	0x16D8, r24
     260:	90 93 d9 10 	sts	0x10D9, r25
     264:	80 93 d8 10 	sts	0x10D8, r24
	map[47][31] = map[31][47] = 1;
     268:	90 93 75 10 	sts	0x1075, r25
     26c:	80 93 74 10 	sts	0x1074, r24
     270:	90 93 75 16 	sts	0x1675, r25
     274:	80 93 74 16 	sts	0x1674, r24
	map[31][40] = map[40][31] = 1;
     278:	90 93 c7 13 	sts	0x13C7, r25
     27c:	80 93 c6 13 	sts	0x13C6, r24
     280:	90 93 67 10 	sts	0x1067, r25
     284:	80 93 66 10 	sts	0x1066, r24
	map[40][39] = map[39][40] = 1;
     288:	90 93 77 13 	sts	0x1377, r25
     28c:	80 93 76 13 	sts	0x1376, r24
     290:	90 93 d7 13 	sts	0x13D7, r25
     294:	80 93 d6 13 	sts	0x13D6, r24
	map[39][28] = map[28][39] = 1;
     298:	90 93 3f 0f 	sts	0x0F3F, r25
     29c:	80 93 3e 0f 	sts	0x0F3E, r24
     2a0:	90 93 5f 13 	sts	0x135F, r25
     2a4:	80 93 5e 13 	sts	0x135E, r24
	map[28][46] = map[46][28] = 1;
     2a8:	90 93 0d 16 	sts	0x160D, r25
     2ac:	80 93 0c 16 	sts	0x160C, r24
     2b0:	90 93 4d 0f 	sts	0x0F4D, r25
     2b4:	80 93 4c 0f 	sts	0x0F4C, r24
	map[45][27] = map[27][45] = 1;
     2b8:	90 93 e9 0e 	sts	0x0EE9, r25
     2bc:	80 93 e8 0e 	sts	0x0EE8, r24
     2c0:	90 93 a9 15 	sts	0x15A9, r25
     2c4:	80 93 a8 15 	sts	0x15A8, r24
	map[27][38] = map[38][27] = 1;
     2c8:	90 93 fb 12 	sts	0x12FB, r25
     2cc:	80 93 fa 12 	sts	0x12FA, r24
     2d0:	90 93 db 0e 	sts	0x0EDB, r25
     2d4:	80 93 da 0e 	sts	0x0EDA, r24
	map[36][25] = map[25][36] = 1;
     2d8:	90 93 13 0e 	sts	0x0E13, r25
     2dc:	80 93 12 0e 	sts	0x0E12, r24
     2e0:	90 93 33 12 	sts	0x1233, r25
     2e4:	80 93 32 12 	sts	0x1232, r24
	map[36][44] = map[44][36] = 1;
     2e8:	90 93 59 15 	sts	0x1559, r25
     2ec:	80 93 58 15 	sts	0x1558, r24
     2f0:	90 93 59 12 	sts	0x1259, r25
     2f4:	80 93 58 12 	sts	0x1258, r24
	map[43][35] = map[35][43] = 1;
     2f8:	90 93 f5 11 	sts	0x11F5, r25
     2fc:	80 93 f4 11 	sts	0x11F4, r24
     300:	90 93 f5 14 	sts	0x14F5, r25
     304:	80 93 f4 14 	sts	0x14F4, r24
	map[24][1]  = map[1][24]  = 1;
     308:	90 93 cb 04 	sts	0x04CB, r25
     30c:	80 93 ca 04 	sts	0x04CA, r24
     310:	90 93 6b 0d 	sts	0x0D6B, r25
     314:	80 93 6a 0d 	sts	0x0D6A, r24
	map[23][44] = map[44][23] = 1;
     318:	90 93 3f 15 	sts	0x153F, r25
     31c:	80 93 3e 15 	sts	0x153E, r24
     320:	90 93 5f 0d 	sts	0x0D5F, r25
     324:	80 93 5e 0d 	sts	0x0D5E, r24
	map[23][43] = map[43][23] = 1;
     328:	90 93 dd 14 	sts	0x14DD, r25
     32c:	80 93 dc 14 	sts	0x14DC, r24
     330:	90 93 5d 0d 	sts	0x0D5D, r25
     334:	80 93 5c 0d 	sts	0x0D5C, r24
	map[19][34] = map[34][19] = 1;
     338:	90 93 63 11 	sts	0x1163, r25
     33c:	80 93 62 11 	sts	0x1162, r24
     340:	90 93 c3 0b 	sts	0x0BC3, r25
     344:	80 93 c2 0b 	sts	0x0BC2, r24
	map[19][33] = map[33][19] = 1;
     348:	90 93 01 11 	sts	0x1101, r25
     34c:	80 93 00 11 	sts	0x1100, r24
     350:	90 93 c1 0b 	sts	0x0BC1, r25
     354:	80 93 c0 0b 	sts	0x0BC0, r24
	map[15][48] = map[48][15] = 1;
     358:	90 93 b7 16 	sts	0x16B7, r25
     35c:	80 93 b6 16 	sts	0x16B6, r24
     360:	90 93 57 0a 	sts	0x0A57, r25
     364:	80 93 56 0a 	sts	0x0A56, r24
	map[15][47] = map[47][15] = 1;
     368:	90 93 55 16 	sts	0x1655, r25
     36c:	80 93 54 16 	sts	0x1654, r24
     370:	90 93 55 0a 	sts	0x0A55, r25
     374:	80 93 54 0a 	sts	0x0A54, r24
	map[11][30] = map[30][11] = 1;
     378:	90 93 cb 0f 	sts	0x0FCB, r25
     37c:	80 93 ca 0f 	sts	0x0FCA, r24
     380:	90 93 ab 08 	sts	0x08AB, r25
     384:	80 93 aa 08 	sts	0x08AA, r24
	map[11][29] = map[29][11] = 1;
     388:	90 93 69 0f 	sts	0x0F69, r25
     38c:	80 93 68 0f 	sts	0x0F68, r24
     390:	90 93 a9 08 	sts	0x08A9, r25
     394:	80 93 a8 08 	sts	0x08A8, r24
	map[7][46]  = map[46][7]  = 1;
     398:	90 93 e3 15 	sts	0x15E3, r25
     39c:	80 93 e2 15 	sts	0x15E2, r24
     3a0:	90 93 43 07 	sts	0x0743, r25
     3a4:	80 93 42 07 	sts	0x0742, r24
	map[7][45]  = map[45][7]  = 1;
     3a8:	90 93 81 15 	sts	0x1581, r25
     3ac:	80 93 80 15 	sts	0x1580, r24
     3b0:	90 93 41 07 	sts	0x0741, r25
     3b4:	80 93 40 07 	sts	0x0740, r24
	map[3][26]  = map[26][3]  = 1;
     3b8:	90 93 33 0e 	sts	0x0E33, r25
     3bc:	80 93 32 0e 	sts	0x0E32, r24
     3c0:	90 93 93 05 	sts	0x0593, r25
     3c4:	80 93 92 05 	sts	0x0592, r24
	map[3][25]  = map[25][3]  = 1;
     3c8:	90 93 d1 0d 	sts	0x0DD1, r25
     3cc:	80 93 d0 0d 	sts	0x0DD0, r24
     3d0:	90 93 91 05 	sts	0x0591, r25
     3d4:	80 93 90 05 	sts	0x0590, r24
	map[35][36] = map[36][35] = 1;
     3d8:	90 93 47 12 	sts	0x1247, r25
     3dc:	80 93 46 12 	sts	0x1246, r24
     3e0:	90 93 e7 11 	sts	0x11E7, r25
     3e4:	80 93 e6 11 	sts	0x11E6, r24
	map[11][12] = map[12][11] = 1;
     3e8:	90 93 e7 08 	sts	0x08E7, r25
     3ec:	80 93 e6 08 	sts	0x08E6, r24
     3f0:	90 93 87 08 	sts	0x0887, r25
     3f4:	80 93 86 08 	sts	0x0886, r24
     3f8:	e0 e0       	ldi	r30, 0x00	; 0
     3fa:	f7 e1       	ldi	r31, 0x17	; 23
	for (int i = 1; i < 25; i++)
		for (int j = 0; j < 2; j++)
			map_link[i][j] = (j == 0 ? i : -1);
     3fc:	2f ef       	ldi	r18, 0xFF	; 255
     3fe:	3f ef       	ldi	r19, 0xFF	; 255
     400:	91 83       	std	Z+1, r25	; 0x01
     402:	80 83       	st	Z, r24
     404:	33 83       	std	Z+3, r19	; 0x03
     406:	22 83       	std	Z+2, r18	; 0x02
	map[7][45]  = map[45][7]  = 1;
	map[3][26]  = map[26][3]  = 1;
	map[3][25]  = map[25][3]  = 1;
	map[35][36] = map[36][35] = 1;
	map[11][12] = map[12][11] = 1;
	for (int i = 1; i < 25; i++)
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	34 96       	adiw	r30, 0x04	; 4
     40c:	89 31       	cpi	r24, 0x19	; 25
     40e:	91 05       	cpc	r25, r1
     410:	b9 f7       	brne	.-18     	; 0x400 <initMap+0x2c0>
		for (int j = 0; j < 2; j++)
			map_link[i][j] = (j == 0 ? i : -1);
	//Manually linking nodes to notes
	//Replace hard code with a better method if and when available
	map_link[25][0] = 1;
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	90 93 61 17 	sts	0x1761, r25
     41a:	80 93 60 17 	sts	0x1760, r24
	map_link[27][0] = 5;
     41e:	85 e0       	ldi	r24, 0x05	; 5
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	90 93 69 17 	sts	0x1769, r25
     426:	80 93 68 17 	sts	0x1768, r24
	map_link[28][0] = 9;
     42a:	89 e0       	ldi	r24, 0x09	; 9
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	90 93 6d 17 	sts	0x176D, r25
     432:	80 93 6c 17 	sts	0x176C, r24
	map_link[30][0] = 13;
     436:	8d e0       	ldi	r24, 0x0D	; 13
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	90 93 75 17 	sts	0x1775, r25
     43e:	80 93 74 17 	sts	0x1774, r24
	map_link[31][0] = 17;
     442:	81 e1       	ldi	r24, 0x11	; 17
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	90 93 79 17 	sts	0x1779, r25
     44a:	80 93 78 17 	sts	0x1778, r24
	map_link[33][0] = 21;
     44e:	85 e1       	ldi	r24, 0x15	; 21
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	90 93 81 17 	sts	0x1781, r25
     456:	80 93 80 17 	sts	0x1780, r24
	map_link[26][0] = 37;
     45a:	85 e2       	ldi	r24, 0x25	; 37
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	90 93 65 17 	sts	0x1765, r25
     462:	80 93 64 17 	sts	0x1764, r24
	map_link[26][1] = 38;
     466:	86 e2       	ldi	r24, 0x26	; 38
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	90 93 67 17 	sts	0x1767, r25
     46e:	80 93 66 17 	sts	0x1766, r24
	map_link[29][0] = 39;
     472:	87 e2       	ldi	r24, 0x27	; 39
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	90 93 71 17 	sts	0x1771, r25
     47a:	80 93 70 17 	sts	0x1770, r24
	map_link[29][1] = 40;
     47e:	88 e2       	ldi	r24, 0x28	; 40
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	90 93 73 17 	sts	0x1773, r25
     486:	80 93 72 17 	sts	0x1772, r24
	map_link[32][0] = 41;
     48a:	89 e2       	ldi	r24, 0x29	; 41
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	90 93 7d 17 	sts	0x177D, r25
     492:	80 93 7c 17 	sts	0x177C, r24
	map_link[32][1] = 42;
     496:	8a e2       	ldi	r24, 0x2A	; 42
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	90 93 7f 17 	sts	0x177F, r25
     49e:	80 93 7e 17 	sts	0x177E, r24
     4a2:	ce ee       	ldi	r28, 0xEE	; 238
     4a4:	d8 e1       	ldi	r29, 0x18	; 24
     4a6:	e2 e5       	ldi	r30, 0x52	; 82
     4a8:	f9 e1       	ldi	r31, 0x19	; 25
     4aa:	22 ee       	ldi	r18, 0xE2	; 226
     4ac:	3f ef       	ldi	r19, 0xFF	; 255
	
	//Storing absolute angle of every point.
	int sangle = -30;
	for (int i = 2; i < 23; i=i+2)
	{
		map_angle[i][i+1] = sangle;
     4ae:	c0 56       	subi	r28, 0x60	; 96
     4b0:	d0 40       	sbci	r29, 0x00	; 0
     4b2:	39 83       	std	Y+1, r19	; 0x01
     4b4:	28 83       	st	Y, r18
     4b6:	c0 5a       	subi	r28, 0xA0	; 160
     4b8:	df 4f       	sbci	r29, 0xFF	; 255
		map_angle[i+1][i+2] = sangle;
     4ba:	3d 83       	std	Y+5, r19	; 0x05
     4bc:	2c 83       	std	Y+4, r18	; 0x04
		if (sangle < 0)
     4be:	37 ff       	sbrs	r19, 7
     4c0:	04 c0       	rjmp	.+8      	; 0x4ca <initMap+0x38a>
		{
			map_angle[i+1][i] = sangle + 180;
     4c2:	c9 01       	movw	r24, r18
     4c4:	8c 54       	subi	r24, 0x4C	; 76
     4c6:	9f 4f       	sbci	r25, 0xFF	; 255
     4c8:	06 c0       	rjmp	.+12     	; 0x4d6 <initMap+0x396>
			map_angle[i+2][i+1] = sangle + 180;
		}
		if (sangle > 0)
     4ca:	12 16       	cp	r1, r18
     4cc:	13 06       	cpc	r1, r19
     4ce:	3c f4       	brge	.+14     	; 0x4de <initMap+0x39e>
		{
			map_angle[i+1][i] = sangle - 180;
     4d0:	c9 01       	movw	r24, r18
     4d2:	84 5b       	subi	r24, 0xB4	; 180
     4d4:	90 40       	sbci	r25, 0x00	; 0
     4d6:	99 83       	std	Y+1, r25	; 0x01
     4d8:	88 83       	st	Y, r24
			map_angle[i+2][i+1] = sangle - 180;
     4da:	91 83       	std	Z+1, r25	; 0x01
     4dc:	80 83       	st	Z, r24
		}
		sangle -= 30;
     4de:	2e 51       	subi	r18, 0x1E	; 30
     4e0:	30 40       	sbci	r19, 0x00	; 0
		if (sangle < -180)
     4e2:	8f ef       	ldi	r24, 0xFF	; 255
     4e4:	2c 34       	cpi	r18, 0x4C	; 76
     4e6:	38 07       	cpc	r19, r24
     4e8:	14 f4       	brge	.+4      	; 0x4ee <initMap+0x3ae>
     4ea:	26 e9       	ldi	r18, 0x96	; 150
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	c8 53       	subi	r28, 0x38	; 56
     4f0:	df 4f       	sbci	r29, 0xFF	; 255
     4f2:	e8 53       	subi	r30, 0x38	; 56
     4f4:	ff 4f       	sbci	r31, 0xFF	; 255
	map_link[32][0] = 41;
	map_link[32][1] = 42;
	
	//Storing absolute angle of every point.
	int sangle = -30;
	for (int i = 2; i < 23; i=i+2)
     4f6:	81 e2       	ldi	r24, 0x21	; 33
     4f8:	c6 38       	cpi	r28, 0x86	; 134
     4fa:	d8 07       	cpc	r29, r24
     4fc:	c1 f6       	brne	.-80     	; 0x4ae <initMap+0x36e>
		if (sangle < -180)
		{
			sangle = 150;
		}
	}
	map_angle[1][2] = 0;
     4fe:	10 92 2b 18 	sts	0x182B, r1
     502:	10 92 2a 18 	sts	0x182A, r1
	map_angle[2][1] = 180;
     506:	84 eb       	ldi	r24, 0xB4	; 180
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	90 93 8b 18 	sts	0x188B, r25
     50e:	80 93 8a 18 	sts	0x188A, r24
	map_angle[1][24] = 180;
     512:	90 93 57 18 	sts	0x1857, r25
     516:	80 93 56 18 	sts	0x1856, r24
	map_angle[24][1] = 0;
     51a:	10 92 f7 20 	sts	0x20F7, r1
     51e:	10 92 f6 20 	sts	0x20F6, r1

	map_angle[3][25]  = -150;
     522:	6a e6       	ldi	r22, 0x6A	; 106
     524:	7f ef       	ldi	r23, 0xFF	; 255
     526:	70 93 1d 19 	sts	0x191D, r23
     52a:	60 93 1c 19 	sts	0x191C, r22
    map_angle[25][3]  = 30;
     52e:	4e e1       	ldi	r20, 0x1E	; 30
     530:	50 e0       	ldi	r21, 0x00	; 0
     532:	50 93 5d 21 	sts	0x215D, r21
     536:	40 93 5c 21 	sts	0x215C, r20
	map_angle[3][26]  = -90;
     53a:	a6 ea       	ldi	r26, 0xA6	; 166
     53c:	bf ef       	ldi	r27, 0xFF	; 255
     53e:	b0 93 1f 19 	sts	0x191F, r27
     542:	a0 93 1e 19 	sts	0x191E, r26
	map_angle[26][3]  = 90;
     546:	ea e5       	ldi	r30, 0x5A	; 90
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	f9 af       	std	Y+57, r31	; 0x39
     54c:	e8 af       	std	Y+56, r30	; 0x38
	map_angle[7][45]  = 150;
     54e:	26 e9       	ldi	r18, 0x96	; 150
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	30 93 cd 1a 	sts	0x1ACD, r19
     556:	20 93 cc 1a 	sts	0x1ACC, r18
	map_angle[45][7]  = -30;
     55a:	82 ee       	ldi	r24, 0xE2	; 226
     55c:	9f ef       	ldi	r25, 0xFF	; 255
     55e:	90 93 0d 29 	sts	0x290D, r25
     562:	80 93 0c 29 	sts	0x290C, r24
	map_angle[7][46]  = -150;
     566:	70 93 cf 1a 	sts	0x1ACF, r23
     56a:	60 93 ce 1a 	sts	0x1ACE, r22
	map_angle[46][7]  = 30;
     56e:	50 93 6f 29 	sts	0x296F, r21
     572:	40 93 6e 29 	sts	0x296E, r20
	map_angle[11][29] = 90;
     576:	f0 93 35 1c 	sts	0x1C35, r31
     57a:	e0 93 34 1c 	sts	0x1C34, r30
	map_angle[29][11] = -90;
     57e:	b0 93 f5 22 	sts	0x22F5, r27
     582:	a0 93 f4 22 	sts	0x22F4, r26
	map_angle[11][30] = 150;
     586:	30 93 37 1c 	sts	0x1C37, r19
     58a:	20 93 36 1c 	sts	0x1C36, r18
	map_angle[30][11] = -30;
     58e:	90 93 57 23 	sts	0x2357, r25
     592:	80 93 56 23 	sts	0x2356, r24
	map_angle[15][47] = 30;
     596:	50 93 e1 1d 	sts	0x1DE1, r21
     59a:	40 93 e0 1d 	sts	0x1DE0, r20
	map_angle[47][15] = -150;
     59e:	70 93 e1 29 	sts	0x29E1, r23
     5a2:	60 93 e0 29 	sts	0x29E0, r22
	map_angle[15][48] = 90;
     5a6:	f0 93 e3 1d 	sts	0x1DE3, r31
     5aa:	e0 93 e2 1d 	sts	0x1DE2, r30
	map_angle[48][15] = -90;
     5ae:	b0 93 43 2a 	sts	0x2A43, r27
     5b2:	a0 93 42 2a 	sts	0x2A42, r26
	map_angle[19][33] = -30;
     5b6:	90 93 4d 1f 	sts	0x1F4D, r25
     5ba:	80 93 4c 1f 	sts	0x1F4C, r24
	map_angle[33][19] = 150;
     5be:	30 93 8d 24 	sts	0x248D, r19
     5c2:	20 93 8c 24 	sts	0x248C, r18
	map_angle[19][34] = 30;
     5c6:	50 93 4f 1f 	sts	0x1F4F, r21
     5ca:	40 93 4e 1f 	sts	0x1F4E, r20
	map_angle[34][19] = -150;
     5ce:	70 93 ef 24 	sts	0x24EF, r23
     5d2:	60 93 ee 24 	sts	0x24EE, r22
	map_angle[23][43] = -90;
     5d6:	b0 93 e9 20 	sts	0x20E9, r27
     5da:	a0 93 e8 20 	sts	0x20E8, r26
	map_angle[43][23] = 90;
     5de:	f0 93 69 28 	sts	0x2869, r31
     5e2:	e0 93 68 28 	sts	0x2868, r30
	map_angle[23][44] = -30;
     5e6:	90 93 eb 20 	sts	0x20EB, r25
     5ea:	80 93 ea 20 	sts	0x20EA, r24
	map_angle[44][23] = 150;
     5ee:	30 93 cb 28 	sts	0x28CB, r19
     5f2:	20 93 ca 28 	sts	0x28CA, r18
	map_angle[25][26] = -30;
     5f6:	9d 83       	std	Y+5, r25	; 0x05
     5f8:	8c 83       	std	Y+4, r24	; 0x04
	map_angle[26][25] = 150;
     5fa:	30 93 eb 21 	sts	0x21EB, r19
     5fe:	20 93 ea 21 	sts	0x21EA, r18
	map_angle[29][30] = -150;
     602:	70 93 1b 23 	sts	0x231B, r23
     606:	60 93 1a 23 	sts	0x231A, r22
	map_angle[30][29] = 30;
     60a:	50 93 7b 23 	sts	0x237B, r21
     60e:	40 93 7a 23 	sts	0x237A, r20
	map_angle[35][43] = 90;
     612:	f0 93 81 25 	sts	0x2581, r31
     616:	e0 93 80 25 	sts	0x2580, r30
	map_angle[43][35] = -90;
     61a:	b0 93 81 28 	sts	0x2881, r27
     61e:	a0 93 80 28 	sts	0x2880, r26
	map_angle[36][44] = 150;
     622:	30 93 e5 25 	sts	0x25E5, r19
     626:	20 93 e4 25 	sts	0x25E4, r18
	map_angle[44][36] = -30;
     62a:	90 93 e5 28 	sts	0x28E5, r25
     62e:	80 93 e4 28 	sts	0x28E4, r24
	map_angle[27][45] = -30;
     632:	90 93 75 22 	sts	0x2275, r25
     636:	80 93 74 22 	sts	0x2274, r24
	map_angle[45][27] = 150;
     63a:	30 93 35 29 	sts	0x2935, r19
     63e:	20 93 34 29 	sts	0x2934, r18
	map_angle[28][46] = 30;
     642:	50 93 d9 22 	sts	0x22D9, r21
     646:	40 93 d8 22 	sts	0x22D8, r20
	map_angle[46][28] = -150;
     64a:	70 93 99 29 	sts	0x2999, r23
     64e:	60 93 98 29 	sts	0x2998, r22
	map_angle[31][47] = -150;
     652:	70 93 01 24 	sts	0x2401, r23
     656:	60 93 00 24 	sts	0x2400, r22
	map_angle[47][31] = 30;
     65a:	50 93 01 2a 	sts	0x2A01, r21
     65e:	40 93 00 2a 	sts	0x2A00, r20
	map_angle[32][48] = -90;
     662:	b0 93 65 24 	sts	0x2465, r27
     666:	a0 93 64 24 	sts	0x2464, r26
	map_angle[48][32] = 90;
     66a:	f0 93 65 2a 	sts	0x2A65, r31
     66e:	e0 93 64 2a 	sts	0x2A64, r30
	map_angle[27][38] = -150;
     672:	70 93 67 22 	sts	0x2267, r23
     676:	60 93 66 22 	sts	0x2266, r22
	map_angle[38][27] = 30;
     67a:	50 93 87 26 	sts	0x2687, r21
     67e:	40 93 86 26 	sts	0x2686, r20
	map_angle[28][39] = 150;
     682:	30 93 cb 22 	sts	0x22CB, r19
     686:	20 93 ca 22 	sts	0x22CA, r18
	map_angle[39][28] = -30;
     68a:	90 93 eb 26 	sts	0x26EB, r25
     68e:	80 93 ea 26 	sts	0x26EA, r24
	map_angle[31][40] = 90;
     692:	f0 93 f3 23 	sts	0x23F3, r31
     696:	e0 93 f2 23 	sts	0x23F2, r30
	map_angle[40][31] = -90;
     69a:	b0 93 53 27 	sts	0x2753, r27
     69e:	a0 93 52 27 	sts	0x2752, r26
	map_angle[32][41] = 30;
     6a2:	50 93 57 24 	sts	0x2457, r21
     6a6:	40 93 56 24 	sts	0x2456, r20
	map_angle[41][32] = -150;
     6aa:	70 93 b7 27 	sts	0x27B7, r23
     6ae:	60 93 b6 27 	sts	0x27B6, r22
	map_angle[35][42] = -30;
     6b2:	90 93 7f 25 	sts	0x257F, r25
     6b6:	80 93 7e 25 	sts	0x257E, r24
	map_angle[42][35] = 150;
     6ba:	30 93 1f 28 	sts	0x281F, r19
     6be:	20 93 1e 28 	sts	0x281E, r18
	map_angle[36][37] = -90;
     6c2:	b0 93 d7 25 	sts	0x25D7, r27
     6c6:	a0 93 d6 25 	sts	0x25D6, r26
	map_angle[37][36] = 90;
     6ca:	f0 93 37 26 	sts	0x2637, r31
     6ce:	e0 93 36 26 	sts	0x2636, r30
	map_angle[39][40] = -150;
     6d2:	70 93 03 27 	sts	0x2703, r23
     6d6:	60 93 02 27 	sts	0x2702, r22
	map_angle[40][39] = 30;
     6da:	50 93 63 27 	sts	0x2763, r21
     6de:	40 93 62 27 	sts	0x2762, r20
	map_angle[37][38] = 150;
     6e2:	30 93 3b 26 	sts	0x263B, r19
     6e6:	20 93 3a 26 	sts	0x263A, r18
	map_angle[38][37] = -30;
     6ea:	90 93 9b 26 	sts	0x269B, r25
     6ee:	80 93 9a 26 	sts	0x269A, r24
	map_angle[41][42] = 90;
     6f2:	f0 93 cb 27 	sts	0x27CB, r31
     6f6:	e0 93 ca 27 	sts	0x27CA, r30
	map_angle[42][41] = -90;
     6fa:	b0 93 2b 28 	sts	0x282B, r27
     6fe:	a0 93 2a 28 	sts	0x282A, r26
	return 0;
}
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <fCostCalc>:
	*Input: gCost and hCost (heuristic)
	*Output: Single integer which is the fCost
	*Logic: Adds gCost and hCost to return the fCost.
	*Example Call: int fCost = fCostCalc (gCost, hCost);
*/
int fCostCalc (int gCost, int heuristic) {
     70c:	68 0f       	add	r22, r24
     70e:	79 1f       	adc	r23, r25
	return gCost + heuristic;
}
     710:	cb 01       	movw	r24, r22
     712:	08 95       	ret

00000714 <extractMin>:
	*Logic: Starts index of min at -1. It then checks for all the elements in
			the open list in one scan while also checking their cost and
			updating min in the process.
	*Example Call: int min = extractMin (openList, fCost, size);
*/
int extractMin (int list[], int cost[], int Size) {
     714:	ef 92       	push	r14
     716:	ff 92       	push	r15
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	8b 01       	movw	r16, r22
     722:	7a 01       	movw	r14, r20
     724:	bc 01       	movw	r22, r24
     726:	e8 01       	movw	r28, r16
     728:	af ef       	ldi	r26, 0xFF	; 255
     72a:	bf ef       	ldi	r27, 0xFF	; 255
     72c:	40 e0       	ldi	r20, 0x00	; 0
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	1b c0       	rjmp	.+54     	; 0x768 <extractMin+0x54>
	//Think of initializing min
	int min = -1;	
	for (int i = 0; i < Size; i++) {
		if (list[i] != 0) {
     732:	fb 01       	movw	r30, r22
     734:	80 81       	ld	r24, Z
     736:	91 81       	ldd	r25, Z+1	; 0x01
     738:	89 2b       	or	r24, r25
     73a:	89 f0       	breq	.+34     	; 0x75e <extractMin+0x4a>
			if (min == -1) {
     73c:	ff ef       	ldi	r31, 0xFF	; 255
     73e:	af 3f       	cpi	r26, 0xFF	; 255
     740:	bf 07       	cpc	r27, r31
     742:	61 f0       	breq	.+24     	; 0x75c <extractMin+0x48>
				min = i;
				continue;
			}
			min = ((cost[min] < cost[i]) ? min : i);
     744:	fd 01       	movw	r30, r26
     746:	ee 0f       	add	r30, r30
     748:	ff 1f       	adc	r31, r31
     74a:	e0 0f       	add	r30, r16
     74c:	f1 1f       	adc	r31, r17
     74e:	20 81       	ld	r18, Z
     750:	31 81       	ldd	r19, Z+1	; 0x01
     752:	88 81       	ld	r24, Y
     754:	99 81       	ldd	r25, Y+1	; 0x01
     756:	28 17       	cp	r18, r24
     758:	39 07       	cpc	r19, r25
     75a:	0c f0       	brlt	.+2      	; 0x75e <extractMin+0x4a>
     75c:	da 01       	movw	r26, r20
	*Example Call: int min = extractMin (openList, fCost, size);
*/
int extractMin (int list[], int cost[], int Size) {
	//Think of initializing min
	int min = -1;	
	for (int i = 0; i < Size; i++) {
     75e:	4f 5f       	subi	r20, 0xFF	; 255
     760:	5f 4f       	sbci	r21, 0xFF	; 255
     762:	6e 5f       	subi	r22, 0xFE	; 254
     764:	7f 4f       	sbci	r23, 0xFF	; 255
     766:	22 96       	adiw	r28, 0x02	; 2
     768:	4e 15       	cp	r20, r14
     76a:	5f 05       	cpc	r21, r15
     76c:	14 f3       	brlt	.-60     	; 0x732 <extractMin+0x1e>
			}
			min = ((cost[min] < cost[i]) ? min : i);
		}
	}
	return min;
}
     76e:	cd 01       	movw	r24, r26
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	ff 90       	pop	r15
     77a:	ef 90       	pop	r14
     77c:	08 95       	ret

0000077e <reverse>:
			index is strictly less than the right one, it swaps those. It then
			increases the left pointer while decreasing the right one.
	*Example Call: reverse (arr, size);
*/
void reverse (int *Rev, int Size) {
	int j = Size-1, i = 0, temp;
     77e:	61 50       	subi	r22, 0x01	; 1
     780:	70 40       	sbci	r23, 0x00	; 0
     782:	dc 01       	movw	r26, r24
     784:	fb 01       	movw	r30, r22
     786:	ee 0f       	add	r30, r30
     788:	ff 1f       	adc	r31, r31
     78a:	ea 0f       	add	r30, r26
     78c:	fb 1f       	adc	r31, r27
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	0e c0       	rjmp	.+28     	; 0x7b0 <reverse+0x32>
	while(i < j) {
		temp = Rev[i];
     794:	2d 91       	ld	r18, X+
     796:	3c 91       	ld	r19, X
     798:	11 97       	sbiw	r26, 0x01	; 1
		Rev[i] = Rev[j];
     79a:	80 81       	ld	r24, Z
     79c:	91 81       	ldd	r25, Z+1	; 0x01
     79e:	8d 93       	st	X+, r24
     7a0:	9d 93       	st	X+, r25
		Rev[j] = temp;
     7a2:	31 83       	std	Z+1, r19	; 0x01
     7a4:	20 83       	st	Z, r18
		i++;
     7a6:	4f 5f       	subi	r20, 0xFF	; 255
     7a8:	5f 4f       	sbci	r21, 0xFF	; 255
		j--;
     7aa:	61 50       	subi	r22, 0x01	; 1
     7ac:	70 40       	sbci	r23, 0x00	; 0
     7ae:	32 97       	sbiw	r30, 0x02	; 2
			increases the left pointer while decreasing the right one.
	*Example Call: reverse (arr, size);
*/
void reverse (int *Rev, int Size) {
	int j = Size-1, i = 0, temp;
	while(i < j) {
     7b0:	46 17       	cp	r20, r22
     7b2:	57 07       	cpc	r21, r23
     7b4:	7c f3       	brlt	.-34     	; 0x794 <reverse+0x16>
		Rev[i] = Rev[j];
		Rev[j] = temp;
		i++;
		j--;
	}
}
     7b6:	08 95       	ret

000007b8 <adc_pin_config>:
}*/

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     7b8:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     7ba:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     7bc:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     7c0:	10 92 08 01 	sts	0x0108, r1
}
     7c4:	08 95       	ret

000007c6 <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     7c6:	81 b1       	in	r24, 0x01	; 1
     7c8:	8f 60       	ori	r24, 0x0F	; 15
     7ca:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     7cc:	82 b1       	in	r24, 0x02	; 2
     7ce:	80 7f       	andi	r24, 0xF0	; 240
     7d0:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     7d2:	ea e0       	ldi	r30, 0x0A	; 10
     7d4:	f1 e0       	ldi	r31, 0x01	; 1
     7d6:	80 81       	ld	r24, Z
     7d8:	88 61       	ori	r24, 0x18	; 24
     7da:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     7dc:	eb e0       	ldi	r30, 0x0B	; 11
     7de:	f1 e0       	ldi	r31, 0x01	; 1
     7e0:	80 81       	ld	r24, Z
     7e2:	88 61       	ori	r24, 0x18	; 24
     7e4:	80 83       	st	Z, r24
}
     7e6:	08 95       	ret

000007e8 <left_encoder_pin_config>:

void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     7e8:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     7ea:	74 9a       	sbi	0x0e, 4	; 14
}
     7ec:	08 95       	ret

000007ee <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     7ee:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     7f0:	75 9a       	sbi	0x0e, 5	; 14
}
     7f2:	08 95       	ret

000007f4 <port_initial>:
}*/

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     7f4:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     7f6:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     7f8:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     7fc:	10 92 08 01 	sts	0x0108, r1
}

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     800:	81 b1       	in	r24, 0x01	; 1
     802:	8f 60       	ori	r24, 0x0F	; 15
     804:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     806:	82 b1       	in	r24, 0x02	; 2
     808:	80 7f       	andi	r24, 0xF0	; 240
     80a:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     80c:	ea e0       	ldi	r30, 0x0A	; 10
     80e:	f1 e0       	ldi	r31, 0x01	; 1
     810:	80 81       	ld	r24, Z
     812:	88 61       	ori	r24, 0x18	; 24
     814:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     816:	eb e0       	ldi	r30, 0x0B	; 11
     818:	f1 e0       	ldi	r31, 0x01	; 1
     81a:	80 81       	ld	r24, Z
     81c:	88 61       	ori	r24, 0x18	; 24
     81e:	80 83       	st	Z, r24
}

void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     820:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     822:	74 9a       	sbi	0x0e, 4	; 14
}

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     824:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     826:	75 9a       	sbi	0x0e, 5	; 14
	adc_pin_config();
	motion_pin_config();	
	//buzzer_pin_config();
	left_encoder_pin_config(); //left encoder pin config
	right_encoder_pin_config(); //right encoder pin config
}
     828:	08 95       	ret

0000082a <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
     82a:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     82c:	ea e6       	ldi	r30, 0x6A	; 106
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	80 81       	ld	r24, Z
     832:	82 60       	ori	r24, 0x02	; 2
     834:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     836:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
     838:	78 94       	sei
}
     83a:	08 95       	ret

0000083c <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
     83c:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     83e:	ea e6       	ldi	r30, 0x6A	; 106
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	80 81       	ld	r24, Z
     844:	88 60       	ori	r24, 0x08	; 8
     846:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     848:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
     84a:	78 94       	sei
}
     84c:	08 95       	ret

0000084e <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
     84e:	1f 92       	push	r1
     850:	0f 92       	push	r0
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	0f 92       	push	r0
     856:	11 24       	eor	r1, r1
     858:	8f 93       	push	r24
     85a:	9f 93       	push	r25
     85c:	af 93       	push	r26
     85e:	bf 93       	push	r27
	ShaftCountRight++;  //increment right shaft position count
     860:	80 91 22 04 	lds	r24, 0x0422
     864:	90 91 23 04 	lds	r25, 0x0423
     868:	a0 91 24 04 	lds	r26, 0x0424
     86c:	b0 91 25 04 	lds	r27, 0x0425
     870:	01 96       	adiw	r24, 0x01	; 1
     872:	a1 1d       	adc	r26, r1
     874:	b1 1d       	adc	r27, r1
     876:	80 93 22 04 	sts	0x0422, r24
     87a:	90 93 23 04 	sts	0x0423, r25
     87e:	a0 93 24 04 	sts	0x0424, r26
     882:	b0 93 25 04 	sts	0x0425, r27
}
     886:	bf 91       	pop	r27
     888:	af 91       	pop	r26
     88a:	9f 91       	pop	r25
     88c:	8f 91       	pop	r24
     88e:	0f 90       	pop	r0
     890:	0f be       	out	0x3f, r0	; 63
     892:	0f 90       	pop	r0
     894:	1f 90       	pop	r1
     896:	18 95       	reti

00000898 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     898:	1f 92       	push	r1
     89a:	0f 92       	push	r0
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	0f 92       	push	r0
     8a0:	11 24       	eor	r1, r1
     8a2:	8f 93       	push	r24
     8a4:	9f 93       	push	r25
     8a6:	af 93       	push	r26
     8a8:	bf 93       	push	r27
	ShaftCountLeft++;  //increment left shaft position count
     8aa:	80 91 1e 04 	lds	r24, 0x041E
     8ae:	90 91 1f 04 	lds	r25, 0x041F
     8b2:	a0 91 20 04 	lds	r26, 0x0420
     8b6:	b0 91 21 04 	lds	r27, 0x0421
     8ba:	01 96       	adiw	r24, 0x01	; 1
     8bc:	a1 1d       	adc	r26, r1
     8be:	b1 1d       	adc	r27, r1
     8c0:	80 93 1e 04 	sts	0x041E, r24
     8c4:	90 93 1f 04 	sts	0x041F, r25
     8c8:	a0 93 20 04 	sts	0x0420, r26
     8cc:	b0 93 21 04 	sts	0x0421, r27
}
     8d0:	bf 91       	pop	r27
     8d2:	af 91       	pop	r26
     8d4:	9f 91       	pop	r25
     8d6:	8f 91       	pop	r24
     8d8:	0f 90       	pop	r0
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	0f 90       	pop	r0
     8de:	1f 90       	pop	r1
     8e0:	18 95       	reti

000008e2 <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     8e2:	e1 e2       	ldi	r30, 0x21	; 33
     8e4:	f1 e0       	ldi	r31, 0x01	; 1
     8e6:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     8e8:	9f ef       	ldi	r25, 0xFF	; 255
     8ea:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     8f4:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     8f8:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     8fc:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     900:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     904:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     908:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     90c:	89 ea       	ldi	r24, 0xA9	; 169
     90e:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     912:	8b e0       	ldi	r24, 0x0B	; 11
     914:	80 83       	st	Z, r24
}
     916:	08 95       	ret

00000918 <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
     918:	ea e7       	ldi	r30, 0x7A	; 122
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     91e:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     922:	80 e2       	ldi	r24, 0x20	; 32
     924:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     928:	80 e8       	ldi	r24, 0x80	; 128
     92a:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     92c:	86 e8       	ldi	r24, 0x86	; 134
     92e:	80 83       	st	Z, r24
}
     930:	08 95       	ret

00000932 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
     932:	98 2f       	mov	r25, r24
	unsigned char a;
	if(Ch>7)
     934:	88 30       	cpi	r24, 0x08	; 8
     936:	18 f0       	brcs	.+6      	; 0x93e <ADC_Conversion+0xc>
	{
		ADCSRB = 0x08;
     938:	88 e0       	ldi	r24, 0x08	; 8
     93a:	80 93 7b 00 	sts	0x007B, r24
	}
	Ch = Ch & 0x07;  			
	ADMUX= 0x20| Ch;	   		
     93e:	97 70       	andi	r25, 0x07	; 7
     940:	90 62       	ori	r25, 0x20	; 32
     942:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     946:	80 91 7a 00 	lds	r24, 0x007A
     94a:	80 64       	ori	r24, 0x40	; 64
     94c:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     950:	80 91 7a 00 	lds	r24, 0x007A
     954:	84 ff       	sbrs	r24, 4
     956:	fc cf       	rjmp	.-8      	; 0x950 <ADC_Conversion+0x1e>
	a=ADCH;
     958:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     95c:	90 91 7a 00 	lds	r25, 0x007A
     960:	90 61       	ori	r25, 0x10	; 16
     962:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB = 0x00;
     966:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     96a:	08 95       	ret

0000096c <velocity>:
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     96c:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     970:	60 93 2a 01 	sts	0x012A, r22
}
     974:	08 95       	ret

00000976 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     976:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     978:	90 7f       	andi	r25, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     97a:	8f 70       	andi	r24, 0x0F	; 15
     97c:	89 2b       	or	r24, r25
 PORTA = PortARestore; 		// executing the command
     97e:	82 b9       	out	0x02, r24	; 2
}
     980:	08 95       	ret

00000982 <forward>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     982:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     984:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     986:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     988:	82 b9       	out	0x02, r24	; 2
}

void forward (void) 
{
  motion_set (0x06);
}
     98a:	08 95       	ret

0000098c <back>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     98c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     98e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     990:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     992:	82 b9       	out	0x02, r24	; 2
}

void back (void) //both wheels backward
{
  motion_set(0x09);
}
     994:	08 95       	ret

00000996 <left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     996:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     998:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     99a:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     99c:	82 b9       	out	0x02, r24	; 2
}

void left (void) //Left wheel backward, Right wheel forward
{
  motion_set(0x05);
}
     99e:	08 95       	ret

000009a0 <right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9a0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9a2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9a4:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     9a6:	82 b9       	out	0x02, r24	; 2
}

void right (void) //Left wheel forward, Right wheel backward
{
  motion_set(0x0A);
}
     9a8:	08 95       	ret

000009aa <soft_left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9aa:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9ac:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9ae:	84 60       	ori	r24, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     9b0:	82 b9       	out	0x02, r24	; 2
}

void soft_left (void) //Left wheel stationary, Right wheel forward
{
 motion_set(0x04);
}
     9b2:	08 95       	ret

000009b4 <soft_right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9b4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9b6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9b8:	82 60       	ori	r24, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     9ba:	82 b9       	out	0x02, r24	; 2
}

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
 motion_set(0x02);
}
     9bc:	08 95       	ret

000009be <soft_left_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9be:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9c0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9c2:	81 60       	ori	r24, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     9c4:	82 b9       	out	0x02, r24	; 2
}

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
 motion_set(0x01);
}
     9c6:	08 95       	ret

000009c8 <soft_right_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9c8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9ca:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9cc:	88 60       	ori	r24, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     9ce:	82 b9       	out	0x02, r24	; 2
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
 motion_set(0x08);
}
     9d0:	08 95       	ret

000009d2 <stop>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9d2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9d4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     9d6:	82 b9       	out	0x02, r24	; 2
}

void stop (void)
{
  motion_set (0x00);
}
     9d8:	08 95       	ret

000009da <angle_rotate>:

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     9da:	ef 92       	push	r14
     9dc:	ff 92       	push	r15
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	bc 01       	movw	r22, r24
     9e8:	cd 01       	movw	r24, r26
     9ea:	0e 94 bf 12 	call	0x257e	; 0x257e <__floatunsisf>
     9ee:	28 e4       	ldi	r18, 0x48	; 72
     9f0:	31 ee       	ldi	r19, 0xE1	; 225
     9f2:	42 e8       	ldi	r20, 0x82	; 130
     9f4:	50 e4       	ldi	r21, 0x40	; 64
     9f6:	0e 94 8f 11 	call	0x231e	; 0x231e <__divsf3>
     9fa:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
     9fe:	7b 01       	movw	r14, r22
     a00:	00 e0       	ldi	r16, 0x00	; 0
     a02:	10 e0       	ldi	r17, 0x00	; 0
	ShaftCountRight = 0;
     a04:	10 92 22 04 	sts	0x0422, r1
     a08:	10 92 23 04 	sts	0x0423, r1
     a0c:	10 92 24 04 	sts	0x0424, r1
     a10:	10 92 25 04 	sts	0x0425, r1
	ShaftCountLeft = 0;
     a14:	10 92 1e 04 	sts	0x041E, r1
     a18:	10 92 1f 04 	sts	0x041F, r1
     a1c:	10 92 20 04 	sts	0x0420, r1
     a20:	10 92 21 04 	sts	0x0421, r1

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     a24:	80 91 22 04 	lds	r24, 0x0422
     a28:	90 91 23 04 	lds	r25, 0x0423
     a2c:	a0 91 24 04 	lds	r26, 0x0424
     a30:	b0 91 25 04 	lds	r27, 0x0425
     a34:	20 91 1e 04 	lds	r18, 0x041E
     a38:	30 91 1f 04 	lds	r19, 0x041F
     a3c:	40 91 20 04 	lds	r20, 0x0420
     a40:	50 91 21 04 	lds	r21, 0x0421
     a44:	8e 15       	cp	r24, r14
     a46:	9f 05       	cpc	r25, r15
     a48:	a0 07       	cpc	r26, r16
     a4a:	b1 07       	cpc	r27, r17
     a4c:	28 f4       	brcc	.+10     	; 0xa58 <angle_rotate+0x7e>
     a4e:	2e 15       	cp	r18, r14
     a50:	3f 05       	cpc	r19, r15
     a52:	40 07       	cpc	r20, r16
     a54:	51 07       	cpc	r21, r17
     a56:	30 f3       	brcs	.-52     	; 0xa24 <angle_rotate+0x4a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a58:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a5a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     a5c:	82 b9       	out	0x02, r24	; 2
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
		break;
	}
	stop(); //Stop robot
}
     a5e:	1f 91       	pop	r17
     a60:	0f 91       	pop	r16
     a62:	ff 90       	pop	r15
     a64:	ef 90       	pop	r14
     a66:	08 95       	ret

00000a68 <left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a68:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a6a:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a6c:	25 60       	ori	r18, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     a6e:	22 b9       	out	0x02, r18	; 2

void left_degrees(unsigned int Degrees)
{
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
	angle_rotate(Degrees);
     a70:	0e 94 ed 04 	call	0x9da	; 0x9da <angle_rotate>
}
     a74:	08 95       	ret

00000a76 <right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a76:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a78:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a7a:	2a 60       	ori	r18, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     a7c:	22 b9       	out	0x02, r18	; 2

void right_degrees(unsigned int Degrees)
{
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
	angle_rotate(Degrees);
     a7e:	0e 94 ed 04 	call	0x9da	; 0x9da <angle_rotate>
}
     a82:	08 95       	ret

00000a84 <soft_left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a84:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a86:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a88:	24 60       	ori	r18, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     a8a:	22 b9       	out	0x02, r18	; 2
void soft_left_degrees(unsigned int Degrees)
{
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left(); //Turn soft left
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     a8c:	88 0f       	add	r24, r24
     a8e:	99 1f       	adc	r25, r25
     a90:	0e 94 ed 04 	call	0x9da	; 0x9da <angle_rotate>
}
     a94:	08 95       	ret

00000a96 <soft_right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a96:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a98:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a9a:	22 60       	ori	r18, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     a9c:	22 b9       	out	0x02, r18	; 2
void soft_right_degrees(unsigned int Degrees)
{
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right();  //Turn soft right
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     a9e:	88 0f       	add	r24, r24
     aa0:	99 1f       	adc	r25, r25
     aa2:	0e 94 ed 04 	call	0x9da	; 0x9da <angle_rotate>
}
     aa6:	08 95       	ret

00000aa8 <soft_left_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     aa8:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     aaa:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     aac:	21 60       	ori	r18, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     aae:	22 b9       	out	0x02, r18	; 2
void soft_left_2_degrees(unsigned int Degrees)
{
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left_2(); //Turn reverse soft left
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	0e 94 ed 04 	call	0x9da	; 0x9da <angle_rotate>
}
     ab8:	08 95       	ret

00000aba <soft_right_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     aba:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     abc:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     abe:	28 60       	ori	r18, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     ac0:	22 b9       	out	0x02, r18	; 2
void soft_right_2_degrees(unsigned int Degrees)
{
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right_2();  //Turn reverse soft right
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     ac2:	88 0f       	add	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	0e 94 ed 04 	call	0x9da	; 0x9da <angle_rotate>
}
     aca:	08 95       	ret

00000acc <initial_devices>:

void initial_devices (void)
{
 	cli(); //Clears the global interrupts
     acc:	f8 94       	cli
	port_initial();
     ace:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <port_initial>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void adc_init()
{
	ADCSRA = 0x00;
     ad2:	ea e7       	ldi	r30, 0x7A	; 122
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     ad8:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     adc:	80 e2       	ldi	r24, 0x20	; 32
     ade:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     ae2:	80 e8       	ldi	r24, 0x80	; 128
     ae4:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     ae6:	86 e8       	ldi	r24, 0x86	; 134
     ae8:	80 83       	st	Z, r24
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     aea:	e1 e2       	ldi	r30, 0x21	; 33
     aec:	f1 e0       	ldi	r31, 0x01	; 1
     aee:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     af0:	9f ef       	ldi	r25, 0xFF	; 255
     af2:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     afc:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     b00:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     b04:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     b08:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     b0c:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     b10:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     b14:	89 ea       	ldi	r24, 0xA9	; 169
     b16:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     b1a:	8b e0       	ldi	r24, 0x0B	; 11
     b1c:	80 83       	st	Z, r24
	right_encoder_pin_config(); //right encoder pin config
}

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
     b1e:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     b20:	ea e6       	ldi	r30, 0x6A	; 106
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z
     b26:	82 60       	ori	r24, 0x02	; 2
     b28:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     b2a:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
     b2c:	78 94       	sei
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
     b2e:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     b30:	ea e6       	ldi	r30, 0x6A	; 106
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 81       	ld	r24, Z
     b36:	88 60       	ori	r24, 0x08	; 8
     b38:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     b3a:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
     b3c:	78 94       	sei
	port_initial();
	adc_init();
	timer5_init();
	left_position_encoder_interrupt_init();
	right_position_encoder_interrupt_init();
	sei();   //Enables the global interrupts
     b3e:	78 94       	sei
}
     b40:	08 95       	ret

00000b42 <move>:

void move()
{
	senser_value_L = ADC_Conversion(3);	//Getting data of Left WL Sensor
     b42:	83 e0       	ldi	r24, 0x03	; 3
     b44:	0e 94 99 04 	call	0x932	; 0x932 <ADC_Conversion>
     b48:	80 93 8d 17 	sts	0x178D, r24
     b4c:	10 92 8e 17 	sts	0x178E, r1
	senser_value_C = ADC_Conversion(2);	//Getting data of Center WL Sensor
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	0e 94 99 04 	call	0x932	; 0x932 <ADC_Conversion>
     b56:	80 93 fa 16 	sts	0x16FA, r24
     b5a:	10 92 fb 16 	sts	0x16FB, r1
	senser_value_R = ADC_Conversion(1);	//Getting data of Right WL Sensor
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	0e 94 99 04 	call	0x932	; 0x932 <ADC_Conversion>
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	30 93 bf 17 	sts	0x17BF, r19
     b6c:	20 93 be 17 	sts	0x17BE, r18

	// If black line is at left sensor and center sensor is not decting a black line
	// Speed up right motor a bit to get a left turn
	// Further set the flag to be equal to '1' suggesting that bot has taken left turn this time
	if ((senser_value_L > Threshold) && (senser_value_C < Threshold))
     b70:	40 91 8d 17 	lds	r20, 0x178D
     b74:	50 91 8e 17 	lds	r21, 0x178E
     b78:	49 32       	cpi	r20, 0x29	; 41
     b7a:	51 05       	cpc	r21, r1
     b7c:	f4 f0       	brlt	.+60     	; 0xbba <move+0x78>
     b7e:	80 91 fa 16 	lds	r24, 0x16FA
     b82:	90 91 fb 16 	lds	r25, 0x16FB
     b86:	88 97       	sbiw	r24, 0x28	; 40
     b88:	c4 f4       	brge	.+48     	; 0xbba <move+0x78>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     b8a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b8c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     b8e:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     b90:	82 b9       	out	0x02, r24	; 2
	// Speed up right motor a bit to get a left turn
	// Further set the flag to be equal to '1' suggesting that bot has taken left turn this time
	if ((senser_value_L > Threshold) && (senser_value_C < Threshold))
	{
		forward();
		left_motor = 200;
     b92:	88 ec       	ldi	r24, 0xC8	; 200
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	90 93 2d 04 	sts	0x042D, r25
     b9a:	80 93 2c 04 	sts	0x042C, r24
		right_motor = 255;
     b9e:	8f ef       	ldi	r24, 0xFF	; 255
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	90 93 2f 04 	sts	0x042F, r25
     ba6:	80 93 2e 04 	sts	0x042E, r24
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     baa:	88 ec       	ldi	r24, 0xC8	; 200
     bac:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     bb0:	8f ef       	ldi	r24, 0xFF	; 255
     bb2:	80 93 2a 01 	sts	0x012A, r24
	{
		forward();
		left_motor = 200;
		right_motor = 255;
		velocity(left_motor,right_motor);
		flag = 1;
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	20 c0       	rjmp	.+64     	; 0xbfa <move+0xb8>
	}
	// If black line is at right sensor and center sensor is not decting a black line
	// Speed up left motor a bit to get a right turn
	// Further set the flag to be equal to '2' suggesting that bot has taken right turn this time
	else if ((senser_value_R > Threshold) && (senser_value_C < Threshold))
     bba:	29 32       	cpi	r18, 0x29	; 41
     bbc:	31 05       	cpc	r19, r1
     bbe:	04 f1       	brlt	.+64     	; 0xc00 <move+0xbe>
     bc0:	80 91 fa 16 	lds	r24, 0x16FA
     bc4:	90 91 fb 16 	lds	r25, 0x16FB
     bc8:	88 97       	sbiw	r24, 0x28	; 40
     bca:	d4 f4       	brge	.+52     	; 0xc00 <move+0xbe>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     bcc:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     bce:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     bd0:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     bd2:	82 b9       	out	0x02, r24	; 2
	// Speed up left motor a bit to get a right turn
	// Further set the flag to be equal to '2' suggesting that bot has taken right turn this time
	else if ((senser_value_R > Threshold) && (senser_value_C < Threshold))
	{
		forward();
		left_motor = 255;
     bd4:	8f ef       	ldi	r24, 0xFF	; 255
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	90 93 2d 04 	sts	0x042D, r25
     bdc:	80 93 2c 04 	sts	0x042C, r24
		right_motor = 200;
     be0:	88 ec       	ldi	r24, 0xC8	; 200
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	90 93 2f 04 	sts	0x042F, r25
     be8:	80 93 2e 04 	sts	0x042E, r24
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     bec:	8f ef       	ldi	r24, 0xFF	; 255
     bee:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     bf2:	88 ec       	ldi	r24, 0xC8	; 200
     bf4:	80 93 2a 01 	sts	0x012A, r24
	{
		forward();
		left_motor = 255;
		right_motor = 200;
		velocity(left_motor,right_motor);
		flag = 2;
     bf8:	82 e0       	ldi	r24, 0x02	; 2
     bfa:	80 93 26 04 	sts	0x0426, r24
     bfe:	08 95       	ret
	}
	// If black line is at center sensor and left & right sensors are not decting a black line
	// Speed up both motors equally to get a straight movement
	else if ((senser_value_C > Threshold) && (senser_value_L < Threshold) && (senser_value_R < Threshold))
     c00:	80 91 fa 16 	lds	r24, 0x16FA
     c04:	90 91 fb 16 	lds	r25, 0x16FB
     c08:	89 32       	cpi	r24, 0x29	; 41
     c0a:	91 05       	cpc	r25, r1
     c0c:	c4 f0       	brlt	.+48     	; 0xc3e <move+0xfc>
     c0e:	48 32       	cpi	r20, 0x28	; 40
     c10:	51 05       	cpc	r21, r1
     c12:	ac f4       	brge	.+42     	; 0xc3e <move+0xfc>
     c14:	28 32       	cpi	r18, 0x28	; 40
     c16:	31 05       	cpc	r19, r1
     c18:	dc f5       	brge	.+118    	; 0xc90 <move+0x14e>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     c1a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     c1c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     c1e:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     c20:	82 b9       	out	0x02, r24	; 2
	// If black line is at center sensor and left & right sensors are not decting a black line
	// Speed up both motors equally to get a straight movement
	else if ((senser_value_C > Threshold) && (senser_value_L < Threshold) && (senser_value_R < Threshold))
	{
		forward();
		left_motor = 255;
     c22:	8f ef       	ldi	r24, 0xFF	; 255
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	90 93 2d 04 	sts	0x042D, r25
     c2a:	80 93 2c 04 	sts	0x042C, r24
		right_motor = 255;
     c2e:	90 93 2f 04 	sts	0x042F, r25
     c32:	80 93 2e 04 	sts	0x042E, r24
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c36:	8f ef       	ldi	r24, 0xFF	; 255
     c38:	80 93 28 01 	sts	0x0128, r24
     c3c:	20 c0       	rjmp	.+64     	; 0xc7e <move+0x13c>
		right_motor = 255;
		velocity(left_motor, right_motor);
	}
	// If black line is nowhere to be found
	// Speed up right or left motor according to the flag set
	else if ((senser_value_R < Threshold) && (senser_value_C < Threshold) && (senser_value_L < Threshold))
     c3e:	28 32       	cpi	r18, 0x28	; 40
     c40:	31 05       	cpc	r19, r1
     c42:	34 f5       	brge	.+76     	; 0xc90 <move+0x14e>
     c44:	88 97       	sbiw	r24, 0x28	; 40
     c46:	24 f5       	brge	.+72     	; 0xc90 <move+0x14e>
     c48:	48 32       	cpi	r20, 0x28	; 40
     c4a:	51 05       	cpc	r21, r1
     c4c:	0c f5       	brge	.+66     	; 0xc90 <move+0x14e>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     c4e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     c50:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     c52:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     c54:	82 b9       	out	0x02, r24	; 2
	// If black line is nowhere to be found
	// Speed up right or left motor according to the flag set
	else if ((senser_value_R < Threshold) && (senser_value_C < Threshold) && (senser_value_L < Threshold))
	{
		forward();
		left_motor = 170;
     c56:	8a ea       	ldi	r24, 0xAA	; 170
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	90 93 2d 04 	sts	0x042D, r25
     c5e:	80 93 2c 04 	sts	0x042C, r24
		right_motor = 255;
     c62:	8f ef       	ldi	r24, 0xFF	; 255
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	90 93 2f 04 	sts	0x042F, r25
     c6a:	80 93 2e 04 	sts	0x042E, r24
		if (flag == 1) {
     c6e:	80 91 26 04 	lds	r24, 0x0426
     c72:	81 30       	cpi	r24, 0x01	; 1
     c74:	39 f4       	brne	.+14     	; 0xc84 <move+0x142>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c76:	8a ea       	ldi	r24, 0xAA	; 170
     c78:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
     c7e:	80 93 2a 01 	sts	0x012A, r24
     c82:	08 95       	ret
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c84:	8f ef       	ldi	r24, 0xFF	; 255
     c86:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     c8a:	8a ea       	ldi	r24, 0xAA	; 170
     c8c:	80 93 2a 01 	sts	0x012A, r24
     c90:	08 95       	ret

00000c92 <linear_distance_mm>:
}

//Function used for moving robot forward by specified distance

void linear_distance_mm(unsigned int DistanceInMM)
{
     c92:	ef 92       	push	r14
     c94:	ff 92       	push	r15
     c96:	0f 93       	push	r16
     c98:	1f 93       	push	r17
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	bc 01       	movw	r22, r24
     ca0:	cd 01       	movw	r24, r26
     ca2:	0e 94 bf 12 	call	0x257e	; 0x257e <__floatunsisf>
     ca6:	25 ee       	ldi	r18, 0xE5	; 229
     ca8:	30 ed       	ldi	r19, 0xD0	; 208
     caa:	4a ea       	ldi	r20, 0xAA	; 170
     cac:	50 e4       	ldi	r21, 0x40	; 64
     cae:	0e 94 8f 11 	call	0x231e	; 0x231e <__divsf3>
     cb2:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fixunssfsi>
     cb6:	7b 01       	movw	r14, r22
     cb8:	8c 01       	movw	r16, r24
	
	ShaftCountRight = 0;
     cba:	10 92 22 04 	sts	0x0422, r1
     cbe:	10 92 23 04 	sts	0x0423, r1
     cc2:	10 92 24 04 	sts	0x0424, r1
     cc6:	10 92 25 04 	sts	0x0425, r1
	while(1)
	{
		move();
     cca:	0e 94 a1 05 	call	0xb42	; 0xb42 <move>
		if(ShaftCountRight > ReqdShaftCountInt)
     cce:	80 91 22 04 	lds	r24, 0x0422
     cd2:	90 91 23 04 	lds	r25, 0x0423
     cd6:	a0 91 24 04 	lds	r26, 0x0424
     cda:	b0 91 25 04 	lds	r27, 0x0425
     cde:	e8 16       	cp	r14, r24
     ce0:	f9 06       	cpc	r15, r25
     ce2:	0a 07       	cpc	r16, r26
     ce4:	1b 07       	cpc	r17, r27
     ce6:	88 f7       	brcc	.-30     	; 0xcca <linear_distance_mm+0x38>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     ce8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     cea:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     cec:	82 b9       	out	0x02, r24	; 2
		{
			break;
		}
	}
	stop(); //Stop robot
}
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	08 95       	ret

00000cf8 <back_mm>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     cf8:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     cfa:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     cfc:	29 60       	ori	r18, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     cfe:	22 b9       	out	0x02, r18	; 2
}

void back_mm(unsigned int DistanceInMM)
{
	back();
	linear_distance_mm(DistanceInMM);
     d00:	0e 94 49 06 	call	0xc92	; 0xc92 <linear_distance_mm>
}
     d04:	08 95       	ret

00000d06 <forward_mm>:
	stop(); //Stop robot
}

void forward_mm(unsigned int DistanceInMM)
{
	linear_distance_mm(DistanceInMM);
     d06:	0e 94 49 06 	call	0xc92	; 0xc92 <linear_distance_mm>
}
     d0a:	08 95       	ret

00000d0c <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d0c:	86 e6       	ldi	r24, 0x66	; 102
     d0e:	9e e0       	ldi	r25, 0x0E	; 14
     d10:	fc 01       	movw	r30, r24
     d12:	31 97       	sbiw	r30, 0x01	; 1
     d14:	f1 f7       	brne	.-4      	; 0xd12 <lcd_set_4bit+0x6>
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     d16:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     d18:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     d1a:	40 e3       	ldi	r20, 0x30	; 48
     d1c:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     d1e:	42 9a       	sbi	0x08, 2	; 8
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	38 e4       	ldi	r19, 0x48	; 72
     d24:	f9 01       	movw	r30, r18
     d26:	31 97       	sbiw	r30, 0x01	; 1
     d28:	f1 f7       	brne	.-4      	; 0xd26 <lcd_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     d2a:	42 98       	cbi	0x08, 2	; 8
     d2c:	fc 01       	movw	r30, r24
     d2e:	31 97       	sbiw	r30, 0x01	; 1
     d30:	f1 f7       	brne	.-4      	; 0xd2e <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     d32:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     d34:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     d36:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     d38:	42 9a       	sbi	0x08, 2	; 8
     d3a:	f9 01       	movw	r30, r18
     d3c:	31 97       	sbiw	r30, 0x01	; 1
     d3e:	f1 f7       	brne	.-4      	; 0xd3c <lcd_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     d40:	42 98       	cbi	0x08, 2	; 8
     d42:	fc 01       	movw	r30, r24
     d44:	31 97       	sbiw	r30, 0x01	; 1
     d46:	f1 f7       	brne	.-4      	; 0xd44 <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     d48:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     d4a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     d4c:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     d4e:	42 9a       	sbi	0x08, 2	; 8
     d50:	f9 01       	movw	r30, r18
     d52:	31 97       	sbiw	r30, 0x01	; 1
     d54:	f1 f7       	brne	.-4      	; 0xd52 <lcd_set_4bit+0x46>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     d56:	42 98       	cbi	0x08, 2	; 8
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     d5c:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     d5e:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     d60:	80 e2       	ldi	r24, 0x20	; 32
     d62:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     d64:	42 9a       	sbi	0x08, 2	; 8
     d66:	c9 01       	movw	r24, r18
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <lcd_set_4bit+0x5c>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     d6c:	42 98       	cbi	0x08, 2	; 8

	
}
     d6e:	08 95       	ret

00000d70 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     d70:	98 b1       	in	r25, 0x08	; 8
     d72:	9f 70       	andi	r25, 0x0F	; 15
     d74:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     d76:	28 b1       	in	r18, 0x08	; 8
     d78:	98 2f       	mov	r25, r24
     d7a:	90 7f       	andi	r25, 0xF0	; 240
     d7c:	92 2b       	or	r25, r18
     d7e:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     d80:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     d82:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     d84:	42 9a       	sbi	0x08, 2	; 8
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	38 e4       	ldi	r19, 0x48	; 72
     d8a:	f9 01       	movw	r30, r18
     d8c:	31 97       	sbiw	r30, 0x01	; 1
     d8e:	f1 f7       	brne	.-4      	; 0xd8c <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     d90:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     d92:	98 b1       	in	r25, 0x08	; 8
     d94:	9f 70       	andi	r25, 0x0F	; 15
     d96:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     d98:	98 b1       	in	r25, 0x08	; 8
     d9a:	82 95       	swap	r24
     d9c:	80 7f       	andi	r24, 0xF0	; 240
     d9e:	98 2b       	or	r25, r24
     da0:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     da2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     da4:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     da6:	42 9a       	sbi	0x08, 2	; 8
     da8:	c9 01       	movw	r24, r18
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	f1 f7       	brne	.-4      	; 0xdaa <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     dae:	42 98       	cbi	0x08, 2	; 8
}
     db0:	08 95       	ret

00000db2 <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     db2:	0e 94 86 06 	call	0xd0c	; 0xd0c <lcd_set_4bit>
     db6:	86 e6       	ldi	r24, 0x66	; 102
     db8:	9e e0       	ldi	r25, 0x0E	; 14
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <lcd_init+0x8>
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     dbe:	88 e2       	ldi	r24, 0x28	; 40
     dc0:	0e 94 b8 06 	call	0xd70	; 0xd70 <lcd_wr_command>
	lcd_wr_command(0x01);
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	0e 94 b8 06 	call	0xd70	; 0xd70 <lcd_wr_command>
	lcd_wr_command(0x06);
     dca:	86 e0       	ldi	r24, 0x06	; 6
     dcc:	0e 94 b8 06 	call	0xd70	; 0xd70 <lcd_wr_command>
	lcd_wr_command(0x0E);
     dd0:	8e e0       	ldi	r24, 0x0E	; 14
     dd2:	0e 94 b8 06 	call	0xd70	; 0xd70 <lcd_wr_command>
	lcd_wr_command(0x80);
     dd6:	80 e8       	ldi	r24, 0x80	; 128
     dd8:	0e 94 b8 06 	call	0xd70	; 0xd70 <lcd_wr_command>
		
}
     ddc:	08 95       	ret

00000dde <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     dde:	98 b1       	in	r25, 0x08	; 8
     de0:	9f 70       	andi	r25, 0x0F	; 15
     de2:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     de4:	28 b1       	in	r18, 0x08	; 8
     de6:	98 2f       	mov	r25, r24
     de8:	90 7f       	andi	r25, 0xF0	; 240
     dea:	92 2b       	or	r25, r18
     dec:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     dee:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     df0:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     df2:	42 9a       	sbi	0x08, 2	; 8
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	38 e4       	ldi	r19, 0x48	; 72
     df8:	f9 01       	movw	r30, r18
     dfa:	31 97       	sbiw	r30, 0x01	; 1
     dfc:	f1 f7       	brne	.-4      	; 0xdfa <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     dfe:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     e00:	98 b1       	in	r25, 0x08	; 8
     e02:	9f 70       	andi	r25, 0x0F	; 15
     e04:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     e06:	98 b1       	in	r25, 0x08	; 8
     e08:	82 95       	swap	r24
     e0a:	80 7f       	andi	r24, 0xF0	; 240
     e0c:	98 2b       	or	r25, r24
     e0e:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     e10:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     e12:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     e14:	42 9a       	sbi	0x08, 2	; 8
     e16:	c9 01       	movw	r24, r18
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	f1 f7       	brne	.-4      	; 0xe18 <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     e1c:	42 98       	cbi	0x08, 2	; 8
}
     e1e:	08 95       	ret

00000e20 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     e20:	80 e8       	ldi	r24, 0x80	; 128
     e22:	0e 94 b8 06 	call	0xd70	; 0xd70 <lcd_wr_command>
}
     e26:	08 95       	ret

00000e28 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	ec 01       	movw	r28, r24
     e2e:	03 c0       	rjmp	.+6      	; 0xe36 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     e30:	0e 94 ef 06 	call	0xdde	; 0xdde <lcd_wr_char>
		str++;
     e34:	21 96       	adiw	r28, 0x01	; 1


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     e36:	88 81       	ld	r24, Y
     e38:	88 23       	and	r24, r24
     e3a:	d1 f7       	brne	.-12     	; 0xe30 <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	08 95       	ret

00000e42 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     e42:	82 30       	cpi	r24, 0x02	; 2
     e44:	69 f0       	breq	.+26     	; 0xe60 <lcd_cursor+0x1e>
     e46:	83 30       	cpi	r24, 0x03	; 3
     e48:	18 f4       	brcc	.+6      	; 0xe50 <lcd_cursor+0xe>
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	a9 f4       	brne	.+42     	; 0xe78 <lcd_cursor+0x36>
     e4e:	05 c0       	rjmp	.+10     	; 0xe5a <lcd_cursor+0x18>
     e50:	83 30       	cpi	r24, 0x03	; 3
     e52:	49 f0       	breq	.+18     	; 0xe66 <lcd_cursor+0x24>
     e54:	84 30       	cpi	r24, 0x04	; 4
     e56:	81 f4       	brne	.+32     	; 0xe78 <lcd_cursor+0x36>
     e58:	0b c0       	rjmp	.+22     	; 0xe70 <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     e5a:	86 2f       	mov	r24, r22
     e5c:	81 58       	subi	r24, 0x81	; 129
     e5e:	05 c0       	rjmp	.+10     	; 0xe6a <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     e60:	86 2f       	mov	r24, r22
     e62:	81 54       	subi	r24, 0x41	; 65
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     e66:	86 2f       	mov	r24, r22
     e68:	8d 56       	subi	r24, 0x6D	; 109
     e6a:	0e 94 b8 06 	call	0xd70	; 0xd70 <lcd_wr_command>
     e6e:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     e70:	86 2f       	mov	r24, r22
     e72:	8d 52       	subi	r24, 0x2D	; 45
     e74:	0e 94 b8 06 	call	0xd70	; 0xd70 <lcd_wr_command>
     e78:	08 95       	ret

00000e7a <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     e7a:	0f 93       	push	r16
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	8a 01       	movw	r16, r20
     e84:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     e86:	88 23       	and	r24, r24
     e88:	11 f0       	breq	.+4      	; 0xe8e <lcd_print+0x14>
     e8a:	66 23       	and	r22, r22
     e8c:	19 f4       	brne	.+6      	; 0xe94 <lcd_print+0x1a>
	{
		lcd_home();
     e8e:	0e 94 10 07 	call	0xe20	; 0xe20 <lcd_home>
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     e94:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     e98:	c5 30       	cpi	r28, 0x05	; 5
     e9a:	d1 05       	cpc	r29, r1
     e9c:	71 f4       	brne	.+28     	; 0xeba <lcd_print+0x40>
	{
		million=value/10000+48;
     e9e:	c8 01       	movw	r24, r16
     ea0:	60 e1       	ldi	r22, 0x10	; 16
     ea2:	77 e2       	ldi	r23, 0x27	; 39
     ea4:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__udivmodhi4>
     ea8:	cb 01       	movw	r24, r22
     eaa:	c0 96       	adiw	r24, 0x30	; 48
     eac:	90 93 87 17 	sts	0x1787, r25
     eb0:	80 93 86 17 	sts	0x1786, r24
		lcd_wr_char(million);
     eb4:	0e 94 ef 06 	call	0xdde	; 0xdde <lcd_wr_char>
     eb8:	05 c0       	rjmp	.+10     	; 0xec4 <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     eba:	c4 30       	cpi	r28, 0x04	; 4
     ebc:	d1 05       	cpc	r29, r1
     ebe:	11 f0       	breq	.+4      	; 0xec4 <lcd_print+0x4a>
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	16 c0       	rjmp	.+44     	; 0xef0 <lcd_print+0x76>
	{
		temp = value/1000;
     ec4:	c8 01       	movw	r24, r16
     ec6:	68 ee       	ldi	r22, 0xE8	; 232
     ec8:	73 e0       	ldi	r23, 0x03	; 3
     eca:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__udivmodhi4>
     ece:	cb 01       	movw	r24, r22
     ed0:	60 93 88 17 	sts	0x1788, r22
     ed4:	90 93 89 17 	sts	0x1789, r25
		thousand = temp%10 + 48;
     ed8:	6a e0       	ldi	r22, 0x0A	; 10
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__udivmodhi4>
     ee0:	c0 96       	adiw	r24, 0x30	; 48
     ee2:	90 93 c3 17 	sts	0x17C3, r25
     ee6:	80 93 c2 17 	sts	0x17C2, r24
		lcd_wr_char(thousand);
     eea:	0e 94 ef 06 	call	0xdde	; 0xdde <lcd_wr_char>
     eee:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     ef0:	c3 30       	cpi	r28, 0x03	; 3
     ef2:	d1 05       	cpc	r29, r1
     ef4:	21 f0       	breq	.+8      	; 0xefe <lcd_print+0x84>
     ef6:	81 30       	cpi	r24, 0x01	; 1
     ef8:	11 f0       	breq	.+4      	; 0xefe <lcd_print+0x84>
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	16 c0       	rjmp	.+44     	; 0xf2a <lcd_print+0xb0>
	{
		temp = value/100;
     efe:	c8 01       	movw	r24, r16
     f00:	64 e6       	ldi	r22, 0x64	; 100
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__udivmodhi4>
     f08:	cb 01       	movw	r24, r22
     f0a:	60 93 88 17 	sts	0x1788, r22
     f0e:	90 93 89 17 	sts	0x1789, r25
		hundred = temp%10 + 48;
     f12:	6a e0       	ldi	r22, 0x0A	; 10
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__udivmodhi4>
     f1a:	c0 96       	adiw	r24, 0x30	; 48
     f1c:	90 93 bd 17 	sts	0x17BD, r25
     f20:	80 93 bc 17 	sts	0x17BC, r24
		lcd_wr_char(hundred);
     f24:	0e 94 ef 06 	call	0xdde	; 0xdde <lcd_wr_char>
     f28:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     f2a:	c2 30       	cpi	r28, 0x02	; 2
     f2c:	d1 05       	cpc	r29, r1
     f2e:	21 f0       	breq	.+8      	; 0xf38 <lcd_print+0xbe>
     f30:	81 30       	cpi	r24, 0x01	; 1
     f32:	11 f0       	breq	.+4      	; 0xf38 <lcd_print+0xbe>
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	16 c0       	rjmp	.+44     	; 0xf64 <lcd_print+0xea>
	{
		temp = value/10;
     f38:	c8 01       	movw	r24, r16
     f3a:	6a e0       	ldi	r22, 0x0A	; 10
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__udivmodhi4>
     f42:	cb 01       	movw	r24, r22
     f44:	60 93 88 17 	sts	0x1788, r22
     f48:	90 93 89 17 	sts	0x1789, r25
		tens = temp%10 + 48;
     f4c:	6a e0       	ldi	r22, 0x0A	; 10
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__udivmodhi4>
     f54:	c0 96       	adiw	r24, 0x30	; 48
     f56:	90 93 8c 17 	sts	0x178C, r25
     f5a:	80 93 8b 17 	sts	0x178B, r24
		lcd_wr_char(tens);
     f5e:	0e 94 ef 06 	call	0xdde	; 0xdde <lcd_wr_char>
     f62:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     f64:	c1 30       	cpi	r28, 0x01	; 1
     f66:	d1 05       	cpc	r29, r1
     f68:	11 f0       	breq	.+4      	; 0xf6e <lcd_print+0xf4>
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	61 f4       	brne	.+24     	; 0xf86 <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     f6e:	c8 01       	movw	r24, r16
     f70:	6a e0       	ldi	r22, 0x0A	; 10
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	0e 94 32 16 	call	0x2c64	; 0x2c64 <__udivmodhi4>
     f78:	c0 96       	adiw	r24, 0x30	; 48
     f7a:	90 93 c1 17 	sts	0x17C1, r25
     f7e:	80 93 c0 17 	sts	0x17C0, r24
		lcd_wr_char(unit);
     f82:	0e 94 ef 06 	call	0xdde	; 0xdde <lcd_wr_char>
	}
	if(digits>5)
     f86:	26 97       	sbiw	r28, 0x06	; 6
     f88:	1c f0       	brlt	.+6      	; 0xf90 <lcd_print+0x116>
	{
		lcd_wr_char('E');
     f8a:	85 e4       	ldi	r24, 0x45	; 69
     f8c:	0e 94 ef 06 	call	0xdde	; 0xdde <lcd_wr_char>
	}
	
}
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	08 95       	ret

00000f9a <print_sensor>:
	return a;
}

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
     f9a:	0f 93       	push	r16
     f9c:	1f 93       	push	r17
     f9e:	18 2f       	mov	r17, r24
     fa0:	06 2f       	mov	r16, r22
     fa2:	84 2f       	mov	r24, r20
	
	ADC_Value = ADC_Conversion(channel);
     fa4:	0e 94 99 04 	call	0x932	; 0x932 <ADC_Conversion>
     fa8:	48 2f       	mov	r20, r24
     faa:	80 93 8a 17 	sts	0x178A, r24
	lcd_print(row, coloumn, ADC_Value, 3);
     fae:	81 2f       	mov	r24, r17
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	60 2f       	mov	r22, r16
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	23 e0       	ldi	r18, 0x03	; 3
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	0e 94 3d 07 	call	0xe7a	; 0xe7a <lcd_print>

	return ADC_Value;
}
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	08 95       	ret

00000fc6 <buzzer_pin_config>:
signed int arr_slave[20];
signed int Counter = 0;

void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     fc6:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     fc8:	43 98       	cbi	0x08, 3	; 8
}
     fca:	08 95       	ret

00000fcc <lcd_port_config>:

//Function to configure LCD port
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     fcc:	87 b1       	in	r24, 0x07	; 7
     fce:	87 6f       	ori	r24, 0xF7	; 247
     fd0:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     fd2:	88 b1       	in	r24, 0x08	; 8
     fd4:	80 78       	andi	r24, 0x80	; 128
     fd6:	88 b9       	out	0x08, r24	; 8
}
     fd8:	08 95       	ret

00000fda <port_init>:
signed int arr_slave[20];
signed int Counter = 0;

void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     fda:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     fdc:	43 98       	cbi	0x08, 3	; 8
}

//Function to configure LCD port
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     fde:	87 b1       	in	r24, 0x07	; 7
     fe0:	87 6f       	ori	r24, 0xF7	; 247
     fe2:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     fe4:	88 b1       	in	r24, 0x08	; 8
     fe6:	80 78       	andi	r24, 0x80	; 128
     fe8:	88 b9       	out	0x08, r24	; 8
//Function to initialize ports
void port_init()
{
	buzzer_pin_config();
	lcd_port_config();
}
     fea:	08 95       	ret

00000fec <uart0_init>:
// actual baud rate:9600 (error 0.0%)
// char arr_size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
     fec:	e1 ec       	ldi	r30, 0xC1	; 193
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	10 82       	st	Z, r1
 UCSR0A = 0x00;
     ff2:	10 92 c0 00 	sts	0x00C0, r1
 UCSR0C = 0x06;
     ff6:	86 e0       	ldi	r24, 0x06	; 6
     ff8:	80 93 c2 00 	sts	0x00C2, r24
 UBRR0L = 0x5F; //set baud rate lo
     ffc:	8f e5       	ldi	r24, 0x5F	; 95
     ffe:	80 93 c4 00 	sts	0x00C4, r24
 UBRR0H = 0x00; //set baud rate hi
    1002:	10 92 c5 00 	sts	0x00C5, r1
 UCSR0B = 0x98;
    1006:	88 e9       	ldi	r24, 0x98	; 152
    1008:	80 83       	st	Z, r24
}
    100a:	08 95       	ret

0000100c <uart2_init>:
// actual baud rate:9600 (error 0.0%)
// char arr_size: 8 bit
// parity: Disabled
void uart2_init(void)
{
 UCSR2B = 0x00; //disable while setting baud rate
    100c:	e1 ed       	ldi	r30, 0xD1	; 209
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	10 82       	st	Z, r1
 UCSR2A = 0x00;
    1012:	10 92 d0 00 	sts	0x00D0, r1
 UCSR2C = 0x06;
    1016:	86 e0       	ldi	r24, 0x06	; 6
    1018:	80 93 d2 00 	sts	0x00D2, r24
 UBRR2L = 0x5F; //set baud rate lo
    101c:	8f e5       	ldi	r24, 0x5F	; 95
    101e:	80 93 d4 00 	sts	0x00D4, r24
 UBRR2H = 0x00; //set baud rate hi
    1022:	10 92 d5 00 	sts	0x00D5, r1
 UCSR2B = 0x98;
    1026:	88 e9       	ldi	r24, 0x98	; 152
    1028:	80 83       	st	Z, r24
}
    102a:	08 95       	ret

0000102c <buzzer_on>:

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    102c:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    102e:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    1030:	88 b9       	out	0x08, r24	; 8
}
    1032:	08 95       	ret

00001034 <buzzer_off>:

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    1034:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    1036:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    1038:	88 b9       	out	0x08, r24	; 8
}
    103a:	08 95       	ret

0000103c <remove_zero>:

void remove_zero() {
	int i = 0, j = 0;
	while (i < arr_size)
    103c:	60 91 32 04 	lds	r22, 0x0432
    1040:	70 91 33 04 	lds	r23, 0x0433
    1044:	a0 91 92 17 	lds	r26, 0x1792
    1048:	b0 91 93 17 	lds	r27, 0x1793
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	11 c0       	rjmp	.+34     	; 0x1078 <remove_zero+0x3c>
	{
		if(sequence_arr[i]!=0)
    1056:	4d 91       	ld	r20, X+
    1058:	5c 91       	ld	r21, X
    105a:	11 97       	sbiw	r26, 0x01	; 1
    105c:	41 15       	cp	r20, r1
    105e:	51 05       	cpc	r21, r1
    1060:	41 f0       	breq	.+16     	; 0x1072 <remove_zero+0x36>
		{
			arr_slave[j] = sequence_arr[i];
    1062:	fc 01       	movw	r30, r24
    1064:	ee 0f       	add	r30, r30
    1066:	ff 1f       	adc	r31, r31
    1068:	ec 56       	subi	r30, 0x6C	; 108
    106a:	f8 4e       	sbci	r31, 0xE8	; 232
    106c:	51 83       	std	Z+1, r21	; 0x01
    106e:	40 83       	st	Z, r20
			j++;
    1070:	01 96       	adiw	r24, 0x01	; 1
		}
		i++;
    1072:	2f 5f       	subi	r18, 0xFF	; 255
    1074:	3f 4f       	sbci	r19, 0xFF	; 255
    1076:	12 96       	adiw	r26, 0x02	; 2
 PORTC = port_restore;
}

void remove_zero() {
	int i = 0, j = 0;
	while (i < arr_size)
    1078:	26 17       	cp	r18, r22
    107a:	37 07       	cpc	r19, r23
    107c:	64 f3       	brlt	.-40     	; 0x1056 <remove_zero+0x1a>
			arr_slave[j] = sequence_arr[i];
			j++;
		}
		i++;
	}
	slave_size = j;
    107e:	90 93 35 04 	sts	0x0435, r25
    1082:	80 93 34 04 	sts	0x0434, r24
}
    1086:	08 95       	ret

00001088 <print>:

void print() {
    1088:	cf 92       	push	r12
    108a:	df 92       	push	r13
    108c:	ef 92       	push	r14
    108e:	ff 92       	push	r15
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	24 e9       	ldi	r18, 0x94	; 148
    109a:	c2 2e       	mov	r12, r18
    109c:	27 e1       	ldi	r18, 0x17	; 23
    109e:	d2 2e       	mov	r13, r18
    10a0:	91 e0       	ldi	r25, 0x01	; 1
    10a2:	e9 2e       	mov	r14, r25
    10a4:	f1 2c       	mov	r15, r1
    10a6:	c1 e0       	ldi	r28, 0x01	; 1
    10a8:	d0 e0       	ldi	r29, 0x00	; 0
    10aa:	00 e0       	ldi	r16, 0x00	; 0
    10ac:	10 e0       	ldi	r17, 0x00	; 0
    10ae:	15 c0       	rjmp	.+42     	; 0x10da <print+0x52>
	int k = 1;
	int j = 1;
	for (int i = 0; i < slave_size; ++i)
	{
		if (j == 9)
    10b0:	c9 30       	cpi	r28, 0x09	; 9
    10b2:	d1 05       	cpc	r29, r1
    10b4:	29 f4       	brne	.+10     	; 0x10c0 <print+0x38>
    10b6:	82 e0       	ldi	r24, 0x02	; 2
    10b8:	e8 2e       	mov	r14, r24
    10ba:	f1 2c       	mov	r15, r1
    10bc:	c1 e0       	ldi	r28, 0x01	; 1
    10be:	d0 e0       	ldi	r29, 0x00	; 0
		{
			j = 1;
			k = 2;
		}

		lcd_print(k,j,arr_slave[i],2);
    10c0:	f6 01       	movw	r30, r12
    10c2:	41 91       	ld	r20, Z+
    10c4:	51 91       	ld	r21, Z+
    10c6:	6f 01       	movw	r12, r30
    10c8:	8e 2d       	mov	r24, r14
    10ca:	6c 2f       	mov	r22, r28
    10cc:	22 e0       	ldi	r18, 0x02	; 2
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	0e 94 3d 07 	call	0xe7a	; 0xe7a <lcd_print>
		j += 2;
    10d4:	22 96       	adiw	r28, 0x02	; 2
}

void print() {
	int k = 1;
	int j = 1;
	for (int i = 0; i < slave_size; ++i)
    10d6:	0f 5f       	subi	r16, 0xFF	; 255
    10d8:	1f 4f       	sbci	r17, 0xFF	; 255
    10da:	80 91 34 04 	lds	r24, 0x0434
    10de:	90 91 35 04 	lds	r25, 0x0435
    10e2:	08 17       	cp	r16, r24
    10e4:	19 07       	cpc	r17, r25
    10e6:	24 f3       	brlt	.-56     	; 0x10b0 <print+0x28>
		}

		lcd_print(k,j,arr_slave[i],2);
		j += 2;
	}
}
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	ff 90       	pop	r15
    10f2:	ef 90       	pop	r14
    10f4:	df 90       	pop	r13
    10f6:	cf 90       	pop	r12
    10f8:	08 95       	ret

000010fa <init_devices>:
}*/

//Function To Initialize all The Devices
void init_devices()
{
 cli(); //Clears the global interrupts
    10fa:	f8 94       	cli
signed int arr_slave[20];
signed int Counter = 0;

void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
    10fc:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    10fe:	43 98       	cbi	0x08, 3	; 8
}

//Function to configure LCD port
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    1100:	87 b1       	in	r24, 0x07	; 7
    1102:	87 6f       	ori	r24, 0xF7	; 247
    1104:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    1106:	88 b1       	in	r24, 0x08	; 8
    1108:	80 78       	andi	r24, 0x80	; 128
    110a:	88 b9       	out	0x08, r24	; 8
// actual baud rate:9600 (error 0.0%)
// char arr_size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
    110c:	e1 ec       	ldi	r30, 0xC1	; 193
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	10 82       	st	Z, r1
 UCSR0A = 0x00;
    1112:	10 92 c0 00 	sts	0x00C0, r1
 UCSR0C = 0x06;
    1116:	26 e0       	ldi	r18, 0x06	; 6
    1118:	20 93 c2 00 	sts	0x00C2, r18
 UBRR0L = 0x5F; //set baud rate lo
    111c:	9f e5       	ldi	r25, 0x5F	; 95
    111e:	90 93 c4 00 	sts	0x00C4, r25
 UBRR0H = 0x00; //set baud rate hi
    1122:	10 92 c5 00 	sts	0x00C5, r1
 UCSR0B = 0x98;
    1126:	88 e9       	ldi	r24, 0x98	; 152
    1128:	80 83       	st	Z, r24
// actual baud rate:9600 (error 0.0%)
// char arr_size: 8 bit
// parity: Disabled
void uart2_init(void)
{
 UCSR2B = 0x00; //disable while setting baud rate
    112a:	e1 ed       	ldi	r30, 0xD1	; 209
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	10 82       	st	Z, r1
 UCSR2A = 0x00;
    1130:	10 92 d0 00 	sts	0x00D0, r1
 UCSR2C = 0x06;
    1134:	20 93 d2 00 	sts	0x00D2, r18
 UBRR2L = 0x5F; //set baud rate lo
    1138:	90 93 d4 00 	sts	0x00D4, r25
 UBRR2H = 0x00; //set baud rate hi
    113c:	10 92 d5 00 	sts	0x00D5, r1
 UCSR2B = 0x98;
    1140:	80 83       	st	Z, r24
{
 cli(); //Clears the global interrupts
 port_init();  //Initializes all the ports
 uart0_init(); //Initailize UART0 for serial communiaction
 uart2_init(); //Initailize UART1 for serial communiaction
 sei();   //Enables the global interrupts
    1142:	78 94       	sei
}
    1144:	08 95       	ret

00001146 <__vector_25>:
	//lcd_print(1,4,Counter,2);
	UDR0 = Counter;
}

SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
    1146:	1f 92       	push	r1
    1148:	0f 92       	push	r0
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	0f 92       	push	r0
    114e:	0b b6       	in	r0, 0x3b	; 59
    1150:	0f 92       	push	r0
    1152:	11 24       	eor	r1, r1
    1154:	2f 93       	push	r18
    1156:	3f 93       	push	r19
    1158:	4f 93       	push	r20
    115a:	5f 93       	push	r21
    115c:	6f 93       	push	r22
    115e:	7f 93       	push	r23
    1160:	8f 93       	push	r24
    1162:	9f 93       	push	r25
    1164:	af 93       	push	r26
    1166:	bf 93       	push	r27
    1168:	ef 93       	push	r30
    116a:	ff 93       	push	r31
	data = UDR0; 				//making copy of data from UDR0 in 'data' variable 
    116c:	80 91 c6 00 	lds	r24, 0x00C6
    1170:	80 93 91 17 	sts	0x1791, r24
	UDR2 = data; 				//echo data back to PC
    1174:	80 93 d6 00 	sts	0x00D6, r24
	if (count == -1)
    1178:	40 91 0d 03 	lds	r20, 0x030D
    117c:	50 91 0e 03 	lds	r21, 0x030E
    1180:	9f ef       	ldi	r25, 0xFF	; 255
    1182:	4f 3f       	cpi	r20, 0xFF	; 255
    1184:	59 07       	cpc	r21, r25
    1186:	e1 f4       	brne	.+56     	; 0x11c0 <__vector_25+0x7a>
    1188:	28 ee       	ldi	r18, 0xE8	; 232
    118a:	33 e0       	ldi	r19, 0x03	; 3
    118c:	40 e7       	ldi	r20, 0x70	; 112
    118e:	51 e0       	ldi	r21, 0x01	; 1
    1190:	fa 01       	movw	r30, r20
    1192:	31 97       	sbiw	r30, 0x01	; 1
    1194:	f1 f7       	brne	.-4      	; 0x1192 <__vector_25+0x4c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1196:	21 50       	subi	r18, 0x01	; 1
    1198:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    119a:	d1 f7       	brne	.-12     	; 0x1190 <__vector_25+0x4a>
	{
		_delay_ms(100);
		arr_size = (signed int) data;
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	90 93 33 04 	sts	0x0433, r25
    11a2:	80 93 32 04 	sts	0x0432, r24
		//arr_size -= 48;
		count++;
    11a6:	10 92 0e 03 	sts	0x030E, r1
    11aa:	10 92 0d 03 	sts	0x030D, r1
		sequence_arr = (signed int*) malloc(arr_size*sizeof(signed int));
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <malloc>
    11b6:	80 93 92 17 	sts	0x1792, r24
    11ba:	90 93 93 17 	sts	0x1793, r25
    11be:	2c c0       	rjmp	.+88     	; 0x1218 <__vector_25+0xd2>
	} 
	
	else if (count < arr_size) {
    11c0:	20 91 32 04 	lds	r18, 0x0432
    11c4:	30 91 33 04 	lds	r19, 0x0433
    11c8:	42 17       	cp	r20, r18
    11ca:	53 07       	cpc	r21, r19
    11cc:	f4 f4       	brge	.+60     	; 0x120a <__vector_25+0xc4>
    11ce:	28 ee       	ldi	r18, 0xE8	; 232
    11d0:	33 e0       	ldi	r19, 0x03	; 3
    11d2:	60 e7       	ldi	r22, 0x70	; 112
    11d4:	71 e0       	ldi	r23, 0x01	; 1
    11d6:	fb 01       	movw	r30, r22
    11d8:	31 97       	sbiw	r30, 0x01	; 1
    11da:	f1 f7       	brne	.-4      	; 0x11d8 <__vector_25+0x92>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11dc:	21 50       	subi	r18, 0x01	; 1
    11de:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e0:	d1 f7       	brne	.-12     	; 0x11d6 <__vector_25+0x90>
		_delay_ms(100);
		sequence_arr[count] = (signed int) data;
    11e2:	44 0f       	add	r20, r20
    11e4:	55 1f       	adc	r21, r21
    11e6:	e0 91 92 17 	lds	r30, 0x1792
    11ea:	f0 91 93 17 	lds	r31, 0x1793
    11ee:	e4 0f       	add	r30, r20
    11f0:	f5 1f       	adc	r31, r21
    11f2:	80 83       	st	Z, r24
    11f4:	11 82       	std	Z+1, r1	; 0x01
		//sequence_arr[count] -= 48;
		count++;
    11f6:	80 91 0d 03 	lds	r24, 0x030D
    11fa:	90 91 0e 03 	lds	r25, 0x030E
    11fe:	01 96       	adiw	r24, 0x01	; 1
    1200:	90 93 0e 03 	sts	0x030E, r25
    1204:	80 93 0d 03 	sts	0x030D, r24
    1208:	07 c0       	rjmp	.+14     	; 0x1218 <__vector_25+0xd2>
	}
	
	else if (count > arr_size){
    120a:	24 17       	cp	r18, r20
    120c:	35 07       	cpc	r19, r21
    120e:	24 f4       	brge	.+8      	; 0x1218 <__vector_25+0xd2>
		Counter = (signed int) data;
    1210:	80 93 36 04 	sts	0x0436, r24
    1214:	10 92 37 04 	sts	0x0437, r1
		//lcd_print(1,15,Counter,2);
	}
}
    1218:	ff 91       	pop	r31
    121a:	ef 91       	pop	r30
    121c:	bf 91       	pop	r27
    121e:	af 91       	pop	r26
    1220:	9f 91       	pop	r25
    1222:	8f 91       	pop	r24
    1224:	7f 91       	pop	r23
    1226:	6f 91       	pop	r22
    1228:	5f 91       	pop	r21
    122a:	4f 91       	pop	r20
    122c:	3f 91       	pop	r19
    122e:	2f 91       	pop	r18
    1230:	0f 90       	pop	r0
    1232:	0b be       	out	0x3b, r0	; 59
    1234:	0f 90       	pop	r0
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	0f 90       	pop	r0
    123a:	1f 90       	pop	r1
    123c:	18 95       	reti

0000123e <mapRun>:
	*Output: 0 on successful completion
	*Logic: Given a array of nodes, executes dStar to find the best path
			to touch all the nodes and follows it.
*/
int* mapRun(signed int angle[], int Size)
{
    123e:	6f 92       	push	r6
    1240:	7f 92       	push	r7
    1242:	8f 92       	push	r8
    1244:	9f 92       	push	r9
    1246:	af 92       	push	r10
    1248:	bf 92       	push	r11
    124a:	cf 92       	push	r12
    124c:	df 92       	push	r13
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	4c 01       	movw	r8, r24
    125c:	5b 01       	movw	r10, r22
	initial_devices();
    125e:	0e 94 66 05 	call	0xacc	; 0xacc <initial_devices>
	lcd_set_4bit();
    1262:	0e 94 86 06 	call	0xd0c	; 0xd0c <lcd_set_4bit>
	lcd_init();
    1266:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <lcd_init>
	
	// after dectecting the note bot will turn angle[i] angle
	signed int count = -1;
	int *res = (int*) malloc (3*sizeof(int));		//Holds result
    126a:	86 e0       	ldi	r24, 0x06	; 6
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <malloc>
    1272:	ec 01       	movw	r28, r24
	for (int i = 0; i < 3; i++)
		res[i] = 0;
    1274:	fc 01       	movw	r30, r24
    1276:	11 92       	st	Z+, r1
    1278:	11 92       	st	Z+, r1
    127a:	6f 01       	movw	r12, r30
    127c:	1b 82       	std	Y+3, r1	; 0x03
    127e:	1a 82       	std	Y+2, r1	; 0x02
    1280:	74 e0       	ldi	r23, 0x04	; 4
    1282:	67 2e       	mov	r6, r23
    1284:	71 2c       	mov	r7, r1
    1286:	68 0e       	add	r6, r24
    1288:	79 1e       	adc	r7, r25
    128a:	1d 82       	std	Y+5, r1	; 0x05
    128c:	1c 82       	std	Y+4, r1	; 0x04
    128e:	0f ef       	ldi	r16, 0xFF	; 255
    1290:	1f ef       	ldi	r17, 0xFF	; 255
    1292:	60 e7       	ldi	r22, 0x70	; 112
    1294:	e6 2e       	mov	r14, r22
    1296:	61 e0       	ldi	r22, 0x01	; 1
    1298:	f6 2e       	mov	r15, r22
    129a:	80 c1       	rjmp	.+768    	; 0x159c <mapRun+0x35e>

	while(count < Size)
	{
		int flag = 0;

		Front_IR_Sensor = ADC_Conversion(6);    //Getting data of Center IR Proximity Sensor Sensor
    129c:	86 e0       	ldi	r24, 0x06	; 6
    129e:	0e 94 99 04 	call	0x932	; 0x932 <ADC_Conversion>
    12a2:	80 93 31 04 	sts	0x0431, r24

		// If their an object with in 9 cm range of IR sensor
		// LCD will print "OBSTRACLE DETECTED !"
		// Bot will take an initial right turn to shift from the black line
		// Then bot will take right turn until the center whiteline sensor is on top of black line
		if (Front_IR_Sensor < 90)
    12a6:	8a 35       	cpi	r24, 0x5A	; 90
    12a8:	08 f0       	brcs	.+2      	; 0x12ac <mapRun+0x6e>
    12aa:	49 c0       	rjmp	.+146    	; 0x133e <mapRun+0x100>
		{
			lcd_cursor(1,1);
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	61 e0       	ldi	r22, 0x01	; 1
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
			lcd_string("    OBSTRACLE   ");
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	92 e0       	ldi	r25, 0x02	; 2
    12bc:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
			lcd_cursor(2,1);
    12c0:	82 e0       	ldi	r24, 0x02	; 2
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	61 e0       	ldi	r22, 0x01	; 1
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
			lcd_string("    DETECTED !  ");
    12cc:	81 e1       	ldi	r24, 0x11	; 17
    12ce:	92 e0       	ldi	r25, 0x02	; 2
    12d0:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    12d4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    12d6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    12d8:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    12da:	82 b9       	out	0x02, r24	; 2
    12dc:	88 ee       	ldi	r24, 0xE8	; 232
    12de:	93 e0       	ldi	r25, 0x03	; 3
    12e0:	20 e7       	ldi	r18, 0x70	; 112
    12e2:	31 e0       	ldi	r19, 0x01	; 1
    12e4:	f9 01       	movw	r30, r18
    12e6:	31 97       	sbiw	r30, 0x01	; 1
    12e8:	f1 f7       	brne	.-4      	; 0x12e6 <mapRun+0xa8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ec:	d9 f7       	brne	.-10     	; 0x12e4 <mapRun+0xa6>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    12ee:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    12f0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    12f2:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    12f4:	82 b9       	out	0x02, r24	; 2
			right();
			_delay_ms(100);
			do
			{
				right();
				Center_white_line = ADC_Conversion(2);
    12f6:	82 e0       	ldi	r24, 0x02	; 2
    12f8:	0e 94 99 04 	call	0x932	; 0x932 <ADC_Conversion>
    12fc:	80 93 28 04 	sts	0x0428, r24
			}
			while (Center_white_line < 0x50);
    1300:	80 35       	cpi	r24, 0x50	; 80
    1302:	a8 f3       	brcs	.-22     	; 0x12ee <mapRun+0xb0>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1304:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1306:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1308:	82 b9       	out	0x02, r24	; 2
    130a:	88 ee       	ldi	r24, 0xE8	; 232
    130c:	93 e0       	ldi	r25, 0x03	; 3
    130e:	20 e7       	ldi	r18, 0x70	; 112
    1310:	31 e0       	ldi	r19, 0x01	; 1
    1312:	f9 01       	movw	r30, r18
    1314:	31 97       	sbiw	r30, 0x01	; 1
    1316:	f1 f7       	brne	.-4      	; 0x1314 <mapRun+0xd6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1318:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131a:	d9 f7       	brne	.-10     	; 0x1312 <mapRun+0xd4>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    131c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    131e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1320:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1322:	82 b9       	out	0x02, r24	; 2
			}
			while (Center_white_line < 0x50);
			stop();
			_delay_ms(100);
			forward();
			res[0] = 1;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	99 83       	std	Y+1, r25	; 0x01
    132a:	88 83       	st	Y, r24
			res[1] = count;
    132c:	f6 01       	movw	r30, r12
    132e:	11 83       	std	Z+1, r17	; 0x01
    1330:	00 83       	st	Z, r16
			res[2] = count+1;
    1332:	0f 5f       	subi	r16, 0xFF	; 255
    1334:	1f 4f       	sbci	r17, 0xFF	; 255
    1336:	f3 01       	movw	r30, r6
    1338:	11 83       	std	Z+1, r17	; 0x01
    133a:	00 83       	st	Z, r16
    133c:	33 c1       	rjmp	.+614    	; 0x15a4 <mapRun+0x366>
			return res;
		}

		move();// calling the move function
    133e:	0e 94 a1 05 	call	0xb42	; 0xb42 <move>

		// If center center plus left or right sensor detects the black line
		// The bot is over a node
		if ((senser_value_C > Threshold) && (senser_value_L > Threshold) || (senser_value_C > Threshold) && (senser_value_R > Threshold))
    1342:	80 91 fa 16 	lds	r24, 0x16FA
    1346:	90 91 fb 16 	lds	r25, 0x16FB
    134a:	89 97       	sbiw	r24, 0x29	; 41
    134c:	0c f4       	brge	.+2      	; 0x1350 <mapRun+0x112>
    134e:	a6 cf       	rjmp	.-180    	; 0x129c <mapRun+0x5e>
    1350:	80 91 8d 17 	lds	r24, 0x178D
    1354:	90 91 8e 17 	lds	r25, 0x178E
    1358:	89 97       	sbiw	r24, 0x29	; 41
    135a:	3c f4       	brge	.+14     	; 0x136a <mapRun+0x12c>
    135c:	80 91 be 17 	lds	r24, 0x17BE
    1360:	90 91 bf 17 	lds	r25, 0x17BF
    1364:	89 97       	sbiw	r24, 0x29	; 41
    1366:	0c f4       	brge	.+2      	; 0x136a <mapRun+0x12c>
    1368:	19 c1       	rjmp	.+562    	; 0x159c <mapRun+0x35e>
		{
			lcd_cursor(2,1);
    136a:	82 e0       	ldi	r24, 0x02	; 2
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	61 e0       	ldi	r22, 0x01	; 1
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
			lcd_string("NOTE DETECTED!!!");
    1376:	82 e2       	ldi	r24, 0x22	; 34
    1378:	92 e0       	ldi	r25, 0x02	; 2
    137a:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
			// move while encoders certain value reach
			
			count++;
    137e:	0f 5f       	subi	r16, 0xFF	; 255
    1380:	1f 4f       	sbci	r17, 0xFF	; 255
			//if angle[i] is 60 the bot has to take a 60 degree turn
			// bot will move 6 cm ahead and 30 degree left to skip the current black line
			// then it will rotate left until it finds another black line
			// lcd will print "60 degree success"
			if (angle[count] == 60 || angle[count] == -300)
    1382:	f8 01       	movw	r30, r16
    1384:	ee 0f       	add	r30, r30
    1386:	ff 1f       	adc	r31, r31
    1388:	e8 0d       	add	r30, r8
    138a:	f9 1d       	adc	r31, r9
    138c:	01 90       	ld	r0, Z+
    138e:	f0 81       	ld	r31, Z
    1390:	e0 2d       	mov	r30, r0
    1392:	ec 33       	cpi	r30, 0x3C	; 60
    1394:	f1 05       	cpc	r31, r1
    1396:	21 f0       	breq	.+8      	; 0x13a0 <mapRun+0x162>
    1398:	8e ef       	ldi	r24, 0xFE	; 254
    139a:	e4 3d       	cpi	r30, 0xD4	; 212
    139c:	f8 07       	cpc	r31, r24
    139e:	51 f5       	brne	.+84     	; 0x13f4 <mapRun+0x1b6>
	stop(); //Stop robot
}

void forward_mm(unsigned int DistanceInMM)
{
	linear_distance_mm(DistanceInMM);
    13a0:	8c e3       	ldi	r24, 0x3C	; 60
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 49 06 	call	0xc92	; 0xc92 <linear_distance_mm>
    13a8:	88 ee       	ldi	r24, 0xE8	; 232
    13aa:	93 e0       	ldi	r25, 0x03	; 3
    13ac:	f7 01       	movw	r30, r14
    13ae:	31 97       	sbiw	r30, 0x01	; 1
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <mapRun+0x170>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b4:	d9 f7       	brne	.-10     	; 0x13ac <mapRun+0x16e>
			// lcd will print "60 degree success"
			if (angle[count] == 60 || angle[count] == -300)
			{
				forward_mm(60);
				_delay_ms(100);
				left_degrees(30);
    13b6:	8e e1       	ldi	r24, 0x1E	; 30
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 34 05 	call	0xa68	; 0xa68 <left_degrees>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    13be:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    13c0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    13c2:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
    13c4:	82 b9       	out	0x02, r24	; 2
				_delay_ms(100);
				left_degrees(30);
				do
				{
					left();
					senser_value_C = ADC_Conversion(2);
    13c6:	82 e0       	ldi	r24, 0x02	; 2
    13c8:	0e 94 99 04 	call	0x932	; 0x932 <ADC_Conversion>
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	90 93 fb 16 	sts	0x16FB, r25
    13d2:	80 93 fa 16 	sts	0x16FA, r24
				}
				while (senser_value_C < 110);
    13d6:	8e 36       	cpi	r24, 0x6E	; 110
    13d8:	91 05       	cpc	r25, r1
    13da:	8c f3       	brlt	.-30     	; 0x13be <mapRun+0x180>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    13dc:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    13de:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    13e0:	82 b9       	out	0x02, r24	; 2
					left();
					senser_value_C = ADC_Conversion(2);
				}
				while (senser_value_C < 110);
				stop();
				lcd_cursor(1,1);
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	61 e0       	ldi	r22, 0x01	; 1
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
				lcd_string("60 degree succes");
    13ee:	83 e3       	ldi	r24, 0x33	; 51
    13f0:	92 e0       	ldi	r25, 0x02	; 2
    13f2:	30 c0       	rjmp	.+96     	; 0x1454 <mapRun+0x216>
			}
			//if angle[i] is 120 the bot has to take a 120 degree turn
			// bot will move 1.5 cm ahead and 30 degree back left to skip the current black line
			// then it will rotate soft left until it finds another black line
			// lcd will print "120 degree success"
			else if (angle[count] == 120 || angle[count] == -240)
    13f4:	e8 37       	cpi	r30, 0x78	; 120
    13f6:	f1 05       	cpc	r31, r1
    13f8:	21 f0       	breq	.+8      	; 0x1402 <mapRun+0x1c4>
    13fa:	8f ef       	ldi	r24, 0xFF	; 255
    13fc:	e0 31       	cpi	r30, 0x10	; 16
    13fe:	f8 07       	cpc	r31, r24
    1400:	61 f5       	brne	.+88     	; 0x145a <mapRun+0x21c>
	stop(); //Stop robot
}

void forward_mm(unsigned int DistanceInMM)
{
	linear_distance_mm(DistanceInMM);
    1402:	8f e0       	ldi	r24, 0x0F	; 15
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e 94 49 06 	call	0xc92	; 0xc92 <linear_distance_mm>
    140a:	88 ee       	ldi	r24, 0xE8	; 232
    140c:	93 e0       	ldi	r25, 0x03	; 3
    140e:	f7 01       	movw	r30, r14
    1410:	31 97       	sbiw	r30, 0x01	; 1
    1412:	f1 f7       	brne	.-4      	; 0x1410 <mapRun+0x1d2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1414:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1416:	d9 f7       	brne	.-10     	; 0x140e <mapRun+0x1d0>
			// lcd will print "120 degree success"
			else if (angle[count] == 120 || angle[count] == -240)
			{
				forward_mm(15);
				_delay_ms(100);
				soft_left_2_degrees(30);
    1418:	8e e1       	ldi	r24, 0x1E	; 30
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <soft_left_2_degrees>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1420:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1422:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1424:	84 60       	ori	r24, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
    1426:	82 b9       	out	0x02, r24	; 2
				_delay_ms(100);
				soft_left_2_degrees(30);
				do
				{
					soft_left();
					senser_value_C = ADC_Conversion(2);
    1428:	82 e0       	ldi	r24, 0x02	; 2
    142a:	0e 94 99 04 	call	0x932	; 0x932 <ADC_Conversion>
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	90 93 fb 16 	sts	0x16FB, r25
    1434:	80 93 fa 16 	sts	0x16FA, r24
				}
				while (senser_value_C < 110);
    1438:	8e 36       	cpi	r24, 0x6E	; 110
    143a:	91 05       	cpc	r25, r1
    143c:	8c f3       	brlt	.-30     	; 0x1420 <mapRun+0x1e2>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    143e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1440:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1442:	82 b9       	out	0x02, r24	; 2
					soft_left();
					senser_value_C = ADC_Conversion(2);
				}
				while (senser_value_C < 110);
				stop();
				lcd_cursor(1,1);
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	61 e0       	ldi	r22, 0x01	; 1
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
				lcd_string("120 degree suces");
    1450:	84 e4       	ldi	r24, 0x44	; 68
    1452:	92 e0       	ldi	r25, 0x02	; 2
    1454:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
    1458:	8d c0       	rjmp	.+282    	; 0x1574 <mapRun+0x336>
			}
			//if angle[i] is -60 the bot has to take a -60 degree turn
			// bot will move 6 cm ahead and 30 degree right to skip the current black line
			// then it will rotate rihgt until it finds another black line
			// lcd will print "-60 degree success"
			else if (angle[count] == -60 || angle[count] == 300)
    145a:	8f ef       	ldi	r24, 0xFF	; 255
    145c:	e4 3c       	cpi	r30, 0xC4	; 196
    145e:	f8 07       	cpc	r31, r24
    1460:	21 f0       	breq	.+8      	; 0x146a <mapRun+0x22c>
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	ec 32       	cpi	r30, 0x2C	; 44
    1466:	f8 07       	cpc	r31, r24
    1468:	51 f5       	brne	.+84     	; 0x14be <mapRun+0x280>
	stop(); //Stop robot
}

void forward_mm(unsigned int DistanceInMM)
{
	linear_distance_mm(DistanceInMM);
    146a:	8c e3       	ldi	r24, 0x3C	; 60
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 49 06 	call	0xc92	; 0xc92 <linear_distance_mm>
    1472:	88 ee       	ldi	r24, 0xE8	; 232
    1474:	93 e0       	ldi	r25, 0x03	; 3
    1476:	f7 01       	movw	r30, r14
    1478:	31 97       	sbiw	r30, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <mapRun+0x23a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    147c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    147e:	d9 f7       	brne	.-10     	; 0x1476 <mapRun+0x238>
			// lcd will print "-60 degree success"
			else if (angle[count] == -60 || angle[count] == 300)
			{
				forward_mm(60);
				_delay_ms(100);
				right_degrees(30);
    1480:	8e e1       	ldi	r24, 0x1E	; 30
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 3b 05 	call	0xa76	; 0xa76 <right_degrees>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1488:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    148a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    148c:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
    148e:	82 b9       	out	0x02, r24	; 2
				_delay_ms(100);
				right_degrees(30);
				do
				{
					right();
					senser_value_C = ADC_Conversion(2);
    1490:	82 e0       	ldi	r24, 0x02	; 2
    1492:	0e 94 99 04 	call	0x932	; 0x932 <ADC_Conversion>
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	90 93 fb 16 	sts	0x16FB, r25
    149c:	80 93 fa 16 	sts	0x16FA, r24
				}
				while (senser_value_C < 110);
    14a0:	8e 36       	cpi	r24, 0x6E	; 110
    14a2:	91 05       	cpc	r25, r1
    14a4:	8c f3       	brlt	.-30     	; 0x1488 <mapRun+0x24a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    14a6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    14a8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    14aa:	82 b9       	out	0x02, r24	; 2
					right();
					senser_value_C = ADC_Conversion(2);
				}
				while (senser_value_C < 110);
				stop();
				lcd_cursor(1,1);
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	61 e0       	ldi	r22, 0x01	; 1
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
				lcd_string("-60 degree suces");
    14b8:	85 e5       	ldi	r24, 0x55	; 85
    14ba:	92 e0       	ldi	r25, 0x02	; 2
    14bc:	cb cf       	rjmp	.-106    	; 0x1454 <mapRun+0x216>
			}
			//if angle[i] is -120 the bot has to take a -120 degree turn
			// bot will move 1.5 cm ahead and 30 degree back right to skip the current black line
			// then it will rotate soft right until it finds another black line
			// lcd will print "-120 degree success"
			else if (angle[count] == -120 || angle[count] == 240)
    14be:	8f ef       	ldi	r24, 0xFF	; 255
    14c0:	e8 38       	cpi	r30, 0x88	; 136
    14c2:	f8 07       	cpc	r31, r24
    14c4:	19 f0       	breq	.+6      	; 0x14cc <mapRun+0x28e>
    14c6:	e0 3f       	cpi	r30, 0xF0	; 240
    14c8:	f1 05       	cpc	r31, r1
    14ca:	51 f5       	brne	.+84     	; 0x1520 <mapRun+0x2e2>
	stop(); //Stop robot
}

void forward_mm(unsigned int DistanceInMM)
{
	linear_distance_mm(DistanceInMM);
    14cc:	8f e0       	ldi	r24, 0x0F	; 15
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	0e 94 49 06 	call	0xc92	; 0xc92 <linear_distance_mm>
    14d4:	88 ee       	ldi	r24, 0xE8	; 232
    14d6:	93 e0       	ldi	r25, 0x03	; 3
    14d8:	f7 01       	movw	r30, r14
    14da:	31 97       	sbiw	r30, 0x01	; 1
    14dc:	f1 f7       	brne	.-4      	; 0x14da <mapRun+0x29c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e0:	d9 f7       	brne	.-10     	; 0x14d8 <mapRun+0x29a>
			// lcd will print "-120 degree success"
			else if (angle[count] == -120 || angle[count] == 240)
			{
				forward_mm(15);
				_delay_ms(100);
				soft_right_2_degrees(30);
    14e2:	8e e1       	ldi	r24, 0x1E	; 30
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	0e 94 5d 05 	call	0xaba	; 0xaba <soft_right_2_degrees>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    14ea:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    14ec:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    14ee:	82 60       	ori	r24, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
    14f0:	82 b9       	out	0x02, r24	; 2
				_delay_ms(100);
				soft_right_2_degrees(30);
				do
				{
					soft_right();
					senser_value_C = ADC_Conversion(2);
    14f2:	82 e0       	ldi	r24, 0x02	; 2
    14f4:	0e 94 99 04 	call	0x932	; 0x932 <ADC_Conversion>
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	90 93 fb 16 	sts	0x16FB, r25
    14fe:	80 93 fa 16 	sts	0x16FA, r24
				}
				while (senser_value_C < 110);
    1502:	8e 36       	cpi	r24, 0x6E	; 110
    1504:	91 05       	cpc	r25, r1
    1506:	8c f3       	brlt	.-30     	; 0x14ea <mapRun+0x2ac>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1508:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    150a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    150c:	82 b9       	out	0x02, r24	; 2
					soft_right();
					senser_value_C = ADC_Conversion(2);
				}
				while (senser_value_C < 110);
				stop();
				lcd_cursor(1,1);
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	61 e0       	ldi	r22, 0x01	; 1
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
				lcd_string("-120 degre suces");
    151a:	86 e6       	ldi	r24, 0x66	; 102
    151c:	92 e0       	ldi	r25, 0x02	; 2
    151e:	9a cf       	rjmp	.-204    	; 0x1454 <mapRun+0x216>
			}
			//if angle[i] is 180 the bot has to take a 190 degree turn
			// bot will move left for 500 milliseconds to skip the current black line
			// then it will rotate left until it finds another black line
			else if (angle[count] == 180 || angle[count] == -180)
    1520:	e4 3b       	cpi	r30, 0xB4	; 180
    1522:	f1 05       	cpc	r31, r1
    1524:	19 f0       	breq	.+6      	; 0x152c <mapRun+0x2ee>
    1526:	ec 54       	subi	r30, 0x4C	; 76
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	21 f5       	brne	.+72     	; 0x1574 <mapRun+0x336>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    152c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    152e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1530:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
    1532:	82 b9       	out	0x02, r24	; 2
    1534:	88 e8       	ldi	r24, 0x88	; 136
    1536:	93 e1       	ldi	r25, 0x13	; 19
    1538:	f7 01       	movw	r30, r14
    153a:	31 97       	sbiw	r30, 0x01	; 1
    153c:	f1 f7       	brne	.-4      	; 0x153a <mapRun+0x2fc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    153e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1540:	d9 f7       	brne	.-10     	; 0x1538 <mapRun+0x2fa>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1542:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1544:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1546:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
    1548:	82 b9       	out	0x02, r24	; 2
				left();
				_delay_ms(500);
				do
				{
					left();
					Center_white_line = ADC_Conversion(2);
    154a:	82 e0       	ldi	r24, 0x02	; 2
    154c:	0e 94 99 04 	call	0x932	; 0x932 <ADC_Conversion>
    1550:	80 93 28 04 	sts	0x0428, r24
				}
				while (Center_white_line < 110);
    1554:	8e 36       	cpi	r24, 0x6E	; 110
    1556:	a8 f3       	brcs	.-22     	; 0x1542 <mapRun+0x304>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1558:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    155a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    155c:	82 b9       	out	0x02, r24	; 2
    155e:	88 ee       	ldi	r24, 0xE8	; 232
    1560:	93 e0       	ldi	r25, 0x03	; 3
    1562:	f7 01       	movw	r30, r14
    1564:	31 97       	sbiw	r30, 0x01	; 1
    1566:	f1 f7       	brne	.-4      	; 0x1564 <mapRun+0x326>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1568:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    156a:	d9 f7       	brne	.-10     	; 0x1562 <mapRun+0x324>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    156c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    156e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1570:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1572:	82 b9       	out	0x02, r24	; 2
				_delay_ms(100);
				forward();
			}

			// by default lcd will be print "MOVING ON FLEX"
			lcd_cursor(1,1);
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	61 e0       	ldi	r22, 0x01	; 1
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
			lcd_string("                ");
    1580:	87 e7       	ldi	r24, 0x77	; 119
    1582:	92 e0       	ldi	r25, 0x02	; 2
    1584:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
			lcd_cursor(2,1);
    1588:	82 e0       	ldi	r24, 0x02	; 2
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	61 e0       	ldi	r22, 0x01	; 1
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
			lcd_string("MOVING ON FLEX!!");
    1594:	88 e8       	ldi	r24, 0x88	; 136
    1596:	92 e0       	ldi	r25, 0x02	; 2
    1598:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
	signed int count = -1;
	int *res = (int*) malloc (3*sizeof(int));		//Holds result
	for (int i = 0; i < 3; i++)
		res[i] = 0;

	while(count < Size)
    159c:	0a 15       	cp	r16, r10
    159e:	1b 05       	cpc	r17, r11
    15a0:	0c f4       	brge	.+2      	; 0x15a4 <mapRun+0x366>
    15a2:	7c ce       	rjmp	.-776    	; 0x129c <mapRun+0x5e>
			lcd_cursor(2,1);
			lcd_string("MOVING ON FLEX!!");
		}
	}
	return res;
}
    15a4:	ce 01       	movw	r24, r28
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	1f 91       	pop	r17
    15ac:	0f 91       	pop	r16
    15ae:	ff 90       	pop	r15
    15b0:	ef 90       	pop	r14
    15b2:	df 90       	pop	r13
    15b4:	cf 90       	pop	r12
    15b6:	bf 90       	pop	r11
    15b8:	af 90       	pop	r10
    15ba:	9f 90       	pop	r9
    15bc:	8f 90       	pop	r8
    15be:	7f 90       	pop	r7
    15c0:	6f 90       	pop	r6
    15c2:	08 95       	ret

000015c4 <pathFind>:
			the source (where the index of the parent is -1.) In the process,
			it also keeps updating the number of nodes in the path from source
			to the destination.	
	*Example Call: int *path = pathFind (parent, destination, &pathSize);
*/
int* pathFind (int *parent, int destination, int *pathSize) {
    15c4:	cf 92       	push	r12
    15c6:	df 92       	push	r13
    15c8:	ef 92       	push	r14
    15ca:	ff 92       	push	r15
    15cc:	0f 93       	push	r16
    15ce:	1f 93       	push	r17
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
    15d4:	6c 01       	movw	r12, r24
    15d6:	16 2f       	mov	r17, r22
    15d8:	07 2f       	mov	r16, r23
    15da:	7a 01       	movw	r14, r20
	int *path = (int*) malloc (size*sizeof(int));
    15dc:	82 e6       	ldi	r24, 0x62	; 98
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <malloc>
    15e4:	ec 01       	movw	r28, r24
	*pathSize = 1;			//There is at least one element (destination)
    15e6:	21 e0       	ldi	r18, 0x01	; 1
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	d7 01       	movw	r26, r14
    15ec:	2d 93       	st	X+, r18
    15ee:	3c 93       	st	X, r19
	int i = destination, j = 1;
	path[0] = destination;
    15f0:	18 83       	st	Y, r17
    15f2:	09 83       	std	Y+1, r16	; 0x01
    15f4:	ac 01       	movw	r20, r24
    15f6:	21 2f       	mov	r18, r17
    15f8:	30 2f       	mov	r19, r16
    15fa:	c9 01       	movw	r24, r18
    15fc:	e1 e0       	ldi	r30, 0x01	; 1
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	0e c0       	rjmp	.+28     	; 0x161e <pathFind+0x5a>
	//Creates a path 
	while (parent[i] != -1) {
		(*pathSize)++;
    1602:	d7 01       	movw	r26, r14
    1604:	8d 91       	ld	r24, X+
    1606:	9c 91       	ld	r25, X
    1608:	11 97       	sbiw	r26, 0x01	; 1
    160a:	01 96       	adiw	r24, 0x01	; 1
    160c:	8d 93       	st	X+, r24
    160e:	9c 93       	st	X, r25
		path[j++] = parent[i];
    1610:	db 01       	movw	r26, r22
    1612:	8d 91       	ld	r24, X+
    1614:	9c 91       	ld	r25, X
    1616:	da 01       	movw	r26, r20
    1618:	8d 93       	st	X+, r24
    161a:	9c 93       	st	X, r25
    161c:	31 96       	adiw	r30, 0x01	; 1
	int *path = (int*) malloc (size*sizeof(int));
	*pathSize = 1;			//There is at least one element (destination)
	int i = destination, j = 1;
	path[0] = destination;
	//Creates a path 
	while (parent[i] != -1) {
    161e:	bc 01       	movw	r22, r24
    1620:	66 0f       	add	r22, r22
    1622:	77 1f       	adc	r23, r23
    1624:	6c 0d       	add	r22, r12
    1626:	7d 1d       	adc	r23, r13
    1628:	4e 5f       	subi	r20, 0xFE	; 254
    162a:	5f 4f       	sbci	r21, 0xFF	; 255
    162c:	db 01       	movw	r26, r22
    162e:	8d 91       	ld	r24, X+
    1630:	9c 91       	ld	r25, X
    1632:	bf ef       	ldi	r27, 0xFF	; 255
    1634:	8f 3f       	cpi	r24, 0xFF	; 255
    1636:	9b 07       	cpc	r25, r27
    1638:	21 f7       	brne	.-56     	; 0x1602 <pathFind+0x3e>
		(*pathSize)++;
		path[j++] = parent[i];
		i = parent[i];
	}
	path[j] = -1;
    163a:	ee 0f       	add	r30, r30
    163c:	ff 1f       	adc	r31, r31
    163e:	ec 0f       	add	r30, r28
    1640:	fd 1f       	adc	r31, r29
    1642:	91 83       	std	Z+1, r25	; 0x01
    1644:	80 83       	st	Z, r24
	//Corrects the order of the path
	reverse (path, *pathSize);
    1646:	f7 01       	movw	r30, r14
    1648:	60 81       	ld	r22, Z
    164a:	71 81       	ldd	r23, Z+1	; 0x01
    164c:	ce 01       	movw	r24, r28
    164e:	0e 94 bf 03 	call	0x77e	; 0x77e <reverse>
	/*for (int i = 0; i < *pathSize; i++)
		cout << path[i] << "\t";
	cout << endl;
	*/
	return path;
}
    1652:	ce 01       	movw	r24, r28
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	1f 91       	pop	r17
    165a:	0f 91       	pop	r16
    165c:	ff 90       	pop	r15
    165e:	ef 90       	pop	r14
    1660:	df 90       	pop	r13
    1662:	cf 90       	pop	r12
    1664:	08 95       	ret

00001666 <NewQueue>:
	struct Node *temp = (struct Node*) malloc (sizeof(struct Node));
	temp->next=NULL;
	return temp;
}
struct Queue * NewQueue() {
	struct Queue *Q = (struct Queue*) malloc (sizeof(struct Queue));
    1666:	84 e0       	ldi	r24, 0x04	; 4
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <malloc>
    166e:	fc 01       	movw	r30, r24
	Q->head=NULL;
    1670:	11 82       	std	Z+1, r1	; 0x01
    1672:	10 82       	st	Z, r1
	Q->tail=NULL;
    1674:	13 82       	std	Z+3, r1	; 0x03
    1676:	12 82       	std	Z+2, r1	; 0x02
	return Q;
}
    1678:	08 95       	ret

0000167a <NewNode>:
int DeQueue(struct Queue *Q);
void EmptyQueue(struct Queue *Q);
int IsEmpty(struct Queue *Q);

struct Node * NewNode() {
	struct Node *temp = (struct Node*) malloc (sizeof(struct Node));
    167a:	84 e0       	ldi	r24, 0x04	; 4
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <malloc>
    1682:	fc 01       	movw	r30, r24
	temp->next=NULL;
    1684:	13 82       	std	Z+3, r1	; 0x03
    1686:	12 82       	std	Z+2, r1	; 0x02
	return temp;
}
    1688:	08 95       	ret

0000168a <EnQueue>:
	Q->head=NULL;
	Q->tail=NULL;
	return Q;
}

void EnQueue(struct Queue *Q, int data) {
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	ec 01       	movw	r28, r24
    1694:	8b 01       	movw	r16, r22
	struct Node * temp= NewNode();
    1696:	0e 94 3d 0b 	call	0x167a	; 0x167a <NewNode>
    169a:	dc 01       	movw	r26, r24
	temp->data=data;
    169c:	11 96       	adiw	r26, 0x01	; 1
    169e:	1c 93       	st	X, r17
    16a0:	0e 93       	st	-X, r16
	if(Q->head==NULL && Q->tail==NULL) {
    16a2:	88 81       	ld	r24, Y
    16a4:	99 81       	ldd	r25, Y+1	; 0x01
    16a6:	89 2b       	or	r24, r25
    16a8:	39 f4       	brne	.+14     	; 0x16b8 <EnQueue+0x2e>
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	9b 81       	ldd	r25, Y+3	; 0x03
    16ae:	89 2b       	or	r24, r25
    16b0:	19 f4       	brne	.+6      	; 0x16b8 <EnQueue+0x2e>
		Q->head=temp;
    16b2:	b9 83       	std	Y+1, r27	; 0x01
    16b4:	a8 83       	st	Y, r26
    16b6:	04 c0       	rjmp	.+8      	; 0x16c0 <EnQueue+0x36>
		Q->tail=temp;
		return;
	}
	Q->tail->next=temp;
    16b8:	ea 81       	ldd	r30, Y+2	; 0x02
    16ba:	fb 81       	ldd	r31, Y+3	; 0x03
    16bc:	b3 83       	std	Z+3, r27	; 0x03
    16be:	a2 83       	std	Z+2, r26	; 0x02
	Q->tail=temp;
    16c0:	bb 83       	std	Y+3, r27	; 0x03
    16c2:	aa 83       	std	Y+2, r26	; 0x02
}
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	1f 91       	pop	r17
    16ca:	0f 91       	pop	r16
    16cc:	08 95       	ret

000016ce <Move>:
				3rd tells the node it was supposed to go to.
	*Logic: Converts nodes to an array of angle and calls the run function
			Returns the result by changing index to actual nodes
	*Example Call: int *res = Move (path, pathSize);
*/
int* Move (int path[], int pathSize) {
    16ce:	8f 92       	push	r8
    16d0:	9f 92       	push	r9
    16d2:	af 92       	push	r10
    16d4:	bf 92       	push	r11
    16d6:	cf 92       	push	r12
    16d8:	df 92       	push	r13
    16da:	ef 92       	push	r14
    16dc:	ff 92       	push	r15
    16de:	0f 93       	push	r16
    16e0:	1f 93       	push	r17
    16e2:	cf 93       	push	r28
    16e4:	df 93       	push	r29
    16e6:	8c 01       	movw	r16, r24
    16e8:	5b 01       	movw	r10, r22
	signed int *angle = (signed int*) malloc((pathSize-1)*sizeof(int));
    16ea:	7b 01       	movw	r14, r22
    16ec:	08 94       	sec
    16ee:	e1 08       	sbc	r14, r1
    16f0:	f1 08       	sbc	r15, r1
    16f2:	c7 01       	movw	r24, r14
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <malloc>
    16fc:	d8 2e       	mov	r13, r24
    16fe:	c9 2e       	mov	r12, r25
    1700:	e8 01       	movw	r28, r16
    1702:	9c 01       	movw	r18, r24
    1704:	b9 01       	movw	r22, r18
    1706:	41 e0       	ldi	r20, 0x01	; 1
    1708:	50 e0       	ldi	r21, 0x00	; 0
	for (int j = 0, i = 1; i < pathSize-1; i++, j++) {
		//This could be buggy
		angle[j] = map_angle[path[i]][path[i+1]] - 
    170a:	f1 e3       	ldi	r31, 0x31	; 49
    170c:	8f 2e       	mov	r8, r31
    170e:	91 2c       	mov	r9, r1
    1710:	2c c0       	rjmp	.+88     	; 0x176a <Move+0x9c>
    1712:	2a 81       	ldd	r18, Y+2	; 0x02
    1714:	3b 81       	ldd	r19, Y+3	; 0x03
    1716:	28 9d       	mul	r18, r8
    1718:	d0 01       	movw	r26, r0
    171a:	29 9d       	mul	r18, r9
    171c:	b0 0d       	add	r27, r0
    171e:	38 9d       	mul	r19, r8
    1720:	b0 0d       	add	r27, r0
    1722:	11 24       	eor	r1, r1
    1724:	8c 81       	ldd	r24, Y+4	; 0x04
    1726:	9d 81       	ldd	r25, Y+5	; 0x05
    1728:	a8 0f       	add	r26, r24
    172a:	b9 1f       	adc	r27, r25
    172c:	aa 0f       	add	r26, r26
    172e:	bb 1f       	adc	r27, r27
    1730:	ac 53       	subi	r26, 0x3C	; 60
    1732:	b8 4e       	sbci	r27, 0xE8	; 232
    1734:	89 91       	ld	r24, Y+
    1736:	99 91       	ld	r25, Y+
    1738:	88 9d       	mul	r24, r8
    173a:	f0 01       	movw	r30, r0
    173c:	89 9d       	mul	r24, r9
    173e:	f0 0d       	add	r31, r0
    1740:	98 9d       	mul	r25, r8
    1742:	f0 0d       	add	r31, r0
    1744:	11 24       	eor	r1, r1
    1746:	e2 0f       	add	r30, r18
    1748:	f3 1f       	adc	r31, r19
    174a:	ee 0f       	add	r30, r30
    174c:	ff 1f       	adc	r31, r31
    174e:	ec 53       	subi	r30, 0x3C	; 60
    1750:	f8 4e       	sbci	r31, 0xE8	; 232
    1752:	8d 91       	ld	r24, X+
    1754:	9c 91       	ld	r25, X
    1756:	20 81       	ld	r18, Z
    1758:	31 81       	ldd	r19, Z+1	; 0x01
    175a:	82 1b       	sub	r24, r18
    175c:	93 0b       	sbc	r25, r19
    175e:	fb 01       	movw	r30, r22
    1760:	81 93       	st	Z+, r24
    1762:	91 93       	st	Z+, r25
    1764:	bf 01       	movw	r22, r30
			Returns the result by changing index to actual nodes
	*Example Call: int *res = Move (path, pathSize);
*/
int* Move (int path[], int pathSize) {
	signed int *angle = (signed int*) malloc((pathSize-1)*sizeof(int));
	for (int j = 0, i = 1; i < pathSize-1; i++, j++) {
    1766:	4f 5f       	subi	r20, 0xFF	; 255
    1768:	5f 4f       	sbci	r21, 0xFF	; 255
    176a:	4e 15       	cp	r20, r14
    176c:	5f 05       	cpc	r21, r15
    176e:	8c f2       	brlt	.-94     	; 0x1712 <Move+0x44>
		//This could be buggy
		angle[j] = map_angle[path[i]][path[i+1]] - 
					map_angle[path[i-1]][path[i]];
	}
	int *res = mapRun (angle, pathSize);
    1770:	8d 2d       	mov	r24, r13
    1772:	9c 2d       	mov	r25, r12
    1774:	b5 01       	movw	r22, r10
    1776:	0e 94 1f 09 	call	0x123e	; 0x123e <mapRun>
    177a:	ec 01       	movw	r28, r24
	if (res[0] != 0) {
    177c:	88 81       	ld	r24, Y
    177e:	99 81       	ldd	r25, Y+1	; 0x01
    1780:	89 2b       	or	r24, r25
    1782:	a1 f0       	breq	.+40     	; 0x17ac <Move+0xde>
		res[1] = path[res[1]];
    1784:	ea 81       	ldd	r30, Y+2	; 0x02
    1786:	fb 81       	ldd	r31, Y+3	; 0x03
    1788:	ee 0f       	add	r30, r30
    178a:	ff 1f       	adc	r31, r31
    178c:	e0 0f       	add	r30, r16
    178e:	f1 1f       	adc	r31, r17
    1790:	80 81       	ld	r24, Z
    1792:	91 81       	ldd	r25, Z+1	; 0x01
    1794:	9b 83       	std	Y+3, r25	; 0x03
    1796:	8a 83       	std	Y+2, r24	; 0x02
		res[2] = path[res[2]];
    1798:	ec 81       	ldd	r30, Y+4	; 0x04
    179a:	fd 81       	ldd	r31, Y+5	; 0x05
    179c:	ee 0f       	add	r30, r30
    179e:	ff 1f       	adc	r31, r31
    17a0:	e0 0f       	add	r30, r16
    17a2:	f1 1f       	adc	r31, r17
    17a4:	80 81       	ld	r24, Z
    17a6:	91 81       	ldd	r25, Z+1	; 0x01
    17a8:	9d 83       	std	Y+5, r25	; 0x05
    17aa:	8c 83       	std	Y+4, r24	; 0x04
	}
	free(angle);
    17ac:	8d 2d       	mov	r24, r13
    17ae:	9c 2d       	mov	r25, r12
    17b0:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <free>
	return res;
}
    17b4:	ce 01       	movw	r24, r28
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	1f 91       	pop	r17
    17bc:	0f 91       	pop	r16
    17be:	ff 90       	pop	r15
    17c0:	ef 90       	pop	r14
    17c2:	df 90       	pop	r13
    17c4:	cf 90       	pop	r12
    17c6:	bf 90       	pop	r11
    17c8:	af 90       	pop	r10
    17ca:	9f 90       	pop	r9
    17cc:	8f 90       	pop	r8
    17ce:	08 95       	ret

000017d0 <DeQueue>:

int DeQueue(struct Queue *Q) {
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	dc 01       	movw	r26, r24
	if(Q->head==NULL && Q->tail==NULL) {
    17d6:	ed 91       	ld	r30, X+
    17d8:	fc 91       	ld	r31, X
    17da:	11 97       	sbiw	r26, 0x01	; 1
    17dc:	30 97       	sbiw	r30, 0x00	; 0
    17de:	49 f4       	brne	.+18     	; 0x17f2 <DeQueue+0x22>
    17e0:	12 96       	adiw	r26, 0x02	; 2
    17e2:	8d 91       	ld	r24, X+
    17e4:	9c 91       	ld	r25, X
    17e6:	13 97       	sbiw	r26, 0x03	; 3
    17e8:	89 2b       	or	r24, r25
    17ea:	19 f4       	brne	.+6      	; 0x17f2 <DeQueue+0x22>
    17ec:	cf ef       	ldi	r28, 0xFF	; 255
    17ee:	df ef       	ldi	r29, 0xFF	; 255
    17f0:	10 c0       	rjmp	.+32     	; 0x1812 <DeQueue+0x42>
		return -1;
	}
	struct Node *temp = Q->head;
	int data = temp->data;
    17f2:	c0 81       	ld	r28, Z
    17f4:	d1 81       	ldd	r29, Z+1	; 0x01
	Q->head=Q->head->next;
    17f6:	82 81       	ldd	r24, Z+2	; 0x02
    17f8:	93 81       	ldd	r25, Z+3	; 0x03
    17fa:	11 96       	adiw	r26, 0x01	; 1
    17fc:	9c 93       	st	X, r25
    17fe:	8e 93       	st	-X, r24
	if(Q->head==NULL)
    1800:	89 2b       	or	r24, r25
    1802:	21 f4       	brne	.+8      	; 0x180c <DeQueue+0x3c>
		Q->tail=NULL;
    1804:	13 96       	adiw	r26, 0x03	; 3
    1806:	1c 92       	st	X, r1
    1808:	1e 92       	st	-X, r1
    180a:	12 97       	sbiw	r26, 0x02	; 2
	free (temp);	
    180c:	cf 01       	movw	r24, r30
    180e:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <free>
	return data;
}
    1812:	ce 01       	movw	r24, r28
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	08 95       	ret

0000181a <BFS>:
			It puts the source to a queue. Then as long as the queue is not
			empty, it dequeues the first element, enqueues all the neighbours
			which were not already explored and updates the cost.
	*Example Call: int *cost = BFS(source);
*/
int* BFS (int search) {
    181a:	2f 92       	push	r2
    181c:	3f 92       	push	r3
    181e:	4f 92       	push	r4
    1820:	5f 92       	push	r5
    1822:	6f 92       	push	r6
    1824:	7f 92       	push	r7
    1826:	8f 92       	push	r8
    1828:	9f 92       	push	r9
    182a:	af 92       	push	r10
    182c:	bf 92       	push	r11
    182e:	cf 92       	push	r12
    1830:	df 92       	push	r13
    1832:	ef 92       	push	r14
    1834:	ff 92       	push	r15
    1836:	0f 93       	push	r16
    1838:	1f 93       	push	r17
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	c2 56       	subi	r28, 0x62	; 98
    1844:	d0 40       	sbci	r29, 0x00	; 0
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	f8 94       	cli
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	cd bf       	out	0x3d, r28	; 61
    1850:	8c 01       	movw	r16, r24
	struct Queue *Q = NewQueue();	//Initializing the queue required to 
    1852:	0e 94 33 0b 	call	0x1666	; 0x1666 <NewQueue>
    1856:	2c 01       	movw	r4, r24
									//maintan nodes to be visited
	int *bfs, source = search;
	bfs = (int *) malloc (size*sizeof (int));
    1858:	82 e6       	ldi	r24, 0x62	; 98
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <malloc>
    1860:	1c 01       	movw	r2, r24
    1862:	5c 01       	movw	r10, r24
    1864:	dc 01       	movw	r26, r24
    1866:	fe 01       	movw	r30, r28
    1868:	33 96       	adiw	r30, 0x03	; 3
	int visited[size];				//Maintains if the node is visited
	for (int i = 1; i < size; i++) {
    186a:	ce 01       	movw	r24, r28
    186c:	8d 59       	subi	r24, 0x9D	; 157
    186e:	9f 4f       	sbci	r25, 0xFF	; 255
		bfs[i] = 0;
    1870:	13 96       	adiw	r26, 0x03	; 3
    1872:	1c 92       	st	X, r1
    1874:	1e 92       	st	-X, r1
    1876:	12 97       	sbiw	r26, 0x02	; 2
		visited[i] = 0;
    1878:	11 92       	st	Z+, r1
    187a:	11 92       	st	Z+, r1
    187c:	12 96       	adiw	r26, 0x02	; 2
	struct Queue *Q = NewQueue();	//Initializing the queue required to 
									//maintan nodes to be visited
	int *bfs, source = search;
	bfs = (int *) malloc (size*sizeof (int));
	int visited[size];				//Maintains if the node is visited
	for (int i = 1; i < size; i++) {
    187e:	e8 17       	cp	r30, r24
    1880:	f9 07       	cpc	r31, r25
    1882:	b1 f7       	brne	.-20     	; 0x1870 <BFS+0x56>
		bfs[i] = 0;
		visited[i] = 0;
	}
	EnQueue (Q, search);
    1884:	c2 01       	movw	r24, r4
    1886:	b8 01       	movw	r22, r16
    1888:	0e 94 45 0b 	call	0x168a	; 0x168a <EnQueue>
    188c:	43 c0       	rjmp	.+134    	; 0x1914 <BFS+0xfa>
	while (!IsEmpty (Q)) {
		//Accessing the first node in the queue and marking it's neighbours to
		//be searched
		search = DeQueue (Q);
    188e:	c2 01       	movw	r24, r4
    1890:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DeQueue>
		for (int i = 1; i < size; i++) {
			if (visited[i] == 0) {
				if (map[search][i] != INF) {
					//Adding weight to bfs if the node is connected
					bfs[i] = map[search][i] + bfs[search];
    1894:	3c 01       	movw	r6, r24
    1896:	66 0c       	add	r6, r6
    1898:	77 1c       	adc	r7, r7
    189a:	6a 0c       	add	r6, r10
    189c:	7b 1c       	adc	r7, r11
    189e:	22 e6       	ldi	r18, 0x62	; 98
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	82 9f       	mul	r24, r18
    18a4:	60 01       	movw	r12, r0
    18a6:	83 9f       	mul	r24, r19
    18a8:	d0 0c       	add	r13, r0
    18aa:	92 9f       	mul	r25, r18
    18ac:	d0 0c       	add	r13, r0
    18ae:	11 24       	eor	r1, r1
    18b0:	8a e3       	ldi	r24, 0x3A	; 58
    18b2:	94 e0       	ldi	r25, 0x04	; 4
    18b4:	c8 0e       	add	r12, r24
    18b6:	d9 1e       	adc	r13, r25
    18b8:	b3 e0       	ldi	r27, 0x03	; 3
    18ba:	8b 2e       	mov	r8, r27
    18bc:	91 2c       	mov	r9, r1
    18be:	8c 0e       	add	r8, r28
    18c0:	9d 1e       	adc	r9, r29
    18c2:	71 01       	movw	r14, r2
    18c4:	01 e0       	ldi	r16, 0x01	; 1
    18c6:	10 e0       	ldi	r17, 0x00	; 0
	while (!IsEmpty (Q)) {
		//Accessing the first node in the queue and marking it's neighbours to
		//be searched
		search = DeQueue (Q);
		for (int i = 1; i < size; i++) {
			if (visited[i] == 0) {
    18c8:	f4 01       	movw	r30, r8
    18ca:	80 81       	ld	r24, Z
    18cc:	91 81       	ldd	r25, Z+1	; 0x01
    18ce:	89 2b       	or	r24, r25
    18d0:	a1 f4       	brne	.+40     	; 0x18fa <BFS+0xe0>
				if (map[search][i] != INF) {
					//Adding weight to bfs if the node is connected
					bfs[i] = map[search][i] + bfs[search];
    18d2:	f3 01       	movw	r30, r6
    18d4:	80 81       	ld	r24, Z
    18d6:	91 81       	ldd	r25, Z+1	; 0x01
    18d8:	f6 01       	movw	r30, r12
    18da:	20 81       	ld	r18, Z
    18dc:	31 81       	ldd	r19, Z+1	; 0x01
    18de:	82 0f       	add	r24, r18
    18e0:	93 1f       	adc	r25, r19
    18e2:	f7 01       	movw	r30, r14
    18e4:	93 83       	std	Z+3, r25	; 0x03
    18e6:	82 83       	std	Z+2, r24	; 0x02
					//In that case, neighbours of this node needs to be scanned
					//too
					EnQueue (Q, i);
    18e8:	c2 01       	movw	r24, r4
    18ea:	b8 01       	movw	r22, r16
    18ec:	0e 94 45 0b 	call	0x168a	; 0x168a <EnQueue>
					visited [i] = 1;
    18f0:	21 e0       	ldi	r18, 0x01	; 1
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	f4 01       	movw	r30, r8
    18f6:	31 83       	std	Z+1, r19	; 0x01
    18f8:	20 83       	st	Z, r18
	EnQueue (Q, search);
	while (!IsEmpty (Q)) {
		//Accessing the first node in the queue and marking it's neighbours to
		//be searched
		search = DeQueue (Q);
		for (int i = 1; i < size; i++) {
    18fa:	0f 5f       	subi	r16, 0xFF	; 255
    18fc:	1f 4f       	sbci	r17, 0xFF	; 255
    18fe:	82 e0       	ldi	r24, 0x02	; 2
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	88 0e       	add	r8, r24
    1904:	99 1e       	adc	r9, r25
    1906:	c8 0e       	add	r12, r24
    1908:	d9 1e       	adc	r13, r25
    190a:	e8 0e       	add	r14, r24
    190c:	f9 1e       	adc	r15, r25
    190e:	01 33       	cpi	r16, 0x31	; 49
    1910:	11 05       	cpc	r17, r1
    1912:	d1 f6       	brne	.-76     	; 0x18c8 <BFS+0xae>
	for (int i = 1; i < size; i++) {
		bfs[i] = 0;
		visited[i] = 0;
	}
	EnQueue (Q, search);
	while (!IsEmpty (Q)) {
    1914:	f2 01       	movw	r30, r4
    1916:	80 81       	ld	r24, Z
    1918:	91 81       	ldd	r25, Z+1	; 0x01
    191a:	89 2b       	or	r24, r25
    191c:	09 f0       	breq	.+2      	; 0x1920 <BFS+0x106>
    191e:	b7 cf       	rjmp	.-146    	; 0x188e <BFS+0x74>
				}
			}
		}
	}
	return bfs; 
}
    1920:	c5 01       	movw	r24, r10
    1922:	ce 59       	subi	r28, 0x9E	; 158
    1924:	df 4f       	sbci	r29, 0xFF	; 255
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	1f 91       	pop	r17
    1936:	0f 91       	pop	r16
    1938:	ff 90       	pop	r15
    193a:	ef 90       	pop	r14
    193c:	df 90       	pop	r13
    193e:	cf 90       	pop	r12
    1940:	bf 90       	pop	r11
    1942:	af 90       	pop	r10
    1944:	9f 90       	pop	r9
    1946:	8f 90       	pop	r8
    1948:	7f 90       	pop	r7
    194a:	6f 90       	pop	r6
    194c:	5f 90       	pop	r5
    194e:	4f 90       	pop	r4
    1950:	3f 90       	pop	r3
    1952:	2f 90       	pop	r2
    1954:	08 95       	ret

00001956 <heuristic>:
	*Output: An array with cost (heuristic) of traversing all nodes from the source
	*Logic: Calls BFS to calculate the heuristic
	*Example Call: int *cost = heuristic(source);
*/
int* heuristic (int destination) {
	int *heuris = BFS (destination);	//Calculates heuristics of the node
    1956:	0e 94 0d 0c 	call	0x181a	; 0x181a <BFS>
	return heuris;
}
    195a:	08 95       	ret

0000195c <EmptyQueue>:

void EmptyQueue(struct Queue *Q) {
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	ec 01       	movw	r28, r24
    1962:	03 c0       	rjmp	.+6      	; 0x196a <EmptyQueue+0xe>
	while(Q->head!=NULL)
		DeQueue(Q);
    1964:	ce 01       	movw	r24, r28
    1966:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DeQueue>
	free (temp);	
	return data;
}

void EmptyQueue(struct Queue *Q) {
	while(Q->head!=NULL)
    196a:	88 81       	ld	r24, Y
    196c:	99 81       	ldd	r25, Y+1	; 0x01
    196e:	89 2b       	or	r24, r25
    1970:	c9 f7       	brne	.-14     	; 0x1964 <EmptyQueue+0x8>
		DeQueue(Q);
}
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	08 95       	ret

00001978 <dStar>:
			Applies A* search to find the path with least cost.
			If obstacle is encountered, updates the cost and re-evaluates the
			fastest route.
	*Example Call: dStar (1, 5);
*/
int dStar (int source, int dest) {
    1978:	2f 92       	push	r2
    197a:	3f 92       	push	r3
    197c:	4f 92       	push	r4
    197e:	5f 92       	push	r5
    1980:	6f 92       	push	r6
    1982:	7f 92       	push	r7
    1984:	8f 92       	push	r8
    1986:	9f 92       	push	r9
    1988:	af 92       	push	r10
    198a:	bf 92       	push	r11
    198c:	cf 92       	push	r12
    198e:	df 92       	push	r13
    1990:	ef 92       	push	r14
    1992:	ff 92       	push	r15
    1994:	0f 93       	push	r16
    1996:	1f 93       	push	r17
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	c8 5f       	subi	r28, 0xF8	; 248
    19a2:	d1 40       	sbci	r29, 0x01	; 1
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	f8 94       	cli
    19a8:	de bf       	out	0x3e, r29	; 62
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	cd bf       	out	0x3d, r28	; 61
    19ae:	c3 51       	subi	r28, 0x13	; 19
    19b0:	de 4f       	sbci	r29, 0xFE	; 254
    19b2:	79 83       	std	Y+1, r23	; 0x01
    19b4:	68 83       	st	Y, r22
    19b6:	cd 5e       	subi	r28, 0xED	; 237
    19b8:	d1 40       	sbci	r29, 0x01	; 1
		int gCost[size], fCost[size];	
		int openSize = 0, closedSize = 0;				//Maintains the size of
		//open list.
		//This speeds up the scanning process.
		gCost[source] = 0;
		fCost[source] = fCostCalc (gCost[source], heuris[source]);
    19ba:	1c 01       	movw	r2, r24
    19bc:	22 0c       	add	r2, r2
    19be:	33 1c       	adc	r3, r3
		int parent[size], open[size], closed[size], current;	
		int gCost[size], fCost[size];	
		int openSize = 0, closedSize = 0;				//Maintains the size of
		//open list.
		//This speeds up the scanning process.
		gCost[source] = 0;
    19c0:	9e 01       	movw	r18, r28
    19c2:	29 5d       	subi	r18, 0xD9	; 217
    19c4:	3e 4f       	sbci	r19, 0xFE	; 254
    19c6:	cb 50       	subi	r28, 0x0B	; 11
    19c8:	de 4f       	sbci	r29, 0xFE	; 254
    19ca:	39 83       	std	Y+1, r19	; 0x01
    19cc:	28 83       	st	Y, r18
    19ce:	c5 5f       	subi	r28, 0xF5	; 245
    19d0:	d1 40       	sbci	r29, 0x01	; 1
    19d2:	a9 01       	movw	r20, r18
    19d4:	42 0d       	add	r20, r2
    19d6:	53 1d       	adc	r21, r3
    19d8:	c1 51       	subi	r28, 0x11	; 17
    19da:	de 4f       	sbci	r29, 0xFE	; 254
    19dc:	59 83       	std	Y+1, r21	; 0x01
    19de:	48 83       	st	Y, r20
    19e0:	cf 5e       	subi	r28, 0xEF	; 239
    19e2:	d1 40       	sbci	r29, 0x01	; 1
		fCost[source] = fCostCalc (gCost[source], heuris[source]);
    19e4:	89 e8       	ldi	r24, 0x89	; 137
    19e6:	91 e0       	ldi	r25, 0x01	; 1
    19e8:	8c 0f       	add	r24, r28
    19ea:	9d 1f       	adc	r25, r29
    19ec:	82 0d       	add	r24, r2
    19ee:	93 1d       	adc	r25, r3
    19f0:	cf 50       	subi	r28, 0x0F	; 15
    19f2:	de 4f       	sbci	r29, 0xFE	; 254
    19f4:	99 83       	std	Y+1, r25	; 0x01
    19f6:	88 83       	st	Y, r24
    19f8:	c1 5f       	subi	r28, 0xF1	; 241
    19fa:	d1 40       	sbci	r29, 0x01	; 1
			//Initialising open and closed list to be empty
			open[i] = closed[i] = 0;
			parent[i] = -1;
			gCost[i] = fCost[i] = INF;
		}
		open[source] = 1, openSize++;
    19fc:	e3 e6       	ldi	r30, 0x63	; 99
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	ec 0f       	add	r30, r28
    1a02:	fd 1f       	adc	r31, r29
    1a04:	e2 0d       	add	r30, r2
    1a06:	f3 1d       	adc	r31, r3
    1a08:	cd 50       	subi	r28, 0x0D	; 13
    1a0a:	de 4f       	sbci	r29, 0xFE	; 254
    1a0c:	f9 83       	std	Y+1, r31	; 0x01
    1a0e:	e8 83       	st	Y, r30
    1a10:	c3 5f       	subi	r28, 0xF3	; 243
    1a12:	d1 40       	sbci	r29, 0x01	; 1
	*Output: An array with cost (heuristic) of traversing all nodes from the source
	*Logic: Calls BFS to calculate the heuristic
	*Example Call: int *cost = heuristic(source);
*/
int* heuristic (int destination) {
	int *heuris = BFS (destination);	//Calculates heuristics of the node
    1a14:	c3 51       	subi	r28, 0x13	; 19
    1a16:	de 4f       	sbci	r29, 0xFE	; 254
    1a18:	88 81       	ld	r24, Y
    1a1a:	99 81       	ldd	r25, Y+1	; 0x01
    1a1c:	cd 5e       	subi	r28, 0xED	; 237
    1a1e:	d1 40       	sbci	r29, 0x01	; 1
    1a20:	0e 94 0d 0c 	call	0x181a	; 0x181a <BFS>
    1a24:	c5 51       	subi	r28, 0x15	; 21
    1a26:	de 4f       	sbci	r29, 0xFE	; 254
    1a28:	99 83       	std	Y+1, r25	; 0x01
    1a2a:	88 83       	st	Y, r24
    1a2c:	cb 5e       	subi	r28, 0xEB	; 235
    1a2e:	d1 40       	sbci	r29, 0x01	; 1
		int parent[size], open[size], closed[size], current;	
		int gCost[size], fCost[size];	
		int openSize = 0, closedSize = 0;				//Maintains the size of
		//open list.
		//This speeds up the scanning process.
		gCost[source] = 0;
    1a30:	c1 51       	subi	r28, 0x11	; 17
    1a32:	de 4f       	sbci	r29, 0xFE	; 254
    1a34:	e8 81       	ld	r30, Y
    1a36:	f9 81       	ldd	r31, Y+1	; 0x01
    1a38:	cf 5e       	subi	r28, 0xEF	; 239
    1a3a:	d1 40       	sbci	r29, 0x01	; 1
    1a3c:	11 82       	std	Z+1, r1	; 0x01
    1a3e:	10 82       	st	Z, r1
		fCost[source] = fCostCalc (gCost[source], heuris[source]);
    1a40:	fc 01       	movw	r30, r24
    1a42:	e2 0d       	add	r30, r2
    1a44:	f3 1d       	adc	r31, r3
    1a46:	80 81       	ld	r24, Z
    1a48:	91 81       	ldd	r25, Z+1	; 0x01
    1a4a:	cf 50       	subi	r28, 0x0F	; 15
    1a4c:	de 4f       	sbci	r29, 0xFE	; 254
    1a4e:	e8 81       	ld	r30, Y
    1a50:	f9 81       	ldd	r31, Y+1	; 0x01
    1a52:	c1 5f       	subi	r28, 0xF1	; 241
    1a54:	d1 40       	sbci	r29, 0x01	; 1
    1a56:	91 83       	std	Z+1, r25	; 0x01
    1a58:	80 83       	st	Z, r24
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
		for (int i = 0; i < size; i++) {
			//Initialising open and closed list to be empty
			open[i] = closed[i] = 0;
    1a5e:	e5 ec       	ldi	r30, 0xC5	; 197
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	ec 0f       	add	r30, r28
    1a64:	fd 1f       	adc	r31, r29
    1a66:	e8 0f       	add	r30, r24
    1a68:	f9 1f       	adc	r31, r25
    1a6a:	11 82       	std	Z+1, r1	; 0x01
    1a6c:	10 82       	st	Z, r1
    1a6e:	e3 e6       	ldi	r30, 0x63	; 99
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	ec 0f       	add	r30, r28
    1a74:	fd 1f       	adc	r31, r29
    1a76:	e8 0f       	add	r30, r24
    1a78:	f9 1f       	adc	r31, r25
    1a7a:	11 82       	std	Z+1, r1	; 0x01
    1a7c:	10 82       	st	Z, r1
			parent[i] = -1;
    1a7e:	e1 e0       	ldi	r30, 0x01	; 1
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	ec 0f       	add	r30, r28
    1a84:	fd 1f       	adc	r31, r29
    1a86:	e8 0f       	add	r30, r24
    1a88:	f9 1f       	adc	r31, r25
    1a8a:	2f ef       	ldi	r18, 0xFF	; 255
    1a8c:	3f ef       	ldi	r19, 0xFF	; 255
    1a8e:	31 83       	std	Z+1, r19	; 0x01
    1a90:	20 83       	st	Z, r18
			gCost[i] = fCost[i] = INF;
    1a92:	e9 e8       	ldi	r30, 0x89	; 137
    1a94:	f1 e0       	ldi	r31, 0x01	; 1
    1a96:	ec 0f       	add	r30, r28
    1a98:	fd 1f       	adc	r31, r29
    1a9a:	e8 0f       	add	r30, r24
    1a9c:	f9 1f       	adc	r31, r25
    1a9e:	40 ec       	ldi	r20, 0xC0	; 192
    1aa0:	57 e2       	ldi	r21, 0x27	; 39
    1aa2:	51 83       	std	Z+1, r21	; 0x01
    1aa4:	40 83       	st	Z, r20
    1aa6:	e7 e2       	ldi	r30, 0x27	; 39
    1aa8:	f1 e0       	ldi	r31, 0x01	; 1
    1aaa:	ec 0f       	add	r30, r28
    1aac:	fd 1f       	adc	r31, r29
    1aae:	e8 0f       	add	r30, r24
    1ab0:	f9 1f       	adc	r31, r25
    1ab2:	51 83       	std	Z+1, r21	; 0x01
    1ab4:	40 83       	st	Z, r20
    1ab6:	02 96       	adiw	r24, 0x02	; 2
		int openSize = 0, closedSize = 0;				//Maintains the size of
		//open list.
		//This speeds up the scanning process.
		gCost[source] = 0;
		fCost[source] = fCostCalc (gCost[source], heuris[source]);
		for (int i = 0; i < size; i++) {
    1ab8:	82 36       	cpi	r24, 0x62	; 98
    1aba:	91 05       	cpc	r25, r1
    1abc:	81 f6       	brne	.-96     	; 0x1a5e <dStar+0xe6>
			//Initialising open and closed list to be empty
			open[i] = closed[i] = 0;
			parent[i] = -1;
			gCost[i] = fCost[i] = INF;
		}
		open[source] = 1, openSize++;
    1abe:	21 e0       	ldi	r18, 0x01	; 1
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	cd 50       	subi	r28, 0x0D	; 13
    1ac4:	de 4f       	sbci	r29, 0xFE	; 254
    1ac6:	e8 81       	ld	r30, Y
    1ac8:	f9 81       	ldd	r31, Y+1	; 0x01
    1aca:	c3 5f       	subi	r28, 0xF3	; 243
    1acc:	d1 40       	sbci	r29, 0x01	; 1
    1ace:	31 83       	std	Z+1, r19	; 0x01
    1ad0:	20 83       	st	Z, r18
    1ad2:	91 e0       	ldi	r25, 0x01	; 1
    1ad4:	69 2e       	mov	r6, r25
    1ad6:	71 2c       	mov	r7, r1
    1ad8:	e5 c0       	rjmp	.+458    	; 0x1ca4 <dStar+0x32c>
*/
int extractMin (int list[], int cost[], int Size) {
	//Think of initializing min
	int min = -1;	
	for (int i = 0; i < Size; i++) {
		if (list[i] != 0) {
    1ada:	f8 01       	movw	r30, r16
    1adc:	80 81       	ld	r24, Z
    1ade:	91 81       	ldd	r25, Z+1	; 0x01
    1ae0:	89 2b       	or	r24, r25
    1ae2:	b1 f0       	breq	.+44     	; 0x1b10 <dStar+0x198>
			if (min == -1) {
    1ae4:	ff ef       	ldi	r31, 0xFF	; 255
    1ae6:	6f 3f       	cpi	r22, 0xFF	; 255
    1ae8:	7f 07       	cpc	r23, r31
    1aea:	89 f0       	breq	.+34     	; 0x1b0e <dStar+0x196>
				min = i;
				continue;
			}
			min = ((cost[min] < cost[i]) ? min : i);
    1aec:	fb 01       	movw	r30, r22
    1aee:	ee 0f       	add	r30, r30
    1af0:	ff 1f       	adc	r31, r31
    1af2:	29 e8       	ldi	r18, 0x89	; 137
    1af4:	31 e0       	ldi	r19, 0x01	; 1
    1af6:	2c 0f       	add	r18, r28
    1af8:	3d 1f       	adc	r19, r29
    1afa:	e2 0f       	add	r30, r18
    1afc:	f3 1f       	adc	r31, r19
    1afe:	20 81       	ld	r18, Z
    1b00:	31 81       	ldd	r19, Z+1	; 0x01
    1b02:	8d 91       	ld	r24, X+
    1b04:	9c 91       	ld	r25, X
    1b06:	11 97       	sbiw	r26, 0x01	; 1
    1b08:	28 17       	cp	r18, r24
    1b0a:	39 07       	cpc	r19, r25
    1b0c:	0c f0       	brlt	.+2      	; 0x1b10 <dStar+0x198>
    1b0e:	ba 01       	movw	r22, r20
	*Example Call: int min = extractMin (openList, fCost, size);
*/
int extractMin (int list[], int cost[], int Size) {
	//Think of initializing min
	int min = -1;	
	for (int i = 0; i < Size; i++) {
    1b10:	4f 5f       	subi	r20, 0xFF	; 255
    1b12:	5f 4f       	sbci	r21, 0xFF	; 255
    1b14:	0e 5f       	subi	r16, 0xFE	; 254
    1b16:	1f 4f       	sbci	r17, 0xFF	; 255
    1b18:	12 96       	adiw	r26, 0x02	; 2
    1b1a:	41 33       	cpi	r20, 0x31	; 49
    1b1c:	51 05       	cpc	r21, r1
    1b1e:	e9 f6       	brne	.-70     	; 0x1ada <dStar+0x162>
		//Scan as long as the open list is not empty
		while (openSize > 0) {
			current = extractMin (open, fCost, size);
			open[current] = 0, openSize--;
    1b20:	cb 01       	movw	r24, r22
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	e3 e6       	ldi	r30, 0x63	; 99
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	ec 0f       	add	r30, r28
    1b2c:	fd 1f       	adc	r31, r29
    1b2e:	e8 0f       	add	r30, r24
    1b30:	f9 1f       	adc	r31, r25
    1b32:	11 82       	std	Z+1, r1	; 0x01
    1b34:	10 82       	st	Z, r1
			closed[current] = 1, closedSize++;
    1b36:	e5 ec       	ldi	r30, 0xC5	; 197
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	ec 0f       	add	r30, r28
    1b3c:	fd 1f       	adc	r31, r29
    1b3e:	e8 0f       	add	r30, r24
    1b40:	f9 1f       	adc	r31, r25
    1b42:	41 e0       	ldi	r20, 0x01	; 1
    1b44:	50 e0       	ldi	r21, 0x00	; 0
    1b46:	51 83       	std	Z+1, r21	; 0x01
    1b48:	40 83       	st	Z, r20
			if (current == dest) break;		//Path to destination is available
    1b4a:	c3 51       	subi	r28, 0x13	; 19
    1b4c:	de 4f       	sbci	r29, 0xFE	; 254
    1b4e:	e8 81       	ld	r30, Y
    1b50:	f9 81       	ldd	r31, Y+1	; 0x01
    1b52:	cd 5e       	subi	r28, 0xED	; 237
    1b54:	d1 40       	sbci	r29, 0x01	; 1
    1b56:	6e 17       	cp	r22, r30
    1b58:	7f 07       	cpc	r23, r31
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <dStar+0x1e6>
    1b5c:	ae c0       	rjmp	.+348    	; 0x1cba <dStar+0x342>
		}
		open[source] = 1, openSize++;
		//Scan as long as the open list is not empty
		while (openSize > 0) {
			current = extractMin (open, fCost, size);
			open[current] = 0, openSize--;
    1b5e:	08 94       	sec
    1b60:	61 08       	sbc	r6, r1
    1b62:	71 08       	sbc	r7, r1
    1b64:	a5 ec       	ldi	r26, 0xC5	; 197
    1b66:	8a 2e       	mov	r8, r26
    1b68:	91 2c       	mov	r9, r1
    1b6a:	8c 0e       	add	r8, r28
    1b6c:	9d 1e       	adc	r9, r29
    1b6e:	f3 e6       	ldi	r31, 0x63	; 99
    1b70:	af 2e       	mov	r10, r31
    1b72:	b1 2c       	mov	r11, r1
    1b74:	ac 0e       	add	r10, r28
    1b76:	bd 1e       	adc	r11, r29
    1b78:	22 e6       	ldi	r18, 0x62	; 98
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	62 9f       	mul	r22, r18
    1b7e:	d0 01       	movw	r26, r0
    1b80:	63 9f       	mul	r22, r19
    1b82:	b0 0d       	add	r27, r0
    1b84:	72 9f       	mul	r23, r18
    1b86:	b0 0d       	add	r27, r0
    1b88:	11 24       	eor	r1, r1
    1b8a:	a8 5c       	subi	r26, 0xC8	; 200
    1b8c:	bb 4f       	sbci	r27, 0xFB	; 251
    1b8e:	ae 01       	movw	r20, r28
    1b90:	49 5d       	subi	r20, 0xD9	; 217
    1b92:	5e 4f       	sbci	r21, 0xFE	; 254
    1b94:	c9 50       	subi	r28, 0x09	; 9
    1b96:	de 4f       	sbci	r29, 0xFE	; 254
    1b98:	59 83       	std	Y+1, r21	; 0x01
    1b9a:	48 83       	st	Y, r20
    1b9c:	c7 5f       	subi	r28, 0xF7	; 247
    1b9e:	d1 40       	sbci	r29, 0x01	; 1
    1ba0:	c5 51       	subi	r28, 0x15	; 21
    1ba2:	de 4f       	sbci	r29, 0xFE	; 254
    1ba4:	c8 80       	ld	r12, Y
    1ba6:	d9 80       	ldd	r13, Y+1	; 0x01
    1ba8:	cb 5e       	subi	r28, 0xEB	; 235
    1baa:	d1 40       	sbci	r29, 0x01	; 1
    1bac:	e9 e8       	ldi	r30, 0x89	; 137
    1bae:	ee 2e       	mov	r14, r30
    1bb0:	e1 e0       	ldi	r30, 0x01	; 1
    1bb2:	fe 2e       	mov	r15, r30
    1bb4:	ec 0e       	add	r14, r28
    1bb6:	fd 1e       	adc	r15, r29
    1bb8:	8e 01       	movw	r16, r28
    1bba:	0f 5f       	subi	r16, 0xFF	; 255
    1bbc:	1f 4f       	sbci	r17, 0xFF	; 255
							fCost[i] = fCostCalc(gCost[i], heuris[i]);
							parent[i] = current;
						} else {
							//Otherwise update path if the new one is better than
							//the already discovered path.
							if ((gCost[current] + map[current][i]) < gCost[i]) {
    1bbe:	2a 01       	movw	r4, r20
    1bc0:	48 0e       	add	r4, r24
    1bc2:	59 1e       	adc	r5, r25
			open[current] = 0, openSize--;
			closed[current] = 1, closedSize++;
			if (current == dest) break;		//Path to destination is available
			for (int i = 0; i < size; i++) {
				if (map[current][i] != INF) {
					if (closed[i] == 0) {	//if point is not on the closed list
    1bc4:	f4 01       	movw	r30, r8
    1bc6:	80 81       	ld	r24, Z
    1bc8:	91 81       	ldd	r25, Z+1	; 0x01
    1bca:	89 2b       	or	r24, r25
    1bcc:	09 f0       	breq	.+2      	; 0x1bd0 <dStar+0x258>
    1bce:	42 c0       	rjmp	.+132    	; 0x1c54 <dStar+0x2dc>
						if (open[i] == 0) {
    1bd0:	f5 01       	movw	r30, r10
    1bd2:	80 81       	ld	r24, Z
    1bd4:	91 81       	ldd	r25, Z+1	; 0x01
    1bd6:	4d 91       	ld	r20, X+
    1bd8:	5c 91       	ld	r21, X
    1bda:	11 97       	sbiw	r26, 0x01	; 1
    1bdc:	89 2b       	or	r24, r25
    1bde:	e9 f4       	brne	.+58     	; 0x1c1a <dStar+0x2a2>
							//If point is not in the open as well as the closed
							//list, add the point to open list. Also calculate
							//gCost and fCost. Update parent to current for
							//retracing the path.
							open[i] = 1;
    1be0:	21 e0       	ldi	r18, 0x01	; 1
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	31 83       	std	Z+1, r19	; 0x01
    1be6:	20 83       	st	Z, r18
							openSize++;
    1be8:	08 94       	sec
    1bea:	61 1c       	adc	r6, r1
    1bec:	71 1c       	adc	r7, r1
							gCost[i] = gCost[current] + map[current][i];
    1bee:	f2 01       	movw	r30, r4
    1bf0:	80 81       	ld	r24, Z
    1bf2:	91 81       	ldd	r25, Z+1	; 0x01
    1bf4:	84 0f       	add	r24, r20
    1bf6:	95 1f       	adc	r25, r21
    1bf8:	c9 50       	subi	r28, 0x09	; 9
    1bfa:	de 4f       	sbci	r29, 0xFE	; 254
    1bfc:	e8 81       	ld	r30, Y
    1bfe:	f9 81       	ldd	r31, Y+1	; 0x01
    1c00:	c7 5f       	subi	r28, 0xF7	; 247
    1c02:	d1 40       	sbci	r29, 0x01	; 1
    1c04:	91 83       	std	Z+1, r25	; 0x01
    1c06:	80 83       	st	Z, r24
							fCost[i] = fCostCalc(gCost[i], heuris[i]);
    1c08:	f6 01       	movw	r30, r12
    1c0a:	20 81       	ld	r18, Z
    1c0c:	31 81       	ldd	r19, Z+1	; 0x01
    1c0e:	82 0f       	add	r24, r18
    1c10:	93 1f       	adc	r25, r19
    1c12:	f7 01       	movw	r30, r14
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	80 83       	st	Z, r24
    1c18:	1a c0       	rjmp	.+52     	; 0x1c4e <dStar+0x2d6>
							parent[i] = current;
						} else {
							//Otherwise update path if the new one is better than
							//the already discovered path.
							if ((gCost[current] + map[current][i]) < gCost[i]) {
    1c1a:	f2 01       	movw	r30, r4
    1c1c:	20 81       	ld	r18, Z
    1c1e:	31 81       	ldd	r19, Z+1	; 0x01
    1c20:	24 0f       	add	r18, r20
    1c22:	35 1f       	adc	r19, r21
    1c24:	c9 50       	subi	r28, 0x09	; 9
    1c26:	de 4f       	sbci	r29, 0xFE	; 254
    1c28:	e8 81       	ld	r30, Y
    1c2a:	f9 81       	ldd	r31, Y+1	; 0x01
    1c2c:	c7 5f       	subi	r28, 0xF7	; 247
    1c2e:	d1 40       	sbci	r29, 0x01	; 1
    1c30:	80 81       	ld	r24, Z
    1c32:	91 81       	ldd	r25, Z+1	; 0x01
    1c34:	28 17       	cp	r18, r24
    1c36:	39 07       	cpc	r19, r25
    1c38:	6c f4       	brge	.+26     	; 0x1c54 <dStar+0x2dc>
								gCost[i] = gCost[current] + map[current][i];
    1c3a:	31 83       	std	Z+1, r19	; 0x01
    1c3c:	20 83       	st	Z, r18
								fCost[i] = fCostCalc(gCost[i], heuris[i]);
    1c3e:	f6 01       	movw	r30, r12
    1c40:	80 81       	ld	r24, Z
    1c42:	91 81       	ldd	r25, Z+1	; 0x01
    1c44:	28 0f       	add	r18, r24
    1c46:	39 1f       	adc	r19, r25
    1c48:	f7 01       	movw	r30, r14
    1c4a:	31 83       	std	Z+1, r19	; 0x01
    1c4c:	20 83       	st	Z, r18
								parent[i] = current;
    1c4e:	f8 01       	movw	r30, r16
    1c50:	71 83       	std	Z+1, r23	; 0x01
    1c52:	60 83       	st	Z, r22
    1c54:	22 e0       	ldi	r18, 0x02	; 2
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	82 0e       	add	r8, r18
    1c5a:	93 1e       	adc	r9, r19
    1c5c:	a2 0e       	add	r10, r18
    1c5e:	b3 1e       	adc	r11, r19
    1c60:	12 96       	adiw	r26, 0x02	; 2
    1c62:	c9 50       	subi	r28, 0x09	; 9
    1c64:	de 4f       	sbci	r29, 0xFE	; 254
    1c66:	48 81       	ld	r20, Y
    1c68:	59 81       	ldd	r21, Y+1	; 0x01
    1c6a:	c7 5f       	subi	r28, 0xF7	; 247
    1c6c:	d1 40       	sbci	r29, 0x01	; 1
    1c6e:	4e 5f       	subi	r20, 0xFE	; 254
    1c70:	5f 4f       	sbci	r21, 0xFF	; 255
    1c72:	c9 50       	subi	r28, 0x09	; 9
    1c74:	de 4f       	sbci	r29, 0xFE	; 254
    1c76:	59 83       	std	Y+1, r21	; 0x01
    1c78:	48 83       	st	Y, r20
    1c7a:	c7 5f       	subi	r28, 0xF7	; 247
    1c7c:	d1 40       	sbci	r29, 0x01	; 1
    1c7e:	c2 0e       	add	r12, r18
    1c80:	d3 1e       	adc	r13, r19
    1c82:	e2 0e       	add	r14, r18
    1c84:	f3 1e       	adc	r15, r19
    1c86:	0e 5f       	subi	r16, 0xFE	; 254
    1c88:	1f 4f       	sbci	r17, 0xFF	; 255
		while (openSize > 0) {
			current = extractMin (open, fCost, size);
			open[current] = 0, openSize--;
			closed[current] = 1, closedSize++;
			if (current == dest) break;		//Path to destination is available
			for (int i = 0; i < size; i++) {
    1c8a:	cb 50       	subi	r28, 0x0B	; 11
    1c8c:	de 4f       	sbci	r29, 0xFE	; 254
    1c8e:	88 81       	ld	r24, Y
    1c90:	99 81       	ldd	r25, Y+1	; 0x01
    1c92:	c5 5f       	subi	r28, 0xF5	; 245
    1c94:	d1 40       	sbci	r29, 0x01	; 1
    1c96:	88 16       	cp	r8, r24
    1c98:	99 06       	cpc	r9, r25
    1c9a:	09 f0       	breq	.+2      	; 0x1c9e <dStar+0x326>
    1c9c:	93 cf       	rjmp	.-218    	; 0x1bc4 <dStar+0x24c>
			parent[i] = -1;
			gCost[i] = fCost[i] = INF;
		}
		open[source] = 1, openSize++;
		//Scan as long as the open list is not empty
		while (openSize > 0) {
    1c9e:	61 14       	cp	r6, r1
    1ca0:	71 04       	cpc	r7, r1
    1ca2:	59 f0       	breq	.+22     	; 0x1cba <dStar+0x342>
    1ca4:	8e 01       	movw	r16, r28
    1ca6:	0d 59       	subi	r16, 0x9D	; 157
    1ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    1caa:	de 01       	movw	r26, r28
    1cac:	a7 57       	subi	r26, 0x77	; 119
    1cae:	be 4f       	sbci	r27, 0xFE	; 254
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	50 e0       	ldi	r21, 0x00	; 0
    1cb4:	6f ef       	ldi	r22, 0xFF	; 255
    1cb6:	7f ef       	ldi	r23, 0xFF	; 255
    1cb8:	10 cf       	rjmp	.-480    	; 0x1ada <dStar+0x162>
						}
					}
				}
			}
		}
		int *pathSize = (int*) malloc (sizeof(int));
    1cba:	82 e0       	ldi	r24, 0x02	; 2
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <malloc>
    1cc2:	8c 01       	movw	r16, r24
		*pathSize = 0;
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	11 82       	std	Z+1, r1	; 0x01
    1cc8:	10 82       	st	Z, r1
		int *path = pathFind (parent, dest, pathSize);
    1cca:	ce 01       	movw	r24, r28
    1ccc:	01 96       	adiw	r24, 0x01	; 1
    1cce:	c3 51       	subi	r28, 0x13	; 19
    1cd0:	de 4f       	sbci	r29, 0xFE	; 254
    1cd2:	68 81       	ld	r22, Y
    1cd4:	79 81       	ldd	r23, Y+1	; 0x01
    1cd6:	cd 5e       	subi	r28, 0xED	; 237
    1cd8:	d1 40       	sbci	r29, 0x01	; 1
    1cda:	a8 01       	movw	r20, r16
    1cdc:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <pathFind>
		int *result = Move (path, *pathSize);
    1ce0:	f8 01       	movw	r30, r16
    1ce2:	60 81       	ld	r22, Z
    1ce4:	71 81       	ldd	r23, Z+1	; 0x01
    1ce6:	0e 94 67 0b 	call	0x16ce	; 0x16ce <Move>
    1cea:	7c 01       	movw	r14, r24
		if (result[0] == 0) {
    1cec:	fc 01       	movw	r30, r24
    1cee:	80 81       	ld	r24, Z
    1cf0:	91 81       	ldd	r25, Z+1	; 0x01
    1cf2:	89 2b       	or	r24, r25
    1cf4:	f9 f4       	brne	.+62     	; 0x1d34 <dStar+0x3bc>
			free (result);
    1cf6:	c7 01       	movw	r24, r14
    1cf8:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <free>
		map[result[1]][result[2]] = map[result[2]][result[1]] = INF;
		free (heuris);
		free (pathSize);
		free (result);
	}
}
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	c8 50       	subi	r28, 0x08	; 8
    1d02:	de 4f       	sbci	r29, 0xFE	; 254
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	f8 94       	cli
    1d08:	de bf       	out	0x3e, r29	; 62
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	cd bf       	out	0x3d, r28	; 61
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	1f 91       	pop	r17
    1d14:	0f 91       	pop	r16
    1d16:	ff 90       	pop	r15
    1d18:	ef 90       	pop	r14
    1d1a:	df 90       	pop	r13
    1d1c:	cf 90       	pop	r12
    1d1e:	bf 90       	pop	r11
    1d20:	af 90       	pop	r10
    1d22:	9f 90       	pop	r9
    1d24:	8f 90       	pop	r8
    1d26:	7f 90       	pop	r7
    1d28:	6f 90       	pop	r6
    1d2a:	5f 90       	pop	r5
    1d2c:	4f 90       	pop	r4
    1d2e:	3f 90       	pop	r3
    1d30:	2f 90       	pop	r2
    1d32:	08 95       	ret
		if (result[0] == 0) {
			free (result);
			return 0;		//Movement complete
		}
		//Updates the map
		map[result[1]][result[2]] = map[result[2]][result[1]] = INF;
    1d34:	f7 01       	movw	r30, r14
    1d36:	24 81       	ldd	r18, Z+4	; 0x04
    1d38:	35 81       	ldd	r19, Z+5	; 0x05
    1d3a:	82 81       	ldd	r24, Z+2	; 0x02
    1d3c:	93 81       	ldd	r25, Z+3	; 0x03
    1d3e:	41 e3       	ldi	r20, 0x31	; 49
    1d40:	50 e0       	ldi	r21, 0x00	; 0
    1d42:	24 9f       	mul	r18, r20
    1d44:	f0 01       	movw	r30, r0
    1d46:	25 9f       	mul	r18, r21
    1d48:	f0 0d       	add	r31, r0
    1d4a:	34 9f       	mul	r19, r20
    1d4c:	f0 0d       	add	r31, r0
    1d4e:	11 24       	eor	r1, r1
    1d50:	e8 0f       	add	r30, r24
    1d52:	f9 1f       	adc	r31, r25
    1d54:	ee 0f       	add	r30, r30
    1d56:	ff 1f       	adc	r31, r31
    1d58:	e8 5c       	subi	r30, 0xC8	; 200
    1d5a:	fb 4f       	sbci	r31, 0xFB	; 251
    1d5c:	40 ec       	ldi	r20, 0xC0	; 192
    1d5e:	57 e2       	ldi	r21, 0x27	; 39
    1d60:	51 83       	std	Z+1, r21	; 0x01
    1d62:	40 83       	st	Z, r20
    1d64:	41 e3       	ldi	r20, 0x31	; 49
    1d66:	50 e0       	ldi	r21, 0x00	; 0
    1d68:	84 9f       	mul	r24, r20
    1d6a:	f0 01       	movw	r30, r0
    1d6c:	85 9f       	mul	r24, r21
    1d6e:	f0 0d       	add	r31, r0
    1d70:	94 9f       	mul	r25, r20
    1d72:	f0 0d       	add	r31, r0
    1d74:	11 24       	eor	r1, r1
    1d76:	e2 0f       	add	r30, r18
    1d78:	f3 1f       	adc	r31, r19
    1d7a:	ee 0f       	add	r30, r30
    1d7c:	ff 1f       	adc	r31, r31
    1d7e:	e8 5c       	subi	r30, 0xC8	; 200
    1d80:	fb 4f       	sbci	r31, 0xFB	; 251
    1d82:	80 ec       	ldi	r24, 0xC0	; 192
    1d84:	97 e2       	ldi	r25, 0x27	; 39
    1d86:	91 83       	std	Z+1, r25	; 0x01
    1d88:	80 83       	st	Z, r24
		free (heuris);
    1d8a:	c5 51       	subi	r28, 0x15	; 21
    1d8c:	de 4f       	sbci	r29, 0xFE	; 254
    1d8e:	88 81       	ld	r24, Y
    1d90:	99 81       	ldd	r25, Y+1	; 0x01
    1d92:	cb 5e       	subi	r28, 0xEB	; 235
    1d94:	d1 40       	sbci	r29, 0x01	; 1
    1d96:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <free>
		free (pathSize);
    1d9a:	c8 01       	movw	r24, r16
    1d9c:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <free>
		free (result);
    1da0:	c7 01       	movw	r24, r14
    1da2:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <free>
    1da6:	36 ce       	rjmp	.-916    	; 0x1a14 <dStar+0x9c>

00001da8 <simulation>:
		lcd_print(k,j,arr_slave[i],2);
		j += 2;
	}
}

void simulation(int from,int to) {
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
	dStar(from, to);
    1dac:	0e 94 bc 0c 	call	0x1978	; 0x1978 <dStar>
    1db0:	c0 e7       	ldi	r28, 0x70	; 112
    1db2:	d1 e0       	ldi	r29, 0x01	; 1
    1db4:	17 c0       	rjmp	.+46     	; 0x1de4 <simulation+0x3c>
	while (sequence_arr[Counter] == 0)
	{
		//lcd_print(1,14,Counter,2);
		lcd_cursor(1,1);
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	61 e0       	ldi	r22, 0x01	; 1
    1dba:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
		lcd_string("   Waiting!!!   ");
    1dbe:	89 e9       	ldi	r24, 0x99	; 153
    1dc0:	92 e0       	ldi	r25, 0x02	; 2
    1dc2:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
		lcd_cursor(2,1);
    1dc6:	82 e0       	ldi	r24, 0x02	; 2
    1dc8:	61 e0       	ldi	r22, 0x01	; 1
    1dca:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
		lcd_string(" For Slave Bot! ");
    1dce:	8a ea       	ldi	r24, 0xAA	; 170
    1dd0:	92 e0       	ldi	r25, 0x02	; 2
    1dd2:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
    1dd6:	88 ee       	ldi	r24, 0xE8	; 232
    1dd8:	93 e0       	ldi	r25, 0x03	; 3
    1dda:	fe 01       	movw	r30, r28
    1ddc:	31 97       	sbiw	r30, 0x01	; 1
    1dde:	f1 f7       	brne	.-4      	; 0x1ddc <simulation+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de2:	d9 f7       	brne	.-10     	; 0x1dda <simulation+0x32>
	}
}

void simulation(int from,int to) {
	dStar(from, to);
	while (sequence_arr[Counter] == 0)
    1de4:	80 91 36 04 	lds	r24, 0x0436
    1de8:	90 91 37 04 	lds	r25, 0x0437
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	e0 91 92 17 	lds	r30, 0x1792
    1df4:	f0 91 93 17 	lds	r31, 0x1793
    1df8:	e8 0f       	add	r30, r24
    1dfa:	f9 1f       	adc	r31, r25
    1dfc:	80 81       	ld	r24, Z
    1dfe:	91 81       	ldd	r25, Z+1	; 0x01
    1e00:	89 2b       	or	r24, r25
    1e02:	c9 f2       	breq	.-78     	; 0x1db6 <simulation+0xe>
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    1e04:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    1e06:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    1e08:	88 b9       	out	0x08, r24	; 8
		lcd_string(" For Slave Bot! ");
		_delay_ms(100);
	}

	buzzer_on();
	lcd_cursor(1,1);
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	61 e0       	ldi	r22, 0x01	; 1
    1e0e:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
	lcd_string("MNP DETECTED ");
    1e12:	8b eb       	ldi	r24, 0xBB	; 187
    1e14:	92 e0       	ldi	r25, 0x02	; 2
    1e16:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
	lcd_print(1,14,sequence_arr[Counter],2);
    1e1a:	80 91 36 04 	lds	r24, 0x0436
    1e1e:	90 91 37 04 	lds	r25, 0x0437
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	e0 91 92 17 	lds	r30, 0x1792
    1e2a:	f0 91 93 17 	lds	r31, 0x1793
    1e2e:	e8 0f       	add	r30, r24
    1e30:	f9 1f       	adc	r31, r25
    1e32:	40 81       	ld	r20, Z
    1e34:	51 81       	ldd	r21, Z+1	; 0x01
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	6e e0       	ldi	r22, 0x0E	; 14
    1e3a:	22 e0       	ldi	r18, 0x02	; 2
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <lcd_print>
	lcd_cursor(2,1);
    1e42:	82 e0       	ldi	r24, 0x02	; 2
    1e44:	61 e0       	ldi	r22, 0x01	; 1
    1e46:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
	lcd_string("Strinking Node!!");
    1e4a:	89 ec       	ldi	r24, 0xC9	; 201
    1e4c:	92 e0       	ldi	r25, 0x02	; 2
    1e4e:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
    1e52:	88 e8       	ldi	r24, 0x88	; 136
    1e54:	93 e1       	ldi	r25, 0x13	; 19
    1e56:	20 e7       	ldi	r18, 0x70	; 112
    1e58:	31 e0       	ldi	r19, 0x01	; 1
    1e5a:	f9 01       	movw	r30, r18
    1e5c:	31 97       	sbiw	r30, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <simulation+0xb4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e60:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e62:	d9 f7       	brne	.-10     	; 0x1e5a <simulation+0xb2>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    1e64:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    1e66:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    1e68:	88 b9       	out	0x08, r24	; 8
	lcd_cursor(2,1);
	lcd_string("Strinking Node!!");
	_delay_ms(500);
	buzzer_off();

	++Counter;
    1e6a:	80 91 36 04 	lds	r24, 0x0436
    1e6e:	90 91 37 04 	lds	r25, 0x0437
    1e72:	01 96       	adiw	r24, 0x01	; 1
    1e74:	90 93 37 04 	sts	0x0437, r25
    1e78:	80 93 36 04 	sts	0x0436, r24
	//lcd_print(1,4,Counter,2);
	UDR0 = Counter;
    1e7c:	80 93 c6 00 	sts	0x00C6, r24
}
    1e80:	df 91       	pop	r29
    1e82:	cf 91       	pop	r28
    1e84:	08 95       	ret

00001e86 <main>:
 sei();   //Enables the global interrupts
}

//Main Function
int main(void)
{
    1e86:	0f 93       	push	r16
    1e88:	1f 93       	push	r17
    1e8a:	cf 93       	push	r28
    1e8c:	df 93       	push	r29
	init_devices();
    1e8e:	0e 94 7d 08 	call	0x10fa	; 0x10fa <init_devices>
	lcd_set_4bit();
    1e92:	0e 94 86 06 	call	0xd0c	; 0xd0c <lcd_set_4bit>
	lcd_init();
    1e96:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <lcd_init>
	while(1) {
		if (count == arr_size)
    1e9a:	20 91 0d 03 	lds	r18, 0x030D
    1e9e:	30 91 0e 03 	lds	r19, 0x030E
    1ea2:	80 91 32 04 	lds	r24, 0x0432
    1ea6:	90 91 33 04 	lds	r25, 0x0433
    1eaa:	28 17       	cp	r18, r24
    1eac:	39 07       	cpc	r19, r25
    1eae:	09 f0       	breq	.+2      	; 0x1eb2 <main+0x2c>
    1eb0:	4f c0       	rjmp	.+158    	; 0x1f50 <main+0xca>
		{
			count++;
    1eb2:	2f 5f       	subi	r18, 0xFF	; 255
    1eb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb6:	30 93 0e 03 	sts	0x030E, r19
    1eba:	20 93 0d 03 	sts	0x030D, r18
    1ebe:	21 50       	subi	r18, 0x01	; 1
    1ec0:	30 40       	sbci	r19, 0x00	; 0
    1ec2:	a0 91 92 17 	lds	r26, 0x1792
    1ec6:	b0 91 93 17 	lds	r27, 0x1793
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	40 e0       	ldi	r20, 0x00	; 0
    1ed0:	50 e0       	ldi	r21, 0x00	; 0
    1ed2:	11 c0       	rjmp	.+34     	; 0x1ef6 <main+0x70>

void remove_zero() {
	int i = 0, j = 0;
	while (i < arr_size)
	{
		if(sequence_arr[i]!=0)
    1ed4:	6d 91       	ld	r22, X+
    1ed6:	7c 91       	ld	r23, X
    1ed8:	11 97       	sbiw	r26, 0x01	; 1
    1eda:	61 15       	cp	r22, r1
    1edc:	71 05       	cpc	r23, r1
    1ede:	41 f0       	breq	.+16     	; 0x1ef0 <main+0x6a>
		{
			arr_slave[j] = sequence_arr[i];
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	ee 0f       	add	r30, r30
    1ee4:	ff 1f       	adc	r31, r31
    1ee6:	ec 56       	subi	r30, 0x6C	; 108
    1ee8:	f8 4e       	sbci	r31, 0xE8	; 232
    1eea:	71 83       	std	Z+1, r23	; 0x01
    1eec:	60 83       	st	Z, r22
			j++;
    1eee:	01 96       	adiw	r24, 0x01	; 1
		}
		i++;
    1ef0:	4f 5f       	subi	r20, 0xFF	; 255
    1ef2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef4:	12 96       	adiw	r26, 0x02	; 2
 PORTC = port_restore;
}

void remove_zero() {
	int i = 0, j = 0;
	while (i < arr_size)
    1ef6:	42 17       	cp	r20, r18
    1ef8:	53 07       	cpc	r21, r19
    1efa:	64 f3       	brlt	.-40     	; 0x1ed4 <main+0x4e>
			arr_slave[j] = sequence_arr[i];
			j++;
		}
		i++;
	}
	slave_size = j;
    1efc:	90 93 35 04 	sts	0x0435, r25
    1f00:	80 93 34 04 	sts	0x0434, r24
    1f04:	c4 e9       	ldi	r28, 0x94	; 148
    1f06:	d7 e1       	ldi	r29, 0x17	; 23
    1f08:	00 e0       	ldi	r16, 0x00	; 0
    1f0a:	10 e0       	ldi	r17, 0x00	; 0
    1f0c:	09 c0       	rjmp	.+18     	; 0x1f20 <main+0x9a>
		if (count == arr_size)
		{
			count++;
			remove_zero();
			for (int i = 0; i < slave_size; i++) {
				simulation (arr_slave[i], arr_slave[i+1]);
    1f0e:	0f 5f       	subi	r16, 0xFF	; 255
    1f10:	1f 4f       	sbci	r17, 0xFF	; 255
    1f12:	6a 81       	ldd	r22, Y+2	; 0x02
    1f14:	7b 81       	ldd	r23, Y+3	; 0x03
    1f16:	88 81       	ld	r24, Y
    1f18:	99 81       	ldd	r25, Y+1	; 0x01
    1f1a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <simulation>
    1f1e:	22 96       	adiw	r28, 0x02	; 2
	while(1) {
		if (count == arr_size)
		{
			count++;
			remove_zero();
			for (int i = 0; i < slave_size; i++) {
    1f20:	80 91 34 04 	lds	r24, 0x0434
    1f24:	90 91 35 04 	lds	r25, 0x0435
    1f28:	08 17       	cp	r16, r24
    1f2a:	19 07       	cpc	r17, r25
    1f2c:	84 f3       	brlt	.-32     	; 0x1f0e <main+0x88>
				simulation (arr_slave[i], arr_slave[i+1]);
			}
			while(1) {
				lcd_cursor(1,1);
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	61 e0       	ldi	r22, 0x01	; 1
    1f32:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
				lcd_string("      Task      ");
    1f36:	8a ed       	ldi	r24, 0xDA	; 218
    1f38:	92 e0       	ldi	r25, 0x02	; 2
    1f3a:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
				lcd_cursor(2,1);
    1f3e:	82 e0       	ldi	r24, 0x02	; 2
    1f40:	61 e0       	ldi	r22, 0x01	; 1
    1f42:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
				lcd_string("  Completed!!!  ");
    1f46:	8b ee       	ldi	r24, 0xEB	; 235
    1f48:	92 e0       	ldi	r25, 0x02	; 2
    1f4a:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
    1f4e:	ef cf       	rjmp	.-34     	; 0x1f2e <main+0xa8>
			}
		}
		lcd_cursor(1,1);
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	61 e0       	ldi	r22, 0x01	; 1
    1f54:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
		lcd_string("      Task      ");
    1f58:	8a ed       	ldi	r24, 0xDA	; 218
    1f5a:	92 e0       	ldi	r25, 0x02	; 2
    1f5c:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
		lcd_cursor(2,1);
    1f60:	82 e0       	ldi	r24, 0x02	; 2
    1f62:	61 e0       	ldi	r22, 0x01	; 1
    1f64:	0e 94 21 07 	call	0xe42	; 0xe42 <lcd_cursor>
		lcd_string("  Initiated!!!  ");
    1f68:	8c ef       	ldi	r24, 0xFC	; 252
    1f6a:	92 e0       	ldi	r25, 0x02	; 2
    1f6c:	0e 94 14 07 	call	0xe28	; 0xe28 <lcd_string>
    1f70:	94 cf       	rjmp	.-216    	; 0x1e9a <main+0x14>

00001f72 <__fixunssfsi>:
    1f72:	ef 92       	push	r14
    1f74:	ff 92       	push	r15
    1f76:	0f 93       	push	r16
    1f78:	1f 93       	push	r17
    1f7a:	7b 01       	movw	r14, r22
    1f7c:	8c 01       	movw	r16, r24
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	40 e0       	ldi	r20, 0x00	; 0
    1f84:	5f e4       	ldi	r21, 0x4F	; 79
    1f86:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
    1f8a:	88 23       	and	r24, r24
    1f8c:	8c f0       	brlt	.+34     	; 0x1fb0 <__fixunssfsi+0x3e>
    1f8e:	c8 01       	movw	r24, r16
    1f90:	b7 01       	movw	r22, r14
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	40 e0       	ldi	r20, 0x00	; 0
    1f98:	5f e4       	ldi	r21, 0x4F	; 79
    1f9a:	0e 94 31 11 	call	0x2262	; 0x2262 <__subsf3>
    1f9e:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <__fixsfsi>
    1fa2:	9b 01       	movw	r18, r22
    1fa4:	ac 01       	movw	r20, r24
    1fa6:	20 50       	subi	r18, 0x00	; 0
    1fa8:	30 40       	sbci	r19, 0x00	; 0
    1faa:	40 40       	sbci	r20, 0x00	; 0
    1fac:	50 48       	sbci	r21, 0x80	; 128
    1fae:	06 c0       	rjmp	.+12     	; 0x1fbc <__fixunssfsi+0x4a>
    1fb0:	c8 01       	movw	r24, r16
    1fb2:	b7 01       	movw	r22, r14
    1fb4:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <__fixsfsi>
    1fb8:	9b 01       	movw	r18, r22
    1fba:	ac 01       	movw	r20, r24
    1fbc:	b9 01       	movw	r22, r18
    1fbe:	ca 01       	movw	r24, r20
    1fc0:	1f 91       	pop	r17
    1fc2:	0f 91       	pop	r16
    1fc4:	ff 90       	pop	r15
    1fc6:	ef 90       	pop	r14
    1fc8:	08 95       	ret

00001fca <_fpadd_parts>:
    1fca:	a0 e0       	ldi	r26, 0x00	; 0
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	eb ee       	ldi	r30, 0xEB	; 235
    1fd0:	ff e0       	ldi	r31, 0x0F	; 15
    1fd2:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <__prologue_saves__>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	2b 01       	movw	r4, r22
    1fda:	fa 01       	movw	r30, r20
    1fdc:	9c 91       	ld	r25, X
    1fde:	92 30       	cpi	r25, 0x02	; 2
    1fe0:	08 f4       	brcc	.+2      	; 0x1fe4 <_fpadd_parts+0x1a>
    1fe2:	39 c1       	rjmp	.+626    	; 0x2256 <__stack+0x57>
    1fe4:	eb 01       	movw	r28, r22
    1fe6:	88 81       	ld	r24, Y
    1fe8:	82 30       	cpi	r24, 0x02	; 2
    1fea:	08 f4       	brcc	.+2      	; 0x1fee <_fpadd_parts+0x24>
    1fec:	33 c1       	rjmp	.+614    	; 0x2254 <__stack+0x55>
    1fee:	94 30       	cpi	r25, 0x04	; 4
    1ff0:	69 f4       	brne	.+26     	; 0x200c <_fpadd_parts+0x42>
    1ff2:	84 30       	cpi	r24, 0x04	; 4
    1ff4:	09 f0       	breq	.+2      	; 0x1ff8 <_fpadd_parts+0x2e>
    1ff6:	2f c1       	rjmp	.+606    	; 0x2256 <__stack+0x57>
    1ff8:	11 96       	adiw	r26, 0x01	; 1
    1ffa:	9c 91       	ld	r25, X
    1ffc:	11 97       	sbiw	r26, 0x01	; 1
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	98 17       	cp	r25, r24
    2002:	09 f4       	brne	.+2      	; 0x2006 <_fpadd_parts+0x3c>
    2004:	28 c1       	rjmp	.+592    	; 0x2256 <__stack+0x57>
    2006:	af e0       	ldi	r26, 0x0F	; 15
    2008:	b3 e0       	ldi	r27, 0x03	; 3
    200a:	25 c1       	rjmp	.+586    	; 0x2256 <__stack+0x57>
    200c:	84 30       	cpi	r24, 0x04	; 4
    200e:	09 f4       	brne	.+2      	; 0x2012 <_fpadd_parts+0x48>
    2010:	21 c1       	rjmp	.+578    	; 0x2254 <__stack+0x55>
    2012:	82 30       	cpi	r24, 0x02	; 2
    2014:	a9 f4       	brne	.+42     	; 0x2040 <_fpadd_parts+0x76>
    2016:	92 30       	cpi	r25, 0x02	; 2
    2018:	09 f0       	breq	.+2      	; 0x201c <_fpadd_parts+0x52>
    201a:	1d c1       	rjmp	.+570    	; 0x2256 <__stack+0x57>
    201c:	9a 01       	movw	r18, r20
    201e:	ad 01       	movw	r20, r26
    2020:	88 e0       	ldi	r24, 0x08	; 8
    2022:	ea 01       	movw	r28, r20
    2024:	09 90       	ld	r0, Y+
    2026:	ae 01       	movw	r20, r28
    2028:	e9 01       	movw	r28, r18
    202a:	09 92       	st	Y+, r0
    202c:	9e 01       	movw	r18, r28
    202e:	81 50       	subi	r24, 0x01	; 1
    2030:	c1 f7       	brne	.-16     	; 0x2022 <_fpadd_parts+0x58>
    2032:	e2 01       	movw	r28, r4
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	11 96       	adiw	r26, 0x01	; 1
    2038:	9c 91       	ld	r25, X
    203a:	89 23       	and	r24, r25
    203c:	81 83       	std	Z+1, r24	; 0x01
    203e:	08 c1       	rjmp	.+528    	; 0x2250 <__stack+0x51>
    2040:	92 30       	cpi	r25, 0x02	; 2
    2042:	09 f4       	brne	.+2      	; 0x2046 <_fpadd_parts+0x7c>
    2044:	07 c1       	rjmp	.+526    	; 0x2254 <__stack+0x55>
    2046:	12 96       	adiw	r26, 0x02	; 2
    2048:	2d 90       	ld	r2, X+
    204a:	3c 90       	ld	r3, X
    204c:	13 97       	sbiw	r26, 0x03	; 3
    204e:	eb 01       	movw	r28, r22
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	9b 81       	ldd	r25, Y+3	; 0x03
    2054:	14 96       	adiw	r26, 0x04	; 4
    2056:	ad 90       	ld	r10, X+
    2058:	bd 90       	ld	r11, X+
    205a:	cd 90       	ld	r12, X+
    205c:	dc 90       	ld	r13, X
    205e:	17 97       	sbiw	r26, 0x07	; 7
    2060:	ec 80       	ldd	r14, Y+4	; 0x04
    2062:	fd 80       	ldd	r15, Y+5	; 0x05
    2064:	0e 81       	ldd	r16, Y+6	; 0x06
    2066:	1f 81       	ldd	r17, Y+7	; 0x07
    2068:	91 01       	movw	r18, r2
    206a:	28 1b       	sub	r18, r24
    206c:	39 0b       	sbc	r19, r25
    206e:	b9 01       	movw	r22, r18
    2070:	37 ff       	sbrs	r19, 7
    2072:	04 c0       	rjmp	.+8      	; 0x207c <_fpadd_parts+0xb2>
    2074:	66 27       	eor	r22, r22
    2076:	77 27       	eor	r23, r23
    2078:	62 1b       	sub	r22, r18
    207a:	73 0b       	sbc	r23, r19
    207c:	60 32       	cpi	r22, 0x20	; 32
    207e:	71 05       	cpc	r23, r1
    2080:	0c f0       	brlt	.+2      	; 0x2084 <_fpadd_parts+0xba>
    2082:	61 c0       	rjmp	.+194    	; 0x2146 <_fpadd_parts+0x17c>
    2084:	12 16       	cp	r1, r18
    2086:	13 06       	cpc	r1, r19
    2088:	6c f5       	brge	.+90     	; 0x20e4 <_fpadd_parts+0x11a>
    208a:	37 01       	movw	r6, r14
    208c:	48 01       	movw	r8, r16
    208e:	06 2e       	mov	r0, r22
    2090:	04 c0       	rjmp	.+8      	; 0x209a <_fpadd_parts+0xd0>
    2092:	96 94       	lsr	r9
    2094:	87 94       	ror	r8
    2096:	77 94       	ror	r7
    2098:	67 94       	ror	r6
    209a:	0a 94       	dec	r0
    209c:	d2 f7       	brpl	.-12     	; 0x2092 <_fpadd_parts+0xc8>
    209e:	21 e0       	ldi	r18, 0x01	; 1
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	40 e0       	ldi	r20, 0x00	; 0
    20a4:	50 e0       	ldi	r21, 0x00	; 0
    20a6:	04 c0       	rjmp	.+8      	; 0x20b0 <_fpadd_parts+0xe6>
    20a8:	22 0f       	add	r18, r18
    20aa:	33 1f       	adc	r19, r19
    20ac:	44 1f       	adc	r20, r20
    20ae:	55 1f       	adc	r21, r21
    20b0:	6a 95       	dec	r22
    20b2:	d2 f7       	brpl	.-12     	; 0x20a8 <_fpadd_parts+0xde>
    20b4:	21 50       	subi	r18, 0x01	; 1
    20b6:	30 40       	sbci	r19, 0x00	; 0
    20b8:	40 40       	sbci	r20, 0x00	; 0
    20ba:	50 40       	sbci	r21, 0x00	; 0
    20bc:	2e 21       	and	r18, r14
    20be:	3f 21       	and	r19, r15
    20c0:	40 23       	and	r20, r16
    20c2:	51 23       	and	r21, r17
    20c4:	21 15       	cp	r18, r1
    20c6:	31 05       	cpc	r19, r1
    20c8:	41 05       	cpc	r20, r1
    20ca:	51 05       	cpc	r21, r1
    20cc:	21 f0       	breq	.+8      	; 0x20d6 <_fpadd_parts+0x10c>
    20ce:	21 e0       	ldi	r18, 0x01	; 1
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e0       	ldi	r20, 0x00	; 0
    20d4:	50 e0       	ldi	r21, 0x00	; 0
    20d6:	79 01       	movw	r14, r18
    20d8:	8a 01       	movw	r16, r20
    20da:	e6 28       	or	r14, r6
    20dc:	f7 28       	or	r15, r7
    20de:	08 29       	or	r16, r8
    20e0:	19 29       	or	r17, r9
    20e2:	3c c0       	rjmp	.+120    	; 0x215c <_fpadd_parts+0x192>
    20e4:	23 2b       	or	r18, r19
    20e6:	d1 f1       	breq	.+116    	; 0x215c <_fpadd_parts+0x192>
    20e8:	26 0e       	add	r2, r22
    20ea:	37 1e       	adc	r3, r23
    20ec:	35 01       	movw	r6, r10
    20ee:	46 01       	movw	r8, r12
    20f0:	06 2e       	mov	r0, r22
    20f2:	04 c0       	rjmp	.+8      	; 0x20fc <_fpadd_parts+0x132>
    20f4:	96 94       	lsr	r9
    20f6:	87 94       	ror	r8
    20f8:	77 94       	ror	r7
    20fa:	67 94       	ror	r6
    20fc:	0a 94       	dec	r0
    20fe:	d2 f7       	brpl	.-12     	; 0x20f4 <_fpadd_parts+0x12a>
    2100:	21 e0       	ldi	r18, 0x01	; 1
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	40 e0       	ldi	r20, 0x00	; 0
    2106:	50 e0       	ldi	r21, 0x00	; 0
    2108:	04 c0       	rjmp	.+8      	; 0x2112 <_fpadd_parts+0x148>
    210a:	22 0f       	add	r18, r18
    210c:	33 1f       	adc	r19, r19
    210e:	44 1f       	adc	r20, r20
    2110:	55 1f       	adc	r21, r21
    2112:	6a 95       	dec	r22
    2114:	d2 f7       	brpl	.-12     	; 0x210a <_fpadd_parts+0x140>
    2116:	21 50       	subi	r18, 0x01	; 1
    2118:	30 40       	sbci	r19, 0x00	; 0
    211a:	40 40       	sbci	r20, 0x00	; 0
    211c:	50 40       	sbci	r21, 0x00	; 0
    211e:	2a 21       	and	r18, r10
    2120:	3b 21       	and	r19, r11
    2122:	4c 21       	and	r20, r12
    2124:	5d 21       	and	r21, r13
    2126:	21 15       	cp	r18, r1
    2128:	31 05       	cpc	r19, r1
    212a:	41 05       	cpc	r20, r1
    212c:	51 05       	cpc	r21, r1
    212e:	21 f0       	breq	.+8      	; 0x2138 <_fpadd_parts+0x16e>
    2130:	21 e0       	ldi	r18, 0x01	; 1
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e0       	ldi	r20, 0x00	; 0
    2136:	50 e0       	ldi	r21, 0x00	; 0
    2138:	59 01       	movw	r10, r18
    213a:	6a 01       	movw	r12, r20
    213c:	a6 28       	or	r10, r6
    213e:	b7 28       	or	r11, r7
    2140:	c8 28       	or	r12, r8
    2142:	d9 28       	or	r13, r9
    2144:	0b c0       	rjmp	.+22     	; 0x215c <_fpadd_parts+0x192>
    2146:	82 15       	cp	r24, r2
    2148:	93 05       	cpc	r25, r3
    214a:	2c f0       	brlt	.+10     	; 0x2156 <_fpadd_parts+0x18c>
    214c:	1c 01       	movw	r2, r24
    214e:	aa 24       	eor	r10, r10
    2150:	bb 24       	eor	r11, r11
    2152:	65 01       	movw	r12, r10
    2154:	03 c0       	rjmp	.+6      	; 0x215c <_fpadd_parts+0x192>
    2156:	ee 24       	eor	r14, r14
    2158:	ff 24       	eor	r15, r15
    215a:	87 01       	movw	r16, r14
    215c:	11 96       	adiw	r26, 0x01	; 1
    215e:	9c 91       	ld	r25, X
    2160:	d2 01       	movw	r26, r4
    2162:	11 96       	adiw	r26, 0x01	; 1
    2164:	8c 91       	ld	r24, X
    2166:	98 17       	cp	r25, r24
    2168:	09 f4       	brne	.+2      	; 0x216c <_fpadd_parts+0x1a2>
    216a:	45 c0       	rjmp	.+138    	; 0x21f6 <_fpadd_parts+0x22c>
    216c:	99 23       	and	r25, r25
    216e:	39 f0       	breq	.+14     	; 0x217e <_fpadd_parts+0x1b4>
    2170:	a8 01       	movw	r20, r16
    2172:	97 01       	movw	r18, r14
    2174:	2a 19       	sub	r18, r10
    2176:	3b 09       	sbc	r19, r11
    2178:	4c 09       	sbc	r20, r12
    217a:	5d 09       	sbc	r21, r13
    217c:	06 c0       	rjmp	.+12     	; 0x218a <_fpadd_parts+0x1c0>
    217e:	a6 01       	movw	r20, r12
    2180:	95 01       	movw	r18, r10
    2182:	2e 19       	sub	r18, r14
    2184:	3f 09       	sbc	r19, r15
    2186:	40 0b       	sbc	r20, r16
    2188:	51 0b       	sbc	r21, r17
    218a:	57 fd       	sbrc	r21, 7
    218c:	08 c0       	rjmp	.+16     	; 0x219e <_fpadd_parts+0x1d4>
    218e:	11 82       	std	Z+1, r1	; 0x01
    2190:	33 82       	std	Z+3, r3	; 0x03
    2192:	22 82       	std	Z+2, r2	; 0x02
    2194:	24 83       	std	Z+4, r18	; 0x04
    2196:	35 83       	std	Z+5, r19	; 0x05
    2198:	46 83       	std	Z+6, r20	; 0x06
    219a:	57 83       	std	Z+7, r21	; 0x07
    219c:	1d c0       	rjmp	.+58     	; 0x21d8 <_fpadd_parts+0x20e>
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	81 83       	std	Z+1, r24	; 0x01
    21a2:	33 82       	std	Z+3, r3	; 0x03
    21a4:	22 82       	std	Z+2, r2	; 0x02
    21a6:	88 27       	eor	r24, r24
    21a8:	99 27       	eor	r25, r25
    21aa:	dc 01       	movw	r26, r24
    21ac:	82 1b       	sub	r24, r18
    21ae:	93 0b       	sbc	r25, r19
    21b0:	a4 0b       	sbc	r26, r20
    21b2:	b5 0b       	sbc	r27, r21
    21b4:	84 83       	std	Z+4, r24	; 0x04
    21b6:	95 83       	std	Z+5, r25	; 0x05
    21b8:	a6 83       	std	Z+6, r26	; 0x06
    21ba:	b7 83       	std	Z+7, r27	; 0x07
    21bc:	0d c0       	rjmp	.+26     	; 0x21d8 <_fpadd_parts+0x20e>
    21be:	22 0f       	add	r18, r18
    21c0:	33 1f       	adc	r19, r19
    21c2:	44 1f       	adc	r20, r20
    21c4:	55 1f       	adc	r21, r21
    21c6:	24 83       	std	Z+4, r18	; 0x04
    21c8:	35 83       	std	Z+5, r19	; 0x05
    21ca:	46 83       	std	Z+6, r20	; 0x06
    21cc:	57 83       	std	Z+7, r21	; 0x07
    21ce:	82 81       	ldd	r24, Z+2	; 0x02
    21d0:	93 81       	ldd	r25, Z+3	; 0x03
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	93 83       	std	Z+3, r25	; 0x03
    21d6:	82 83       	std	Z+2, r24	; 0x02
    21d8:	24 81       	ldd	r18, Z+4	; 0x04
    21da:	35 81       	ldd	r19, Z+5	; 0x05
    21dc:	46 81       	ldd	r20, Z+6	; 0x06
    21de:	57 81       	ldd	r21, Z+7	; 0x07
    21e0:	da 01       	movw	r26, r20
    21e2:	c9 01       	movw	r24, r18
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	a1 09       	sbc	r26, r1
    21e8:	b1 09       	sbc	r27, r1
    21ea:	8f 5f       	subi	r24, 0xFF	; 255
    21ec:	9f 4f       	sbci	r25, 0xFF	; 255
    21ee:	af 4f       	sbci	r26, 0xFF	; 255
    21f0:	bf 43       	sbci	r27, 0x3F	; 63
    21f2:	28 f3       	brcs	.-54     	; 0x21be <_fpadd_parts+0x1f4>
    21f4:	0b c0       	rjmp	.+22     	; 0x220c <__stack+0xd>
    21f6:	91 83       	std	Z+1, r25	; 0x01
    21f8:	33 82       	std	Z+3, r3	; 0x03
    21fa:	22 82       	std	Z+2, r2	; 0x02
    21fc:	ea 0c       	add	r14, r10
    21fe:	fb 1c       	adc	r15, r11
    2200:	0c 1d       	adc	r16, r12
    2202:	1d 1d       	adc	r17, r13
    2204:	e4 82       	std	Z+4, r14	; 0x04
    2206:	f5 82       	std	Z+5, r15	; 0x05
    2208:	06 83       	std	Z+6, r16	; 0x06
    220a:	17 83       	std	Z+7, r17	; 0x07
    220c:	83 e0       	ldi	r24, 0x03	; 3
    220e:	80 83       	st	Z, r24
    2210:	24 81       	ldd	r18, Z+4	; 0x04
    2212:	35 81       	ldd	r19, Z+5	; 0x05
    2214:	46 81       	ldd	r20, Z+6	; 0x06
    2216:	57 81       	ldd	r21, Z+7	; 0x07
    2218:	57 ff       	sbrs	r21, 7
    221a:	1a c0       	rjmp	.+52     	; 0x2250 <__stack+0x51>
    221c:	c9 01       	movw	r24, r18
    221e:	aa 27       	eor	r26, r26
    2220:	97 fd       	sbrc	r25, 7
    2222:	a0 95       	com	r26
    2224:	ba 2f       	mov	r27, r26
    2226:	81 70       	andi	r24, 0x01	; 1
    2228:	90 70       	andi	r25, 0x00	; 0
    222a:	a0 70       	andi	r26, 0x00	; 0
    222c:	b0 70       	andi	r27, 0x00	; 0
    222e:	56 95       	lsr	r21
    2230:	47 95       	ror	r20
    2232:	37 95       	ror	r19
    2234:	27 95       	ror	r18
    2236:	82 2b       	or	r24, r18
    2238:	93 2b       	or	r25, r19
    223a:	a4 2b       	or	r26, r20
    223c:	b5 2b       	or	r27, r21
    223e:	84 83       	std	Z+4, r24	; 0x04
    2240:	95 83       	std	Z+5, r25	; 0x05
    2242:	a6 83       	std	Z+6, r26	; 0x06
    2244:	b7 83       	std	Z+7, r27	; 0x07
    2246:	82 81       	ldd	r24, Z+2	; 0x02
    2248:	93 81       	ldd	r25, Z+3	; 0x03
    224a:	01 96       	adiw	r24, 0x01	; 1
    224c:	93 83       	std	Z+3, r25	; 0x03
    224e:	82 83       	std	Z+2, r24	; 0x02
    2250:	df 01       	movw	r26, r30
    2252:	01 c0       	rjmp	.+2      	; 0x2256 <__stack+0x57>
    2254:	d2 01       	movw	r26, r4
    2256:	cd 01       	movw	r24, r26
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	e2 e1       	ldi	r30, 0x12	; 18
    225e:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <__epilogue_restores__>

00002262 <__subsf3>:
    2262:	a0 e2       	ldi	r26, 0x20	; 32
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	e7 e3       	ldi	r30, 0x37	; 55
    2268:	f1 e1       	ldi	r31, 0x11	; 17
    226a:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <__prologue_saves__+0x18>
    226e:	69 83       	std	Y+1, r22	; 0x01
    2270:	7a 83       	std	Y+2, r23	; 0x02
    2272:	8b 83       	std	Y+3, r24	; 0x03
    2274:	9c 83       	std	Y+4, r25	; 0x04
    2276:	2d 83       	std	Y+5, r18	; 0x05
    2278:	3e 83       	std	Y+6, r19	; 0x06
    227a:	4f 83       	std	Y+7, r20	; 0x07
    227c:	58 87       	std	Y+8, r21	; 0x08
    227e:	e9 e0       	ldi	r30, 0x09	; 9
    2280:	ee 2e       	mov	r14, r30
    2282:	f1 2c       	mov	r15, r1
    2284:	ec 0e       	add	r14, r28
    2286:	fd 1e       	adc	r15, r29
    2288:	ce 01       	movw	r24, r28
    228a:	01 96       	adiw	r24, 0x01	; 1
    228c:	b7 01       	movw	r22, r14
    228e:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__unpack_f>
    2292:	8e 01       	movw	r16, r28
    2294:	0f 5e       	subi	r16, 0xEF	; 239
    2296:	1f 4f       	sbci	r17, 0xFF	; 255
    2298:	ce 01       	movw	r24, r28
    229a:	05 96       	adiw	r24, 0x05	; 5
    229c:	b8 01       	movw	r22, r16
    229e:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__unpack_f>
    22a2:	8a 89       	ldd	r24, Y+18	; 0x12
    22a4:	91 e0       	ldi	r25, 0x01	; 1
    22a6:	89 27       	eor	r24, r25
    22a8:	8a 8b       	std	Y+18, r24	; 0x12
    22aa:	c7 01       	movw	r24, r14
    22ac:	b8 01       	movw	r22, r16
    22ae:	ae 01       	movw	r20, r28
    22b0:	47 5e       	subi	r20, 0xE7	; 231
    22b2:	5f 4f       	sbci	r21, 0xFF	; 255
    22b4:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_fpadd_parts>
    22b8:	0e 94 87 13 	call	0x270e	; 0x270e <__pack_f>
    22bc:	a0 96       	adiw	r28, 0x20	; 32
    22be:	e6 e0       	ldi	r30, 0x06	; 6
    22c0:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__epilogue_restores__+0x18>

000022c4 <__addsf3>:
    22c4:	a0 e2       	ldi	r26, 0x20	; 32
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	e8 e6       	ldi	r30, 0x68	; 104
    22ca:	f1 e1       	ldi	r31, 0x11	; 17
    22cc:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <__prologue_saves__+0x18>
    22d0:	69 83       	std	Y+1, r22	; 0x01
    22d2:	7a 83       	std	Y+2, r23	; 0x02
    22d4:	8b 83       	std	Y+3, r24	; 0x03
    22d6:	9c 83       	std	Y+4, r25	; 0x04
    22d8:	2d 83       	std	Y+5, r18	; 0x05
    22da:	3e 83       	std	Y+6, r19	; 0x06
    22dc:	4f 83       	std	Y+7, r20	; 0x07
    22de:	58 87       	std	Y+8, r21	; 0x08
    22e0:	f9 e0       	ldi	r31, 0x09	; 9
    22e2:	ef 2e       	mov	r14, r31
    22e4:	f1 2c       	mov	r15, r1
    22e6:	ec 0e       	add	r14, r28
    22e8:	fd 1e       	adc	r15, r29
    22ea:	ce 01       	movw	r24, r28
    22ec:	01 96       	adiw	r24, 0x01	; 1
    22ee:	b7 01       	movw	r22, r14
    22f0:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__unpack_f>
    22f4:	8e 01       	movw	r16, r28
    22f6:	0f 5e       	subi	r16, 0xEF	; 239
    22f8:	1f 4f       	sbci	r17, 0xFF	; 255
    22fa:	ce 01       	movw	r24, r28
    22fc:	05 96       	adiw	r24, 0x05	; 5
    22fe:	b8 01       	movw	r22, r16
    2300:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__unpack_f>
    2304:	c7 01       	movw	r24, r14
    2306:	b8 01       	movw	r22, r16
    2308:	ae 01       	movw	r20, r28
    230a:	47 5e       	subi	r20, 0xE7	; 231
    230c:	5f 4f       	sbci	r21, 0xFF	; 255
    230e:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_fpadd_parts>
    2312:	0e 94 87 13 	call	0x270e	; 0x270e <__pack_f>
    2316:	a0 96       	adiw	r28, 0x20	; 32
    2318:	e6 e0       	ldi	r30, 0x06	; 6
    231a:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__epilogue_restores__+0x18>

0000231e <__divsf3>:
    231e:	a8 e1       	ldi	r26, 0x18	; 24
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	e5 e9       	ldi	r30, 0x95	; 149
    2324:	f1 e1       	ldi	r31, 0x11	; 17
    2326:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <__prologue_saves__+0x10>
    232a:	69 83       	std	Y+1, r22	; 0x01
    232c:	7a 83       	std	Y+2, r23	; 0x02
    232e:	8b 83       	std	Y+3, r24	; 0x03
    2330:	9c 83       	std	Y+4, r25	; 0x04
    2332:	2d 83       	std	Y+5, r18	; 0x05
    2334:	3e 83       	std	Y+6, r19	; 0x06
    2336:	4f 83       	std	Y+7, r20	; 0x07
    2338:	58 87       	std	Y+8, r21	; 0x08
    233a:	b9 e0       	ldi	r27, 0x09	; 9
    233c:	eb 2e       	mov	r14, r27
    233e:	f1 2c       	mov	r15, r1
    2340:	ec 0e       	add	r14, r28
    2342:	fd 1e       	adc	r15, r29
    2344:	ce 01       	movw	r24, r28
    2346:	01 96       	adiw	r24, 0x01	; 1
    2348:	b7 01       	movw	r22, r14
    234a:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__unpack_f>
    234e:	8e 01       	movw	r16, r28
    2350:	0f 5e       	subi	r16, 0xEF	; 239
    2352:	1f 4f       	sbci	r17, 0xFF	; 255
    2354:	ce 01       	movw	r24, r28
    2356:	05 96       	adiw	r24, 0x05	; 5
    2358:	b8 01       	movw	r22, r16
    235a:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__unpack_f>
    235e:	29 85       	ldd	r18, Y+9	; 0x09
    2360:	22 30       	cpi	r18, 0x02	; 2
    2362:	08 f4       	brcc	.+2      	; 0x2366 <__divsf3+0x48>
    2364:	7e c0       	rjmp	.+252    	; 0x2462 <__divsf3+0x144>
    2366:	39 89       	ldd	r19, Y+17	; 0x11
    2368:	32 30       	cpi	r19, 0x02	; 2
    236a:	10 f4       	brcc	.+4      	; 0x2370 <__divsf3+0x52>
    236c:	b8 01       	movw	r22, r16
    236e:	7c c0       	rjmp	.+248    	; 0x2468 <__divsf3+0x14a>
    2370:	8a 85       	ldd	r24, Y+10	; 0x0a
    2372:	9a 89       	ldd	r25, Y+18	; 0x12
    2374:	89 27       	eor	r24, r25
    2376:	8a 87       	std	Y+10, r24	; 0x0a
    2378:	24 30       	cpi	r18, 0x04	; 4
    237a:	11 f0       	breq	.+4      	; 0x2380 <__divsf3+0x62>
    237c:	22 30       	cpi	r18, 0x02	; 2
    237e:	31 f4       	brne	.+12     	; 0x238c <__divsf3+0x6e>
    2380:	23 17       	cp	r18, r19
    2382:	09 f0       	breq	.+2      	; 0x2386 <__divsf3+0x68>
    2384:	6e c0       	rjmp	.+220    	; 0x2462 <__divsf3+0x144>
    2386:	6f e0       	ldi	r22, 0x0F	; 15
    2388:	73 e0       	ldi	r23, 0x03	; 3
    238a:	6e c0       	rjmp	.+220    	; 0x2468 <__divsf3+0x14a>
    238c:	34 30       	cpi	r19, 0x04	; 4
    238e:	39 f4       	brne	.+14     	; 0x239e <__divsf3+0x80>
    2390:	1d 86       	std	Y+13, r1	; 0x0d
    2392:	1e 86       	std	Y+14, r1	; 0x0e
    2394:	1f 86       	std	Y+15, r1	; 0x0f
    2396:	18 8a       	std	Y+16, r1	; 0x10
    2398:	1c 86       	std	Y+12, r1	; 0x0c
    239a:	1b 86       	std	Y+11, r1	; 0x0b
    239c:	04 c0       	rjmp	.+8      	; 0x23a6 <__divsf3+0x88>
    239e:	32 30       	cpi	r19, 0x02	; 2
    23a0:	21 f4       	brne	.+8      	; 0x23aa <__divsf3+0x8c>
    23a2:	84 e0       	ldi	r24, 0x04	; 4
    23a4:	89 87       	std	Y+9, r24	; 0x09
    23a6:	b7 01       	movw	r22, r14
    23a8:	5f c0       	rjmp	.+190    	; 0x2468 <__divsf3+0x14a>
    23aa:	2b 85       	ldd	r18, Y+11	; 0x0b
    23ac:	3c 85       	ldd	r19, Y+12	; 0x0c
    23ae:	8b 89       	ldd	r24, Y+19	; 0x13
    23b0:	9c 89       	ldd	r25, Y+20	; 0x14
    23b2:	28 1b       	sub	r18, r24
    23b4:	39 0b       	sbc	r19, r25
    23b6:	3c 87       	std	Y+12, r19	; 0x0c
    23b8:	2b 87       	std	Y+11, r18	; 0x0b
    23ba:	ed 84       	ldd	r14, Y+13	; 0x0d
    23bc:	fe 84       	ldd	r15, Y+14	; 0x0e
    23be:	0f 85       	ldd	r16, Y+15	; 0x0f
    23c0:	18 89       	ldd	r17, Y+16	; 0x10
    23c2:	ad 88       	ldd	r10, Y+21	; 0x15
    23c4:	be 88       	ldd	r11, Y+22	; 0x16
    23c6:	cf 88       	ldd	r12, Y+23	; 0x17
    23c8:	d8 8c       	ldd	r13, Y+24	; 0x18
    23ca:	ea 14       	cp	r14, r10
    23cc:	fb 04       	cpc	r15, r11
    23ce:	0c 05       	cpc	r16, r12
    23d0:	1d 05       	cpc	r17, r13
    23d2:	40 f4       	brcc	.+16     	; 0x23e4 <__divsf3+0xc6>
    23d4:	ee 0c       	add	r14, r14
    23d6:	ff 1c       	adc	r15, r15
    23d8:	00 1f       	adc	r16, r16
    23da:	11 1f       	adc	r17, r17
    23dc:	21 50       	subi	r18, 0x01	; 1
    23de:	30 40       	sbci	r19, 0x00	; 0
    23e0:	3c 87       	std	Y+12, r19	; 0x0c
    23e2:	2b 87       	std	Y+11, r18	; 0x0b
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	40 e0       	ldi	r20, 0x00	; 0
    23ea:	50 e0       	ldi	r21, 0x00	; 0
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	a0 e0       	ldi	r26, 0x00	; 0
    23f2:	b0 e4       	ldi	r27, 0x40	; 64
    23f4:	60 e0       	ldi	r22, 0x00	; 0
    23f6:	70 e0       	ldi	r23, 0x00	; 0
    23f8:	ea 14       	cp	r14, r10
    23fa:	fb 04       	cpc	r15, r11
    23fc:	0c 05       	cpc	r16, r12
    23fe:	1d 05       	cpc	r17, r13
    2400:	40 f0       	brcs	.+16     	; 0x2412 <__divsf3+0xf4>
    2402:	28 2b       	or	r18, r24
    2404:	39 2b       	or	r19, r25
    2406:	4a 2b       	or	r20, r26
    2408:	5b 2b       	or	r21, r27
    240a:	ea 18       	sub	r14, r10
    240c:	fb 08       	sbc	r15, r11
    240e:	0c 09       	sbc	r16, r12
    2410:	1d 09       	sbc	r17, r13
    2412:	b6 95       	lsr	r27
    2414:	a7 95       	ror	r26
    2416:	97 95       	ror	r25
    2418:	87 95       	ror	r24
    241a:	ee 0c       	add	r14, r14
    241c:	ff 1c       	adc	r15, r15
    241e:	00 1f       	adc	r16, r16
    2420:	11 1f       	adc	r17, r17
    2422:	6f 5f       	subi	r22, 0xFF	; 255
    2424:	7f 4f       	sbci	r23, 0xFF	; 255
    2426:	6f 31       	cpi	r22, 0x1F	; 31
    2428:	71 05       	cpc	r23, r1
    242a:	31 f7       	brne	.-52     	; 0x23f8 <__divsf3+0xda>
    242c:	da 01       	movw	r26, r20
    242e:	c9 01       	movw	r24, r18
    2430:	8f 77       	andi	r24, 0x7F	; 127
    2432:	90 70       	andi	r25, 0x00	; 0
    2434:	a0 70       	andi	r26, 0x00	; 0
    2436:	b0 70       	andi	r27, 0x00	; 0
    2438:	80 34       	cpi	r24, 0x40	; 64
    243a:	91 05       	cpc	r25, r1
    243c:	a1 05       	cpc	r26, r1
    243e:	b1 05       	cpc	r27, r1
    2440:	61 f4       	brne	.+24     	; 0x245a <__divsf3+0x13c>
    2442:	27 fd       	sbrc	r18, 7
    2444:	0a c0       	rjmp	.+20     	; 0x245a <__divsf3+0x13c>
    2446:	e1 14       	cp	r14, r1
    2448:	f1 04       	cpc	r15, r1
    244a:	01 05       	cpc	r16, r1
    244c:	11 05       	cpc	r17, r1
    244e:	29 f0       	breq	.+10     	; 0x245a <__divsf3+0x13c>
    2450:	20 5c       	subi	r18, 0xC0	; 192
    2452:	3f 4f       	sbci	r19, 0xFF	; 255
    2454:	4f 4f       	sbci	r20, 0xFF	; 255
    2456:	5f 4f       	sbci	r21, 0xFF	; 255
    2458:	20 78       	andi	r18, 0x80	; 128
    245a:	2d 87       	std	Y+13, r18	; 0x0d
    245c:	3e 87       	std	Y+14, r19	; 0x0e
    245e:	4f 87       	std	Y+15, r20	; 0x0f
    2460:	58 8b       	std	Y+16, r21	; 0x10
    2462:	be 01       	movw	r22, r28
    2464:	67 5f       	subi	r22, 0xF7	; 247
    2466:	7f 4f       	sbci	r23, 0xFF	; 255
    2468:	cb 01       	movw	r24, r22
    246a:	0e 94 87 13 	call	0x270e	; 0x270e <__pack_f>
    246e:	68 96       	adiw	r28, 0x18	; 24
    2470:	ea e0       	ldi	r30, 0x0A	; 10
    2472:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__epilogue_restores__+0x10>

00002476 <__gesf2>:
    2476:	a8 e1       	ldi	r26, 0x18	; 24
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	e1 e4       	ldi	r30, 0x41	; 65
    247c:	f2 e1       	ldi	r31, 0x12	; 18
    247e:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <__prologue_saves__+0x18>
    2482:	69 83       	std	Y+1, r22	; 0x01
    2484:	7a 83       	std	Y+2, r23	; 0x02
    2486:	8b 83       	std	Y+3, r24	; 0x03
    2488:	9c 83       	std	Y+4, r25	; 0x04
    248a:	2d 83       	std	Y+5, r18	; 0x05
    248c:	3e 83       	std	Y+6, r19	; 0x06
    248e:	4f 83       	std	Y+7, r20	; 0x07
    2490:	58 87       	std	Y+8, r21	; 0x08
    2492:	89 e0       	ldi	r24, 0x09	; 9
    2494:	e8 2e       	mov	r14, r24
    2496:	f1 2c       	mov	r15, r1
    2498:	ec 0e       	add	r14, r28
    249a:	fd 1e       	adc	r15, r29
    249c:	ce 01       	movw	r24, r28
    249e:	01 96       	adiw	r24, 0x01	; 1
    24a0:	b7 01       	movw	r22, r14
    24a2:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__unpack_f>
    24a6:	8e 01       	movw	r16, r28
    24a8:	0f 5e       	subi	r16, 0xEF	; 239
    24aa:	1f 4f       	sbci	r17, 0xFF	; 255
    24ac:	ce 01       	movw	r24, r28
    24ae:	05 96       	adiw	r24, 0x05	; 5
    24b0:	b8 01       	movw	r22, r16
    24b2:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__unpack_f>
    24b6:	89 85       	ldd	r24, Y+9	; 0x09
    24b8:	82 30       	cpi	r24, 0x02	; 2
    24ba:	40 f0       	brcs	.+16     	; 0x24cc <__gesf2+0x56>
    24bc:	89 89       	ldd	r24, Y+17	; 0x11
    24be:	82 30       	cpi	r24, 0x02	; 2
    24c0:	28 f0       	brcs	.+10     	; 0x24cc <__gesf2+0x56>
    24c2:	c7 01       	movw	r24, r14
    24c4:	b8 01       	movw	r22, r16
    24c6:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__fpcmp_parts_f>
    24ca:	01 c0       	rjmp	.+2      	; 0x24ce <__gesf2+0x58>
    24cc:	8f ef       	ldi	r24, 0xFF	; 255
    24ce:	68 96       	adiw	r28, 0x18	; 24
    24d0:	e6 e0       	ldi	r30, 0x06	; 6
    24d2:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__epilogue_restores__+0x18>

000024d6 <__fixsfsi>:
    24d6:	ac e0       	ldi	r26, 0x0C	; 12
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e1 e7       	ldi	r30, 0x71	; 113
    24dc:	f2 e1       	ldi	r31, 0x12	; 18
    24de:	0c 94 56 16 	jmp	0x2cac	; 0x2cac <__prologue_saves__+0x20>
    24e2:	69 83       	std	Y+1, r22	; 0x01
    24e4:	7a 83       	std	Y+2, r23	; 0x02
    24e6:	8b 83       	std	Y+3, r24	; 0x03
    24e8:	9c 83       	std	Y+4, r25	; 0x04
    24ea:	ce 01       	movw	r24, r28
    24ec:	01 96       	adiw	r24, 0x01	; 1
    24ee:	be 01       	movw	r22, r28
    24f0:	6b 5f       	subi	r22, 0xFB	; 251
    24f2:	7f 4f       	sbci	r23, 0xFF	; 255
    24f4:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__unpack_f>
    24f8:	8d 81       	ldd	r24, Y+5	; 0x05
    24fa:	82 30       	cpi	r24, 0x02	; 2
    24fc:	61 f1       	breq	.+88     	; 0x2556 <__fixsfsi+0x80>
    24fe:	82 30       	cpi	r24, 0x02	; 2
    2500:	50 f1       	brcs	.+84     	; 0x2556 <__fixsfsi+0x80>
    2502:	84 30       	cpi	r24, 0x04	; 4
    2504:	21 f4       	brne	.+8      	; 0x250e <__fixsfsi+0x38>
    2506:	8e 81       	ldd	r24, Y+6	; 0x06
    2508:	88 23       	and	r24, r24
    250a:	51 f1       	breq	.+84     	; 0x2560 <__fixsfsi+0x8a>
    250c:	2e c0       	rjmp	.+92     	; 0x256a <__fixsfsi+0x94>
    250e:	2f 81       	ldd	r18, Y+7	; 0x07
    2510:	38 85       	ldd	r19, Y+8	; 0x08
    2512:	37 fd       	sbrc	r19, 7
    2514:	20 c0       	rjmp	.+64     	; 0x2556 <__fixsfsi+0x80>
    2516:	6e 81       	ldd	r22, Y+6	; 0x06
    2518:	2f 31       	cpi	r18, 0x1F	; 31
    251a:	31 05       	cpc	r19, r1
    251c:	1c f0       	brlt	.+6      	; 0x2524 <__fixsfsi+0x4e>
    251e:	66 23       	and	r22, r22
    2520:	f9 f0       	breq	.+62     	; 0x2560 <__fixsfsi+0x8a>
    2522:	23 c0       	rjmp	.+70     	; 0x256a <__fixsfsi+0x94>
    2524:	8e e1       	ldi	r24, 0x1E	; 30
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	82 1b       	sub	r24, r18
    252a:	93 0b       	sbc	r25, r19
    252c:	29 85       	ldd	r18, Y+9	; 0x09
    252e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2530:	4b 85       	ldd	r20, Y+11	; 0x0b
    2532:	5c 85       	ldd	r21, Y+12	; 0x0c
    2534:	04 c0       	rjmp	.+8      	; 0x253e <__fixsfsi+0x68>
    2536:	56 95       	lsr	r21
    2538:	47 95       	ror	r20
    253a:	37 95       	ror	r19
    253c:	27 95       	ror	r18
    253e:	8a 95       	dec	r24
    2540:	d2 f7       	brpl	.-12     	; 0x2536 <__fixsfsi+0x60>
    2542:	66 23       	and	r22, r22
    2544:	b1 f0       	breq	.+44     	; 0x2572 <__fixsfsi+0x9c>
    2546:	50 95       	com	r21
    2548:	40 95       	com	r20
    254a:	30 95       	com	r19
    254c:	21 95       	neg	r18
    254e:	3f 4f       	sbci	r19, 0xFF	; 255
    2550:	4f 4f       	sbci	r20, 0xFF	; 255
    2552:	5f 4f       	sbci	r21, 0xFF	; 255
    2554:	0e c0       	rjmp	.+28     	; 0x2572 <__fixsfsi+0x9c>
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	40 e0       	ldi	r20, 0x00	; 0
    255c:	50 e0       	ldi	r21, 0x00	; 0
    255e:	09 c0       	rjmp	.+18     	; 0x2572 <__fixsfsi+0x9c>
    2560:	2f ef       	ldi	r18, 0xFF	; 255
    2562:	3f ef       	ldi	r19, 0xFF	; 255
    2564:	4f ef       	ldi	r20, 0xFF	; 255
    2566:	5f e7       	ldi	r21, 0x7F	; 127
    2568:	04 c0       	rjmp	.+8      	; 0x2572 <__fixsfsi+0x9c>
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	40 e0       	ldi	r20, 0x00	; 0
    2570:	50 e8       	ldi	r21, 0x80	; 128
    2572:	b9 01       	movw	r22, r18
    2574:	ca 01       	movw	r24, r20
    2576:	2c 96       	adiw	r28, 0x0c	; 12
    2578:	e2 e0       	ldi	r30, 0x02	; 2
    257a:	0c 94 72 16 	jmp	0x2ce4	; 0x2ce4 <__epilogue_restores__+0x20>

0000257e <__floatunsisf>:
    257e:	a8 e0       	ldi	r26, 0x08	; 8
    2580:	b0 e0       	ldi	r27, 0x00	; 0
    2582:	e5 ec       	ldi	r30, 0xC5	; 197
    2584:	f2 e1       	ldi	r31, 0x12	; 18
    2586:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <__prologue_saves__+0x10>
    258a:	7b 01       	movw	r14, r22
    258c:	8c 01       	movw	r16, r24
    258e:	61 15       	cp	r22, r1
    2590:	71 05       	cpc	r23, r1
    2592:	81 05       	cpc	r24, r1
    2594:	91 05       	cpc	r25, r1
    2596:	19 f4       	brne	.+6      	; 0x259e <__floatunsisf+0x20>
    2598:	82 e0       	ldi	r24, 0x02	; 2
    259a:	89 83       	std	Y+1, r24	; 0x01
    259c:	60 c0       	rjmp	.+192    	; 0x265e <__floatunsisf+0xe0>
    259e:	83 e0       	ldi	r24, 0x03	; 3
    25a0:	89 83       	std	Y+1, r24	; 0x01
    25a2:	8e e1       	ldi	r24, 0x1E	; 30
    25a4:	c8 2e       	mov	r12, r24
    25a6:	d1 2c       	mov	r13, r1
    25a8:	dc 82       	std	Y+4, r13	; 0x04
    25aa:	cb 82       	std	Y+3, r12	; 0x03
    25ac:	ed 82       	std	Y+5, r14	; 0x05
    25ae:	fe 82       	std	Y+6, r15	; 0x06
    25b0:	0f 83       	std	Y+7, r16	; 0x07
    25b2:	18 87       	std	Y+8, r17	; 0x08
    25b4:	c8 01       	movw	r24, r16
    25b6:	b7 01       	movw	r22, r14
    25b8:	0e 94 38 13 	call	0x2670	; 0x2670 <__clzsi2>
    25bc:	fc 01       	movw	r30, r24
    25be:	31 97       	sbiw	r30, 0x01	; 1
    25c0:	f7 ff       	sbrs	r31, 7
    25c2:	3b c0       	rjmp	.+118    	; 0x263a <__floatunsisf+0xbc>
    25c4:	22 27       	eor	r18, r18
    25c6:	33 27       	eor	r19, r19
    25c8:	2e 1b       	sub	r18, r30
    25ca:	3f 0b       	sbc	r19, r31
    25cc:	57 01       	movw	r10, r14
    25ce:	68 01       	movw	r12, r16
    25d0:	02 2e       	mov	r0, r18
    25d2:	04 c0       	rjmp	.+8      	; 0x25dc <__floatunsisf+0x5e>
    25d4:	d6 94       	lsr	r13
    25d6:	c7 94       	ror	r12
    25d8:	b7 94       	ror	r11
    25da:	a7 94       	ror	r10
    25dc:	0a 94       	dec	r0
    25de:	d2 f7       	brpl	.-12     	; 0x25d4 <__floatunsisf+0x56>
    25e0:	40 e0       	ldi	r20, 0x00	; 0
    25e2:	50 e0       	ldi	r21, 0x00	; 0
    25e4:	60 e0       	ldi	r22, 0x00	; 0
    25e6:	70 e0       	ldi	r23, 0x00	; 0
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	a0 e0       	ldi	r26, 0x00	; 0
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	04 c0       	rjmp	.+8      	; 0x25fa <__floatunsisf+0x7c>
    25f2:	88 0f       	add	r24, r24
    25f4:	99 1f       	adc	r25, r25
    25f6:	aa 1f       	adc	r26, r26
    25f8:	bb 1f       	adc	r27, r27
    25fa:	2a 95       	dec	r18
    25fc:	d2 f7       	brpl	.-12     	; 0x25f2 <__floatunsisf+0x74>
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	a1 09       	sbc	r26, r1
    2602:	b1 09       	sbc	r27, r1
    2604:	8e 21       	and	r24, r14
    2606:	9f 21       	and	r25, r15
    2608:	a0 23       	and	r26, r16
    260a:	b1 23       	and	r27, r17
    260c:	00 97       	sbiw	r24, 0x00	; 0
    260e:	a1 05       	cpc	r26, r1
    2610:	b1 05       	cpc	r27, r1
    2612:	21 f0       	breq	.+8      	; 0x261c <__floatunsisf+0x9e>
    2614:	41 e0       	ldi	r20, 0x01	; 1
    2616:	50 e0       	ldi	r21, 0x00	; 0
    2618:	60 e0       	ldi	r22, 0x00	; 0
    261a:	70 e0       	ldi	r23, 0x00	; 0
    261c:	4a 29       	or	r20, r10
    261e:	5b 29       	or	r21, r11
    2620:	6c 29       	or	r22, r12
    2622:	7d 29       	or	r23, r13
    2624:	4d 83       	std	Y+5, r20	; 0x05
    2626:	5e 83       	std	Y+6, r21	; 0x06
    2628:	6f 83       	std	Y+7, r22	; 0x07
    262a:	78 87       	std	Y+8, r23	; 0x08
    262c:	8e e1       	ldi	r24, 0x1E	; 30
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	8e 1b       	sub	r24, r30
    2632:	9f 0b       	sbc	r25, r31
    2634:	9c 83       	std	Y+4, r25	; 0x04
    2636:	8b 83       	std	Y+3, r24	; 0x03
    2638:	12 c0       	rjmp	.+36     	; 0x265e <__floatunsisf+0xe0>
    263a:	30 97       	sbiw	r30, 0x00	; 0
    263c:	81 f0       	breq	.+32     	; 0x265e <__floatunsisf+0xe0>
    263e:	0e 2e       	mov	r0, r30
    2640:	04 c0       	rjmp	.+8      	; 0x264a <__floatunsisf+0xcc>
    2642:	ee 0c       	add	r14, r14
    2644:	ff 1c       	adc	r15, r15
    2646:	00 1f       	adc	r16, r16
    2648:	11 1f       	adc	r17, r17
    264a:	0a 94       	dec	r0
    264c:	d2 f7       	brpl	.-12     	; 0x2642 <__floatunsisf+0xc4>
    264e:	ed 82       	std	Y+5, r14	; 0x05
    2650:	fe 82       	std	Y+6, r15	; 0x06
    2652:	0f 83       	std	Y+7, r16	; 0x07
    2654:	18 87       	std	Y+8, r17	; 0x08
    2656:	ce 1a       	sub	r12, r30
    2658:	df 0a       	sbc	r13, r31
    265a:	dc 82       	std	Y+4, r13	; 0x04
    265c:	cb 82       	std	Y+3, r12	; 0x03
    265e:	1a 82       	std	Y+2, r1	; 0x02
    2660:	ce 01       	movw	r24, r28
    2662:	01 96       	adiw	r24, 0x01	; 1
    2664:	0e 94 87 13 	call	0x270e	; 0x270e <__pack_f>
    2668:	28 96       	adiw	r28, 0x08	; 8
    266a:	ea e0       	ldi	r30, 0x0A	; 10
    266c:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__epilogue_restores__+0x10>

00002670 <__clzsi2>:
    2670:	ef 92       	push	r14
    2672:	ff 92       	push	r15
    2674:	0f 93       	push	r16
    2676:	1f 93       	push	r17
    2678:	7b 01       	movw	r14, r22
    267a:	8c 01       	movw	r16, r24
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	e8 16       	cp	r14, r24
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	f8 06       	cpc	r15, r24
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	08 07       	cpc	r16, r24
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	18 07       	cpc	r17, r24
    268c:	88 f4       	brcc	.+34     	; 0x26b0 <__clzsi2+0x40>
    268e:	8f ef       	ldi	r24, 0xFF	; 255
    2690:	e8 16       	cp	r14, r24
    2692:	f1 04       	cpc	r15, r1
    2694:	01 05       	cpc	r16, r1
    2696:	11 05       	cpc	r17, r1
    2698:	31 f0       	breq	.+12     	; 0x26a6 <__clzsi2+0x36>
    269a:	28 f0       	brcs	.+10     	; 0x26a6 <__clzsi2+0x36>
    269c:	88 e0       	ldi	r24, 0x08	; 8
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	a0 e0       	ldi	r26, 0x00	; 0
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
    26a4:	17 c0       	rjmp	.+46     	; 0x26d4 <__clzsi2+0x64>
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	a0 e0       	ldi	r26, 0x00	; 0
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	12 c0       	rjmp	.+36     	; 0x26d4 <__clzsi2+0x64>
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	e8 16       	cp	r14, r24
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	f8 06       	cpc	r15, r24
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	08 07       	cpc	r16, r24
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	18 07       	cpc	r17, r24
    26c0:	28 f0       	brcs	.+10     	; 0x26cc <__clzsi2+0x5c>
    26c2:	88 e1       	ldi	r24, 0x18	; 24
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	a0 e0       	ldi	r26, 0x00	; 0
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	04 c0       	rjmp	.+8      	; 0x26d4 <__clzsi2+0x64>
    26cc:	80 e1       	ldi	r24, 0x10	; 16
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	a0 e0       	ldi	r26, 0x00	; 0
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	20 e2       	ldi	r18, 0x20	; 32
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	40 e0       	ldi	r20, 0x00	; 0
    26da:	50 e0       	ldi	r21, 0x00	; 0
    26dc:	28 1b       	sub	r18, r24
    26de:	39 0b       	sbc	r19, r25
    26e0:	4a 0b       	sbc	r20, r26
    26e2:	5b 0b       	sbc	r21, r27
    26e4:	04 c0       	rjmp	.+8      	; 0x26ee <__clzsi2+0x7e>
    26e6:	16 95       	lsr	r17
    26e8:	07 95       	ror	r16
    26ea:	f7 94       	ror	r15
    26ec:	e7 94       	ror	r14
    26ee:	8a 95       	dec	r24
    26f0:	d2 f7       	brpl	.-12     	; 0x26e6 <__clzsi2+0x76>
    26f2:	f7 01       	movw	r30, r14
    26f4:	e9 5e       	subi	r30, 0xE9	; 233
    26f6:	fc 4f       	sbci	r31, 0xFC	; 252
    26f8:	80 81       	ld	r24, Z
    26fa:	28 1b       	sub	r18, r24
    26fc:	31 09       	sbc	r19, r1
    26fe:	41 09       	sbc	r20, r1
    2700:	51 09       	sbc	r21, r1
    2702:	c9 01       	movw	r24, r18
    2704:	1f 91       	pop	r17
    2706:	0f 91       	pop	r16
    2708:	ff 90       	pop	r15
    270a:	ef 90       	pop	r14
    270c:	08 95       	ret

0000270e <__pack_f>:
    270e:	df 92       	push	r13
    2710:	ef 92       	push	r14
    2712:	ff 92       	push	r15
    2714:	0f 93       	push	r16
    2716:	1f 93       	push	r17
    2718:	fc 01       	movw	r30, r24
    271a:	e4 80       	ldd	r14, Z+4	; 0x04
    271c:	f5 80       	ldd	r15, Z+5	; 0x05
    271e:	06 81       	ldd	r16, Z+6	; 0x06
    2720:	17 81       	ldd	r17, Z+7	; 0x07
    2722:	d1 80       	ldd	r13, Z+1	; 0x01
    2724:	80 81       	ld	r24, Z
    2726:	82 30       	cpi	r24, 0x02	; 2
    2728:	48 f4       	brcc	.+18     	; 0x273c <__pack_f+0x2e>
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	a0 e1       	ldi	r26, 0x10	; 16
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	e8 2a       	or	r14, r24
    2734:	f9 2a       	or	r15, r25
    2736:	0a 2b       	or	r16, r26
    2738:	1b 2b       	or	r17, r27
    273a:	a5 c0       	rjmp	.+330    	; 0x2886 <__pack_f+0x178>
    273c:	84 30       	cpi	r24, 0x04	; 4
    273e:	09 f4       	brne	.+2      	; 0x2742 <__pack_f+0x34>
    2740:	9f c0       	rjmp	.+318    	; 0x2880 <__pack_f+0x172>
    2742:	82 30       	cpi	r24, 0x02	; 2
    2744:	21 f4       	brne	.+8      	; 0x274e <__pack_f+0x40>
    2746:	ee 24       	eor	r14, r14
    2748:	ff 24       	eor	r15, r15
    274a:	87 01       	movw	r16, r14
    274c:	05 c0       	rjmp	.+10     	; 0x2758 <__pack_f+0x4a>
    274e:	e1 14       	cp	r14, r1
    2750:	f1 04       	cpc	r15, r1
    2752:	01 05       	cpc	r16, r1
    2754:	11 05       	cpc	r17, r1
    2756:	19 f4       	brne	.+6      	; 0x275e <__pack_f+0x50>
    2758:	e0 e0       	ldi	r30, 0x00	; 0
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	96 c0       	rjmp	.+300    	; 0x288a <__pack_f+0x17c>
    275e:	62 81       	ldd	r22, Z+2	; 0x02
    2760:	73 81       	ldd	r23, Z+3	; 0x03
    2762:	9f ef       	ldi	r25, 0xFF	; 255
    2764:	62 38       	cpi	r22, 0x82	; 130
    2766:	79 07       	cpc	r23, r25
    2768:	0c f0       	brlt	.+2      	; 0x276c <__pack_f+0x5e>
    276a:	5b c0       	rjmp	.+182    	; 0x2822 <__pack_f+0x114>
    276c:	22 e8       	ldi	r18, 0x82	; 130
    276e:	3f ef       	ldi	r19, 0xFF	; 255
    2770:	26 1b       	sub	r18, r22
    2772:	37 0b       	sbc	r19, r23
    2774:	2a 31       	cpi	r18, 0x1A	; 26
    2776:	31 05       	cpc	r19, r1
    2778:	2c f0       	brlt	.+10     	; 0x2784 <__pack_f+0x76>
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e0       	ldi	r20, 0x00	; 0
    2780:	50 e0       	ldi	r21, 0x00	; 0
    2782:	2a c0       	rjmp	.+84     	; 0x27d8 <__pack_f+0xca>
    2784:	b8 01       	movw	r22, r16
    2786:	a7 01       	movw	r20, r14
    2788:	02 2e       	mov	r0, r18
    278a:	04 c0       	rjmp	.+8      	; 0x2794 <__pack_f+0x86>
    278c:	76 95       	lsr	r23
    278e:	67 95       	ror	r22
    2790:	57 95       	ror	r21
    2792:	47 95       	ror	r20
    2794:	0a 94       	dec	r0
    2796:	d2 f7       	brpl	.-12     	; 0x278c <__pack_f+0x7e>
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	a0 e0       	ldi	r26, 0x00	; 0
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	04 c0       	rjmp	.+8      	; 0x27aa <__pack_f+0x9c>
    27a2:	88 0f       	add	r24, r24
    27a4:	99 1f       	adc	r25, r25
    27a6:	aa 1f       	adc	r26, r26
    27a8:	bb 1f       	adc	r27, r27
    27aa:	2a 95       	dec	r18
    27ac:	d2 f7       	brpl	.-12     	; 0x27a2 <__pack_f+0x94>
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	a1 09       	sbc	r26, r1
    27b2:	b1 09       	sbc	r27, r1
    27b4:	8e 21       	and	r24, r14
    27b6:	9f 21       	and	r25, r15
    27b8:	a0 23       	and	r26, r16
    27ba:	b1 23       	and	r27, r17
    27bc:	00 97       	sbiw	r24, 0x00	; 0
    27be:	a1 05       	cpc	r26, r1
    27c0:	b1 05       	cpc	r27, r1
    27c2:	21 f0       	breq	.+8      	; 0x27cc <__pack_f+0xbe>
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	a0 e0       	ldi	r26, 0x00	; 0
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	9a 01       	movw	r18, r20
    27ce:	ab 01       	movw	r20, r22
    27d0:	28 2b       	or	r18, r24
    27d2:	39 2b       	or	r19, r25
    27d4:	4a 2b       	or	r20, r26
    27d6:	5b 2b       	or	r21, r27
    27d8:	da 01       	movw	r26, r20
    27da:	c9 01       	movw	r24, r18
    27dc:	8f 77       	andi	r24, 0x7F	; 127
    27de:	90 70       	andi	r25, 0x00	; 0
    27e0:	a0 70       	andi	r26, 0x00	; 0
    27e2:	b0 70       	andi	r27, 0x00	; 0
    27e4:	80 34       	cpi	r24, 0x40	; 64
    27e6:	91 05       	cpc	r25, r1
    27e8:	a1 05       	cpc	r26, r1
    27ea:	b1 05       	cpc	r27, r1
    27ec:	39 f4       	brne	.+14     	; 0x27fc <__pack_f+0xee>
    27ee:	27 ff       	sbrs	r18, 7
    27f0:	09 c0       	rjmp	.+18     	; 0x2804 <__pack_f+0xf6>
    27f2:	20 5c       	subi	r18, 0xC0	; 192
    27f4:	3f 4f       	sbci	r19, 0xFF	; 255
    27f6:	4f 4f       	sbci	r20, 0xFF	; 255
    27f8:	5f 4f       	sbci	r21, 0xFF	; 255
    27fa:	04 c0       	rjmp	.+8      	; 0x2804 <__pack_f+0xf6>
    27fc:	21 5c       	subi	r18, 0xC1	; 193
    27fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2800:	4f 4f       	sbci	r20, 0xFF	; 255
    2802:	5f 4f       	sbci	r21, 0xFF	; 255
    2804:	e0 e0       	ldi	r30, 0x00	; 0
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	20 30       	cpi	r18, 0x00	; 0
    280a:	a0 e0       	ldi	r26, 0x00	; 0
    280c:	3a 07       	cpc	r19, r26
    280e:	a0 e0       	ldi	r26, 0x00	; 0
    2810:	4a 07       	cpc	r20, r26
    2812:	a0 e4       	ldi	r26, 0x40	; 64
    2814:	5a 07       	cpc	r21, r26
    2816:	10 f0       	brcs	.+4      	; 0x281c <__pack_f+0x10e>
    2818:	e1 e0       	ldi	r30, 0x01	; 1
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	79 01       	movw	r14, r18
    281e:	8a 01       	movw	r16, r20
    2820:	27 c0       	rjmp	.+78     	; 0x2870 <__pack_f+0x162>
    2822:	60 38       	cpi	r22, 0x80	; 128
    2824:	71 05       	cpc	r23, r1
    2826:	64 f5       	brge	.+88     	; 0x2880 <__pack_f+0x172>
    2828:	fb 01       	movw	r30, r22
    282a:	e1 58       	subi	r30, 0x81	; 129
    282c:	ff 4f       	sbci	r31, 0xFF	; 255
    282e:	d8 01       	movw	r26, r16
    2830:	c7 01       	movw	r24, r14
    2832:	8f 77       	andi	r24, 0x7F	; 127
    2834:	90 70       	andi	r25, 0x00	; 0
    2836:	a0 70       	andi	r26, 0x00	; 0
    2838:	b0 70       	andi	r27, 0x00	; 0
    283a:	80 34       	cpi	r24, 0x40	; 64
    283c:	91 05       	cpc	r25, r1
    283e:	a1 05       	cpc	r26, r1
    2840:	b1 05       	cpc	r27, r1
    2842:	39 f4       	brne	.+14     	; 0x2852 <__pack_f+0x144>
    2844:	e7 fe       	sbrs	r14, 7
    2846:	0d c0       	rjmp	.+26     	; 0x2862 <__pack_f+0x154>
    2848:	80 e4       	ldi	r24, 0x40	; 64
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	a0 e0       	ldi	r26, 0x00	; 0
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	04 c0       	rjmp	.+8      	; 0x285a <__pack_f+0x14c>
    2852:	8f e3       	ldi	r24, 0x3F	; 63
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	a0 e0       	ldi	r26, 0x00	; 0
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	e8 0e       	add	r14, r24
    285c:	f9 1e       	adc	r15, r25
    285e:	0a 1f       	adc	r16, r26
    2860:	1b 1f       	adc	r17, r27
    2862:	17 ff       	sbrs	r17, 7
    2864:	05 c0       	rjmp	.+10     	; 0x2870 <__pack_f+0x162>
    2866:	16 95       	lsr	r17
    2868:	07 95       	ror	r16
    286a:	f7 94       	ror	r15
    286c:	e7 94       	ror	r14
    286e:	31 96       	adiw	r30, 0x01	; 1
    2870:	87 e0       	ldi	r24, 0x07	; 7
    2872:	16 95       	lsr	r17
    2874:	07 95       	ror	r16
    2876:	f7 94       	ror	r15
    2878:	e7 94       	ror	r14
    287a:	8a 95       	dec	r24
    287c:	d1 f7       	brne	.-12     	; 0x2872 <__pack_f+0x164>
    287e:	05 c0       	rjmp	.+10     	; 0x288a <__pack_f+0x17c>
    2880:	ee 24       	eor	r14, r14
    2882:	ff 24       	eor	r15, r15
    2884:	87 01       	movw	r16, r14
    2886:	ef ef       	ldi	r30, 0xFF	; 255
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	6e 2f       	mov	r22, r30
    288c:	67 95       	ror	r22
    288e:	66 27       	eor	r22, r22
    2890:	67 95       	ror	r22
    2892:	90 2f       	mov	r25, r16
    2894:	9f 77       	andi	r25, 0x7F	; 127
    2896:	d7 94       	ror	r13
    2898:	dd 24       	eor	r13, r13
    289a:	d7 94       	ror	r13
    289c:	8e 2f       	mov	r24, r30
    289e:	86 95       	lsr	r24
    28a0:	49 2f       	mov	r20, r25
    28a2:	46 2b       	or	r20, r22
    28a4:	58 2f       	mov	r21, r24
    28a6:	5d 29       	or	r21, r13
    28a8:	b7 01       	movw	r22, r14
    28aa:	ca 01       	movw	r24, r20
    28ac:	1f 91       	pop	r17
    28ae:	0f 91       	pop	r16
    28b0:	ff 90       	pop	r15
    28b2:	ef 90       	pop	r14
    28b4:	df 90       	pop	r13
    28b6:	08 95       	ret

000028b8 <__unpack_f>:
    28b8:	fc 01       	movw	r30, r24
    28ba:	db 01       	movw	r26, r22
    28bc:	40 81       	ld	r20, Z
    28be:	51 81       	ldd	r21, Z+1	; 0x01
    28c0:	22 81       	ldd	r18, Z+2	; 0x02
    28c2:	62 2f       	mov	r22, r18
    28c4:	6f 77       	andi	r22, 0x7F	; 127
    28c6:	70 e0       	ldi	r23, 0x00	; 0
    28c8:	22 1f       	adc	r18, r18
    28ca:	22 27       	eor	r18, r18
    28cc:	22 1f       	adc	r18, r18
    28ce:	93 81       	ldd	r25, Z+3	; 0x03
    28d0:	89 2f       	mov	r24, r25
    28d2:	88 0f       	add	r24, r24
    28d4:	82 2b       	or	r24, r18
    28d6:	28 2f       	mov	r18, r24
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	99 1f       	adc	r25, r25
    28dc:	99 27       	eor	r25, r25
    28de:	99 1f       	adc	r25, r25
    28e0:	11 96       	adiw	r26, 0x01	; 1
    28e2:	9c 93       	st	X, r25
    28e4:	11 97       	sbiw	r26, 0x01	; 1
    28e6:	21 15       	cp	r18, r1
    28e8:	31 05       	cpc	r19, r1
    28ea:	a9 f5       	brne	.+106    	; 0x2956 <__unpack_f+0x9e>
    28ec:	41 15       	cp	r20, r1
    28ee:	51 05       	cpc	r21, r1
    28f0:	61 05       	cpc	r22, r1
    28f2:	71 05       	cpc	r23, r1
    28f4:	11 f4       	brne	.+4      	; 0x28fa <__unpack_f+0x42>
    28f6:	82 e0       	ldi	r24, 0x02	; 2
    28f8:	37 c0       	rjmp	.+110    	; 0x2968 <__unpack_f+0xb0>
    28fa:	82 e8       	ldi	r24, 0x82	; 130
    28fc:	9f ef       	ldi	r25, 0xFF	; 255
    28fe:	13 96       	adiw	r26, 0x03	; 3
    2900:	9c 93       	st	X, r25
    2902:	8e 93       	st	-X, r24
    2904:	12 97       	sbiw	r26, 0x02	; 2
    2906:	9a 01       	movw	r18, r20
    2908:	ab 01       	movw	r20, r22
    290a:	67 e0       	ldi	r22, 0x07	; 7
    290c:	22 0f       	add	r18, r18
    290e:	33 1f       	adc	r19, r19
    2910:	44 1f       	adc	r20, r20
    2912:	55 1f       	adc	r21, r21
    2914:	6a 95       	dec	r22
    2916:	d1 f7       	brne	.-12     	; 0x290c <__unpack_f+0x54>
    2918:	83 e0       	ldi	r24, 0x03	; 3
    291a:	8c 93       	st	X, r24
    291c:	0d c0       	rjmp	.+26     	; 0x2938 <__unpack_f+0x80>
    291e:	22 0f       	add	r18, r18
    2920:	33 1f       	adc	r19, r19
    2922:	44 1f       	adc	r20, r20
    2924:	55 1f       	adc	r21, r21
    2926:	12 96       	adiw	r26, 0x02	; 2
    2928:	8d 91       	ld	r24, X+
    292a:	9c 91       	ld	r25, X
    292c:	13 97       	sbiw	r26, 0x03	; 3
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	13 96       	adiw	r26, 0x03	; 3
    2932:	9c 93       	st	X, r25
    2934:	8e 93       	st	-X, r24
    2936:	12 97       	sbiw	r26, 0x02	; 2
    2938:	20 30       	cpi	r18, 0x00	; 0
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	38 07       	cpc	r19, r24
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	48 07       	cpc	r20, r24
    2942:	80 e4       	ldi	r24, 0x40	; 64
    2944:	58 07       	cpc	r21, r24
    2946:	58 f3       	brcs	.-42     	; 0x291e <__unpack_f+0x66>
    2948:	14 96       	adiw	r26, 0x04	; 4
    294a:	2d 93       	st	X+, r18
    294c:	3d 93       	st	X+, r19
    294e:	4d 93       	st	X+, r20
    2950:	5c 93       	st	X, r21
    2952:	17 97       	sbiw	r26, 0x07	; 7
    2954:	08 95       	ret
    2956:	2f 3f       	cpi	r18, 0xFF	; 255
    2958:	31 05       	cpc	r19, r1
    295a:	79 f4       	brne	.+30     	; 0x297a <__unpack_f+0xc2>
    295c:	41 15       	cp	r20, r1
    295e:	51 05       	cpc	r21, r1
    2960:	61 05       	cpc	r22, r1
    2962:	71 05       	cpc	r23, r1
    2964:	19 f4       	brne	.+6      	; 0x296c <__unpack_f+0xb4>
    2966:	84 e0       	ldi	r24, 0x04	; 4
    2968:	8c 93       	st	X, r24
    296a:	08 95       	ret
    296c:	64 ff       	sbrs	r22, 4
    296e:	03 c0       	rjmp	.+6      	; 0x2976 <__unpack_f+0xbe>
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	8c 93       	st	X, r24
    2974:	12 c0       	rjmp	.+36     	; 0x299a <__unpack_f+0xe2>
    2976:	1c 92       	st	X, r1
    2978:	10 c0       	rjmp	.+32     	; 0x299a <__unpack_f+0xe2>
    297a:	2f 57       	subi	r18, 0x7F	; 127
    297c:	30 40       	sbci	r19, 0x00	; 0
    297e:	13 96       	adiw	r26, 0x03	; 3
    2980:	3c 93       	st	X, r19
    2982:	2e 93       	st	-X, r18
    2984:	12 97       	sbiw	r26, 0x02	; 2
    2986:	83 e0       	ldi	r24, 0x03	; 3
    2988:	8c 93       	st	X, r24
    298a:	87 e0       	ldi	r24, 0x07	; 7
    298c:	44 0f       	add	r20, r20
    298e:	55 1f       	adc	r21, r21
    2990:	66 1f       	adc	r22, r22
    2992:	77 1f       	adc	r23, r23
    2994:	8a 95       	dec	r24
    2996:	d1 f7       	brne	.-12     	; 0x298c <__unpack_f+0xd4>
    2998:	70 64       	ori	r23, 0x40	; 64
    299a:	14 96       	adiw	r26, 0x04	; 4
    299c:	4d 93       	st	X+, r20
    299e:	5d 93       	st	X+, r21
    29a0:	6d 93       	st	X+, r22
    29a2:	7c 93       	st	X, r23
    29a4:	17 97       	sbiw	r26, 0x07	; 7
    29a6:	08 95       	ret

000029a8 <__fpcmp_parts_f>:
    29a8:	1f 93       	push	r17
    29aa:	dc 01       	movw	r26, r24
    29ac:	fb 01       	movw	r30, r22
    29ae:	9c 91       	ld	r25, X
    29b0:	92 30       	cpi	r25, 0x02	; 2
    29b2:	08 f4       	brcc	.+2      	; 0x29b6 <__fpcmp_parts_f+0xe>
    29b4:	47 c0       	rjmp	.+142    	; 0x2a44 <__fpcmp_parts_f+0x9c>
    29b6:	80 81       	ld	r24, Z
    29b8:	82 30       	cpi	r24, 0x02	; 2
    29ba:	08 f4       	brcc	.+2      	; 0x29be <__fpcmp_parts_f+0x16>
    29bc:	43 c0       	rjmp	.+134    	; 0x2a44 <__fpcmp_parts_f+0x9c>
    29be:	94 30       	cpi	r25, 0x04	; 4
    29c0:	51 f4       	brne	.+20     	; 0x29d6 <__fpcmp_parts_f+0x2e>
    29c2:	11 96       	adiw	r26, 0x01	; 1
    29c4:	1c 91       	ld	r17, X
    29c6:	84 30       	cpi	r24, 0x04	; 4
    29c8:	99 f5       	brne	.+102    	; 0x2a30 <__fpcmp_parts_f+0x88>
    29ca:	81 81       	ldd	r24, Z+1	; 0x01
    29cc:	68 2f       	mov	r22, r24
    29ce:	70 e0       	ldi	r23, 0x00	; 0
    29d0:	61 1b       	sub	r22, r17
    29d2:	71 09       	sbc	r23, r1
    29d4:	3f c0       	rjmp	.+126    	; 0x2a54 <__fpcmp_parts_f+0xac>
    29d6:	84 30       	cpi	r24, 0x04	; 4
    29d8:	21 f0       	breq	.+8      	; 0x29e2 <__fpcmp_parts_f+0x3a>
    29da:	92 30       	cpi	r25, 0x02	; 2
    29dc:	31 f4       	brne	.+12     	; 0x29ea <__fpcmp_parts_f+0x42>
    29de:	82 30       	cpi	r24, 0x02	; 2
    29e0:	b9 f1       	breq	.+110    	; 0x2a50 <__fpcmp_parts_f+0xa8>
    29e2:	81 81       	ldd	r24, Z+1	; 0x01
    29e4:	88 23       	and	r24, r24
    29e6:	89 f1       	breq	.+98     	; 0x2a4a <__fpcmp_parts_f+0xa2>
    29e8:	2d c0       	rjmp	.+90     	; 0x2a44 <__fpcmp_parts_f+0x9c>
    29ea:	11 96       	adiw	r26, 0x01	; 1
    29ec:	1c 91       	ld	r17, X
    29ee:	11 97       	sbiw	r26, 0x01	; 1
    29f0:	82 30       	cpi	r24, 0x02	; 2
    29f2:	f1 f0       	breq	.+60     	; 0x2a30 <__fpcmp_parts_f+0x88>
    29f4:	81 81       	ldd	r24, Z+1	; 0x01
    29f6:	18 17       	cp	r17, r24
    29f8:	d9 f4       	brne	.+54     	; 0x2a30 <__fpcmp_parts_f+0x88>
    29fa:	12 96       	adiw	r26, 0x02	; 2
    29fc:	2d 91       	ld	r18, X+
    29fe:	3c 91       	ld	r19, X
    2a00:	13 97       	sbiw	r26, 0x03	; 3
    2a02:	82 81       	ldd	r24, Z+2	; 0x02
    2a04:	93 81       	ldd	r25, Z+3	; 0x03
    2a06:	82 17       	cp	r24, r18
    2a08:	93 07       	cpc	r25, r19
    2a0a:	94 f0       	brlt	.+36     	; 0x2a30 <__fpcmp_parts_f+0x88>
    2a0c:	28 17       	cp	r18, r24
    2a0e:	39 07       	cpc	r19, r25
    2a10:	bc f0       	brlt	.+46     	; 0x2a40 <__fpcmp_parts_f+0x98>
    2a12:	14 96       	adiw	r26, 0x04	; 4
    2a14:	8d 91       	ld	r24, X+
    2a16:	9d 91       	ld	r25, X+
    2a18:	0d 90       	ld	r0, X+
    2a1a:	bc 91       	ld	r27, X
    2a1c:	a0 2d       	mov	r26, r0
    2a1e:	24 81       	ldd	r18, Z+4	; 0x04
    2a20:	35 81       	ldd	r19, Z+5	; 0x05
    2a22:	46 81       	ldd	r20, Z+6	; 0x06
    2a24:	57 81       	ldd	r21, Z+7	; 0x07
    2a26:	28 17       	cp	r18, r24
    2a28:	39 07       	cpc	r19, r25
    2a2a:	4a 07       	cpc	r20, r26
    2a2c:	5b 07       	cpc	r21, r27
    2a2e:	18 f4       	brcc	.+6      	; 0x2a36 <__fpcmp_parts_f+0x8e>
    2a30:	11 23       	and	r17, r17
    2a32:	41 f0       	breq	.+16     	; 0x2a44 <__fpcmp_parts_f+0x9c>
    2a34:	0a c0       	rjmp	.+20     	; 0x2a4a <__fpcmp_parts_f+0xa2>
    2a36:	82 17       	cp	r24, r18
    2a38:	93 07       	cpc	r25, r19
    2a3a:	a4 07       	cpc	r26, r20
    2a3c:	b5 07       	cpc	r27, r21
    2a3e:	40 f4       	brcc	.+16     	; 0x2a50 <__fpcmp_parts_f+0xa8>
    2a40:	11 23       	and	r17, r17
    2a42:	19 f0       	breq	.+6      	; 0x2a4a <__fpcmp_parts_f+0xa2>
    2a44:	61 e0       	ldi	r22, 0x01	; 1
    2a46:	70 e0       	ldi	r23, 0x00	; 0
    2a48:	05 c0       	rjmp	.+10     	; 0x2a54 <__fpcmp_parts_f+0xac>
    2a4a:	6f ef       	ldi	r22, 0xFF	; 255
    2a4c:	7f ef       	ldi	r23, 0xFF	; 255
    2a4e:	02 c0       	rjmp	.+4      	; 0x2a54 <__fpcmp_parts_f+0xac>
    2a50:	60 e0       	ldi	r22, 0x00	; 0
    2a52:	70 e0       	ldi	r23, 0x00	; 0
    2a54:	cb 01       	movw	r24, r22
    2a56:	1f 91       	pop	r17
    2a58:	08 95       	ret

00002a5a <malloc>:
    2a5a:	cf 93       	push	r28
    2a5c:	df 93       	push	r29
    2a5e:	bc 01       	movw	r22, r24
    2a60:	82 30       	cpi	r24, 0x02	; 2
    2a62:	91 05       	cpc	r25, r1
    2a64:	10 f4       	brcc	.+4      	; 0x2a6a <malloc+0x10>
    2a66:	62 e0       	ldi	r22, 0x02	; 2
    2a68:	70 e0       	ldi	r23, 0x00	; 0
    2a6a:	a0 91 88 2a 	lds	r26, 0x2A88
    2a6e:	b0 91 89 2a 	lds	r27, 0x2A89
    2a72:	ed 01       	movw	r28, r26
    2a74:	e0 e0       	ldi	r30, 0x00	; 0
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	40 e0       	ldi	r20, 0x00	; 0
    2a7a:	50 e0       	ldi	r21, 0x00	; 0
    2a7c:	21 c0       	rjmp	.+66     	; 0x2ac0 <malloc+0x66>
    2a7e:	88 81       	ld	r24, Y
    2a80:	99 81       	ldd	r25, Y+1	; 0x01
    2a82:	86 17       	cp	r24, r22
    2a84:	97 07       	cpc	r25, r23
    2a86:	69 f4       	brne	.+26     	; 0x2aa2 <malloc+0x48>
    2a88:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a8c:	30 97       	sbiw	r30, 0x00	; 0
    2a8e:	19 f0       	breq	.+6      	; 0x2a96 <malloc+0x3c>
    2a90:	93 83       	std	Z+3, r25	; 0x03
    2a92:	82 83       	std	Z+2, r24	; 0x02
    2a94:	04 c0       	rjmp	.+8      	; 0x2a9e <malloc+0x44>
    2a96:	90 93 89 2a 	sts	0x2A89, r25
    2a9a:	80 93 88 2a 	sts	0x2A88, r24
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	34 c0       	rjmp	.+104    	; 0x2b0a <malloc+0xb0>
    2aa2:	68 17       	cp	r22, r24
    2aa4:	79 07       	cpc	r23, r25
    2aa6:	38 f4       	brcc	.+14     	; 0x2ab6 <malloc+0x5c>
    2aa8:	41 15       	cp	r20, r1
    2aaa:	51 05       	cpc	r21, r1
    2aac:	19 f0       	breq	.+6      	; 0x2ab4 <malloc+0x5a>
    2aae:	84 17       	cp	r24, r20
    2ab0:	95 07       	cpc	r25, r21
    2ab2:	08 f4       	brcc	.+2      	; 0x2ab6 <malloc+0x5c>
    2ab4:	ac 01       	movw	r20, r24
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aba:	9b 81       	ldd	r25, Y+3	; 0x03
    2abc:	9c 01       	movw	r18, r24
    2abe:	e9 01       	movw	r28, r18
    2ac0:	20 97       	sbiw	r28, 0x00	; 0
    2ac2:	e9 f6       	brne	.-70     	; 0x2a7e <malloc+0x24>
    2ac4:	41 15       	cp	r20, r1
    2ac6:	51 05       	cpc	r21, r1
    2ac8:	a9 f1       	breq	.+106    	; 0x2b34 <malloc+0xda>
    2aca:	ca 01       	movw	r24, r20
    2acc:	86 1b       	sub	r24, r22
    2ace:	97 0b       	sbc	r25, r23
    2ad0:	04 97       	sbiw	r24, 0x04	; 4
    2ad2:	08 f4       	brcc	.+2      	; 0x2ad6 <malloc+0x7c>
    2ad4:	ba 01       	movw	r22, r20
    2ad6:	e0 e0       	ldi	r30, 0x00	; 0
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	2a c0       	rjmp	.+84     	; 0x2b30 <malloc+0xd6>
    2adc:	8d 91       	ld	r24, X+
    2ade:	9c 91       	ld	r25, X
    2ae0:	11 97       	sbiw	r26, 0x01	; 1
    2ae2:	84 17       	cp	r24, r20
    2ae4:	95 07       	cpc	r25, r21
    2ae6:	f9 f4       	brne	.+62     	; 0x2b26 <malloc+0xcc>
    2ae8:	64 17       	cp	r22, r20
    2aea:	75 07       	cpc	r23, r21
    2aec:	81 f4       	brne	.+32     	; 0x2b0e <malloc+0xb4>
    2aee:	12 96       	adiw	r26, 0x02	; 2
    2af0:	8d 91       	ld	r24, X+
    2af2:	9c 91       	ld	r25, X
    2af4:	13 97       	sbiw	r26, 0x03	; 3
    2af6:	30 97       	sbiw	r30, 0x00	; 0
    2af8:	19 f0       	breq	.+6      	; 0x2b00 <malloc+0xa6>
    2afa:	93 83       	std	Z+3, r25	; 0x03
    2afc:	82 83       	std	Z+2, r24	; 0x02
    2afe:	04 c0       	rjmp	.+8      	; 0x2b08 <malloc+0xae>
    2b00:	90 93 89 2a 	sts	0x2A89, r25
    2b04:	80 93 88 2a 	sts	0x2A88, r24
    2b08:	fd 01       	movw	r30, r26
    2b0a:	32 96       	adiw	r30, 0x02	; 2
    2b0c:	4f c0       	rjmp	.+158    	; 0x2bac <malloc+0x152>
    2b0e:	ca 01       	movw	r24, r20
    2b10:	86 1b       	sub	r24, r22
    2b12:	97 0b       	sbc	r25, r23
    2b14:	fd 01       	movw	r30, r26
    2b16:	e8 0f       	add	r30, r24
    2b18:	f9 1f       	adc	r31, r25
    2b1a:	61 93       	st	Z+, r22
    2b1c:	71 93       	st	Z+, r23
    2b1e:	02 97       	sbiw	r24, 0x02	; 2
    2b20:	8d 93       	st	X+, r24
    2b22:	9c 93       	st	X, r25
    2b24:	43 c0       	rjmp	.+134    	; 0x2bac <malloc+0x152>
    2b26:	fd 01       	movw	r30, r26
    2b28:	82 81       	ldd	r24, Z+2	; 0x02
    2b2a:	93 81       	ldd	r25, Z+3	; 0x03
    2b2c:	9c 01       	movw	r18, r24
    2b2e:	d9 01       	movw	r26, r18
    2b30:	10 97       	sbiw	r26, 0x00	; 0
    2b32:	a1 f6       	brne	.-88     	; 0x2adc <malloc+0x82>
    2b34:	80 91 86 2a 	lds	r24, 0x2A86
    2b38:	90 91 87 2a 	lds	r25, 0x2A87
    2b3c:	89 2b       	or	r24, r25
    2b3e:	41 f4       	brne	.+16     	; 0x2b50 <malloc+0xf6>
    2b40:	80 91 19 04 	lds	r24, 0x0419
    2b44:	90 91 1a 04 	lds	r25, 0x041A
    2b48:	90 93 87 2a 	sts	0x2A87, r25
    2b4c:	80 93 86 2a 	sts	0x2A86, r24
    2b50:	40 91 1b 04 	lds	r20, 0x041B
    2b54:	50 91 1c 04 	lds	r21, 0x041C
    2b58:	41 15       	cp	r20, r1
    2b5a:	51 05       	cpc	r21, r1
    2b5c:	41 f4       	brne	.+16     	; 0x2b6e <malloc+0x114>
    2b5e:	4d b7       	in	r20, 0x3d	; 61
    2b60:	5e b7       	in	r21, 0x3e	; 62
    2b62:	80 91 17 04 	lds	r24, 0x0417
    2b66:	90 91 18 04 	lds	r25, 0x0418
    2b6a:	48 1b       	sub	r20, r24
    2b6c:	59 0b       	sbc	r21, r25
    2b6e:	20 91 86 2a 	lds	r18, 0x2A86
    2b72:	30 91 87 2a 	lds	r19, 0x2A87
    2b76:	24 17       	cp	r18, r20
    2b78:	35 07       	cpc	r19, r21
    2b7a:	b0 f4       	brcc	.+44     	; 0x2ba8 <malloc+0x14e>
    2b7c:	ca 01       	movw	r24, r20
    2b7e:	82 1b       	sub	r24, r18
    2b80:	93 0b       	sbc	r25, r19
    2b82:	86 17       	cp	r24, r22
    2b84:	97 07       	cpc	r25, r23
    2b86:	80 f0       	brcs	.+32     	; 0x2ba8 <malloc+0x14e>
    2b88:	ab 01       	movw	r20, r22
    2b8a:	4e 5f       	subi	r20, 0xFE	; 254
    2b8c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b8e:	84 17       	cp	r24, r20
    2b90:	95 07       	cpc	r25, r21
    2b92:	50 f0       	brcs	.+20     	; 0x2ba8 <malloc+0x14e>
    2b94:	42 0f       	add	r20, r18
    2b96:	53 1f       	adc	r21, r19
    2b98:	50 93 87 2a 	sts	0x2A87, r21
    2b9c:	40 93 86 2a 	sts	0x2A86, r20
    2ba0:	f9 01       	movw	r30, r18
    2ba2:	61 93       	st	Z+, r22
    2ba4:	71 93       	st	Z+, r23
    2ba6:	02 c0       	rjmp	.+4      	; 0x2bac <malloc+0x152>
    2ba8:	e0 e0       	ldi	r30, 0x00	; 0
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	cf 01       	movw	r24, r30
    2bae:	df 91       	pop	r29
    2bb0:	cf 91       	pop	r28
    2bb2:	08 95       	ret

00002bb4 <free>:
    2bb4:	cf 93       	push	r28
    2bb6:	df 93       	push	r29
    2bb8:	00 97       	sbiw	r24, 0x00	; 0
    2bba:	09 f4       	brne	.+2      	; 0x2bbe <free+0xa>
    2bbc:	50 c0       	rjmp	.+160    	; 0x2c5e <free+0xaa>
    2bbe:	ec 01       	movw	r28, r24
    2bc0:	22 97       	sbiw	r28, 0x02	; 2
    2bc2:	1b 82       	std	Y+3, r1	; 0x03
    2bc4:	1a 82       	std	Y+2, r1	; 0x02
    2bc6:	a0 91 88 2a 	lds	r26, 0x2A88
    2bca:	b0 91 89 2a 	lds	r27, 0x2A89
    2bce:	10 97       	sbiw	r26, 0x00	; 0
    2bd0:	09 f1       	breq	.+66     	; 0x2c14 <free+0x60>
    2bd2:	40 e0       	ldi	r20, 0x00	; 0
    2bd4:	50 e0       	ldi	r21, 0x00	; 0
    2bd6:	ac 17       	cp	r26, r28
    2bd8:	bd 07       	cpc	r27, r29
    2bda:	08 f1       	brcs	.+66     	; 0x2c1e <free+0x6a>
    2bdc:	bb 83       	std	Y+3, r27	; 0x03
    2bde:	aa 83       	std	Y+2, r26	; 0x02
    2be0:	fe 01       	movw	r30, r28
    2be2:	21 91       	ld	r18, Z+
    2be4:	31 91       	ld	r19, Z+
    2be6:	e2 0f       	add	r30, r18
    2be8:	f3 1f       	adc	r31, r19
    2bea:	ae 17       	cp	r26, r30
    2bec:	bf 07       	cpc	r27, r31
    2bee:	79 f4       	brne	.+30     	; 0x2c0e <free+0x5a>
    2bf0:	8d 91       	ld	r24, X+
    2bf2:	9c 91       	ld	r25, X
    2bf4:	11 97       	sbiw	r26, 0x01	; 1
    2bf6:	28 0f       	add	r18, r24
    2bf8:	39 1f       	adc	r19, r25
    2bfa:	2e 5f       	subi	r18, 0xFE	; 254
    2bfc:	3f 4f       	sbci	r19, 0xFF	; 255
    2bfe:	39 83       	std	Y+1, r19	; 0x01
    2c00:	28 83       	st	Y, r18
    2c02:	12 96       	adiw	r26, 0x02	; 2
    2c04:	8d 91       	ld	r24, X+
    2c06:	9c 91       	ld	r25, X
    2c08:	13 97       	sbiw	r26, 0x03	; 3
    2c0a:	9b 83       	std	Y+3, r25	; 0x03
    2c0c:	8a 83       	std	Y+2, r24	; 0x02
    2c0e:	41 15       	cp	r20, r1
    2c10:	51 05       	cpc	r21, r1
    2c12:	71 f4       	brne	.+28     	; 0x2c30 <free+0x7c>
    2c14:	d0 93 89 2a 	sts	0x2A89, r29
    2c18:	c0 93 88 2a 	sts	0x2A88, r28
    2c1c:	20 c0       	rjmp	.+64     	; 0x2c5e <free+0xaa>
    2c1e:	12 96       	adiw	r26, 0x02	; 2
    2c20:	8d 91       	ld	r24, X+
    2c22:	9c 91       	ld	r25, X
    2c24:	13 97       	sbiw	r26, 0x03	; 3
    2c26:	ad 01       	movw	r20, r26
    2c28:	00 97       	sbiw	r24, 0x00	; 0
    2c2a:	11 f0       	breq	.+4      	; 0x2c30 <free+0x7c>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	d3 cf       	rjmp	.-90     	; 0x2bd6 <free+0x22>
    2c30:	fa 01       	movw	r30, r20
    2c32:	d3 83       	std	Z+3, r29	; 0x03
    2c34:	c2 83       	std	Z+2, r28	; 0x02
    2c36:	21 91       	ld	r18, Z+
    2c38:	31 91       	ld	r19, Z+
    2c3a:	e2 0f       	add	r30, r18
    2c3c:	f3 1f       	adc	r31, r19
    2c3e:	ce 17       	cp	r28, r30
    2c40:	df 07       	cpc	r29, r31
    2c42:	69 f4       	brne	.+26     	; 0x2c5e <free+0xaa>
    2c44:	88 81       	ld	r24, Y
    2c46:	99 81       	ldd	r25, Y+1	; 0x01
    2c48:	28 0f       	add	r18, r24
    2c4a:	39 1f       	adc	r19, r25
    2c4c:	2e 5f       	subi	r18, 0xFE	; 254
    2c4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c50:	fa 01       	movw	r30, r20
    2c52:	31 83       	std	Z+1, r19	; 0x01
    2c54:	20 83       	st	Z, r18
    2c56:	8a 81       	ldd	r24, Y+2	; 0x02
    2c58:	9b 81       	ldd	r25, Y+3	; 0x03
    2c5a:	93 83       	std	Z+3, r25	; 0x03
    2c5c:	82 83       	std	Z+2, r24	; 0x02
    2c5e:	df 91       	pop	r29
    2c60:	cf 91       	pop	r28
    2c62:	08 95       	ret

00002c64 <__udivmodhi4>:
    2c64:	aa 1b       	sub	r26, r26
    2c66:	bb 1b       	sub	r27, r27
    2c68:	51 e1       	ldi	r21, 0x11	; 17
    2c6a:	07 c0       	rjmp	.+14     	; 0x2c7a <__udivmodhi4_ep>

00002c6c <__udivmodhi4_loop>:
    2c6c:	aa 1f       	adc	r26, r26
    2c6e:	bb 1f       	adc	r27, r27
    2c70:	a6 17       	cp	r26, r22
    2c72:	b7 07       	cpc	r27, r23
    2c74:	10 f0       	brcs	.+4      	; 0x2c7a <__udivmodhi4_ep>
    2c76:	a6 1b       	sub	r26, r22
    2c78:	b7 0b       	sbc	r27, r23

00002c7a <__udivmodhi4_ep>:
    2c7a:	88 1f       	adc	r24, r24
    2c7c:	99 1f       	adc	r25, r25
    2c7e:	5a 95       	dec	r21
    2c80:	a9 f7       	brne	.-22     	; 0x2c6c <__udivmodhi4_loop>
    2c82:	80 95       	com	r24
    2c84:	90 95       	com	r25
    2c86:	bc 01       	movw	r22, r24
    2c88:	cd 01       	movw	r24, r26
    2c8a:	08 95       	ret

00002c8c <__prologue_saves__>:
    2c8c:	2f 92       	push	r2
    2c8e:	3f 92       	push	r3
    2c90:	4f 92       	push	r4
    2c92:	5f 92       	push	r5
    2c94:	6f 92       	push	r6
    2c96:	7f 92       	push	r7
    2c98:	8f 92       	push	r8
    2c9a:	9f 92       	push	r9
    2c9c:	af 92       	push	r10
    2c9e:	bf 92       	push	r11
    2ca0:	cf 92       	push	r12
    2ca2:	df 92       	push	r13
    2ca4:	ef 92       	push	r14
    2ca6:	ff 92       	push	r15
    2ca8:	0f 93       	push	r16
    2caa:	1f 93       	push	r17
    2cac:	cf 93       	push	r28
    2cae:	df 93       	push	r29
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
    2cb4:	ca 1b       	sub	r28, r26
    2cb6:	db 0b       	sbc	r29, r27
    2cb8:	0f b6       	in	r0, 0x3f	; 63
    2cba:	f8 94       	cli
    2cbc:	de bf       	out	0x3e, r29	; 62
    2cbe:	0f be       	out	0x3f, r0	; 63
    2cc0:	cd bf       	out	0x3d, r28	; 61
    2cc2:	19 94       	eijmp

00002cc4 <__epilogue_restores__>:
    2cc4:	2a 88       	ldd	r2, Y+18	; 0x12
    2cc6:	39 88       	ldd	r3, Y+17	; 0x11
    2cc8:	48 88       	ldd	r4, Y+16	; 0x10
    2cca:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ccc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cce:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cd0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2cd2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2cd4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2cd6:	b9 84       	ldd	r11, Y+9	; 0x09
    2cd8:	c8 84       	ldd	r12, Y+8	; 0x08
    2cda:	df 80       	ldd	r13, Y+7	; 0x07
    2cdc:	ee 80       	ldd	r14, Y+6	; 0x06
    2cde:	fd 80       	ldd	r15, Y+5	; 0x05
    2ce0:	0c 81       	ldd	r16, Y+4	; 0x04
    2ce2:	1b 81       	ldd	r17, Y+3	; 0x03
    2ce4:	aa 81       	ldd	r26, Y+2	; 0x02
    2ce6:	b9 81       	ldd	r27, Y+1	; 0x01
    2ce8:	ce 0f       	add	r28, r30
    2cea:	d1 1d       	adc	r29, r1
    2cec:	0f b6       	in	r0, 0x3f	; 63
    2cee:	f8 94       	cli
    2cf0:	de bf       	out	0x3e, r29	; 62
    2cf2:	0f be       	out	0x3f, r0	; 63
    2cf4:	cd bf       	out	0x3d, r28	; 61
    2cf6:	ed 01       	movw	r28, r26
    2cf8:	08 95       	ret

00002cfa <_exit>:
    2cfa:	f8 94       	cli

00002cfc <__stop_program>:
    2cfc:	ff cf       	rjmp	.-2      	; 0x2cfc <__stop_program>
